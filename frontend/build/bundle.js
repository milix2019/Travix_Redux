!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!x[e]||!w[e])return;for(var n in w[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(v[n]=t[n]);0==--g&&0===y&&O()}(e,n),t&&t(e,n)};var n,r=!0,o="aa8914ca889f7961486a",i=1e4,a={},u=[],c=[];function l(e){var t=j[e];if(!t)return C;var r=function(r){return t.hot.active?(j[r]?-1===j[r].parents.indexOf(e)&&j[r].parents.push(e):(u=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),u=[]),C(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return C[e]},set:function(t){C[e]=t}}};for(var i in C)Object.prototype.hasOwnProperty.call(C,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===d&&p("prepare"),y++,C.e(e).then(t,(function(e){throw t(),e}));function t(){y--,"prepare"===d&&(b[e]||k(e),0===y&&0===g&&O())}},r.t=function(e,t){return 1&t&&(e=r(e)),C.t(e,-2&t)},r}function s(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:S,apply:T,status:function(e){if(!e)return d;f.push(e)},addStatusHandler:function(e){f.push(e)},removeStatusHandler:function(e){var t=f.indexOf(e);t>=0&&f.splice(t,1)},data:a[e]};return n=void 0,t}var f=[],d="idle";function p(e){d=e;for(var t=0;t<f.length;t++)f[t].call(null,e)}var h,v,m,g=0,y=0,b={},w={},x={};function E(e){return+e+""===e?+e:e}function S(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return r=e,p("check"),(t=i,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=C.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return p("idle"),null;w={},b={},x=e.c,m=e.h,p("prepare");var t=new Promise((function(e,t){h={resolve:e,reject:t}}));v={};return k(0),"prepare"===d&&0===y&&0===g&&O(),t}));var t}function k(e){x[e]?(w[e]=!0,g++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=C.p+""+e+"."+o+".hot-update.js",document.head.appendChild(t)}(e)):b[e]=!0}function O(){p("ready");var e=h;if(h=null,e)if(r)Promise.resolve().then((function(){return T(r)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in v)Object.prototype.hasOwnProperty.call(v,n)&&t.push(E(n));e.resolve(t)}}function T(t){if("ready"!==d)throw new Error("apply() is only allowed in ready status");var n,r,i,c,l;function s(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),i=o.id,a=o.chain;if((c=j[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var u=0;u<c.parents.length;u++){var l=c.parents[u],s=j[l];if(s){if(s.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([l]),moduleId:i,parentId:l};-1===t.indexOf(l)&&(s.hot._acceptedDependencies[i]?(n[l]||(n[l]=[]),f(n[l],[i])):(delete n[l],t.push(l),r.push({chain:a.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var h={},g=[],y={},b=function(){console.warn("[HMR] unexpected require("+S.moduleId+") to disposed module")};for(var w in v)if(Object.prototype.hasOwnProperty.call(v,w)){var S;l=E(w);var k=!1,O=!1,T=!1,P="";switch((S=v[w]?s(l):{type:"disposed",moduleId:w}).chain&&(P="\nUpdate propagation: "+S.chain.join(" -> ")),S.type){case"self-declined":t.onDeclined&&t.onDeclined(S),t.ignoreDeclined||(k=new Error("Aborted because of self decline: "+S.moduleId+P));break;case"declined":t.onDeclined&&t.onDeclined(S),t.ignoreDeclined||(k=new Error("Aborted because of declined dependency: "+S.moduleId+" in "+S.parentId+P));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(S),t.ignoreUnaccepted||(k=new Error("Aborted because "+l+" is not accepted"+P));break;case"accepted":t.onAccepted&&t.onAccepted(S),O=!0;break;case"disposed":t.onDisposed&&t.onDisposed(S),T=!0;break;default:throw new Error("Unexception type "+S.type)}if(k)return p("abort"),Promise.reject(k);if(O)for(l in y[l]=v[l],f(g,S.outdatedModules),S.outdatedDependencies)Object.prototype.hasOwnProperty.call(S.outdatedDependencies,l)&&(h[l]||(h[l]=[]),f(h[l],S.outdatedDependencies[l]));T&&(f(g,[S.moduleId]),y[l]=b)}var _,R=[];for(r=0;r<g.length;r++)l=g[r],j[l]&&j[l].hot._selfAccepted&&y[l]!==b&&R.push({module:l,errorHandler:j[l].hot._selfAccepted});p("dispose"),Object.keys(x).forEach((function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)}));for(var N,M,A=g.slice();A.length>0;)if(l=A.pop(),c=j[l]){var I={},L=c.hot._disposeHandlers;for(i=0;i<L.length;i++)(n=L[i])(I);for(a[l]=I,c.hot.active=!1,delete j[l],delete h[l],i=0;i<c.children.length;i++){var F=j[c.children[i]];F&&((_=F.parents.indexOf(l))>=0&&F.parents.splice(_,1))}}for(l in h)if(Object.prototype.hasOwnProperty.call(h,l)&&(c=j[l]))for(M=h[l],i=0;i<M.length;i++)N=M[i],(_=c.children.indexOf(N))>=0&&c.children.splice(_,1);for(l in p("apply"),o=m,y)Object.prototype.hasOwnProperty.call(y,l)&&(e[l]=y[l]);var D=null;for(l in h)if(Object.prototype.hasOwnProperty.call(h,l)&&(c=j[l])){M=h[l];var z=[];for(r=0;r<M.length;r++)if(N=M[r],n=c.hot._acceptedDependencies[N]){if(-1!==z.indexOf(n))continue;z.push(n)}for(r=0;r<z.length;r++){n=z[r];try{n(M)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:M[r],error:e}),t.ignoreErrored||D||(D=e)}}}for(r=0;r<R.length;r++){var U=R[r];l=U.module,u=[l];try{C(l)}catch(e){if("function"==typeof U.errorHandler)try{U.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:n,originalError:e}),t.ignoreErrored||D||(D=n),D||(D=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:e}),t.ignoreErrored||D||(D=e)}}return D?(p("fail"),Promise.reject(D)):(p("idle"),new Promise((function(e){e(g)})))}var j={};function C(t){if(j[t])return j[t].exports;var n=j[t]={i:t,l:!1,exports:{},hot:s(t),parents:(c=u,u=[],c),children:[]};return e[t].call(n.exports,n,n.exports,l(t)),n.l=!0,n.exports}C.m=e,C.c=j,C.d=function(e,t,n){C.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},C.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},C.t=function(e,t){if(1&t&&(e=C(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(C.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)C.d(n,r,function(t){return e[t]}.bind(null,r));return n},C.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return C.d(t,"a",t),t},C.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},C.p="/assets/",C.h=function(){return o},l(424)(C.s=424)}([function(e,t,n){"use strict";e.exports=n(393)},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){var r=n(8),o=n(32),i=n(23),a=n(24),u=n(33),c=function(e,t,n){var l,s,f,d,p=e&c.F,h=e&c.G,v=e&c.S,m=e&c.P,g=e&c.B,y=h?r:v?r[t]||(r[t]={}):(r[t]||{}).prototype,b=h?o:o[t]||(o[t]={}),w=b.prototype||(b.prototype={});for(l in h&&(n=t),n)f=((s=!p&&y&&void 0!==y[l])?y:n)[l],d=g&&s?u(f,r):m&&"function"==typeof f?u(Function.call,f):f,y&&a(y,l,f,e&c.U),b[l]!=f&&i(b,l,d),m&&w[l]!=f&&(w[l]=f)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(16);function o(e,t){if(null==e)return{};var n,o,i=Object(r.a)(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},function(e,t,n){"use strict";function r(e){var t,n,o="";if(e)if("object"==typeof e)if(e.push)for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(n=r(t))&&(o&&(o+=" "),o+=n);else"boolean"==typeof e||e.call||(o&&(o+=" "),o+=e);return o}t.a=function(){for(var e,t=0,n="";t<arguments.length;)(e=r(arguments[t++]))&&(n&&(n+=" "),n+=e);return n}},function(e,t,n){e.exports=n(397)()},function(e,t,n){"use strict";var r=n(1),o=n(3),i=n(0),a=n.n(i),u=(n(5),n(60)),c=n.n(u),l=n(446);var s=function(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r},f=n(447),d=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var i=t.defaultTheme,u=t.withTheme,d=void 0!==u&&u,p=t.name,h=Object(o.a)(t,["defaultTheme","withTheme","name"]);var v=p,m=Object(l.a)(e,Object(r.a)({defaultTheme:i,Component:n,name:p||n.displayName,classNamePrefix:v},h)),g=a.a.forwardRef((function(e,t){e.classes;var u,c=e.innerRef,l=Object(o.a)(e,["classes","innerRef"]),h=m(e),v=l;return("string"==typeof p||d)&&(u=Object(f.a)()||i,p&&(v=s({theme:u,name:p,props:l})),d&&!v.theme&&(v.theme=u)),a.a.createElement(n,Object(r.a)({ref:c||t,classes:h},v))}));return c()(g,n),g}},p=n(68);t.a=function(e,t){return d(e,Object(r.a)({defaultTheme:p.a},t))}},function(e,t,n){var r=n(10);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";function r(e){return e.charAt(0).toUpperCase()+e.slice(1)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,"a",(function(){return r}))},function(e,t,n){var r=n(71)("wks"),o=n(50),i=n(8).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},function(e,t,n){var r=n(35),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t,n){e.exports=!n(9)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return e<t?t:e>n?n:e}function o(e){if(e.type)return e;if("#"===e.charAt(0))return o(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length/3,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb(".concat(n.map((function(e){return parseInt(e,16)})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error(["Material-UI: unsupported `".concat(e,"` color."),"We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()."].join("\n"));var r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map((function(e){return parseFloat(e)}))}}function i(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function a(e,t){var n=u(e),r=u(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function u(e){var t="hsl"===(e=o(e)).type?o(function(e){var t=(e=o(e)).values,n=t[0],r=t[1]/100,a=t[2]/100,u=r*Math.min(a,1-a),c=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return a-u*Math.max(Math.min(t-3,9-t,1),-1)},l="rgb",s=[Math.round(255*c(0)),Math.round(255*c(8)),Math.round(255*c(4))];return"hsla"===e.type&&(l+="a",s.push(t[3])),i({type:l,values:s})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function c(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.15;return u(e)>.5?s(e,t):f(e,t)}function l(e,t){return e=o(e),t=r(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,i(e)}function s(e,t){if(e=o(e),t=r(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return i(e)}function f(e,t){if(e=o(e),t=r(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return i(e)}n.d(t,"d",(function(){return a})),n.d(t,"b",(function(){return c})),n.d(t,"c",(function(){return l})),n.d(t,"a",(function(){return s})),n.d(t,"e",(function(){return f}))},function(e,t,n){var r=n(7),o=n(130),i=n(37),a=Object.defineProperty;t.f=n(15)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(38);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(394)},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(18),o=n(49);e.exports=n(15)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(8),o=n(23),i=n(27),a=n(50)("src"),u=n(194),c=(""+u).split("toString");n(32).inspectSource=function(e){return u.call(e)},(e.exports=function(e,t,n,u){var l="function"==typeof n;l&&(i(n,"name")||o(n,"name",t)),e[t]!==n&&(l&&(i(n,a)||o(n,a,e[t]?""+e[t]:c.join(String(t)))),e===r?e[t]=n:u?e[t]?e[t]=n:o(e,t,n):(delete e[t],o(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[a]||u.call(this)}))},function(e,t,n){var r=n(2),o=n(9),i=n(38),a=/"/g,u=function(e,t,n,r){var o=String(i(e)),u="<"+t;return""!==n&&(u+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),u+">"+o+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(u),r(r.P+r.F*o((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",n)}},function(e,t,n){"use strict";var r=n(167),o=n(403),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function u(e){return null!==e&&"object"==typeof e}function c(e){return"[object Function]"===i.call(e)}function l(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:c,isStream:function(e){return u(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:l,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return t},extend:function(e,t,n){return l(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(72),o=n(38);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(73),o=n(49),i=n(28),a=n(37),u=n(27),c=n(130),l=Object.getOwnPropertyDescriptor;t.f=n(15)?l:function(e,t){if(e=i(e),t=a(t,!0),c)try{return l(e,t)}catch(e){}if(u(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(27),o=n(19),i=n(95)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},,function(e,t){var n=e.exports={version:"2.6.10"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r=n(22);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){"use strict";var r=n(9);e.exports=function(e,t){return!!e&&r((function(){t?e.call(null,(function(){}),1):e.call(null)}))}},function(e,t,n){var r=n(10);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(2),o=n(32),i=n(9);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i((function(){n(1)})),"Object",a)}},function(e,t,n){var r=n(33),o=n(72),i=n(19),a=n(14),u=n(111);e.exports=function(e,t){var n=1==e,c=2==e,l=3==e,s=4==e,f=6==e,d=5==e||f,p=t||u;return function(t,u,h){for(var v,m,g=i(t),y=o(g),b=r(u,h,3),w=a(y.length),x=0,E=n?p(t,w):c?p(t,0):void 0;w>x;x++)if((d||x in y)&&(m=b(v=y[x],x,g),e))if(n)E[x]=m;else if(m)switch(e){case 3:return!0;case 5:return v;case 6:return x;case 2:E.push(v)}else if(s)return!1;return f?-1:l||s?s:E}}},function(e,t,n){"use strict";if(n(15)){var r=n(44),o=n(8),i=n(9),a=n(2),u=n(86),c=n(119),l=n(33),s=n(56),f=n(49),d=n(23),p=n(58),h=n(35),v=n(14),m=n(158),g=n(52),y=n(37),b=n(27),w=n(65),x=n(10),E=n(19),S=n(108),k=n(53),O=n(30),T=n(54).f,j=n(110),C=n(50),P=n(13),_=n(40),R=n(76),N=n(75),M=n(113),A=n(67),I=n(81),L=n(55),F=n(112),D=n(147),z=n(18),U=n(29),W=z.f,B=U.f,H=o.RangeError,V=o.TypeError,$=o.Uint8Array,q=Array.prototype,G=c.ArrayBuffer,K=c.DataView,Y=_(0),Q=_(2),X=_(3),J=_(4),Z=_(5),ee=_(6),te=R(!0),ne=R(!1),re=M.values,oe=M.keys,ie=M.entries,ae=q.lastIndexOf,ue=q.reduce,ce=q.reduceRight,le=q.join,se=q.sort,fe=q.slice,de=q.toString,pe=q.toLocaleString,he=P("iterator"),ve=P("toStringTag"),me=C("typed_constructor"),ge=C("def_constructor"),ye=u.CONSTR,be=u.TYPED,we=u.VIEW,xe=_(1,(function(e,t){return Te(N(e,e[ge]),t)})),Ee=i((function(){return 1===new $(new Uint16Array([1]).buffer)[0]})),Se=!!$&&!!$.prototype.set&&i((function(){new $(1).set({})})),ke=function(e,t){var n=h(e);if(n<0||n%t)throw H("Wrong offset!");return n},Oe=function(e){if(x(e)&&be in e)return e;throw V(e+" is not a typed array!")},Te=function(e,t){if(!(x(e)&&me in e))throw V("It is not a typed array constructor!");return new e(t)},je=function(e,t){return Ce(N(e,e[ge]),t)},Ce=function(e,t){for(var n=0,r=t.length,o=Te(e,r);r>n;)o[n]=t[n++];return o},Pe=function(e,t,n){W(e,t,{get:function(){return this._d[n]}})},_e=function(e){var t,n,r,o,i,a,u=E(e),c=arguments.length,s=c>1?arguments[1]:void 0,f=void 0!==s,d=j(u);if(null!=d&&!S(d)){for(a=d.call(u),r=[],t=0;!(i=a.next()).done;t++)r.push(i.value);u=r}for(f&&c>2&&(s=l(s,arguments[2],2)),t=0,n=v(u.length),o=Te(this,n);n>t;t++)o[t]=f?s(u[t],t):u[t];return o},Re=function(){for(var e=0,t=arguments.length,n=Te(this,t);t>e;)n[e]=arguments[e++];return n},Ne=!!$&&i((function(){pe.call(new $(1))})),Me=function(){return pe.apply(Ne?fe.call(Oe(this)):Oe(this),arguments)},Ae={copyWithin:function(e,t){return D.call(Oe(this),e,t,arguments.length>2?arguments[2]:void 0)},every:function(e){return J(Oe(this),e,arguments.length>1?arguments[1]:void 0)},fill:function(e){return F.apply(Oe(this),arguments)},filter:function(e){return je(this,Q(Oe(this),e,arguments.length>1?arguments[1]:void 0))},find:function(e){return Z(Oe(this),e,arguments.length>1?arguments[1]:void 0)},findIndex:function(e){return ee(Oe(this),e,arguments.length>1?arguments[1]:void 0)},forEach:function(e){Y(Oe(this),e,arguments.length>1?arguments[1]:void 0)},indexOf:function(e){return ne(Oe(this),e,arguments.length>1?arguments[1]:void 0)},includes:function(e){return te(Oe(this),e,arguments.length>1?arguments[1]:void 0)},join:function(e){return le.apply(Oe(this),arguments)},lastIndexOf:function(e){return ae.apply(Oe(this),arguments)},map:function(e){return xe(Oe(this),e,arguments.length>1?arguments[1]:void 0)},reduce:function(e){return ue.apply(Oe(this),arguments)},reduceRight:function(e){return ce.apply(Oe(this),arguments)},reverse:function(){for(var e,t=Oe(this).length,n=Math.floor(t/2),r=0;r<n;)e=this[r],this[r++]=this[--t],this[t]=e;return this},some:function(e){return X(Oe(this),e,arguments.length>1?arguments[1]:void 0)},sort:function(e){return se.call(Oe(this),e)},subarray:function(e,t){var n=Oe(this),r=n.length,o=g(e,r);return new(N(n,n[ge]))(n.buffer,n.byteOffset+o*n.BYTES_PER_ELEMENT,v((void 0===t?r:g(t,r))-o))}},Ie=function(e,t){return je(this,fe.call(Oe(this),e,t))},Le=function(e){Oe(this);var t=ke(arguments[1],1),n=this.length,r=E(e),o=v(r.length),i=0;if(o+t>n)throw H("Wrong length!");for(;i<o;)this[t+i]=r[i++]},Fe={entries:function(){return ie.call(Oe(this))},keys:function(){return oe.call(Oe(this))},values:function(){return re.call(Oe(this))}},De=function(e,t){return x(e)&&e[be]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},ze=function(e,t){return De(e,t=y(t,!0))?f(2,e[t]):B(e,t)},Ue=function(e,t,n){return!(De(e,t=y(t,!0))&&x(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?W(e,t,n):(e[t]=n.value,e)};ye||(U.f=ze,z.f=Ue),a(a.S+a.F*!ye,"Object",{getOwnPropertyDescriptor:ze,defineProperty:Ue}),i((function(){de.call({})}))&&(de=pe=function(){return le.call(this)});var We=p({},Ae);p(We,Fe),d(We,he,Fe.values),p(We,{slice:Ie,set:Le,constructor:function(){},toString:de,toLocaleString:Me}),Pe(We,"buffer","b"),Pe(We,"byteOffset","o"),Pe(We,"byteLength","l"),Pe(We,"length","e"),W(We,ve,{get:function(){return this[be]}}),e.exports=function(e,t,n,c){var l=e+((c=!!c)?"Clamped":"")+"Array",f="get"+e,p="set"+e,h=o[l],g=h||{},y=h&&O(h),b=!h||!u.ABV,E={},S=h&&h.prototype,j=function(e,n){W(e,n,{get:function(){return function(e,n){var r=e._d;return r.v[f](n*t+r.o,Ee)}(this,n)},set:function(e){return function(e,n,r){var o=e._d;c&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[p](n*t+o.o,r,Ee)}(this,n,e)},enumerable:!0})};b?(h=n((function(e,n,r,o){s(e,h,l,"_d");var i,a,u,c,f=0,p=0;if(x(n)){if(!(n instanceof G||"ArrayBuffer"==(c=w(n))||"SharedArrayBuffer"==c))return be in n?Ce(h,n):_e.call(h,n);i=n,p=ke(r,t);var g=n.byteLength;if(void 0===o){if(g%t)throw H("Wrong length!");if((a=g-p)<0)throw H("Wrong length!")}else if((a=v(o)*t)+p>g)throw H("Wrong length!");u=a/t}else u=m(n),i=new G(a=u*t);for(d(e,"_d",{b:i,o:p,l:a,e:u,v:new K(i)});f<u;)j(e,f++)})),S=h.prototype=k(We),d(S,"constructor",h)):i((function(){h(1)}))&&i((function(){new h(-1)}))&&I((function(e){new h,new h(null),new h(1.5),new h(e)}),!0)||(h=n((function(e,n,r,o){var i;return s(e,h,l),x(n)?n instanceof G||"ArrayBuffer"==(i=w(n))||"SharedArrayBuffer"==i?void 0!==o?new g(n,ke(r,t),o):void 0!==r?new g(n,ke(r,t)):new g(n):be in n?Ce(h,n):_e.call(h,n):new g(m(n))})),Y(y!==Function.prototype?T(g).concat(T(y)):T(g),(function(e){e in h||d(h,e,g[e])})),h.prototype=S,r||(S.constructor=h));var C=S[he],P=!!C&&("values"==C.name||null==C.name),_=Fe.values;d(h,me,!0),d(S,be,l),d(S,we,!0),d(S,ge,h),(c?new h(1)[ve]==l:ve in S)||W(S,ve,{get:function(){return l}}),E[l]=h,a(a.G+a.W+a.F*(h!=g),E),a(a.S,l,{BYTES_PER_ELEMENT:t}),a(a.S+a.F*i((function(){g.of.call(h,1)})),l,{from:_e,of:Re}),"BYTES_PER_ELEMENT"in S||d(S,"BYTES_PER_ELEMENT",t),a(a.P,l,Ae),L(l),a(a.P+a.F*Se,l,{set:Le}),a(a.P+a.F*!P,l,Fe),r||S.toString==de||(S.toString=de),a(a.P+a.F*i((function(){new h(1).slice()})),l,{slice:Ie}),a(a.P+a.F*(i((function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()}))||!i((function(){S.toLocaleString.call([1,2])}))),l,{toLocaleString:Me}),A[l]=P?C:_,r||P||d(S,he,_)}}else e.exports=function(){}},function(e,t,n){var r=n(153),o=n(2),i=n(71)("metadata"),a=i.store||(i.store=new(n(156))),u=function(e,t,n){var o=a.get(e);if(!o){if(!n)return;a.set(e,o=new r)}var i=o.get(t);if(!i){if(!n)return;o.set(t,i=new r)}return i};e.exports={store:a,map:u,has:function(e,t,n){var r=u(t,n,!1);return void 0!==r&&r.has(e)},get:function(e,t,n){var r=u(t,n,!1);return void 0===r?void 0:r.get(e)},set:function(e,t,n,r){u(n,r,!0).set(e,t)},keys:function(e,t){var n=u(e,t,!1),r=[];return n&&n.forEach((function(e,t){r.push(t)})),r},key:function(e){return void 0===e||"symbol"==typeof e?e:String(e)},exp:function(e){o(o.S,"Reflect",e)}}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],s=0;(c=new Error(t.replace(/%s/g,(function(){return l[s++]})))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t){e.exports=!1},function(e,t,n){var r=n(50)("meta"),o=n(10),i=n(27),a=n(18).f,u=0,c=Object.isExtensible||function(){return!0},l=!n(9)((function(){return c(Object.preventExtensions({}))})),s=function(e){a(e,r,{value:{i:"O"+ ++u,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!c(e))return"F";if(!t)return"E";s(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!c(e))return!0;if(!t)return!1;s(e)}return e[r].w},onFreeze:function(e){return l&&f.NEED&&c(e)&&!i(e,r)&&s(e),e}}},function(e,t,n){var r=n(13)("unscopables"),o=Array.prototype;null==o[r]&&n(23)(o,r,{}),e.exports=function(e){o[r][e]=!0}},function(e,t,n){"use strict";var r=!0;t.a=function(e,t){if(!r){if(e)return;var n="Warning: "+t;"undefined"!=typeof console&&console.warn(n);try{throw Error(n)}catch(e){}}}},function(e,t,n){"use strict";var r=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===o}(e)}(e)};var o="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function i(e,t){return!1!==t.clone&&t.isMergeableObject(e)?s((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function a(e,t,n){return e.concat(t).map((function(e){return i(e,n)}))}function u(e){return Object.keys(e).concat(function(e){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e).filter((function(t){return e.propertyIsEnumerable(t)})):[]}(e))}function c(e,t){try{return t in e}catch(e){return!1}}function l(e,t,n){var r={};return n.isMergeableObject(e)&&u(e).forEach((function(t){r[t]=i(e[t],n)})),u(t).forEach((function(o){(function(e,t){return c(e,t)&&!(Object.hasOwnProperty.call(e,t)&&Object.propertyIsEnumerable.call(e,t))})(e,o)||(n.isMergeableObject(t[o])&&c(e,o)?r[o]=function(e,t){if(!t.customMerge)return s;var n=t.customMerge(e);return"function"==typeof n?n:s}(o,n)(e[o],t[o],n):r[o]=i(t[o],n))})),r}function s(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||a,n.isMergeableObject=n.isMergeableObject||r,n.cloneUnlessOtherwiseSpecified=i;var o=Array.isArray(t);return o===Array.isArray(e)?o?n.arrayMerge(e,t,n):l(e,t,n):i(t,n)}s.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,n){return s(e,n,t)}),{})};var f=s;e.exports=f},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){var r=n(132),o=n(96);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t,n){var r=n(35),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(7),o=n(133),i=n(96),a=n(95)("IE_PROTO"),u=function(){},c=function(){var e,t=n(93)("iframe"),r=i.length;for(t.style.display="none",n(97).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),c=e.F;r--;)delete c.prototype[i[r]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(u.prototype=r(e),n=new u,u.prototype=null,n[a]=e):n=c(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(132),o=n(96).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){"use strict";var r=n(8),o=n(18),i=n(15),a=n(13)("species");e.exports=function(e){var t=r[e];i&&t&&!t[a]&&o.f(t,a,{configurable:!0,get:function(){return this}})}},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){var r=n(33),o=n(145),i=n(108),a=n(7),u=n(14),c=n(110),l={},s={};(t=e.exports=function(e,t,n,f,d){var p,h,v,m,g=d?function(){return e}:c(e),y=r(n,f,t?2:1),b=0;if("function"!=typeof g)throw TypeError(e+" is not iterable!");if(i(g)){for(p=u(e.length);p>b;b++)if((m=t?y(a(h=e[b])[0],h[1]):y(e[b]))===l||m===s)return m}else for(v=g.call(e);!(h=v.next()).done;)if((m=o(v,y,h.value,t))===l||m===s)return m}).BREAK=l,t.RETURN=s},function(e,t,n){var r=n(24);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},function(e,t,n){var r=n(10);e.exports=function(e,t){if(!r(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},function(e,t,n){"use strict";var r=n(90),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function c(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var l=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=c(t),v=c(n),m=0;m<a.length;++m){var g=a[m];if(!(i[g]||r&&r[g]||v&&v[g]||u&&u[g])){var y=d(n,g);try{l(t,g,y)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";n.d(t,"b",(function(){return i}));var r=n(3),o={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},i={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195},a=function(e){return"".concat(Math.round(e),"ms")};t.a={easing:o,duration:i,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,u=void 0===n?i.standard:n,c=t.easing,l=void 0===c?o.easeInOut:c,s=t.delay,f=void 0===s?0:s;Object(r.a)(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof u?u:a(u)," ").concat(l," ").concat("string"==typeof f?f:a(f))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}}},function(e,t,n){e.exports=n(402)},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(18).f,o=n(27),i=n(13)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){var r=n(34),o=n(13)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,n){var r=n(2),o=n(38),i=n(9),a=n(99),u="["+a+"]",c=RegExp("^"+u+u+"*"),l=RegExp(u+u+"*$"),s=function(e,t,n){var o={},u=i((function(){return!!a[e]()||"​"!="​"[e]()})),c=o[e]=u?t(f):a[e];n&&(o[n]=c),r(r.P+r.F*u,"String",o)},f=s.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(c,"")),2&t&&(e=e.replace(l,"")),e};e.exports=s},function(e,t){e.exports={}},function(e,t,n){"use strict";var r=n(12),o=n(1),i=n(3),a=n(48),u=n.n(a);
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
function c(e){return!0==(null!=(t=e)&&"object"==typeof t&&!1===Array.isArray(t))&&"[object Object]"===Object.prototype.toString.call(e);
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
var t}function l(e){var t,n;return!1!==c(e)&&("function"==typeof(t=e.constructor)&&(!1!==c(n=t.prototype)&&!1!==n.hasOwnProperty("isPrototypeOf")))}var s=["xs","sm","md","lg","xl"];function f(e,t,n){var i;return Object(o.a)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object(o.a)({paddingLeft:t(2),paddingRight:t(2)},n,Object(r.a)({},e.up("sm"),Object(o.a)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(i={minHeight:56},Object(r.a)(i,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),Object(r.a)(i,e.up("sm"),{minHeight:64}),i)},n)}var d={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"},p={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"},h={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"},v={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},m={black:"#000",white:"#fff"},g=n(17),y={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:m.white,default:h[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.08)",hoverOpacity:.08,selected:"rgba(0, 0, 0, 0.14)",disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)"}},b={text:{primary:m.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:h[800],default:"#303030"},action:{active:m.white,hover:"rgba(255, 255, 255, 0.1)",hoverOpacity:.1,selected:"rgba(255, 255, 255, 0.2)",disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)"}};function w(e,t,n,r){e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=Object(g.e)(e.main,r):"dark"===t&&(e.dark=Object(g.a)(e.main,1.5*r)))}function x(e){return Math.round(1e5*e)/1e5}var E={textTransform:"uppercase"},S='"Roboto", "Helvetica", "Arial", sans-serif';function k(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,a=void 0===r?S:r,c=n.fontSize,l=void 0===c?14:c,s=n.fontWeightLight,f=void 0===s?300:s,d=n.fontWeightRegular,p=void 0===d?400:d,h=n.fontWeightMedium,v=void 0===h?500:h,m=n.fontWeightBold,g=void 0===m?700:m,y=n.htmlFontSize,b=void 0===y?16:y,w=n.allVariants,k=n.pxToRem,O=Object(i.a)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]);var T=l/14,j=k||function(e){return"".concat(e/b*T,"rem")},C=function(e,t,n,r,i){return Object(o.a)({fontFamily:a,fontWeight:e,fontSize:j(t),lineHeight:n},a===S?{letterSpacing:"".concat(x(r/t),"em")}:{},{},i,{},w)},P={h1:C(f,96,1,-1.5),h2:C(f,60,1,-.5),h3:C(p,48,1.04,0),h4:C(p,34,1.17,.25),h5:C(p,24,1.33,0),h6:C(v,20,1.6,.15),subtitle1:C(p,16,1.75,.15),subtitle2:C(v,14,1.57,.1),body1:C(p,16,1.5,.15),body2:C(p,14,1.43,.15),button:C(v,14,1.75,.4,E),caption:C(p,12,1.66,.4),overline:C(p,12,2.66,1,E)};return u()(Object(o.a)({htmlFontSize:b,pxToRem:j,round:x,fontFamily:a,fontSize:l,fontWeightLight:f,fontWeightRegular:p,fontWeightMedium:v,fontWeightBold:g},P),O,{clone:!1})}var O=.2,T=.14,j=.12;function C(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(O,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(T,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(j,")")].join(",")}var P=["none",C(0,2,1,-1,0,1,1,0,0,1,3,0),C(0,3,1,-2,0,2,2,0,0,1,5,0),C(0,3,3,-2,0,3,4,0,0,1,8,0),C(0,2,4,-1,0,4,5,0,0,1,10,0),C(0,3,5,-1,0,5,8,0,0,1,14,0),C(0,3,5,-1,0,6,10,0,0,1,18,0),C(0,4,5,-2,0,7,10,1,0,2,16,1),C(0,5,5,-3,0,8,10,1,0,3,14,2),C(0,5,6,-3,0,9,12,1,0,3,16,2),C(0,6,6,-3,0,10,14,1,0,4,18,3),C(0,6,7,-4,0,11,15,1,0,4,20,3),C(0,7,8,-4,0,12,17,2,0,5,22,4),C(0,7,8,-4,0,13,19,2,0,5,24,4),C(0,7,9,-4,0,14,21,2,0,5,26,4),C(0,8,9,-5,0,15,22,2,0,6,28,5),C(0,8,10,-5,0,16,24,2,0,6,30,5),C(0,8,11,-5,0,17,26,2,0,6,32,5),C(0,9,11,-5,0,18,28,2,0,7,34,6),C(0,9,12,-6,0,19,29,2,0,7,36,6),C(0,10,13,-6,0,20,31,3,0,8,38,7),C(0,10,13,-6,0,21,33,3,0,8,40,7),C(0,10,14,-6,0,22,35,3,0,8,42,7),C(0,11,14,-7,0,23,36,3,0,9,44,8),C(0,11,15,-7,0,24,38,3,0,9,46,8)],_={borderRadius:4};var R=n(61),N={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};var M=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,a=void 0===r?{}:r,c=e.palette,x=void 0===c?{}:c,E=e.shadows,S=e.spacing,O=e.typography,T=void 0===O?{}:O,j=Object(i.a)(e,["breakpoints","mixins","palette","shadows","spacing","typography"]),C=function(e){var t=e.primary,n=void 0===t?{light:d[300],main:d[500],dark:d[700]}:t,r=e.secondary,a=void 0===r?{light:p.A200,main:p.A400,dark:p.A700}:r,c=e.error,l=void 0===c?{light:v[300],main:v[500],dark:v[700]}:c,s=e.type,f=void 0===s?"light":s,x=e.contrastThreshold,E=void 0===x?3:x,S=e.tonalOffset,k=void 0===S?.2:S,O=Object(i.a)(e,["primary","secondary","error","type","contrastThreshold","tonalOffset"]);function T(e){return Object(g.d)(e,b.text.primary)>=E?b.text.primary:y.text.primary}function j(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;return!(e=Object(o.a)({},e)).main&&e[t]&&(e.main=e[t]),w(e,"light",n,k),w(e,"dark",r,k),e.contrastText||(e.contrastText=T(e.main)),e}var C={dark:b,light:y};return u()(Object(o.a)({common:m,type:f,primary:j(n),secondary:j(a,"A400","A200","A700"),error:j(l),grey:h,contrastThreshold:E,getContrastText:T,augmentColor:j,tonalOffset:k},C[f]),O,{clone:!1})}(x),M=function(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,a=void 0===r?"px":r,u=e.step,c=void 0===u?5:u,l=Object(i.a)(e,["values","unit","step"]);function f(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(a,")")}function d(e,t){var r=s.indexOf(t)+1;return r===s.length?f(e):"@media (min-width:".concat(n[e]).concat(a,") and ")+"(max-width:".concat(n[s[r]]-c/100).concat(a,")")}return Object(o.a)({keys:s,values:n,up:f,down:function(e){var t=s.indexOf(e)+1,r=n[s[t]];return t===s.length?f("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-c/100).concat(a,")")},between:d,only:function(e){return d(e,e)},width:function(e){return n[e]}},l)}(n),A=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(t.mui)return t;e="function"==typeof t?t:function(e){return t*e};var n=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return 0===n.length?e(1):1===n.length?e(n[0]):n.map((function(t){var n=e(t);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return t}}),n.mui=!0,n}(S);return Object(o.a)({breakpoints:M,direction:"ltr",mixins:f(M,A,a),overrides:{},palette:C,props:{},shadows:E||P,typography:k(C,T),spacing:A},u()({shape:_,transitions:R.a,zIndex:N},j,{isMergeableObject:l}))}();t.a=M},function(e,t,n){"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.d(t,"a",(function(){return r}))},,function(e,t,n){var r=n(32),o=n(8),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(44)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(34);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){"use strict";var r=n(7);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){var r=n(7),o=n(22),i=n(13)("species");e.exports=function(e,t){var n,a=r(e).constructor;return void 0===a||null==(n=r(a)[i])?t:o(n)}},function(e,t,n){var r=n(28),o=n(14),i=n(52);e.exports=function(e){return function(t,n,a){var u,c=r(t),l=o(c.length),s=i(a,l);if(e&&n!=n){for(;l>s;)if((u=c[s++])!=u)return!0}else for(;l>s;s++)if((e||s in c)&&c[s]===n)return e||s||0;return!e&&-1}}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(34);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(35),o=n(38);e.exports=function(e){return function(t,n){var i,a,u=String(o(t)),c=r(n),l=u.length;return c<0||c>=l?e?"":void 0:(i=u.charCodeAt(c))<55296||i>56319||c+1===l||(a=u.charCodeAt(c+1))<56320||a>57343?e?u.charAt(c):i:e?u.slice(c,c+2):a-56320+(i-55296<<10)+65536}}},function(e,t,n){var r=n(10),o=n(34),i=n(13)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},function(e,t,n){var r=n(13)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},e(i)}catch(e){}return n}},function(e,t,n){"use strict";var r=n(65),o=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var i=n.call(e,t);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},function(e,t,n){"use strict";n(149);var r=n(24),o=n(23),i=n(9),a=n(38),u=n(13),c=n(114),l=u("species"),s=!i((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var d=u(e),p=!i((function(){var t={};return t[d]=function(){return 7},7!=""[e](t)})),h=p?!i((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[l]=function(){return n}),n[d](""),!t})):void 0;if(!p||!h||"replace"===e&&!s||"split"===e&&!f){var v=/./[d],m=n(a,d,""[e],(function(e,t,n,r,o){return t.exec===c?p&&!o?{done:!0,value:v.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}})),g=m[0],y=m[1];r(String.prototype,e,g),o(RegExp.prototype,d,2==t?function(e,t){return y.call(e,this,t)}:function(e){return y.call(e,this)})}}},function(e,t,n){var r=n(8).navigator;e.exports=r&&r.userAgent||""},function(e,t,n){"use strict";var r=n(8),o=n(2),i=n(24),a=n(58),u=n(45),c=n(57),l=n(56),s=n(10),f=n(9),d=n(81),p=n(64),h=n(100);e.exports=function(e,t,n,v,m,g){var y=r[e],b=y,w=m?"set":"add",x=b&&b.prototype,E={},S=function(e){var t=x[e];i(x,e,"delete"==e?function(e){return!(g&&!s(e))&&t.call(this,0===e?0:e)}:"has"==e?function(e){return!(g&&!s(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return g&&!s(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof b&&(g||x.forEach&&!f((function(){(new b).entries().next()})))){var k=new b,O=k[w](g?{}:-0,1)!=k,T=f((function(){k.has(1)})),j=d((function(e){new b(e)})),C=!g&&f((function(){for(var e=new b,t=5;t--;)e[w](t,t);return!e.has(-0)}));j||((b=t((function(t,n){l(t,b,e);var r=h(new y,t,b);return null!=n&&c(n,m,r[w],r),r}))).prototype=x,x.constructor=b),(T||C)&&(S("delete"),S("has"),m&&S("get")),(C||O)&&S(w),g&&x.clear&&delete x.clear}else b=v.getConstructor(t,e,m,w),a(b.prototype,n),u.NEED=!0;return p(b,e),E[e]=b,o(o.G+o.W+o.F*(b!=y),E),g||v.setStrong(b,e,m),b}},function(e,t,n){for(var r,o=n(8),i=n(23),a=n(50),u=a("typed_array"),c=a("view"),l=!(!o.ArrayBuffer||!o.DataView),s=l,f=0,d="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=o[d[f++]])?(i(r.prototype,u,!0),i(r.prototype,c,!0)):s=!1;e.exports={ABV:l,CONSTR:s,TYPED:u,VIEW:c}},function(e,t,n){"use strict";e.exports=n(44)||!n(9)((function(){var e=Math.random();__defineSetter__.call(null,e,(function(){})),delete n(8)[e]}))},function(e,t,n){"use strict";var r=n(2);e.exports=function(e){r(r.S,e,{of:function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}})}},function(e,t,n){"use strict";var r=n(2),o=n(22),i=n(33),a=n(57);e.exports=function(e){r(r.S,e,{from:function(e){var t,n,r,u,c=arguments[1];return o(this),(t=void 0!==c)&&o(c),null==e?new this:(n=[],t?(r=0,u=i(c,arguments[2],2),a(e,!1,(function(e){n.push(u(e,r++))}))):a(e,!1,n.push,n),new this(n))}})}},function(e,t,n){"use strict";e.exports=n(399)},function(e,t,n){"use strict";function r(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(91);function o(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||Object(r.a)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}n.d(t,"a",(function(){return o}))},function(e,t,n){var r=n(10),o=n(8).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(8),o=n(32),i=n(44),a=n(131),u=n(18).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||u(t,e,{value:a.f(e)})}},function(e,t,n){var r=n(71)("keys"),o=n(50);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(8).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(10),o=n(7),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(33)(Function.call,n(29).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t){e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(e,t,n){var r=n(10),o=n(98).set;e.exports=function(e,t,n){var i,a=t.constructor;return a!==n&&"function"==typeof a&&(i=a.prototype)!==n.prototype&&r(i)&&o&&o(e,i),e}},function(e,t,n){"use strict";var r=n(35),o=n(38);e.exports=function(e){var t=String(o(this)),n="",i=r(e);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(t+=t))1&i&&(n+=t);return n}},function(e,t){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},function(e,t){var n=Math.expm1;e.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:n},function(e,t,n){"use strict";var r=n(44),o=n(2),i=n(24),a=n(23),u=n(67),c=n(105),l=n(64),s=n(30),f=n(13)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,v,m,g){c(n,t,h);var y,b,w,x=function(e){if(!d&&e in O)return O[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},E=t+" Iterator",S="values"==v,k=!1,O=e.prototype,T=O[f]||O["@@iterator"]||v&&O[v],j=T||x(v),C=v?S?x("entries"):j:void 0,P="Array"==t&&O.entries||T;if(P&&(w=s(P.call(new e)))!==Object.prototype&&w.next&&(l(w,E,!0),r||"function"==typeof w[f]||a(w,f,p)),S&&T&&"values"!==T.name&&(k=!0,j=function(){return T.call(this)}),r&&!g||!d&&!k&&O[f]||a(O,f,j),u[t]=j,u[E]=p,v)if(y={values:S?j:x("values"),keys:m?j:x("keys"),entries:C},g)for(b in y)b in O||i(O,b,y[b]);else o(o.P+o.F*(d||k),t,y);return y}},function(e,t,n){"use strict";var r=n(53),o=n(49),i=n(64),a={};n(23)(a,n(13)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(80),o=n(38);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(e))}},function(e,t,n){var r=n(13)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,!"/./"[e](t)}catch(e){}}return!0}},function(e,t,n){var r=n(67),o=n(13)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},function(e,t,n){"use strict";var r=n(18),o=n(49);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){var r=n(65),o=n(13)("iterator"),i=n(67);e.exports=n(32).getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t,n){var r=n(283);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){"use strict";var r=n(19),o=n(52),i=n(14);e.exports=function(e){for(var t=r(this),n=i(t.length),a=arguments.length,u=o(a>1?arguments[1]:void 0,n),c=a>2?arguments[2]:void 0,l=void 0===c?n:o(c,n);l>u;)t[u++]=e;return t}},function(e,t,n){"use strict";var r=n(46),o=n(148),i=n(67),a=n(28);e.exports=n(104)(Array,"Array",(function(e,t){this._t=a(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t,n){"use strict";var r,o,i=n(74),a=RegExp.prototype.exec,u=String.prototype.replace,c=a,l=(r=/a/,o=/b*/g,a.call(r,"a"),a.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),s=void 0!==/()??/.exec("")[1];(l||s)&&(c=function(e){var t,n,r,o,c=this;return s&&(n=new RegExp("^"+c.source+"$(?!\\s)",i.call(c))),l&&(t=c.lastIndex),r=a.call(c,e),l&&r&&(c.lastIndex=c.global?r.index+r[0].length:t),s&&r&&r.length>1&&u.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),e.exports=c},function(e,t,n){"use strict";var r=n(79)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){var r,o,i,a=n(33),u=n(138),c=n(97),l=n(93),s=n(8),f=s.process,d=s.setImmediate,p=s.clearImmediate,h=s.MessageChannel,v=s.Dispatch,m=0,g={},y=function(){var e=+this;if(g.hasOwnProperty(e)){var t=g[e];delete g[e],t()}},b=function(e){y.call(e.data)};d&&p||(d=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return g[++m]=function(){u("function"==typeof e?e:Function(e),t)},r(m),m},p=function(e){delete g[e]},"process"==n(34)(f)?r=function(e){f.nextTick(a(y,e,1))}:v&&v.now?r=function(e){v.now(a(y,e,1))}:h?(i=(o=new h).port2,o.port1.onmessage=b,r=a(i.postMessage,i,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(e){s.postMessage(e+"","*")},s.addEventListener("message",b,!1)):r="onreadystatechange"in l("script")?function(e){c.appendChild(l("script")).onreadystatechange=function(){c.removeChild(this),y.call(e)}}:function(e){setTimeout(a(y,e,1),0)}),e.exports={set:d,clear:p}},function(e,t,n){var r=n(8),o=n(116).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,c="process"==n(34)(a);e.exports=function(){var e,t,n,l=function(){var r,o;for(c&&(r=a.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(c)n=function(){a.nextTick(l)};else if(!i||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var s=u.resolve(void 0);n=function(){s.then(l)}}else n=function(){o.call(r,l)};else{var f=!0,d=document.createTextNode("");new i(l).observe(d,{characterData:!0}),n=function(){d.data=f=!f}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},function(e,t,n){"use strict";var r=n(22);function o(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)}e.exports.f=function(e){return new o(e)}},function(e,t,n){"use strict";var r=n(8),o=n(15),i=n(44),a=n(86),u=n(23),c=n(58),l=n(9),s=n(56),f=n(35),d=n(14),p=n(158),h=n(54).f,v=n(18).f,m=n(112),g=n(64),y="prototype",b="Wrong index!",w=r.ArrayBuffer,x=r.DataView,E=r.Math,S=r.RangeError,k=r.Infinity,O=w,T=E.abs,j=E.pow,C=E.floor,P=E.log,_=E.LN2,R=o?"_b":"buffer",N=o?"_l":"byteLength",M=o?"_o":"byteOffset";function A(e,t,n){var r,o,i,a=new Array(n),u=8*n-t-1,c=(1<<u)-1,l=c>>1,s=23===t?j(2,-24)-j(2,-77):0,f=0,d=e<0||0===e&&1/e<0?1:0;for((e=T(e))!=e||e===k?(o=e!=e?1:0,r=c):(r=C(P(e)/_),e*(i=j(2,-r))<1&&(r--,i*=2),(e+=r+l>=1?s/i:s*j(2,1-l))*i>=2&&(r++,i/=2),r+l>=c?(o=0,r=c):r+l>=1?(o=(e*i-1)*j(2,t),r+=l):(o=e*j(2,l-1)*j(2,t),r=0));t>=8;a[f++]=255&o,o/=256,t-=8);for(r=r<<t|o,u+=t;u>0;a[f++]=255&r,r/=256,u-=8);return a[--f]|=128*d,a}function I(e,t,n){var r,o=8*n-t-1,i=(1<<o)-1,a=i>>1,u=o-7,c=n-1,l=e[c--],s=127&l;for(l>>=7;u>0;s=256*s+e[c],c--,u-=8);for(r=s&(1<<-u)-1,s>>=-u,u+=t;u>0;r=256*r+e[c],c--,u-=8);if(0===s)s=1-a;else{if(s===i)return r?NaN:l?-k:k;r+=j(2,t),s-=a}return(l?-1:1)*r*j(2,s-t)}function L(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function F(e){return[255&e]}function D(e){return[255&e,e>>8&255]}function z(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function U(e){return A(e,52,8)}function W(e){return A(e,23,4)}function B(e,t,n){v(e[y],t,{get:function(){return this[n]}})}function H(e,t,n,r){var o=p(+n);if(o+t>e[N])throw S(b);var i=e[R]._b,a=o+e[M],u=i.slice(a,a+t);return r?u:u.reverse()}function V(e,t,n,r,o,i){var a=p(+n);if(a+t>e[N])throw S(b);for(var u=e[R]._b,c=a+e[M],l=r(+o),s=0;s<t;s++)u[c+s]=l[i?s:t-s-1]}if(a.ABV){if(!l((function(){w(1)}))||!l((function(){new w(-1)}))||l((function(){return new w,new w(1.5),new w(NaN),"ArrayBuffer"!=w.name}))){for(var $,q=(w=function(e){return s(this,w),new O(p(e))})[y]=O[y],G=h(O),K=0;G.length>K;)($=G[K++])in w||u(w,$,O[$]);i||(q.constructor=w)}var Y=new x(new w(2)),Q=x[y].setInt8;Y.setInt8(0,2147483648),Y.setInt8(1,2147483649),!Y.getInt8(0)&&Y.getInt8(1)||c(x[y],{setInt8:function(e,t){Q.call(this,e,t<<24>>24)},setUint8:function(e,t){Q.call(this,e,t<<24>>24)}},!0)}else w=function(e){s(this,w,"ArrayBuffer");var t=p(e);this._b=m.call(new Array(t),0),this[N]=t},x=function(e,t,n){s(this,x,"DataView"),s(e,w,"DataView");var r=e[N],o=f(t);if(o<0||o>r)throw S("Wrong offset!");if(o+(n=void 0===n?r-o:d(n))>r)throw S("Wrong length!");this[R]=e,this[M]=o,this[N]=n},o&&(B(w,"byteLength","_l"),B(x,"buffer","_b"),B(x,"byteLength","_l"),B(x,"byteOffset","_o")),c(x[y],{getInt8:function(e){return H(this,1,e)[0]<<24>>24},getUint8:function(e){return H(this,1,e)[0]},getInt16:function(e){var t=H(this,2,e,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=H(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return L(H(this,4,e,arguments[1]))},getUint32:function(e){return L(H(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return I(H(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return I(H(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){V(this,1,e,F,t)},setUint8:function(e,t){V(this,1,e,F,t)},setInt16:function(e,t){V(this,2,e,D,t,arguments[2])},setUint16:function(e,t){V(this,2,e,D,t,arguments[2])},setInt32:function(e,t){V(this,4,e,z,t,arguments[2])},setUint32:function(e,t){V(this,4,e,z,t,arguments[2])},setFloat32:function(e,t){V(this,4,e,W,t,arguments[2])},setFloat64:function(e,t){V(this,8,e,U,t,arguments[2])}});g(w,"ArrayBuffer"),g(x,"DataView"),u(x[y],a.VIEW,!0),t.ArrayBuffer=w,t.DataView=x},function(e,t,n){(e.exports=n(176)(!1)).push([e.i,"html, body{\r\n    margin: 0px;\r\n    padding:0px;\r\n}\r\n\r\n#root.selected > div:nth-child(2) > div:nth-child(2) > div,\r\n#root.selected > div:nth-child(2) > div:nth-child(1) {\r\n    display: none;\r\n}\r\n\r\n#root > div:nth-child(2) > div:nth-child(2) > div.fullscreen {\r\n    display: block;\r\n}\r\n\r\n\r\n#root > div:nth-child(2) > div:nth-child(2) > div:nth-child(n+2) > div {\r\n    z-index: 999;\r\n    opacity: 1;\r\n    transition: opacity 1.5s;\r\n    -webkit-transition: opacity 1.5s;\r\n\r\n    animation-duration: 1.5s;\r\n    -webkit-animation-duration: 1.5s;\r\n}\r\n\r\n@keyframes snackbar {\r\n    from {background-color: white;}\r\n    to {background-color: rgb(84, 159, 191);}\r\n}\r\n@-webkit-keyframes snackbar {\r\n    from {background-color: white;}\r\n    to {background-color: rgb(84, 159, 191);}\r\n}\r\n\r\n\r\n#root > div:nth-child(2) > div:nth-child(2) > div:first-child {\r\n    padding: 0.5em 1em;\r\n    position: absolute;\r\n    z-index: 9999;\r\n    top: 0px;\r\n    margin-left: -16px;\r\n}\r\n#root > div:nth-child(2) > div:nth-child(2) > div:first-child > div:first-child {\r\n    height: 45px;\r\n}\r\n#root > div:nth-child(2) > div:nth-child(2) > div:first-child input {\r\n    height: 33px;\r\n}",""])},function(e,t,n){(e.exports=n(176)(!1)).push([e.i,"",""])},function(e,t,n){"use strict";(function(e,r){var o,i=n(178);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(63),n(400)(e))},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){var r=n(421);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(u+=e.slice(a,p),a=p+f.length,d)u+=d[1];else{var h=e[a],v=n[2],m=n[3],g=n[4],y=n[5],b=n[6],w=n[7];u&&(r.push(u),u="");var x=null!=v&&null!=h&&h!==v,E="+"===b||"*"===b,S="?"===b||"*"===b,k=n[2]||s,O=g||y;r.push({name:m||i++,prefix:v||"",delimiter:k,optional:S,repeat:E,partial:x,asterisk:!!w,pattern:O?l(O):w?".*":"[^"+c(k)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",u=n||{},c=(o||{}).pretty?a:encodeURIComponent,l=0;l<e.length;l++){var s=e[l];if("string"!=typeof s){var f,d=u[s.name];if(null==d){if(s.optional){s.partial&&(i+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=c(d[p]),!t[l].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):c(d),!t[l].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');i+=s.prefix+f}}else i+=s}return i}}function c(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function l(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var l=e[u];if("string"==typeof l)a+=c(l);else{var d=c(l.prefix),p="(?:"+l.pattern+")";t.push(l),l.repeat&&(p+="(?:"+d+p+")*"),a+=p=l.optional?l.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=c(n.delimiter||"/"),v=a.slice(-h.length)===h;return o||(a=(v?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&v?"":"(?="+h+"|$)",s(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},,,,,,function(e,t,n){e.exports=!n(15)&&!n(9)((function(){return 7!=Object.defineProperty(n(93)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){t.f=n(13)},function(e,t,n){var r=n(27),o=n(28),i=n(76)(!1),a=n(95)("IE_PROTO");e.exports=function(e,t){var n,u=o(e),c=0,l=[];for(n in u)n!=a&&r(u,n)&&l.push(n);for(;t.length>c;)r(u,n=t[c++])&&(~i(l,n)||l.push(n));return l}},function(e,t,n){var r=n(18),o=n(7),i=n(51);e.exports=n(15)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),u=a.length,c=0;u>c;)r.f(e,n=a[c++],t[n]);return e}},function(e,t,n){var r=n(28),o=n(54).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(r(e))}},function(e,t,n){"use strict";var r=n(15),o=n(51),i=n(77),a=n(73),u=n(19),c=n(72),l=Object.assign;e.exports=!l||n(9)((function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=l({},e)[n]||Object.keys(l({},t)).join("")!=r}))?function(e,t){for(var n=u(e),l=arguments.length,s=1,f=i.f,d=a.f;l>s;)for(var p,h=c(arguments[s++]),v=f?o(h).concat(f(h)):o(h),m=v.length,g=0;m>g;)p=v[g++],r&&!d.call(h,p)||(n[p]=h[p]);return n}:l},function(e,t){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,n){"use strict";var r=n(22),o=n(10),i=n(138),a=[].slice,u={},c=function(e,t,n){if(!(t in u)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";u[t]=Function("F,a","return new F("+r.join(",")+")")}return u[t](e,n)};e.exports=Function.bind||function(e){var t=r(this),n=a.call(arguments,1),u=function(){var r=n.concat(a.call(arguments));return this instanceof u?c(t,r.length,r):i(t,r,e)};return o(t.prototype)&&(u.prototype=t.prototype),u}},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var r=n(8).parseInt,o=n(66).trim,i=n(99),a=/^[-+]?0[xX]/;e.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(e,t){var n=o(String(e),3);return r(n,t>>>0||(a.test(n)?16:10))}:r},function(e,t,n){var r=n(8).parseFloat,o=n(66).trim;e.exports=1/r(n(99)+"-0")!=-1/0?function(e){var t=o(String(e),3),n=r(t);return 0===n&&"-"==t.charAt(0)?-0:n}:r},function(e,t,n){var r=n(34);e.exports=function(e,t){if("number"!=typeof e&&"Number"!=r(e))throw TypeError(t);return+e}},function(e,t,n){var r=n(10),o=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&o(e)===e}},function(e,t){e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:Math.log(1+e)}},function(e,t,n){var r=n(102),o=Math.pow,i=o(2,-52),a=o(2,-23),u=o(2,127)*(2-a),c=o(2,-126);e.exports=Math.fround||function(e){var t,n,o=Math.abs(e),l=r(e);return o<c?l*(o/c/a+1/i-1/i)*c*a:(n=(t=(1+a/i)*o)-(t-o))>u||n!=n?l*(1/0):l*n}},function(e,t,n){var r=n(7);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t,n){var r=n(22),o=n(19),i=n(72),a=n(14);e.exports=function(e,t,n,u,c){r(t);var l=o(e),s=i(l),f=a(l.length),d=c?f-1:0,p=c?-1:1;if(n<2)for(;;){if(d in s){u=s[d],d+=p;break}if(d+=p,c?d<0:f<=d)throw TypeError("Reduce of empty array with no initial value")}for(;c?d>=0:f>d;d+=p)d in s&&(u=t(u,s[d],d,l));return u}},function(e,t,n){"use strict";var r=n(19),o=n(52),i=n(14);e.exports=[].copyWithin||function(e,t){var n=r(this),a=i(n.length),u=o(e,a),c=o(t,a),l=arguments.length>2?arguments[2]:void 0,s=Math.min((void 0===l?a:o(l,a))-c,a-u),f=1;for(c<u&&u<c+s&&(f=-1,c+=s-1,u+=s-1);s-- >0;)c in n?n[u]=n[c]:delete n[u],u+=f,c+=f;return n}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var r=n(114);n(2)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){n(15)&&"g"!=/./g.flags&&n(18).f(RegExp.prototype,"flags",{configurable:!0,get:n(74)})},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){var r=n(7),o=n(10),i=n(118);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";var r=n(154),o=n(59);e.exports=n(85)("Map",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(e){var t=r.getEntry(o(this,"Map"),e);return t&&t.v},set:function(e,t){return r.def(o(this,"Map"),0===e?0:e,t)}},r,!0)},function(e,t,n){"use strict";var r=n(18).f,o=n(53),i=n(58),a=n(33),u=n(56),c=n(57),l=n(104),s=n(148),f=n(55),d=n(15),p=n(45).fastKey,h=n(59),v=d?"_s":"size",m=function(e,t){var n,r=p(t);if("F"!==r)return e._i[r];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,l){var s=e((function(e,r){u(e,s,t,"_i"),e._t=t,e._i=o(null),e._f=void 0,e._l=void 0,e[v]=0,null!=r&&c(r,n,e[l],e)}));return i(s.prototype,{clear:function(){for(var e=h(this,t),n=e._i,r=e._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];e._f=e._l=void 0,e[v]=0},delete:function(e){var n=h(this,t),r=m(n,e);if(r){var o=r.n,i=r.p;delete n._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),n._f==r&&(n._f=o),n._l==r&&(n._l=i),n[v]--}return!!r},forEach:function(e){h(this,t);for(var n,r=a(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!m(h(this,t),e)}}),d&&r(s.prototype,"size",{get:function(){return h(this,t)[v]}}),s},def:function(e,t,n){var r,o,i=m(e,t);return i?i.v=n:(e._l=i={i:o=p(t,!0),k:t,v:n,p:r=e._l,n:void 0,r:!1},e._f||(e._f=i),r&&(r.n=i),e[v]++,"F"!==o&&(e._i[o]=i)),e},getEntry:m,setStrong:function(e,t,n){l(e,t,(function(e,n){this._t=h(e,t),this._k=n,this._l=void 0}),(function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?s(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,s(1))}),n?"entries":"values",!n,!0),f(t)}}},function(e,t,n){"use strict";var r=n(154),o=n(59);e.exports=n(85)("Set",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(o(this,"Set"),e=0===e?0:e,e)}},r)},function(e,t,n){"use strict";var r,o=n(8),i=n(40)(0),a=n(24),u=n(45),c=n(135),l=n(157),s=n(10),f=n(59),d=n(59),p=!o.ActiveXObject&&"ActiveXObject"in o,h=u.getWeak,v=Object.isExtensible,m=l.ufstore,g=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(e){if(s(e)){var t=h(e);return!0===t?m(f(this,"WeakMap")).get(e):t?t[this._i]:void 0}},set:function(e,t){return l.def(f(this,"WeakMap"),e,t)}},b=e.exports=n(85)("WeakMap",g,y,l,!0,!0);d&&p&&(c((r=l.getConstructor(g,"WeakMap")).prototype,y),u.NEED=!0,i(["delete","has","get","set"],(function(e){var t=b.prototype,n=t[e];a(t,e,(function(t,o){if(s(t)&&!v(t)){this._f||(this._f=new r);var i=this._f[e](t,o);return"set"==e?this:i}return n.call(this,t,o)}))})))},function(e,t,n){"use strict";var r=n(58),o=n(45).getWeak,i=n(7),a=n(10),u=n(56),c=n(57),l=n(40),s=n(27),f=n(59),d=l(5),p=l(6),h=0,v=function(e){return e._l||(e._l=new m)},m=function(){this.a=[]},g=function(e,t){return d(e.a,(function(e){return e[0]===t}))};m.prototype={get:function(e){var t=g(this,e);if(t)return t[1]},has:function(e){return!!g(this,e)},set:function(e,t){var n=g(this,e);n?n[1]=t:this.a.push([e,t])},delete:function(e){var t=p(this.a,(function(t){return t[0]===e}));return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,i){var l=e((function(e,r){u(e,l,t,"_i"),e._t=t,e._i=h++,e._l=void 0,null!=r&&c(r,n,e[i],e)}));return r(l.prototype,{delete:function(e){if(!a(e))return!1;var n=o(e);return!0===n?v(f(this,t)).delete(e):n&&s(n,this._i)&&delete n[this._i]},has:function(e){if(!a(e))return!1;var n=o(e);return!0===n?v(f(this,t)).has(e):n&&s(n,this._i)}}),l},def:function(e,t,n){var r=o(i(t),!0);return!0===r?v(e).set(t,n):r[e._i]=n,e},ufstore:v}},function(e,t,n){var r=n(35),o=n(14);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=o(t);if(t!==n)throw RangeError("Wrong length!");return n}},function(e,t,n){var r=n(54),o=n(77),i=n(7),a=n(8).Reflect;e.exports=a&&a.ownKeys||function(e){var t=r.f(i(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){"use strict";var r=n(78),o=n(10),i=n(14),a=n(33),u=n(13)("isConcatSpreadable");e.exports=function e(t,n,c,l,s,f,d,p){for(var h,v,m=s,g=0,y=!!d&&a(d,p,3);g<l;){if(g in c){if(h=y?y(c[g],g,n):c[g],v=!1,o(h)&&(v=void 0!==(v=h[u])?!!v:r(h)),v&&f>0)m=e(t,n,h,i(h.length),m,f-1)-1;else{if(m>=9007199254740991)throw TypeError();t[m]=h}m++}g++}return m}},function(e,t,n){var r=n(14),o=n(101),i=n(38);e.exports=function(e,t,n,a){var u=String(i(e)),c=u.length,l=void 0===n?" ":String(n),s=r(t);if(s<=c||""==l)return u;var f=s-c,d=o.call(l,Math.ceil(f/l.length));return d.length>f&&(d=d.slice(0,f)),a?d+u:u+d}},function(e,t,n){var r=n(15),o=n(51),i=n(28),a=n(73).f;e.exports=function(e){return function(t){for(var n,u=i(t),c=o(u),l=c.length,s=0,f=[];l>s;)n=c[s++],r&&!a.call(u,n)||f.push(e?[n,u[n]]:u[n]);return f}}},function(e,t,n){var r=n(65),o=n(164);e.exports=function(e){return function(){if(r(this)!=e)throw TypeError(e+"#toJSON isn't generic");return o(this)}}},function(e,t,n){var r=n(57);e.exports=function(e,t){var n=[];return r(e,!1,n.push,n,t),n}},function(e,t){e.exports=Math.scale||function(e,t,n,r,o){return 0===arguments.length||e!=e||t!=t||n!=n||r!=r||o!=o?NaN:e===1/0||e===-1/0?e:(e-t)*(o-r)/(n-t)+r}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,c=a(e),l=1;l<arguments.length;l++){for(var s in n=Object(arguments[l]))o.call(n,s)&&(c[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)i.call(n,u[f])&&(c[u[f]]=n[u[f]])}}return c}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(26);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(26),o=n(409),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,c={adapter:(void 0!==t&&"[object process]"===Object.prototype.toString.call(t)?u=n(171):"undefined"!=typeof XMLHttpRequest&&(u=n(171)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){c.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){c.headers[e]=r.merge(i)})),e.exports=c}).call(this,n(408))},function(e,t,n){"use strict";var r=n(26),o=n(410),i=n(168),a=n(412),u=n(413),c=n(172);e.exports=function(e){return new Promise((function(t,l){var s=e.data,f=e.headers;r.isFormData(s)&&delete f["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var p=e.auth.username||"",h=e.auth.password||"";f.Authorization="Basic "+btoa(p+":"+h)}if(d.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in d?a(d.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:n,config:e,request:d};o(t,l,r),d=null}},d.onabort=function(){d&&(l(c("Request aborted",e,"ECONNABORTED",d)),d=null)},d.onerror=function(){l(c("Network Error",e,null,d)),d=null},d.ontimeout=function(){l(c("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",d)),d=null},r.isStandardBrowserEnv()){var v=n(414),m=(e.withCredentials||u(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;m&&(f[e.xsrfHeaderName]=m)}if("setRequestHeader"in d&&r.forEach(f,(function(e,t){void 0===s&&"content-type"===t.toLowerCase()?delete f[t]:d.setRequestHeader(t,e)})),e.withCredentials&&(d.withCredentials=!0),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){d&&(d.abort(),l(e),d=null)})),void 0===s&&(s=null),d.send(s)}))}},function(e,t,n){"use strict";var r=n(411);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(26);e.exports=function(e,t){t=t||{};var n={};return r.forEach(["url","method","params","data"],(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(["headers","auth","proxy"],(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"],(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map((function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"}));return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];null!=a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){"use strict";var r,o={},i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function u(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function c(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=o[r.id],a=0;if(i){for(i.refs++;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(m(r.parts[a],t))}else{for(var u=[];a<r.parts.length;a++)u.push(m(r.parts[a],t));o[r.id]={id:r.id,refs:1,parts:u}}}}function l(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o&&e.setAttribute("media",o),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,v=0;function m(e,t){var n,r,o;if(t.singleton){var i=v++;n=h||(h=l(t)),r=d.bind(null,n,i,!1),o=d.bind(null,n,i,!0)}else n=l(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=u(e,t);return c(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var a=n[i],l=o[a.id];l&&(l.refs--,r.push(l))}e&&c(u(e,t),t);for(var s=0;s<r.length;s++){var f=r[s];if(0===f.refs){for(var d=0;d<f.parts.length;d++)f.parts[d]();delete o[f.id]}}}}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){(function(e){!function(t){"use strict";function n(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}),t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0})}function o(e,t,n){o.super_.call(this,"E",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0}),Object.defineProperty(this,"rhs",{value:n,enumerable:!0})}function i(e,t){i.super_.call(this,"N",e),Object.defineProperty(this,"rhs",{value:t,enumerable:!0})}function a(e,t){a.super_.call(this,"D",e),Object.defineProperty(this,"lhs",{value:t,enumerable:!0})}function u(e,t,n){u.super_.call(this,"A",e),Object.defineProperty(this,"index",{value:t,enumerable:!0}),Object.defineProperty(this,"item",{value:n,enumerable:!0})}function c(e,t,n){var r=e.slice((n||t)+1||e.length);return e.length=t<0?e.length+t:t,e.push.apply(e,r),e}function l(e){var t=void 0===e?"undefined":S(e);return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function s(e,t,n,r,f,d,p){p=p||[];var h=(f=f||[]).slice(0);if(void 0!==d){if(r){if("function"==typeof r&&r(h,d))return;if("object"===(void 0===r?"undefined":S(r))){if(r.prefilter&&r.prefilter(h,d))return;if(r.normalize){var v=r.normalize(h,d,e,t);v&&(e=v[0],t=v[1])}}}h.push(d)}"regexp"===l(e)&&"regexp"===l(t)&&(e=e.toString(),t=t.toString());var m=void 0===e?"undefined":S(e),g=void 0===t?"undefined":S(t),y="undefined"!==m||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(d),b="undefined"!==g||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(d);if(!y&&b)n(new i(h,t));else if(!b&&y)n(new a(h,e));else if(l(e)!==l(t))n(new o(h,e,t));else if("date"===l(e)&&e-t!=0)n(new o(h,e,t));else if("object"===m&&null!==e&&null!==t)if(p.filter((function(t){return t.lhs===e})).length)e!==t&&n(new o(h,e,t));else{if(p.push({lhs:e,rhs:t}),Array.isArray(e)){var w;for(e.length,w=0;w<e.length;w++)w>=t.length?n(new u(h,w,new a(void 0,e[w]))):s(e[w],t[w],n,r,h,w,p);for(;w<t.length;)n(new u(h,w,new i(void 0,t[w++])))}else{var x=Object.keys(e),E=Object.keys(t);x.forEach((function(o,i){var a=E.indexOf(o);a>=0?(s(e[o],t[o],n,r,h,o,p),E=c(E,a)):s(e[o],void 0,n,r,h,o,p)})),E.forEach((function(e){s(void 0,t[e],n,r,h,e,p)}))}p.length=p.length-1}else e!==t&&("number"===m&&isNaN(e)&&isNaN(t)||n(new o(h,e,t)))}function f(e,t,n,r){return r=r||[],s(e,t,(function(e){e&&r.push(e)}),n),r.length?r:void 0}function d(e,t,n){if(e&&t&&n&&n.kind){for(var r=e,o=-1,i=n.path?n.path.length-1:0;++o<i;)void 0===r[n.path[o]]&&(r[n.path[o]]="number"==typeof n.path[o]?[]:{}),r=r[n.path[o]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,i=t[n],a=r.path.length-1;for(o=0;o<a;o++)i=i[r.path[o]];switch(r.kind){case"A":e(i[r.path[o]],r.index,r.item);break;case"D":delete i[r.path[o]];break;case"E":case"N":i[r.path[o]]=r.rhs}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":t=c(t,n);break;case"E":case"N":t[n]=r.rhs}return t}(n.path?r[n.path[o]]:r,n.index,n.item);break;case"D":delete r[n.path[o]];break;case"E":case"N":r[n.path[o]]=n.rhs}}}function p(e){return"color: "+T[e].color+"; font-weight: bold"}function h(e,t,n,r){var o=f(e,t);try{r?n.groupCollapsed("diff"):n.group("diff")}catch(e){n.log("diff")}o?o.forEach((function(e){var t=e.kind,r=function(e){var t=e.kind,n=e.path,r=e.lhs,o=e.rhs,i=e.index,a=e.item;switch(t){case"E":return[n.join("."),r,"→",o];case"N":return[n.join("."),o];case"D":return[n.join(".")];case"A":return[n.join(".")+"["+i+"]",a];default:return[]}}(e);n.log.apply(n,["%c "+T[t].text,p(t)].concat(k(r)))})):n.log("—— no diff ——");try{n.groupEnd()}catch(e){n.log("—— diff end —— ")}}function v(e,t,n,r){switch(void 0===e?"undefined":S(e)){case"object":return"function"==typeof e[r]?e[r].apply(e,k(n)):e[r];case"function":return e(t);default:return e}}function m(e,t){var n=t.logger,r=t.actionTransformer,o=t.titleFormatter,i=void 0===o?function(e){var t=e.timestamp,n=e.duration;return function(e,r,o){var i=["action"];return i.push("%c"+String(e.type)),t&&i.push("%c@ "+r),n&&i.push("%c(in "+o.toFixed(2)+" ms)"),i.join(" ")}}(t):o,a=t.collapsed,u=t.colors,c=t.level,l=t.diff,s=void 0===t.titleFormatter;e.forEach((function(o,f){var d=o.started,p=o.startedTime,m=o.action,g=o.prevState,y=o.error,b=o.took,w=o.nextState,E=e[f+1];E&&(w=E.prevState,b=E.started-d);var S=r(m),k="function"==typeof a?a((function(){return w}),m,o):a,O=x(p),T=u.title?"color: "+u.title(S)+";":"",j=["color: gray; font-weight: lighter;"];j.push(T),t.timestamp&&j.push("color: gray; font-weight: lighter;"),t.duration&&j.push("color: gray; font-weight: lighter;");var C=i(S,O,b);try{k?u.title&&s?n.groupCollapsed.apply(n,["%c "+C].concat(j)):n.groupCollapsed(C):u.title&&s?n.group.apply(n,["%c "+C].concat(j)):n.group(C)}catch(e){n.log(C)}var P=v(c,S,[g],"prevState"),_=v(c,S,[S],"action"),R=v(c,S,[y,g],"error"),N=v(c,S,[w],"nextState");if(P)if(u.prevState){var M="color: "+u.prevState(g)+"; font-weight: bold";n[P]("%c prev state",M,g)}else n[P]("prev state",g);if(_)if(u.action){var A="color: "+u.action(S)+"; font-weight: bold";n[_]("%c action    ",A,S)}else n[_]("action    ",S);if(y&&R)if(u.error){var I="color: "+u.error(y,g)+"; font-weight: bold;";n[R]("%c error     ",I,y)}else n[R]("error     ",y);if(N)if(u.nextState){var L="color: "+u.nextState(w)+"; font-weight: bold";n[N]("%c next state",L,w)}else n[N]("next state",w);l&&h(g,w,n,k);try{n.groupEnd()}catch(e){n.log("—— log end ——")}}))}function g(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},j,e),n=t.logger,r=t.stateTransformer,o=t.errorTransformer,i=t.predicate,a=t.logErrors,u=t.diffPredicate;if(void 0===n)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"),function(){return function(e){return function(t){return e(t)}}};var c=[];return function(e){var n=e.getState;return function(e){return function(l){if("function"==typeof i&&!i(n,l))return e(l);var s={};c.push(s),s.started=E.now(),s.startedTime=new Date,s.prevState=r(n()),s.action=l;var f=void 0;if(a)try{f=e(l)}catch(e){s.error=o(e)}else f=e(l);s.took=E.now()-s.started,s.nextState=r(n());var d=t.diff&&"function"==typeof u?u(n,l):t.diff;if(m(c,Object.assign({},t,{diff:d})),c.length=0,s.error)throw s.error;return f}}}}var y,b,w=function(e,t){return function(e,t){return new Array(t+1).join(e)}("0",t-e.toString().length)+e},x=function(e){return w(e.getHours(),2)+":"+w(e.getMinutes(),2)+":"+w(e.getSeconds(),2)+"."+w(e.getMilliseconds(),3)},E="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)},O=[];y="object"===(void 0===e?"undefined":S(e))&&e?e:"undefined"!=typeof window?window:{},(b=y.DeepDiff)&&O.push((function(){void 0!==b&&y.DeepDiff===f&&(y.DeepDiff=b,b=void 0)})),n(o,r),n(i,r),n(a,r),n(u,r),Object.defineProperties(f,{diff:{value:f,enumerable:!0},observableDiff:{value:s,enumerable:!0},applyDiff:{value:function(e,t,n){e&&t&&s(e,t,(function(r){n&&!n(e,t,r)||d(e,t,r)}))},enumerable:!0},applyChange:{value:d,enumerable:!0},revertChange:{value:function(e,t,n){if(e&&t&&n&&n.kind){var r,o,i=e;for(o=n.path.length-1,r=0;r<o;r++)void 0===i[n.path[r]]&&(i[n.path[r]]={}),i=i[n.path[r]];switch(n.kind){case"A":!function e(t,n,r){if(r.path&&r.path.length){var o,i=t[n],a=r.path.length-1;for(o=0;o<a;o++)i=i[r.path[o]];switch(r.kind){case"A":e(i[r.path[o]],r.index,r.item);break;case"D":case"E":i[r.path[o]]=r.lhs;break;case"N":delete i[r.path[o]]}}else switch(r.kind){case"A":e(t[n],r.index,r.item);break;case"D":case"E":t[n]=r.lhs;break;case"N":t=c(t,n)}return t}(i[n.path[r]],n.index,n.item);break;case"D":case"E":i[n.path[r]]=n.lhs;break;case"N":delete i[n.path[r]]}}},enumerable:!0},isConflict:{value:function(){return void 0!==b},enumerable:!0},noConflict:{value:function(){return O&&(O.forEach((function(e){e()})),O=null),f},enumerable:!0}});var T={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},j={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},C=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,n=e.getState;return"function"==typeof t||"function"==typeof n?g()({dispatch:t,getState:n}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};t.defaults=j,t.createLogger=g,t.logger=C,t.default=C,Object.defineProperty(t,"__esModule",{value:!0})}(t)}).call(this,n(63))},function(e,t,n){"use strict";function r(e){if(Array.isArray(e))return e}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";function r(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(e){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,r=function(){for(var e=["Edge","Trident","Firefox"],t=0;t<e.length;t+=1)if(n&&navigator.userAgent.indexOf(e[t])>=0)return 1;return 0}();var o=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then((function(){t=!1,e()})))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout((function(){t=!1,e()}),r))}};function i(e){return e&&"[object Function]"==={}.toString.call(e)}function a(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function u(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=a(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(n+o+r)?e:c(u(e))}function l(e){return e&&e.referenceNode?e.referenceNode:e}var s=n&&!(!window.MSInputMethodContext||!document.documentMode),f=n&&/MSIE 10/.test(navigator.userAgent);function d(e){return 11===e?s:10===e?f:s||f}function p(e){if(!e)return document.documentElement;for(var t=d(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===a(n,"position")?p(n):n:e?e.ownerDocument.documentElement:document.documentElement}function h(e){return null!==e.parentNode?h(e.parentNode):e}function v(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,i=document.createRange();i.setStart(r,0),i.setEnd(o,0);var a,u,c=i.commonAncestorContainer;if(e!==c&&t!==c||r.contains(o))return"BODY"===(u=(a=c).nodeName)||"HTML"!==u&&p(a.firstElementChild)!==a?p(c):c;var l=h(e);return l.host?v(l.host,t):v(e,h(t).host)}function m(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function g(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function y(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],d(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function b(e){var t=e.body,n=e.documentElement,r=d(10)&&getComputedStyle(n);return{height:y("Height",t,n,r),width:y("Width",t,n,r)}}var w=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},x=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),E=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function k(e){return S({},e,{right:e.left+e.width,bottom:e.top+e.height})}function O(e){var t={};try{if(d(10)){t=e.getBoundingClientRect();var n=m(e,"top"),r=m(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},i="HTML"===e.nodeName?b(e.ownerDocument):{},u=i.width||e.clientWidth||o.width,c=i.height||e.clientHeight||o.height,l=e.offsetWidth-u,s=e.offsetHeight-c;if(l||s){var f=a(e);l-=g(f,"x"),s-=g(f,"y"),o.width-=l,o.height-=s}return k(o)}function T(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=d(10),o="HTML"===t.nodeName,i=O(e),u=O(t),l=c(e),s=a(t),f=parseFloat(s.borderTopWidth,10),p=parseFloat(s.borderLeftWidth,10);n&&o&&(u.top=Math.max(u.top,0),u.left=Math.max(u.left,0));var h=k({top:i.top-u.top-f,left:i.left-u.left-p,width:i.width,height:i.height});if(h.marginTop=0,h.marginLeft=0,!r&&o){var v=parseFloat(s.marginTop,10),g=parseFloat(s.marginLeft,10);h.top-=f-v,h.bottom-=f-v,h.left-=p-g,h.right-=p-g,h.marginTop=v,h.marginLeft=g}return(r&&!n?t.contains(l):t===l&&"BODY"!==l.nodeName)&&(h=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=m(t,"top"),o=m(t,"left"),i=n?-1:1;return e.top+=r*i,e.bottom+=r*i,e.left+=o*i,e.right+=o*i,e}(h,t)),h}function j(e){if(!e||!e.parentElement||d())return document.documentElement;for(var t=e.parentElement;t&&"none"===a(t,"transform");)t=t.parentElement;return t||document.documentElement}function C(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i={top:0,left:0},s=o?j(e):v(e,l(t));if("viewport"===r)i=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=T(e,n),o=Math.max(n.clientWidth,window.innerWidth||0),i=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:m(n),u=t?0:m(n,"left");return k({top:a-r.top+r.marginTop,left:u-r.left+r.marginLeft,width:o,height:i})}(s,o);else{var f=void 0;"scrollParent"===r?"BODY"===(f=c(u(t))).nodeName&&(f=e.ownerDocument.documentElement):f="window"===r?e.ownerDocument.documentElement:r;var d=T(f,s,o);if("HTML"!==f.nodeName||function e(t){var n=t.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===a(t,"position"))return!0;var r=u(t);return!!r&&e(r)}(s))i=d;else{var p=b(e.ownerDocument),h=p.height,g=p.width;i.top+=d.top-d.marginTop,i.bottom=h+d.top,i.left+=d.left-d.marginLeft,i.right=g+d.left}}var y="number"==typeof(n=n||0);return i.left+=y?n:n.left||0,i.top+=y?n:n.top||0,i.right-=y?n:n.right||0,i.bottom-=y?n:n.bottom||0,i}function P(e,t,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=C(n,r,i,o),u={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},c=Object.keys(u).map((function(e){return S({key:e},u[e],{area:(t=u[e],t.width*t.height)});var t})).sort((function(e,t){return t.area-e.area})),l=c.filter((function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight})),s=l.length>0?l[0].key:c[0].key,f=e.split("-")[1];return s+(f?"-"+f:"")}function _(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return T(n,r?j(t):v(t,l(n)),r)}function R(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function N(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,(function(e){return t[e]}))}function M(e,t,n){n=n.split("-")[0];var r=R(e),o={width:r.width,height:r.height},i=-1!==["right","left"].indexOf(n),a=i?"top":"left",u=i?"left":"top",c=i?"height":"width",l=i?"width":"height";return o[a]=t[a]+t[c]/2-r[c]/2,o[u]=n===u?t[u]-r[l]:t[N(u)],o}function A(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function I(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex((function(e){return e[t]===n}));var r=A(e,(function(e){return e[t]===n}));return e.indexOf(r)}(e,"name",n))).forEach((function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&i(n)&&(t.offsets.popper=k(t.offsets.popper),t.offsets.reference=k(t.offsets.reference),t=n(t,e))})),t}function L(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=_(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=P(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=M(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=I(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function F(e,t){return e.some((function(e){var n=e.name;return e.enabled&&n===t}))}function D(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var o=t[r],i=o?""+o+n:e;if(void 0!==document.body.style[i])return i}return null}function z(){return this.state.isDestroyed=!0,F(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[D("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function U(e){var t=e.ownerDocument;return t?t.defaultView:window}function W(e,t,n,r){n.updateBound=r,U(e).addEventListener("resize",n.updateBound,{passive:!0});var o=c(e);return function e(t,n,r,o){var i="BODY"===t.nodeName,a=i?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),i||e(c(a.parentNode),n,r,o),o.push(a)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function B(){this.state.eventsEnabled||(this.state=W(this.reference,this.options,this.state,this.scheduleUpdate))}function H(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,U(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach((function(e){e.removeEventListener("scroll",t.updateBound)})),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function V(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function $(e,t){Object.keys(t).forEach((function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&V(t[n])&&(r="px"),e.style[n]=t[n]+r}))}var q=n&&/Firefox/i.test(navigator.userAgent);function G(e,t,n){var r=A(e,(function(e){return e.name===t})),o=!!r&&e.some((function(e){return e.name===n&&e.enabled&&e.order<r.order}));if(!o){var i="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")}return o}var K=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Y=K.slice(3);function Q(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Y.indexOf(e),r=Y.slice(n+1).concat(Y.slice(0,n));return t?r.reverse():r}var X={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function J(e,t,n,r){var o=[0,0],i=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map((function(e){return e.trim()})),u=a.indexOf(A(a,(function(e){return-1!==e.search(/,|\s/)})));a[u]&&-1===a[u].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var c=/\s*,\s*|\s+/,l=-1!==u?[a.slice(0,u).concat([a[u].split(c)[0]]),[a[u].split(c)[1]].concat(a.slice(u+1))]:[a];return(l=l.map((function(e,r){var o=(1===r?!i:i)?"height":"width",a=!1;return e.reduce((function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)}),[]).map((function(e){return function(e,t,n,r){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),i=+o[1],a=o[2];if(!i)return e;if(0===a.indexOf("%")){var u=void 0;switch(a){case"%p":u=n;break;case"%":case"%r":default:u=r}return k(u)[t]/100*i}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*i}return i}(e,o,t,n)}))}))).forEach((function(e,t){e.forEach((function(n,r){V(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))}))})),o}var Z={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var o=e.offsets,i=o.reference,a=o.popper,u=-1!==["bottom","top"].indexOf(n),c=u?"left":"top",l=u?"width":"height",s={start:E({},c,i[c]),end:E({},c,i[c]+i[l]-a[l])};e.offsets.popper=S({},a,s[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,o=e.offsets,i=o.popper,a=o.reference,u=r.split("-")[0],c=void 0;return c=V(+n)?[+n,0]:J(n,i,a,u),"left"===u?(i.top+=c[0],i.left-=c[1]):"right"===u?(i.top+=c[0],i.left+=c[1]):"top"===u?(i.left+=c[0],i.top-=c[1]):"bottom"===u&&(i.left+=c[0],i.top+=c[1]),e.popper=i,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||p(e.instance.popper);e.instance.reference===n&&(n=p(n));var r=D("transform"),o=e.instance.popper.style,i=o.top,a=o.left,u=o[r];o.top="",o.left="",o[r]="";var c=C(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);o.top=i,o.left=a,o[r]=u,t.boundaries=c;var l=t.priority,s=e.offsets.popper,f={primary:function(e){var n=s[e];return s[e]<c[e]&&!t.escapeWithReference&&(n=Math.max(s[e],c[e])),E({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=s[n];return s[e]>c[e]&&!t.escapeWithReference&&(r=Math.min(s[n],c[e]-("right"===e?s.width:s.height))),E({},n,r)}};return l.forEach((function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";s=S({},s,f[t](e))})),e.offsets.popper=s,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],i=Math.floor,a=-1!==["top","bottom"].indexOf(o),u=a?"right":"bottom",c=a?"left":"top",l=a?"width":"height";return n[u]<i(r[c])&&(e.offsets.popper[c]=i(r[c])-n[l]),n[c]>i(r[u])&&(e.offsets.popper[c]=i(r[u])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!G(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],i=e.offsets,u=i.popper,c=i.reference,l=-1!==["left","right"].indexOf(o),s=l?"height":"width",f=l?"Top":"Left",d=f.toLowerCase(),p=l?"left":"top",h=l?"bottom":"right",v=R(r)[s];c[h]-v<u[d]&&(e.offsets.popper[d]-=u[d]-(c[h]-v)),c[d]+v>u[h]&&(e.offsets.popper[d]+=c[d]+v-u[h]),e.offsets.popper=k(e.offsets.popper);var m=c[d]+c[s]/2-v/2,g=a(e.instance.popper),y=parseFloat(g["margin"+f],10),b=parseFloat(g["border"+f+"Width"],10),w=m-e.offsets.popper[d]-y-b;return w=Math.max(Math.min(u[s]-v,w),0),e.arrowElement=r,e.offsets.arrow=(E(n={},d,Math.round(w)),E(n,p,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(F(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=C(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],o=N(r),i=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case X.FLIP:a=[r,o];break;case X.CLOCKWISE:a=Q(r);break;case X.COUNTERCLOCKWISE:a=Q(r,!0);break;default:a=t.behavior}return a.forEach((function(u,c){if(r!==u||a.length===c+1)return e;r=e.placement.split("-")[0],o=N(r);var l=e.offsets.popper,s=e.offsets.reference,f=Math.floor,d="left"===r&&f(l.right)>f(s.left)||"right"===r&&f(l.left)<f(s.right)||"top"===r&&f(l.bottom)>f(s.top)||"bottom"===r&&f(l.top)<f(s.bottom),p=f(l.left)<f(n.left),h=f(l.right)>f(n.right),v=f(l.top)<f(n.top),m=f(l.bottom)>f(n.bottom),g="left"===r&&p||"right"===r&&h||"top"===r&&v||"bottom"===r&&m,y=-1!==["top","bottom"].indexOf(r),b=!!t.flipVariations&&(y&&"start"===i&&p||y&&"end"===i&&h||!y&&"start"===i&&v||!y&&"end"===i&&m),w=!!t.flipVariationsByContent&&(y&&"start"===i&&h||y&&"end"===i&&p||!y&&"start"===i&&m||!y&&"end"===i&&v),x=b||w;(d||g||x)&&(e.flipped=!0,(d||g)&&(r=a[c+1]),x&&(i=function(e){return"end"===e?"start":"start"===e?"end":e}(i)),e.placement=r+(i?"-"+i:""),e.offsets.popper=S({},e.offsets.popper,M(e.instance.popper,e.offsets.reference,e.placement)),e=I(e.instance.modifiers,e,"flip"))})),e},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,i=r.reference,a=-1!==["left","right"].indexOf(n),u=-1===["top","left"].indexOf(n);return o[a?"left":"top"]=i[n]-(u?o[a?"width":"height"]:0),e.placement=N(t),e.offsets.popper=k(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!G(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=A(e.instance.modifiers,(function(e){return"preventOverflow"===e.name})).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,o=e.offsets.popper,i=A(e.instance.modifiers,(function(e){return"applyStyle"===e.name})).gpuAcceleration;void 0!==i&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==i?i:t.gpuAcceleration,u=p(e.instance.popper),c=O(u),l={position:o.position},s=function(e,t){var n=e.offsets,r=n.popper,o=n.reference,i=Math.round,a=Math.floor,u=function(e){return e},c=i(o.width),l=i(r.width),s=-1!==["left","right"].indexOf(e.placement),f=-1!==e.placement.indexOf("-"),d=t?s||f||c%2==l%2?i:a:u,p=t?i:u;return{left:d(c%2==1&&l%2==1&&!f&&t?r.left-1:r.left),top:p(r.top),bottom:p(r.bottom),right:d(r.right)}}(e,window.devicePixelRatio<2||!q),f="bottom"===n?"top":"bottom",d="right"===r?"left":"right",h=D("transform"),v=void 0,m=void 0;if(m="bottom"===f?"HTML"===u.nodeName?-u.clientHeight+s.bottom:-c.height+s.bottom:s.top,v="right"===d?"HTML"===u.nodeName?-u.clientWidth+s.right:-c.width+s.right:s.left,a&&h)l[h]="translate3d("+v+"px, "+m+"px, 0)",l[f]=0,l[d]=0,l.willChange="transform";else{var g="bottom"===f?-1:1,y="right"===d?-1:1;l[f]=m*g,l[d]=v*y,l.willChange=f+", "+d}var b={"x-placement":e.placement};return e.attributes=S({},b,e.attributes),e.styles=S({},l,e.styles),e.arrowStyles=S({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return $(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach((function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)})),e.arrowElement&&Object.keys(e.arrowStyles).length&&$(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var i=_(o,t,e,n.positionFixed),a=P(n.placement,i,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),$(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},ee=function(){function e(t,n){var r=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=o(this.update.bind(this)),this.options=S({},e.Defaults,a),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(S({},e.Defaults.modifiers,a.modifiers)).forEach((function(t){r.options.modifiers[t]=S({},e.Defaults.modifiers[t]||{},a.modifiers?a.modifiers[t]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(e){return S({name:e},r.options.modifiers[e])})).sort((function(e,t){return e.order-t.order})),this.modifiers.forEach((function(e){e.enabled&&i(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)})),this.update();var u=this.options.eventsEnabled;u&&this.enableEventListeners(),this.state.eventsEnabled=u}return x(e,[{key:"update",value:function(){return L.call(this)}},{key:"destroy",value:function(){return z.call(this)}},{key:"enableEventListeners",value:function(){return B.call(this)}},{key:"disableEventListeners",value:function(){return H.call(this)}}]),e}();ee.Utils=("undefined"!=typeof window?window:e).PopperUtils,ee.placements=K,ee.Defaults=Z,t.a=ee}).call(this,n(63))},function(e,t,n){"use strict";var r=n(175);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(0,r(n(419)).default)(o.default.createElement("path",{d:"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"}),"Search");t.default=i},function(e,t){e.exports={MODE:"development",DEV:!0,PORT:3e3,HOST:"localhost",BASE_URL:"http://localhost:3003/api/"}},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(63))},,,,,,function(e,t,n){"use strict";(function(e){if(n(192),n(389),n(390),e._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");e._babelPolyfill=!0;var t="defineProperty";function r(e,n,r){e[n]||Object[t](e,n,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach((function(e){[][e]&&r(Array,e,Function.call.bind([][e]))}))}).call(this,n(63))},function(e,t,n){n(193),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(218),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(229),n(230),n(231),n(232),n(233),n(234),n(235),n(236),n(237),n(238),n(239),n(240),n(241),n(242),n(243),n(244),n(245),n(246),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(264),n(265),n(266),n(267),n(268),n(269),n(270),n(271),n(273),n(274),n(276),n(277),n(278),n(279),n(280),n(281),n(282),n(284),n(285),n(286),n(287),n(288),n(289),n(290),n(291),n(292),n(293),n(294),n(295),n(296),n(113),n(297),n(149),n(298),n(150),n(299),n(300),n(301),n(302),n(303),n(153),n(155),n(156),n(304),n(305),n(306),n(307),n(308),n(309),n(310),n(311),n(312),n(313),n(314),n(315),n(316),n(317),n(318),n(319),n(320),n(321),n(322),n(323),n(324),n(325),n(326),n(327),n(328),n(329),n(330),n(331),n(332),n(333),n(334),n(335),n(336),n(337),n(338),n(339),n(340),n(341),n(342),n(343),n(344),n(345),n(346),n(347),n(348),n(349),n(350),n(351),n(352),n(353),n(354),n(355),n(356),n(357),n(358),n(359),n(360),n(361),n(362),n(363),n(364),n(365),n(366),n(367),n(368),n(369),n(370),n(371),n(372),n(373),n(374),n(375),n(376),n(377),n(378),n(379),n(380),n(381),n(382),n(383),n(384),n(385),n(386),n(387),n(388),e.exports=n(32)},function(e,t,n){"use strict";var r=n(8),o=n(27),i=n(15),a=n(2),u=n(24),c=n(45).KEY,l=n(9),s=n(71),f=n(64),d=n(50),p=n(13),h=n(131),v=n(94),m=n(195),g=n(78),y=n(7),b=n(10),w=n(19),x=n(28),E=n(37),S=n(49),k=n(53),O=n(134),T=n(29),j=n(77),C=n(18),P=n(51),_=T.f,R=C.f,N=O.f,M=r.Symbol,A=r.JSON,I=A&&A.stringify,L=p("_hidden"),F=p("toPrimitive"),D={}.propertyIsEnumerable,z=s("symbol-registry"),U=s("symbols"),W=s("op-symbols"),B=Object.prototype,H="function"==typeof M&&!!j.f,V=r.QObject,$=!V||!V.prototype||!V.prototype.findChild,q=i&&l((function(){return 7!=k(R({},"a",{get:function(){return R(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=_(B,t);r&&delete B[t],R(e,t,n),r&&e!==B&&R(B,t,r)}:R,G=function(e){var t=U[e]=k(M.prototype);return t._k=e,t},K=H&&"symbol"==typeof M.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof M},Y=function(e,t,n){return e===B&&Y(W,t,n),y(e),t=E(t,!0),y(n),o(U,t)?(n.enumerable?(o(e,L)&&e[L][t]&&(e[L][t]=!1),n=k(n,{enumerable:S(0,!1)})):(o(e,L)||R(e,L,S(1,{})),e[L][t]=!0),q(e,t,n)):R(e,t,n)},Q=function(e,t){y(e);for(var n,r=m(t=x(t)),o=0,i=r.length;i>o;)Y(e,n=r[o++],t[n]);return e},X=function(e){var t=D.call(this,e=E(e,!0));return!(this===B&&o(U,e)&&!o(W,e))&&(!(t||!o(this,e)||!o(U,e)||o(this,L)&&this[L][e])||t)},J=function(e,t){if(e=x(e),t=E(t,!0),e!==B||!o(U,t)||o(W,t)){var n=_(e,t);return!n||!o(U,t)||o(e,L)&&e[L][t]||(n.enumerable=!0),n}},Z=function(e){for(var t,n=N(x(e)),r=[],i=0;n.length>i;)o(U,t=n[i++])||t==L||t==c||r.push(t);return r},ee=function(e){for(var t,n=e===B,r=N(n?W:x(e)),i=[],a=0;r.length>a;)!o(U,t=r[a++])||n&&!o(B,t)||i.push(U[t]);return i};H||(u((M=function(){if(this instanceof M)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(n){this===B&&t.call(W,n),o(this,L)&&o(this[L],e)&&(this[L][e]=!1),q(this,e,S(1,n))};return i&&$&&q(B,e,{configurable:!0,set:t}),G(e)}).prototype,"toString",(function(){return this._k})),T.f=J,C.f=Y,n(54).f=O.f=Z,n(73).f=X,j.f=ee,i&&!n(44)&&u(B,"propertyIsEnumerable",X,!0),h.f=function(e){return G(p(e))}),a(a.G+a.W+a.F*!H,{Symbol:M});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;te.length>ne;)p(te[ne++]);for(var re=P(p.store),oe=0;re.length>oe;)v(re[oe++]);a(a.S+a.F*!H,"Symbol",{for:function(e){return o(z,e+="")?z[e]:z[e]=M(e)},keyFor:function(e){if(!K(e))throw TypeError(e+" is not a symbol!");for(var t in z)if(z[t]===e)return t},useSetter:function(){$=!0},useSimple:function(){$=!1}}),a(a.S+a.F*!H,"Object",{create:function(e,t){return void 0===t?k(e):Q(k(e),t)},defineProperty:Y,defineProperties:Q,getOwnPropertyDescriptor:J,getOwnPropertyNames:Z,getOwnPropertySymbols:ee});var ie=l((function(){j.f(1)}));a(a.S+a.F*ie,"Object",{getOwnPropertySymbols:function(e){return j.f(w(e))}}),A&&a(a.S+a.F*(!H||l((function(){var e=M();return"[null]"!=I([e])||"{}"!=I({a:e})||"{}"!=I(Object(e))}))),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(b(t)||void 0!==e)&&!K(e))return g(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!K(t))return t}),r[1]=t,I.apply(A,r)}}),M.prototype[F]||n(23)(M.prototype,F,M.prototype.valueOf),f(M,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){e.exports=n(71)("native-function-to-string",Function.toString)},function(e,t,n){var r=n(51),o=n(77),i=n(73);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var a,u=n(e),c=i.f,l=0;u.length>l;)c.call(e,a=u[l++])&&t.push(a);return t}},function(e,t,n){var r=n(2);r(r.S,"Object",{create:n(53)})},function(e,t,n){var r=n(2);r(r.S+r.F*!n(15),"Object",{defineProperty:n(18).f})},function(e,t,n){var r=n(2);r(r.S+r.F*!n(15),"Object",{defineProperties:n(133)})},function(e,t,n){var r=n(28),o=n(29).f;n(39)("getOwnPropertyDescriptor",(function(){return function(e,t){return o(r(e),t)}}))},function(e,t,n){var r=n(19),o=n(30);n(39)("getPrototypeOf",(function(){return function(e){return o(r(e))}}))},function(e,t,n){var r=n(19),o=n(51);n(39)("keys",(function(){return function(e){return o(r(e))}}))},function(e,t,n){n(39)("getOwnPropertyNames",(function(){return n(134).f}))},function(e,t,n){var r=n(10),o=n(45).onFreeze;n(39)("freeze",(function(e){return function(t){return e&&r(t)?e(o(t)):t}}))},function(e,t,n){var r=n(10),o=n(45).onFreeze;n(39)("seal",(function(e){return function(t){return e&&r(t)?e(o(t)):t}}))},function(e,t,n){var r=n(10),o=n(45).onFreeze;n(39)("preventExtensions",(function(e){return function(t){return e&&r(t)?e(o(t)):t}}))},function(e,t,n){var r=n(10);n(39)("isFrozen",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},function(e,t,n){var r=n(10);n(39)("isSealed",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},function(e,t,n){var r=n(10);n(39)("isExtensible",(function(e){return function(t){return!!r(t)&&(!e||e(t))}}))},function(e,t,n){var r=n(2);r(r.S+r.F,"Object",{assign:n(135)})},function(e,t,n){var r=n(2);r(r.S,"Object",{is:n(136)})},function(e,t,n){var r=n(2);r(r.S,"Object",{setPrototypeOf:n(98).set})},function(e,t,n){"use strict";var r=n(65),o={};o[n(13)("toStringTag")]="z",o+""!="[object z]"&&n(24)(Object.prototype,"toString",(function(){return"[object "+r(this)+"]"}),!0)},function(e,t,n){var r=n(2);r(r.P,"Function",{bind:n(137)})},function(e,t,n){var r=n(18).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||n(15)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},function(e,t,n){"use strict";var r=n(10),o=n(30),i=n(13)("hasInstance"),a=Function.prototype;i in a||n(18).f(a,i,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=o(e);)if(this.prototype===e)return!0;return!1}})},function(e,t,n){var r=n(2),o=n(139);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(e,t,n){var r=n(2),o=n(140);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(e,t,n){"use strict";var r=n(8),o=n(27),i=n(34),a=n(100),u=n(37),c=n(9),l=n(54).f,s=n(29).f,f=n(18).f,d=n(66).trim,p=r.Number,h=p,v=p.prototype,m="Number"==i(n(53)(v)),g="trim"in String.prototype,y=function(e){var t=u(e,!1);if("string"==typeof t&&t.length>2){var n,r,o,i=(t=g?t.trim():d(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+t}for(var a,c=t.slice(2),l=0,s=c.length;l<s;l++)if((a=c.charCodeAt(l))<48||a>o)return NaN;return parseInt(c,r)}}return+t};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof p&&(m?c((function(){v.valueOf.call(n)})):"Number"!=i(n))?a(new h(y(t)),n,p):y(t)};for(var b,w=n(15)?l(h):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;w.length>x;x++)o(h,b=w[x])&&!o(p,b)&&f(p,b,s(h,b));p.prototype=v,v.constructor=p,n(24)(r,"Number",p)}},function(e,t,n){"use strict";var r=n(2),o=n(35),i=n(141),a=n(101),u=1..toFixed,c=Math.floor,l=[0,0,0,0,0,0],s="Number.toFixed: incorrect invocation!",f=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*l[n],l[n]=r%1e7,r=c(r/1e7)},d=function(e){for(var t=6,n=0;--t>=0;)n+=l[t],l[t]=c(n/e),n=n%e*1e7},p=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==l[e]){var n=String(l[e]);t=""===t?n:t+a.call("0",7-n.length)+n}return t},h=function(e,t,n){return 0===t?n:t%2==1?h(e,t-1,n*e):h(e*e,t/2,n)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(9)((function(){u.call({})}))),"Number",{toFixed:function(e){var t,n,r,u,c=i(this,s),l=o(e),v="",m="0";if(l<0||l>20)throw RangeError(s);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(v="-",c=-c),c>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(c*h(2,69,1))-69)<0?c*h(2,-t,1):c/h(2,t,1),n*=4503599627370496,(t=52-t)>0){for(f(0,n),r=l;r>=7;)f(1e7,0),r-=7;for(f(h(10,r,1),0),r=t-1;r>=23;)d(1<<23),r-=23;d(1<<r),f(1,1),d(2),m=p()}else f(0,n),f(1<<-t,0),m=p()+a.call("0",l);return m=l>0?v+((u=m.length)<=l?"0."+a.call("0",l-u)+m:m.slice(0,u-l)+"."+m.slice(u-l)):v+m}})},function(e,t,n){"use strict";var r=n(2),o=n(9),i=n(141),a=1..toPrecision;r(r.P+r.F*(o((function(){return"1"!==a.call(1,void 0)}))||!o((function(){a.call({})}))),"Number",{toPrecision:function(e){var t=i(this,"Number#toPrecision: incorrect invocation!");return void 0===e?a.call(t):a.call(t,e)}})},function(e,t,n){var r=n(2);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(e,t,n){var r=n(2),o=n(8).isFinite;r(r.S,"Number",{isFinite:function(e){return"number"==typeof e&&o(e)}})},function(e,t,n){var r=n(2);r(r.S,"Number",{isInteger:n(142)})},function(e,t,n){var r=n(2);r(r.S,"Number",{isNaN:function(e){return e!=e}})},function(e,t,n){var r=n(2),o=n(142),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(e){return o(e)&&i(e)<=9007199254740991}})},function(e,t,n){var r=n(2);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(e,t,n){var r=n(2);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,n){var r=n(2),o=n(140);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(e,t,n){var r=n(2),o=n(139);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(e,t,n){var r=n(2),o=n(143),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?Math.log(e)+Math.LN2:o(e-1+i(e-1)*i(e+1))}})},function(e,t,n){var r=n(2),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},function(e,t,n){var r=n(2),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(e){return 0==(e=+e)?e:Math.log((1+e)/(1-e))/2}})},function(e,t,n){var r=n(2),o=n(102);r(r.S,"Math",{cbrt:function(e){return o(e=+e)*Math.pow(Math.abs(e),1/3)}})},function(e,t,n){var r=n(2);r(r.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},function(e,t,n){var r=n(2),o=Math.exp;r(r.S,"Math",{cosh:function(e){return(o(e=+e)+o(-e))/2}})},function(e,t,n){var r=n(2),o=n(103);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(e,t,n){var r=n(2);r(r.S,"Math",{fround:n(144)})},function(e,t,n){var r=n(2),o=Math.abs;r(r.S,"Math",{hypot:function(e,t){for(var n,r,i=0,a=0,u=arguments.length,c=0;a<u;)c<(n=o(arguments[a++]))?(i=i*(r=c/n)*r+1,c=n):i+=n>0?(r=n/c)*r:n;return c===1/0?1/0:c*Math.sqrt(i)}})},function(e,t,n){var r=n(2),o=Math.imul;r(r.S+r.F*n(9)((function(){return-5!=o(4294967295,5)||2!=o.length})),"Math",{imul:function(e,t){var n=+e,r=+t,o=65535&n,i=65535&r;return 0|o*i+((65535&n>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(e,t,n){var r=n(2);r(r.S,"Math",{log10:function(e){return Math.log(e)*Math.LOG10E}})},function(e,t,n){var r=n(2);r(r.S,"Math",{log1p:n(143)})},function(e,t,n){var r=n(2);r(r.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},function(e,t,n){var r=n(2);r(r.S,"Math",{sign:n(102)})},function(e,t,n){var r=n(2),o=n(103),i=Math.exp;r(r.S+r.F*n(9)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(e){return Math.abs(e=+e)<1?(o(e)-o(-e))/2:(i(e-1)-i(-e-1))*(Math.E/2)}})},function(e,t,n){var r=n(2),o=n(103),i=Math.exp;r(r.S,"Math",{tanh:function(e){var t=o(e=+e),n=o(-e);return t==1/0?1:n==1/0?-1:(t-n)/(i(e)+i(-e))}})},function(e,t,n){var r=n(2);r(r.S,"Math",{trunc:function(e){return(e>0?Math.floor:Math.ceil)(e)}})},function(e,t,n){var r=n(2),o=n(52),i=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,a=0;r>a;){if(t=+arguments[a++],o(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?i(t):i(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},function(e,t,n){var r=n(2),o=n(28),i=n(14);r(r.S,"String",{raw:function(e){for(var t=o(e.raw),n=i(t.length),r=arguments.length,a=[],u=0;n>u;)a.push(String(t[u++])),u<r&&a.push(String(arguments[u]));return a.join("")}})},function(e,t,n){"use strict";n(66)("trim",(function(e){return function(){return e(this,3)}}))},function(e,t,n){"use strict";var r=n(79)(!0);n(104)(String,"String",(function(e){this._t=String(e),this._i=0}),(function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})}))},function(e,t,n){"use strict";var r=n(2),o=n(79)(!1);r(r.P,"String",{codePointAt:function(e){return o(this,e)}})},function(e,t,n){"use strict";var r=n(2),o=n(14),i=n(106),a="".endsWith;r(r.P+r.F*n(107)("endsWith"),"String",{endsWith:function(e){var t=i(this,e,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=o(t.length),u=void 0===n?r:Math.min(o(n),r),c=String(e);return a?a.call(t,c,u):t.slice(u-c.length,u)===c}})},function(e,t,n){"use strict";var r=n(2),o=n(106);r(r.P+r.F*n(107)("includes"),"String",{includes:function(e){return!!~o(this,e,"includes").indexOf(e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(2);r(r.P,"String",{repeat:n(101)})},function(e,t,n){"use strict";var r=n(2),o=n(14),i=n(106),a="".startsWith;r(r.P+r.F*n(107)("startsWith"),"String",{startsWith:function(e){var t=i(this,e,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return a?a.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){"use strict";n(25)("anchor",(function(e){return function(t){return e(this,"a","name",t)}}))},function(e,t,n){"use strict";n(25)("big",(function(e){return function(){return e(this,"big","","")}}))},function(e,t,n){"use strict";n(25)("blink",(function(e){return function(){return e(this,"blink","","")}}))},function(e,t,n){"use strict";n(25)("bold",(function(e){return function(){return e(this,"b","","")}}))},function(e,t,n){"use strict";n(25)("fixed",(function(e){return function(){return e(this,"tt","","")}}))},function(e,t,n){"use strict";n(25)("fontcolor",(function(e){return function(t){return e(this,"font","color",t)}}))},function(e,t,n){"use strict";n(25)("fontsize",(function(e){return function(t){return e(this,"font","size",t)}}))},function(e,t,n){"use strict";n(25)("italics",(function(e){return function(){return e(this,"i","","")}}))},function(e,t,n){"use strict";n(25)("link",(function(e){return function(t){return e(this,"a","href",t)}}))},function(e,t,n){"use strict";n(25)("small",(function(e){return function(){return e(this,"small","","")}}))},function(e,t,n){"use strict";n(25)("strike",(function(e){return function(){return e(this,"strike","","")}}))},function(e,t,n){"use strict";n(25)("sub",(function(e){return function(){return e(this,"sub","","")}}))},function(e,t,n){"use strict";n(25)("sup",(function(e){return function(){return e(this,"sup","","")}}))},function(e,t,n){var r=n(2);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(e,t,n){"use strict";var r=n(2),o=n(19),i=n(37);r(r.P+r.F*n(9)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(e){var t=o(this),n=i(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},function(e,t,n){var r=n(2),o=n(272);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(e,t,n){"use strict";var r=n(9),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(e){return e>9?e:"0"+e};e.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))}))||!r((function(){i.call(new Date(NaN))}))?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),n=e.getUTCMilliseconds(),r=t<0?"-":t>9999?"+":"";return r+("00000"+Math.abs(t)).slice(r?-6:-4)+"-"+a(e.getUTCMonth()+1)+"-"+a(e.getUTCDate())+"T"+a(e.getUTCHours())+":"+a(e.getUTCMinutes())+":"+a(e.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:i},function(e,t,n){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(24)(r,"toString",(function(){var e=i.call(this);return e==e?o.call(this):"Invalid Date"}))},function(e,t,n){var r=n(13)("toPrimitive"),o=Date.prototype;r in o||n(23)(o,r,n(275))},function(e,t,n){"use strict";var r=n(7),o=n(37);e.exports=function(e){if("string"!==e&&"number"!==e&&"default"!==e)throw TypeError("Incorrect hint");return o(r(this),"number"!=e)}},function(e,t,n){var r=n(2);r(r.S,"Array",{isArray:n(78)})},function(e,t,n){"use strict";var r=n(33),o=n(2),i=n(19),a=n(145),u=n(108),c=n(14),l=n(109),s=n(110);o(o.S+o.F*!n(81)((function(e){Array.from(e)})),"Array",{from:function(e){var t,n,o,f,d=i(e),p="function"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,m=void 0!==v,g=0,y=s(d);if(m&&(v=r(v,h>2?arguments[2]:void 0,2)),null==y||p==Array&&u(y))for(n=new p(t=c(d.length));t>g;g++)l(n,g,m?v(d[g],g):d[g]);else for(f=y.call(d),n=new p;!(o=f.next()).done;g++)l(n,g,m?a(f,v,[o.value,g],!0):o.value);return n.length=g,n}})},function(e,t,n){"use strict";var r=n(2),o=n(109);r(r.S+r.F*n(9)((function(){function e(){}return!(Array.of.call(e)instanceof e)})),"Array",{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)o(n,e,arguments[e++]);return n.length=t,n}})},function(e,t,n){"use strict";var r=n(2),o=n(28),i=[].join;r(r.P+r.F*(n(72)!=Object||!n(36)(i)),"Array",{join:function(e){return i.call(o(this),void 0===e?",":e)}})},function(e,t,n){"use strict";var r=n(2),o=n(97),i=n(34),a=n(52),u=n(14),c=[].slice;r(r.P+r.F*n(9)((function(){o&&c.call(o)})),"Array",{slice:function(e,t){var n=u(this.length),r=i(this);if(t=void 0===t?n:t,"Array"==r)return c.call(this,e,t);for(var o=a(e,n),l=a(t,n),s=u(l-o),f=new Array(s),d=0;d<s;d++)f[d]="String"==r?this.charAt(o+d):this[o+d];return f}})},function(e,t,n){"use strict";var r=n(2),o=n(22),i=n(19),a=n(9),u=[].sort,c=[1,2,3];r(r.P+r.F*(a((function(){c.sort(void 0)}))||!a((function(){c.sort(null)}))||!n(36)(u)),"Array",{sort:function(e){return void 0===e?u.call(i(this)):u.call(i(this),o(e))}})},function(e,t,n){"use strict";var r=n(2),o=n(40)(0),i=n(36)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(e){return o(this,e,arguments[1])}})},function(e,t,n){var r=n(10),o=n(78),i=n(13)("species");e.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),r(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){"use strict";var r=n(2),o=n(40)(1);r(r.P+r.F*!n(36)([].map,!0),"Array",{map:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(2),o=n(40)(2);r(r.P+r.F*!n(36)([].filter,!0),"Array",{filter:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(2),o=n(40)(3);r(r.P+r.F*!n(36)([].some,!0),"Array",{some:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(2),o=n(40)(4);r(r.P+r.F*!n(36)([].every,!0),"Array",{every:function(e){return o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(2),o=n(146);r(r.P+r.F*!n(36)([].reduce,!0),"Array",{reduce:function(e){return o(this,e,arguments.length,arguments[1],!1)}})},function(e,t,n){"use strict";var r=n(2),o=n(146);r(r.P+r.F*!n(36)([].reduceRight,!0),"Array",{reduceRight:function(e){return o(this,e,arguments.length,arguments[1],!0)}})},function(e,t,n){"use strict";var r=n(2),o=n(76)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(36)(i)),"Array",{indexOf:function(e){return a?i.apply(this,arguments)||0:o(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(2),o=n(28),i=n(35),a=n(14),u=[].lastIndexOf,c=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!n(36)(u)),"Array",{lastIndexOf:function(e){if(c)return u.apply(this,arguments)||0;var t=o(this),n=a(t.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in t&&t[r]===e)return r||0;return-1}})},function(e,t,n){var r=n(2);r(r.P,"Array",{copyWithin:n(147)}),n(46)("copyWithin")},function(e,t,n){var r=n(2);r(r.P,"Array",{fill:n(112)}),n(46)("fill")},function(e,t,n){"use strict";var r=n(2),o=n(40)(5),i=!0;"find"in[]&&Array(1).find((function(){i=!1})),r(r.P+r.F*i,"Array",{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(46)("find")},function(e,t,n){"use strict";var r=n(2),o=n(40)(6),i="findIndex",a=!0;i in[]&&Array(1)[i]((function(){a=!1})),r(r.P+r.F*a,"Array",{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(46)(i)},function(e,t,n){n(55)("Array")},function(e,t,n){var r=n(8),o=n(100),i=n(18).f,a=n(54).f,u=n(80),c=n(74),l=r.RegExp,s=l,f=l.prototype,d=/a/g,p=/a/g,h=new l(d)!==d;if(n(15)&&(!h||n(9)((function(){return p[n(13)("match")]=!1,l(d)!=d||l(p)==p||"/a/i"!=l(d,"i")})))){l=function(e,t){var n=this instanceof l,r=u(e),i=void 0===t;return!n&&r&&e.constructor===l&&i?e:o(h?new s(r&&!i?e.source:e,t):s((r=e instanceof l)?e.source:e,r&&i?c.call(e):t),n?this:f,l)};for(var v=function(e){e in l||i(l,e,{configurable:!0,get:function(){return s[e]},set:function(t){s[e]=t}})},m=a(s),g=0;m.length>g;)v(m[g++]);f.constructor=l,l.prototype=f,n(24)(r,"RegExp",l)}n(55)("RegExp")},function(e,t,n){"use strict";n(150);var r=n(7),o=n(74),i=n(15),a=/./.toString,u=function(e){n(24)(RegExp.prototype,"toString",e,!0)};n(9)((function(){return"/a/b"!=a.call({source:"a",flags:"b"})}))?u((function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!i&&e instanceof RegExp?o.call(e):void 0)})):"toString"!=a.name&&u((function(){return a.call(this)}))},function(e,t,n){"use strict";var r=n(7),o=n(14),i=n(115),a=n(82);n(83)("match",1,(function(e,t,n,u){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=u(n,e,this);if(t.done)return t.value;var c=r(e),l=String(this);if(!c.global)return a(c,l);var s=c.unicode;c.lastIndex=0;for(var f,d=[],p=0;null!==(f=a(c,l));){var h=String(f[0]);d[p]=h,""===h&&(c.lastIndex=i(l,o(c.lastIndex),s)),p++}return 0===p?null:d}]}))},function(e,t,n){"use strict";var r=n(7),o=n(19),i=n(14),a=n(35),u=n(115),c=n(82),l=Math.max,s=Math.min,f=Math.floor,d=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(83)("replace",2,(function(e,t,n,h){return[function(r,o){var i=e(this),a=null==r?void 0:r[t];return void 0!==a?a.call(r,i,o):n.call(String(i),r,o)},function(e,t){var o=h(n,e,this,t);if(o.done)return o.value;var f=r(e),d=String(this),p="function"==typeof t;p||(t=String(t));var m=f.global;if(m){var g=f.unicode;f.lastIndex=0}for(var y=[];;){var b=c(f,d);if(null===b)break;if(y.push(b),!m)break;""===String(b[0])&&(f.lastIndex=u(d,i(f.lastIndex),g))}for(var w,x="",E=0,S=0;S<y.length;S++){b=y[S];for(var k=String(b[0]),O=l(s(a(b.index),d.length),0),T=[],j=1;j<b.length;j++)T.push(void 0===(w=b[j])?w:String(w));var C=b.groups;if(p){var P=[k].concat(T,O,d);void 0!==C&&P.push(C);var _=String(t.apply(void 0,P))}else _=v(k,d,O,T,C,t);O>=E&&(x+=d.slice(E,O)+_,E=O+k.length)}return x+d.slice(E)}];function v(e,t,r,i,a,u){var c=r+e.length,l=i.length,s=p;return void 0!==a&&(a=o(a),s=d),n.call(u,s,(function(n,o){var u;switch(o.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(c);case"<":u=a[o.slice(1,-1)];break;default:var s=+o;if(0===s)return n;if(s>l){var d=f(s/10);return 0===d?n:d<=l?void 0===i[d-1]?o.charAt(1):i[d-1]+o.charAt(1):n}u=i[s-1]}return void 0===u?"":u}))}}))},function(e,t,n){"use strict";var r=n(7),o=n(136),i=n(82);n(83)("search",1,(function(e,t,n,a){return[function(n){var r=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=a(n,e,this);if(t.done)return t.value;var u=r(e),c=String(this),l=u.lastIndex;o(l,0)||(u.lastIndex=0);var s=i(u,c);return o(u.lastIndex,l)||(u.lastIndex=l),null===s?-1:s.index}]}))},function(e,t,n){"use strict";var r=n(80),o=n(7),i=n(75),a=n(115),u=n(14),c=n(82),l=n(114),s=n(9),f=Math.min,d=[].push,p=!s((function(){RegExp(4294967295,"y")}));n(83)("split",2,(function(e,t,n,s){var h;return h="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,t){var o=String(this);if(void 0===e&&0===t)return[];if(!r(e))return n.call(o,e,t);for(var i,a,u,c=[],s=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,p=void 0===t?4294967295:t>>>0,h=new RegExp(e.source,s+"g");(i=l.call(h,o))&&!((a=h.lastIndex)>f&&(c.push(o.slice(f,i.index)),i.length>1&&i.index<o.length&&d.apply(c,i.slice(1)),u=i[0].length,f=a,c.length>=p));)h.lastIndex===i.index&&h.lastIndex++;return f===o.length?!u&&h.test("")||c.push(""):c.push(o.slice(f)),c.length>p?c.slice(0,p):c}:"0".split(void 0,0).length?function(e,t){return void 0===e&&0===t?[]:n.call(this,e,t)}:n,[function(n,r){var o=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,o,r):h.call(String(o),n,r)},function(e,t){var r=s(h,e,this,t,h!==n);if(r.done)return r.value;var l=o(e),d=String(this),v=i(l,RegExp),m=l.unicode,g=(l.ignoreCase?"i":"")+(l.multiline?"m":"")+(l.unicode?"u":"")+(p?"y":"g"),y=new v(p?l:"^(?:"+l.source+")",g),b=void 0===t?4294967295:t>>>0;if(0===b)return[];if(0===d.length)return null===c(y,d)?[d]:[];for(var w=0,x=0,E=[];x<d.length;){y.lastIndex=p?x:0;var S,k=c(y,p?d:d.slice(x));if(null===k||(S=f(u(y.lastIndex+(p?0:x)),d.length))===w)x=a(d,x,m);else{if(E.push(d.slice(w,x)),E.length===b)return E;for(var O=1;O<=k.length-1;O++)if(E.push(k[O]),E.length===b)return E;x=w=S}}return E.push(d.slice(w)),E}]}))},function(e,t,n){"use strict";var r,o,i,a,u=n(44),c=n(8),l=n(33),s=n(65),f=n(2),d=n(10),p=n(22),h=n(56),v=n(57),m=n(75),g=n(116).set,y=n(117)(),b=n(118),w=n(151),x=n(84),E=n(152),S=c.TypeError,k=c.process,O=k&&k.versions,T=O&&O.v8||"",j=c.Promise,C="process"==s(k),P=function(){},_=o=b.f,R=!!function(){try{var e=j.resolve(1),t=(e.constructor={})[n(13)("species")]=function(e){e(P,P)};return(C||"function"==typeof PromiseRejectionEvent)&&e.then(P)instanceof t&&0!==T.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(e){}}(),N=function(e){var t;return!(!d(e)||"function"!=typeof(t=e.then))&&t},M=function(e,t){if(!e._n){e._n=!0;var n=e._c;y((function(){for(var r=e._v,o=1==e._s,i=0,a=function(t){var n,i,a,u=o?t.ok:t.fail,c=t.resolve,l=t.reject,s=t.domain;try{u?(o||(2==e._h&&L(e),e._h=1),!0===u?n=r:(s&&s.enter(),n=u(r),s&&(s.exit(),a=!0)),n===t.promise?l(S("Promise-chain cycle")):(i=N(n))?i.call(n,c,l):c(n)):l(r)}catch(e){s&&!a&&s.exit(),l(e)}};n.length>i;)a(n[i++]);e._c=[],e._n=!1,t&&!e._h&&A(e)}))}},A=function(e){g.call(c,(function(){var t,n,r,o=e._v,i=I(e);if(i&&(t=w((function(){C?k.emit("unhandledRejection",o,e):(n=c.onunhandledrejection)?n({promise:e,reason:o}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",o)})),e._h=C||I(e)?2:1),e._a=void 0,i&&t.e)throw t.v}))},I=function(e){return 1!==e._h&&0===(e._a||e._c).length},L=function(e){g.call(c,(function(){var t;C?k.emit("rejectionHandled",e):(t=c.onrejectionhandled)&&t({promise:e,reason:e._v})}))},F=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),M(t,!0))},D=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw S("Promise can't be resolved itself");(t=N(e))?y((function(){var r={_w:n,_d:!1};try{t.call(e,l(D,r,1),l(F,r,1))}catch(e){F.call(r,e)}})):(n._v=e,n._s=1,M(n,!1))}catch(e){F.call({_w:n,_d:!1},e)}}};R||(j=function(e){h(this,j,"Promise","_h"),p(e),r.call(this);try{e(l(D,this,1),l(F,this,1))}catch(e){F.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(58)(j.prototype,{then:function(e,t){var n=_(m(this,j));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=C?k.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&M(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=l(D,e,1),this.reject=l(F,e,1)},b.f=_=function(e){return e===j||e===a?new i(e):o(e)}),f(f.G+f.W+f.F*!R,{Promise:j}),n(64)(j,"Promise"),n(55)("Promise"),a=n(32).Promise,f(f.S+f.F*!R,"Promise",{reject:function(e){var t=_(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(u||!R),"Promise",{resolve:function(e){return E(u&&this===a?j:this,e)}}),f(f.S+f.F*!(R&&n(81)((function(e){j.all(e).catch(P)}))),"Promise",{all:function(e){var t=this,n=_(t),r=n.resolve,o=n.reject,i=w((function(){var n=[],i=0,a=1;v(e,!1,(function(e){var u=i++,c=!1;n.push(void 0),a++,t.resolve(e).then((function(e){c||(c=!0,n[u]=e,--a||r(n))}),o)})),--a||r(n)}));return i.e&&o(i.v),n.promise},race:function(e){var t=this,n=_(t),r=n.reject,o=w((function(){v(e,!1,(function(e){t.resolve(e).then(n.resolve,r)}))}));return o.e&&r(o.v),n.promise}})},function(e,t,n){"use strict";var r=n(157),o=n(59);n(85)("WeakSet",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(o(this,"WeakSet"),e,!0)}},r,!1,!0)},function(e,t,n){"use strict";var r=n(2),o=n(86),i=n(119),a=n(7),u=n(52),c=n(14),l=n(10),s=n(8).ArrayBuffer,f=n(75),d=i.ArrayBuffer,p=i.DataView,h=o.ABV&&s.isView,v=d.prototype.slice,m=o.VIEW;r(r.G+r.W+r.F*(s!==d),{ArrayBuffer:d}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(e){return h&&h(e)||l(e)&&m in e}}),r(r.P+r.U+r.F*n(9)((function(){return!new d(2).slice(1,void 0).byteLength})),"ArrayBuffer",{slice:function(e,t){if(void 0!==v&&void 0===t)return v.call(a(this),e);for(var n=a(this).byteLength,r=u(e,n),o=u(void 0===t?n:t,n),i=new(f(this,d))(c(o-r)),l=new p(this),s=new p(i),h=0;r<o;)s.setUint8(h++,l.getUint8(r++));return i}}),n(55)("ArrayBuffer")},function(e,t,n){var r=n(2);r(r.G+r.W+r.F*!n(86).ABV,{DataView:n(119).DataView})},function(e,t,n){n(41)("Int8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(41)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(41)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}),!0)},function(e,t,n){n(41)("Int16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(41)("Uint16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(41)("Int32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(41)("Uint32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(41)("Float32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(41)("Float64",8,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){var r=n(2),o=n(22),i=n(7),a=(n(8).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!n(9)((function(){a((function(){}))})),"Reflect",{apply:function(e,t,n){var r=o(e),c=i(n);return a?a(r,t,c):u.call(r,t,c)}})},function(e,t,n){var r=n(2),o=n(53),i=n(22),a=n(7),u=n(10),c=n(9),l=n(137),s=(n(8).Reflect||{}).construct,f=c((function(){function e(){}return!(s((function(){}),[],e)instanceof e)})),d=!c((function(){s((function(){}))}));r(r.S+r.F*(f||d),"Reflect",{construct:function(e,t){i(e),a(t);var n=arguments.length<3?e:i(arguments[2]);if(d&&!f)return s(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(l.apply(e,r))}var c=n.prototype,p=o(u(c)?c:Object.prototype),h=Function.apply.call(e,p,t);return u(h)?h:p}})},function(e,t,n){var r=n(18),o=n(2),i=n(7),a=n(37);o(o.S+o.F*n(9)((function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(e,t,n){i(e),t=a(t,!0),i(n);try{return r.f(e,t,n),!0}catch(e){return!1}}})},function(e,t,n){var r=n(2),o=n(29).f,i=n(7);r(r.S,"Reflect",{deleteProperty:function(e,t){var n=o(i(e),t);return!(n&&!n.configurable)&&delete e[t]}})},function(e,t,n){"use strict";var r=n(2),o=n(7),i=function(e){this._t=o(e),this._i=0;var t,n=this._k=[];for(t in e)n.push(t)};n(105)(i,"Object",(function(){var e,t=this._k;do{if(this._i>=t.length)return{value:void 0,done:!0}}while(!((e=t[this._i++])in this._t));return{value:e,done:!1}})),r(r.S,"Reflect",{enumerate:function(e){return new i(e)}})},function(e,t,n){var r=n(29),o=n(30),i=n(27),a=n(2),u=n(10),c=n(7);a(a.S,"Reflect",{get:function e(t,n){var a,l,s=arguments.length<3?t:arguments[2];return c(t)===s?t[n]:(a=r.f(t,n))?i(a,"value")?a.value:void 0!==a.get?a.get.call(s):void 0:u(l=o(t))?e(l,n,s):void 0}})},function(e,t,n){var r=n(29),o=n(2),i=n(7);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(e,t){return r.f(i(e),t)}})},function(e,t,n){var r=n(2),o=n(30),i=n(7);r(r.S,"Reflect",{getPrototypeOf:function(e){return o(i(e))}})},function(e,t,n){var r=n(2);r(r.S,"Reflect",{has:function(e,t){return t in e}})},function(e,t,n){var r=n(2),o=n(7),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(e){return o(e),!i||i(e)}})},function(e,t,n){var r=n(2);r(r.S,"Reflect",{ownKeys:n(159)})},function(e,t,n){var r=n(2),o=n(7),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(e){o(e);try{return i&&i(e),!0}catch(e){return!1}}})},function(e,t,n){var r=n(18),o=n(29),i=n(30),a=n(27),u=n(2),c=n(49),l=n(7),s=n(10);u(u.S,"Reflect",{set:function e(t,n,u){var f,d,p=arguments.length<4?t:arguments[3],h=o.f(l(t),n);if(!h){if(s(d=i(t)))return e(d,n,u,p);h=c(0)}if(a(h,"value")){if(!1===h.writable||!s(p))return!1;if(f=o.f(p,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=u,r.f(p,n,f)}else r.f(p,n,c(0,u));return!0}return void 0!==h.set&&(h.set.call(p,u),!0)}})},function(e,t,n){var r=n(2),o=n(98);o&&r(r.S,"Reflect",{setPrototypeOf:function(e,t){o.check(e,t);try{return o.set(e,t),!0}catch(e){return!1}}})},function(e,t,n){"use strict";var r=n(2),o=n(76)(!0);r(r.P,"Array",{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),n(46)("includes")},function(e,t,n){"use strict";var r=n(2),o=n(160),i=n(19),a=n(14),u=n(22),c=n(111);r(r.P,"Array",{flatMap:function(e){var t,n,r=i(this);return u(e),t=a(r.length),n=c(r,0),o(n,r,r,t,0,1,e,arguments[1]),n}}),n(46)("flatMap")},function(e,t,n){"use strict";var r=n(2),o=n(160),i=n(19),a=n(14),u=n(35),c=n(111);r(r.P,"Array",{flatten:function(){var e=arguments[0],t=i(this),n=a(t.length),r=c(t,0);return o(r,t,t,n,0,void 0===e?1:u(e)),r}}),n(46)("flatten")},function(e,t,n){"use strict";var r=n(2),o=n(79)(!0);r(r.P,"String",{at:function(e){return o(this,e)}})},function(e,t,n){"use strict";var r=n(2),o=n(161),i=n(84),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*a,"String",{padStart:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!0)}})},function(e,t,n){"use strict";var r=n(2),o=n(161),i=n(84),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*a,"String",{padEnd:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0,!1)}})},function(e,t,n){"use strict";n(66)("trimLeft",(function(e){return function(){return e(this,1)}}),"trimStart")},function(e,t,n){"use strict";n(66)("trimRight",(function(e){return function(){return e(this,2)}}),"trimEnd")},function(e,t,n){"use strict";var r=n(2),o=n(38),i=n(14),a=n(80),u=n(74),c=RegExp.prototype,l=function(e,t){this._r=e,this._s=t};n(105)(l,"RegExp String",(function(){var e=this._r.exec(this._s);return{value:e,done:null===e}})),r(r.P,"String",{matchAll:function(e){if(o(this),!a(e))throw TypeError(e+" is not a regexp!");var t=String(this),n="flags"in c?String(e.flags):u.call(e),r=new RegExp(e.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=i(e.lastIndex),new l(r,t)}})},function(e,t,n){n(94)("asyncIterator")},function(e,t,n){n(94)("observable")},function(e,t,n){var r=n(2),o=n(159),i=n(28),a=n(29),u=n(109);r(r.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,n,r=i(e),c=a.f,l=o(r),s={},f=0;l.length>f;)void 0!==(n=c(r,t=l[f++]))&&u(s,t,n);return s}})},function(e,t,n){var r=n(2),o=n(162)(!1);r(r.S,"Object",{values:function(e){return o(e)}})},function(e,t,n){var r=n(2),o=n(162)(!0);r(r.S,"Object",{entries:function(e){return o(e)}})},function(e,t,n){"use strict";var r=n(2),o=n(19),i=n(22),a=n(18);n(15)&&r(r.P+n(87),"Object",{__defineGetter__:function(e,t){a.f(o(this),e,{get:i(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(2),o=n(19),i=n(22),a=n(18);n(15)&&r(r.P+n(87),"Object",{__defineSetter__:function(e,t){a.f(o(this),e,{set:i(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(2),o=n(19),i=n(37),a=n(30),u=n(29).f;n(15)&&r(r.P+n(87),"Object",{__lookupGetter__:function(e){var t,n=o(this),r=i(e,!0);do{if(t=u(n,r))return t.get}while(n=a(n))}})},function(e,t,n){"use strict";var r=n(2),o=n(19),i=n(37),a=n(30),u=n(29).f;n(15)&&r(r.P+n(87),"Object",{__lookupSetter__:function(e){var t,n=o(this),r=i(e,!0);do{if(t=u(n,r))return t.set}while(n=a(n))}})},function(e,t,n){var r=n(2);r(r.P+r.R,"Map",{toJSON:n(163)("Map")})},function(e,t,n){var r=n(2);r(r.P+r.R,"Set",{toJSON:n(163)("Set")})},function(e,t,n){n(88)("Map")},function(e,t,n){n(88)("Set")},function(e,t,n){n(88)("WeakMap")},function(e,t,n){n(88)("WeakSet")},function(e,t,n){n(89)("Map")},function(e,t,n){n(89)("Set")},function(e,t,n){n(89)("WeakMap")},function(e,t,n){n(89)("WeakSet")},function(e,t,n){var r=n(2);r(r.G,{global:n(8)})},function(e,t,n){var r=n(2);r(r.S,"System",{global:n(8)})},function(e,t,n){var r=n(2),o=n(34);r(r.S,"Error",{isError:function(e){return"Error"===o(e)}})},function(e,t,n){var r=n(2);r(r.S,"Math",{clamp:function(e,t,n){return Math.min(n,Math.max(t,e))}})},function(e,t,n){var r=n(2);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(e,t,n){var r=n(2),o=180/Math.PI;r(r.S,"Math",{degrees:function(e){return e*o}})},function(e,t,n){var r=n(2),o=n(165),i=n(144);r(r.S,"Math",{fscale:function(e,t,n,r,a){return i(o(e,t,n,r,a))}})},function(e,t,n){var r=n(2);r(r.S,"Math",{iaddh:function(e,t,n,r){var o=e>>>0,i=n>>>0;return(t>>>0)+(r>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},function(e,t,n){var r=n(2);r(r.S,"Math",{isubh:function(e,t,n,r){var o=e>>>0,i=n>>>0;return(t>>>0)-(r>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},function(e,t,n){var r=n(2);r(r.S,"Math",{imulh:function(e,t){var n=+e,r=+t,o=65535&n,i=65535&r,a=n>>16,u=r>>16,c=(a*i>>>0)+(o*i>>>16);return a*u+(c>>16)+((o*u>>>0)+(65535&c)>>16)}})},function(e,t,n){var r=n(2);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(e,t,n){var r=n(2),o=Math.PI/180;r(r.S,"Math",{radians:function(e){return e*o}})},function(e,t,n){var r=n(2);r(r.S,"Math",{scale:n(165)})},function(e,t,n){var r=n(2);r(r.S,"Math",{umulh:function(e,t){var n=+e,r=+t,o=65535&n,i=65535&r,a=n>>>16,u=r>>>16,c=(a*i>>>0)+(o*i>>>16);return a*u+(c>>>16)+((o*u>>>0)+(65535&c)>>>16)}})},function(e,t,n){var r=n(2);r(r.S,"Math",{signbit:function(e){return(e=+e)!=e?e:0==e?1/e==1/0:e>0}})},function(e,t,n){"use strict";var r=n(2),o=n(32),i=n(8),a=n(75),u=n(152);r(r.P+r.R,"Promise",{finally:function(e){var t=a(this,o.Promise||i.Promise),n="function"==typeof e;return this.then(n?function(n){return u(t,e()).then((function(){return n}))}:e,n?function(n){return u(t,e()).then((function(){throw n}))}:e)}})},function(e,t,n){"use strict";var r=n(2),o=n(118),i=n(151);r(r.S,"Promise",{try:function(e){var t=o.f(this),n=i(e);return(n.e?t.reject:t.resolve)(n.v),t.promise}})},function(e,t,n){var r=n(42),o=n(7),i=r.key,a=r.set;r.exp({defineMetadata:function(e,t,n,r){a(e,t,o(n),i(r))}})},function(e,t,n){var r=n(42),o=n(7),i=r.key,a=r.map,u=r.store;r.exp({deleteMetadata:function(e,t){var n=arguments.length<3?void 0:i(arguments[2]),r=a(o(t),n,!1);if(void 0===r||!r.delete(e))return!1;if(r.size)return!0;var c=u.get(t);return c.delete(n),!!c.size||u.delete(t)}})},function(e,t,n){var r=n(42),o=n(7),i=n(30),a=r.has,u=r.get,c=r.key,l=function(e,t,n){if(a(e,t,n))return u(e,t,n);var r=i(t);return null!==r?l(e,r,n):void 0};r.exp({getMetadata:function(e,t){return l(e,o(t),arguments.length<3?void 0:c(arguments[2]))}})},function(e,t,n){var r=n(155),o=n(164),i=n(42),a=n(7),u=n(30),c=i.keys,l=i.key,s=function(e,t){var n=c(e,t),i=u(e);if(null===i)return n;var a=s(i,t);return a.length?n.length?o(new r(n.concat(a))):a:n};i.exp({getMetadataKeys:function(e){return s(a(e),arguments.length<2?void 0:l(arguments[1]))}})},function(e,t,n){var r=n(42),o=n(7),i=r.get,a=r.key;r.exp({getOwnMetadata:function(e,t){return i(e,o(t),arguments.length<3?void 0:a(arguments[2]))}})},function(e,t,n){var r=n(42),o=n(7),i=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(e){return i(o(e),arguments.length<2?void 0:a(arguments[1]))}})},function(e,t,n){var r=n(42),o=n(7),i=n(30),a=r.has,u=r.key,c=function(e,t,n){if(a(e,t,n))return!0;var r=i(t);return null!==r&&c(e,r,n)};r.exp({hasMetadata:function(e,t){return c(e,o(t),arguments.length<3?void 0:u(arguments[2]))}})},function(e,t,n){var r=n(42),o=n(7),i=r.has,a=r.key;r.exp({hasOwnMetadata:function(e,t){return i(e,o(t),arguments.length<3?void 0:a(arguments[2]))}})},function(e,t,n){var r=n(42),o=n(7),i=n(22),a=r.key,u=r.set;r.exp({metadata:function(e,t){return function(n,r){u(e,t,(void 0!==r?o:i)(n),a(r))}}})},function(e,t,n){var r=n(2),o=n(117)(),i=n(8).process,a="process"==n(34)(i);r(r.G,{asap:function(e){var t=a&&i.domain;o(t?t.bind(e):e)}})},function(e,t,n){"use strict";var r=n(2),o=n(8),i=n(32),a=n(117)(),u=n(13)("observable"),c=n(22),l=n(7),s=n(56),f=n(58),d=n(23),p=n(57),h=p.RETURN,v=function(e){return null==e?void 0:c(e)},m=function(e){var t=e._c;t&&(e._c=void 0,t())},g=function(e){return void 0===e._o},y=function(e){g(e)||(e._o=void 0,m(e))},b=function(e,t){l(e),this._c=void 0,this._o=e,e=new w(this);try{var n=t(e),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:c(n),this._c=n)}catch(t){return void e.error(t)}g(this)&&m(this)};b.prototype=f({},{unsubscribe:function(){y(this)}});var w=function(e){this._s=e};w.prototype=f({},{next:function(e){var t=this._s;if(!g(t)){var n=t._o;try{var r=v(n.next);if(r)return r.call(n,e)}catch(e){try{y(t)}finally{throw e}}}},error:function(e){var t=this._s;if(g(t))throw e;var n=t._o;t._o=void 0;try{var r=v(n.error);if(!r)throw e;e=r.call(n,e)}catch(e){try{m(t)}finally{throw e}}return m(t),e},complete:function(e){var t=this._s;if(!g(t)){var n=t._o;t._o=void 0;try{var r=v(n.complete);e=r?r.call(n,e):void 0}catch(e){try{m(t)}finally{throw e}}return m(t),e}}});var x=function(e){s(this,x,"Observable","_f")._f=c(e)};f(x.prototype,{subscribe:function(e){return new b(e,this._f)},forEach:function(e){var t=this;return new(i.Promise||o.Promise)((function(n,r){c(e);var o=t.subscribe({next:function(t){try{return e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:n})}))}}),f(x,{from:function(e){var t="function"==typeof this?this:x,n=v(l(e)[u]);if(n){var r=l(n.call(e));return r.constructor===t?r:new t((function(e){return r.subscribe(e)}))}return new t((function(t){var n=!1;return a((function(){if(!n){try{if(p(e,!1,(function(e){if(t.next(e),n)return h}))===h)return}catch(e){if(n)throw e;return void t.error(e)}t.complete()}})),function(){n=!0}}))},of:function(){for(var e=0,t=arguments.length,n=new Array(t);e<t;)n[e]=arguments[e++];return new("function"==typeof this?this:x)((function(e){var t=!1;return a((function(){if(!t){for(var r=0;r<n.length;++r)if(e.next(n[r]),t)return;e.complete()}})),function(){t=!0}}))}}),d(x.prototype,u,(function(){return this})),r(r.G,{Observable:x}),n(55)("Observable")},function(e,t,n){var r=n(8),o=n(2),i=n(84),a=[].slice,u=/MSIE .\./.test(i),c=function(e){return function(t,n){var r=arguments.length>2,o=!!r&&a.call(arguments,2);return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,o)}:t,n)}};o(o.G+o.B+o.F*u,{setTimeout:c(r.setTimeout),setInterval:c(r.setInterval)})},function(e,t,n){var r=n(2),o=n(116);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(e,t,n){for(var r=n(113),o=n(51),i=n(24),a=n(8),u=n(23),c=n(67),l=n(13),s=l("iterator"),f=l("toStringTag"),d=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(p),v=0;v<h.length;v++){var m,g=h[v],y=p[g],b=a[g],w=b&&b.prototype;if(w&&(w[s]||u(w,s,d),w[f]||u(w,f,g),c[g]=d,y))for(m in r)w[m]||i(w,m,r[m],!0)}},function(e,t,n){(function(t){!function(t){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag",l="object"==typeof e,s=t.regeneratorRuntime;if(s)l&&(e.exports=s);else{(s=t.regeneratorRuntime=l?e.exports:{}).wrap=w;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",v={},m={};m[a]=function(){return this};var g=Object.getPrototypeOf,y=g&&g(g(R([])));y&&y!==r&&o.call(y,a)&&(m=y);var b=k.prototype=E.prototype=Object.create(m);S.prototype=b.constructor=k,k.constructor=S,k[c]=S.displayName="GeneratorFunction",s.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===S||"GeneratorFunction"===(t.displayName||t.name))},s.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,k):(e.__proto__=k,c in e||(e[c]="GeneratorFunction")),e.prototype=Object.create(b),e},s.awrap=function(e){return{__await:e}},O(T.prototype),T.prototype[u]=function(){return this},s.AsyncIterator=T,s.async=function(e,t,n,r){var o=new T(w(e,t,n,r));return s.isGeneratorFunction(t)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},O(b),b[c]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},s.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},s.values=R,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(P),!e)for(var t in this)"t"===t.charAt(0)&&o.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=n)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(r,o){return u.type="throw",u.arg=e,t.next=r,o&&(t.method="next",t.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var c=o.call(a,"catchLoc"),l=o.call(a,"finallyLoc");if(c&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),P(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;P(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:R(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function w(e,t,n,r){var o=t&&t.prototype instanceof E?t:E,i=Object.create(o.prototype),a=new _(r||[]);return i._invoke=function(e,t,n){var r=f;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return N()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var u=j(a,n);if(u){if(u===v)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var c=x(e,t,n);if("normal"===c.type){if(r=n.done?h:d,c.arg===v)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=h,n.method="throw",n.arg=c.arg)}}}(e,n,a),i}function x(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function E(){}function S(){}function k(){}function O(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function T(e){function n(t,r,i,a){var u=x(e[t],e,r);if("throw"!==u.type){var c=u.arg,l=c.value;return l&&"object"==typeof l&&o.call(l,"__await")?Promise.resolve(l.__await).then((function(e){n("next",e,i,a)}),(function(e){n("throw",e,i,a)})):Promise.resolve(l).then((function(e){c.value=e,i(c)}),a)}a(u.arg)}var r;"object"==typeof t.process&&t.process.domain&&(n=t.process.domain.bind(n)),this._invoke=function(e,t){function o(){return new Promise((function(r,o){n(e,t,r,o)}))}return r=r?r.then(o,o):o()}}function j(e,t){var r=e.iterator[t.method];if(r===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=n,j(e,t),"throw"===t.method))return v;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=x(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,v;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=n),t.delegate=null,v):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function R(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,i=function t(){for(;++r<e.length;)if(o.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=n,t.done=!0,t};return i.next=i}}return{next:N}}function N(){return{value:n,done:!0}}}("object"==typeof t?t:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,n(63))},function(e,t,n){n(391),e.exports=n(32).RegExp.escape},function(e,t,n){var r=n(2),o=n(392)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(e){return o(e)}})},function(e,t){e.exports=function(e,t){var n=t===Object(t)?function(e){return t[e]}:t;return function(t){return String(t).replace(e,n)}}},function(e,t,n){"use strict";
/** @license React v16.11.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(166),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,c=o?Symbol.for("react.strict_mode"):60108,l=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113;o&&Symbol.for("react.suspense_list");var h=o?Symbol.for("react.memo"):60115,v=o?Symbol.for("react.lazy"):60116;o&&Symbol.for("react.fundamental"),o&&Symbol.for("react.responder"),o&&Symbol.for("react.scope");var m="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}function x(){}function E(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(g(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var S=E.prototype=new x;S.constructor=E,r(S,w.prototype),S.isPureReactComponent=!0;var k={current:null},O={current:null},T=Object.prototype.hasOwnProperty,j={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)T.call(t,r)&&!j.hasOwnProperty(r)&&(o[r]=t[r]);var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){for(var l=Array(c),s=0;s<c;s++)l[s]=arguments[s+2];o.children=l}if(e&&e.defaultProps)for(r in c=e.defaultProps)void 0===o[r]&&(o[r]=c[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:O.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var _=/\/+/g,R=[];function N(e,t,n,r){if(R.length){var o=R.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>R.length&&R.push(e)}function A(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var c=!1;if(null===t)c=!0;else switch(u){case"string":case"number":c=!0;break;case"object":switch(t.$$typeof){case i:case a:c=!0}}if(c)return r(o,t,""===n?"."+I(t,0):n),1;if(c=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var s=n+I(u=t[l],l);c+=e(u,s,r,o)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=m&&t[m]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),l=0;!(u=t.next()).done;)c+=e(u=u.value,s=n+I(u,l++),r,o);else if("object"===u)throw r=""+t,Error(g(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return c}(e,"",t,n)}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function F(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?D(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(_,"$&/")+"/")+n)),r.push(e))}function D(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(_,"$&/")+"/"),A(e,F,t=N(t,i,r,o)),M(t)}function z(){var e=k.current;if(null===e)throw Error(g(321));return e}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return D(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;A(e,L,t=N(null,null,t,n)),M(t)},count:function(e){return A(e,(function(){return null}),null)},toArray:function(e){var t=[];return D(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(g(143));return e}},createRef:function(){return{current:null}},Component:w,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:d,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return z().useCallback(e,t)},useContext:function(e,t){return z().useContext(e,t)},useEffect:function(e,t){return z().useEffect(e,t)},useImperativeHandle:function(e,t,n){return z().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return z().useLayoutEffect(e,t)},useMemo:function(e,t){return z().useMemo(e,t)},useReducer:function(e,t,n){return z().useReducer(e,t,n)},useRef:function(e){return z().useRef(e)},useState:function(e){return z().useState(e)},Fragment:u,Profiler:l,StrictMode:c,Suspense:p,createElement:C,cloneElement:function(e,t,n){if(null==e)throw Error(g(267,e));var o=r({},e.props),a=e.key,u=e.ref,c=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,c=O.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(s in t)T.call(t,s)&&!j.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==l?l[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){l=Array(s);for(var f=0;f<s;f++)l[f]=arguments[f+2];o.children=l}return{$$typeof:i,type:e.type,key:a,ref:u,props:o,_owner:c}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.11.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:k,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:O,IsSomeRendererActing:{current:!1},assign:r}},W={default:U},B=W&&U||W;e.exports=B.default||B},function(e,t,n){"use strict";
/** @license React v16.11.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(166),i=n(395);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var u=null,c={};function l(){if(u)for(var e in c){var t=c[e],n=u.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!f[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in f[n]=t,n=t.eventTypes){var o=void 0,i=n[r],l=t,p=r;if(d.hasOwnProperty(p))throw Error(a(99,p));d[p]=i;var h=i.phasedRegistrationNames;if(h){for(o in h)h.hasOwnProperty(o)&&s(h[o],l,p);o=!0}else i.registrationName?(s(i.registrationName,l,p),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function s(e,t,n){if(p[e])throw Error(a(100,e));p[e]=t,h[e]=t.eventTypes[n].dependencies}var f=[],d={},p={},h={};function v(e,t,n,r,o,i,a,u,c){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var m=!1,g=null,y=!1,b=null,w={onError:function(e){m=!0,g=e}};function x(e,t,n,r,o,i,a,u,c){m=!1,g=null,v.apply(w,arguments)}var E=null,S=null,k=null;function O(e,t,n){var r=e.type||"unknown-event";e.currentTarget=k(n),function(e,t,n,r,o,i,u,c,l){if(x.apply(this,arguments),m){if(!m)throw Error(a(198));var s=g;m=!1,g=null,y||(y=!0,b=s)}}(r,t,void 0,e),e.currentTarget=null}function T(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function j(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var C=null;function P(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)O(e,t[r],n[r]);else t&&O(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function _(e){if(null!==e&&(C=T(C,e)),e=C,C=null,e){if(j(e,P),C)throw Error(a(95));if(y)throw e=b,y=!1,b=null,e}}var R={injectEventPluginOrder:function(e){if(u)throw Error(a(101));u=Array.prototype.slice.call(e),l()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!c.hasOwnProperty(t)||c[t]!==r){if(c[t])throw Error(a(102,t));c[t]=r,n=!0}}n&&l()}};function N(e,t){var n=e.stateNode;if(!n)return null;var r=E(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var M=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;M.hasOwnProperty("ReactCurrentDispatcher")||(M.ReactCurrentDispatcher={current:null}),M.hasOwnProperty("ReactCurrentBatchConfig")||(M.ReactCurrentBatchConfig={suspense:null});var A=/^(.*)[\\\/]/,I="function"==typeof Symbol&&Symbol.for,L=I?Symbol.for("react.element"):60103,F=I?Symbol.for("react.portal"):60106,D=I?Symbol.for("react.fragment"):60107,z=I?Symbol.for("react.strict_mode"):60108,U=I?Symbol.for("react.profiler"):60114,W=I?Symbol.for("react.provider"):60109,B=I?Symbol.for("react.context"):60110,H=I?Symbol.for("react.concurrent_mode"):60111,V=I?Symbol.for("react.forward_ref"):60112,$=I?Symbol.for("react.suspense"):60113,q=I?Symbol.for("react.suspense_list"):60120,G=I?Symbol.for("react.memo"):60115,K=I?Symbol.for("react.lazy"):60116;I&&Symbol.for("react.fundamental"),I&&Symbol.for("react.responder"),I&&Symbol.for("react.scope");var Y="function"==typeof Symbol&&Symbol.iterator;function Q(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=Y&&e[Y]||e["@@iterator"])?e:null}function X(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case D:return"Fragment";case F:return"Portal";case U:return"Profiler";case z:return"StrictMode";case $:return"Suspense";case q:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case B:return"Context.Consumer";case W:return"Context.Provider";case V:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case G:return X(e.type);case K:if(e=1===e._status?e._result:null)return X(e)}return null}function J(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=X(e.type);n=null,r&&(n=X(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(A,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}var Z=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=S(e)){if("function"!=typeof ee)throw Error(a(280));var t=E(e.stateNode);ee(e.stateNode,e.type,t)}}function oe(e){te?ne?ne.push(e):ne=[e]:te=e}function ie(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ae(e,t){return e(t)}function ue(e,t,n,r){return e(t,n,r)}function ce(){}var le=ae,se=!1,fe=!1;function de(){null===te&&null===ne||(ce(),ie())}new Map;var pe=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,he=Object.prototype.hasOwnProperty,ve={},me={};function ge(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var ye={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){ye[e]=new ge(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];ye[t]=new ge(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){ye[e]=new ge(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){ye[e]=new ge(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){ye[e]=new ge(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){ye[e]=new ge(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){ye[e]=new ge(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){ye[e]=new ge(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){ye[e]=new ge(e,5,!1,e.toLowerCase(),null,!1)}));var be=/[\-:]([a-z])/g;function we(e){return e[1].toUpperCase()}function xe(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Ee(e,t,n,r){var o=ye.hasOwnProperty(t)?ye[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!he.call(me,e)||!he.call(ve,e)&&(pe.test(e)?me[e]=!0:(ve[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Se(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ke(e){e._valueTracker||(e._valueTracker=function(e){var t=Se(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Oe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Se(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Te(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function je(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=xe(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ce(e,t){null!=(t=t.checked)&&Ee(e,"checked",t,!1)}function Pe(e,t){Ce(e,t);var n=xe(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Re(e,t.type,n):t.hasOwnProperty("defaultValue")&&Re(e,t.type,xe(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function _e(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Re(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ne(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Me(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+xe(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ae(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ie(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(a(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(a(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:xe(n)}}function Le(e,t){var n=xe(t.value),r=xe(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Fe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(be,we);ye[t]=new ge(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(be,we);ye[t]=new ge(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(be,we);ye[t]=new ge(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){ye[e]=new ge(e,1,!1,e.toLowerCase(),null,!1)})),ye.xlinkHref=new ge("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){ye[e]=new ge(e,1,!1,e.toLowerCase(),null,!0)}));var De={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function ze(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ze(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var We,Be=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==De.svg||"innerHTML"in e)e.innerHTML=t;else{for((We=We||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=We.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function He(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ve(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var $e={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},qe={},Ge={};function Ke(e){if(qe[e])return qe[e];if(!$e[e])return e;var t,n=$e[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ge)return qe[e]=n[t];return e}Z&&(Ge=document.createElement("div").style,"AnimationEvent"in window||(delete $e.animationend.animation,delete $e.animationiteration.animation,delete $e.animationstart.animation),"TransitionEvent"in window||delete $e.transitionend.transition);var Ye=Ke("animationend"),Qe=Ke("animationiteration"),Xe=Ke("animationstart"),Je=Ke("transitionend"),Ze="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function et(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function tt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function nt(e){if(et(e)!==e)throw Error(a(188))}function rt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=et(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return nt(o),e;if(i===r)return nt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,c=o.child;c;){if(c===n){u=!0,n=o,r=i;break}if(c===r){u=!0,r=o,n=i;break}c=c.sibling}if(!u){for(c=i.child;c;){if(c===n){u=!0,n=i,r=o;break}if(c===r){u=!0,r=i,n=o;break}c=c.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var ot,it,at,ut=!1,ct=[],lt=null,st=null,ft=null,dt=new Map,pt=new Map,ht=[],vt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),mt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function gt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function yt(e,t){switch(e){case"focus":case"blur":lt=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":ft=null;break;case"pointerover":case"pointerout":dt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":pt.delete(t.pointerId)}}function bt(e,t,n,r,o){return null===e||e.nativeEvent!==o?(e=gt(t,n,r,o),null!==t&&(null!==(t=pr(t))&&it(t)),e):(e.eventSystemFlags|=r,e)}function wt(e){var t=dr(e.target);if(null!==t){var n=et(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=tt(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){at(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function xt(e){if(null!==e.blockedOn)return!1;var t=Rn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=pr(t);return null!==n&&it(n),e.blockedOn=t,!1}return!0}function Et(e,t,n){xt(e)&&n.delete(t)}function St(){for(ut=!1;0<ct.length;){var e=ct[0];if(null!==e.blockedOn){null!==(e=pr(e.blockedOn))&&ot(e);break}var t=Rn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:ct.shift()}null!==lt&&xt(lt)&&(lt=null),null!==st&&xt(st)&&(st=null),null!==ft&&xt(ft)&&(ft=null),dt.forEach(Et),pt.forEach(Et)}function kt(e,t){e.blockedOn===t&&(e.blockedOn=null,ut||(ut=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,St)))}function Ot(e){function t(t){return kt(t,e)}if(0<ct.length){kt(ct[0],e);for(var n=1;n<ct.length;n++){var r=ct[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==lt&&kt(lt,e),null!==st&&kt(st,e),null!==ft&&kt(ft,e),dt.forEach(t),pt.forEach(t),n=0;n<ht.length;n++)(r=ht[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ht.length&&null===(n=ht[0]).blockedOn;)wt(n),null===n.blockedOn&&ht.shift()}function Tt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function jt(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Ct(e,t,n){(t=N(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function Pt(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=jt(t);for(t=n.length;0<t--;)Ct(n[t],"captured",e);for(t=0;t<n.length;t++)Ct(n[t],"bubbled",e)}}function _t(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=N(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=T(n._dispatchListeners,t),n._dispatchInstances=T(n._dispatchInstances,e))}function Rt(e){e&&e.dispatchConfig.registrationName&&_t(e._targetInst,null,e)}function Nt(e){j(e,Pt)}function Mt(){return!0}function At(){return!1}function It(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Mt:At,this.isPropagationStopped=At,this}function Lt(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Ft(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Dt(e){e.eventPool=[],e.getPooled=Lt,e.release=Ft}o(It.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Mt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Mt)},persist:function(){this.isPersistent=Mt},isPersistent:At,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=At,this._dispatchInstances=this._dispatchListeners=null}}),It.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},It.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Dt(n),n},Dt(It);var zt=It.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Ut=It.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Wt=It.extend({view:null,detail:null}),Bt=Wt.extend({relatedTarget:null});function Ht(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Vt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},$t={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},qt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Gt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=qt[e])&&!!t[e]}function Kt(){return Gt}for(var Yt=Wt.extend({key:function(e){if(e.key){var t=Vt[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ht(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?$t[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Kt,charCode:function(e){return"keypress"===e.type?Ht(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ht(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Qt=0,Xt=0,Jt=!1,Zt=!1,en=Wt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Kt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Qt;return Qt=e.screenX,Jt?"mousemove"===e.type?e.screenX-t:0:(Jt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Xt;return Xt=e.screenY,Zt?"mousemove"===e.type?e.screenY-t:0:(Zt=!0,0)}}),tn=en.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),nn=en.extend({dataTransfer:null}),rn=Wt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Kt}),on=It.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),an=en.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),un=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[Ye,"animationEnd",2],[Qe,"animationIteration",2],[Xe,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Je,"transitionEnd",2],["waiting","waiting",2]],cn={},ln={},sn=0;sn<un.length;sn++){var fn=un[sn],dn=fn[0],pn=fn[1],hn=fn[2],vn="on"+(pn[0].toUpperCase()+pn.slice(1)),mn={phasedRegistrationNames:{bubbled:vn,captured:vn+"Capture"},dependencies:[dn],eventPriority:hn};cn[pn]=mn,ln[dn]=mn}var gn={eventTypes:cn,getEventPriority:function(e){return void 0!==(e=ln[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var o=ln[e];if(!o)return null;switch(e){case"keypress":if(0===Ht(n))return null;case"keydown":case"keyup":e=Yt;break;case"blur":case"focus":e=Bt;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=en;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=rn;break;case Ye:case Qe:case Xe:e=zt;break;case Je:e=on;break;case"scroll":e=Wt;break;case"wheel":e=an;break;case"copy":case"cut":case"paste":e=Ut;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=tn;break;default:e=It}return Nt(t=e.getPooled(o,t,n,r)),t}},yn=i.unstable_UserBlockingPriority,bn=i.unstable_runWithPriority,wn=gn.getEventPriority,xn=10,En=[];function Sn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=dr(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Tt(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=e.eventSystemFlags,u=null,c=0;c<f.length;c++){var l=f[c];l&&(l=l.extractEvents(r,t,i,o,a))&&(u=T(u,l))}_(u)}}var kn=!0;function On(e,t){Tn(t,e,!1)}function Tn(e,t,n){switch(wn(t)){case 0:var r=jn.bind(null,t,1);break;case 1:r=Cn.bind(null,t,1);break;default:r=_n.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function jn(e,t,n){se||ce();var r=_n,o=se;se=!0;try{ue(r,e,t,n)}finally{(se=o)||de()}}function Cn(e,t,n){bn(yn,_n.bind(null,e,t,n))}function Pn(e,t,n,r){if(En.length){var o=En.pop();o.topLevelType=e,o.eventSystemFlags=t,o.nativeEvent=n,o.targetInst=r,e=o}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=Sn,n=e,fe)t(n,void 0);else{fe=!0;try{le(t,n,void 0)}finally{fe=!1,de()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,En.length<xn&&En.push(e)}}function _n(e,t,n){if(kn)if(0<ct.length&&-1<vt.indexOf(e))e=gt(null,e,t,n),ct.push(e);else{var r=Rn(e,t,n);null===r?yt(e,n):-1<vt.indexOf(e)?(e=gt(r,e,t,n),ct.push(e)):function(e,t,n,r){switch(t){case"focus":return lt=bt(lt,e,t,n,r),!0;case"dragenter":return st=bt(st,e,t,n,r),!0;case"mouseover":return ft=bt(ft,e,t,n,r),!0;case"pointerover":var o=r.pointerId;return dt.set(o,bt(dt.get(o)||null,e,t,n,r)),!0;case"gotpointercapture":return o=r.pointerId,pt.set(o,bt(pt.get(o)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(yt(e,n),Pn(e,t,n,null))}}function Rn(e,t,n){var r=Tt(n);if(null!==(r=dr(r))){var o=et(r);if(null===o)r=null;else{var i=o.tag;if(13===i){if(null!==(r=tt(o)))return r;r=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}return Pn(e,t,n,r),null}function Nn(e){if(!Z)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var Mn=new("function"==typeof WeakMap?WeakMap:Map);function An(e){var t=Mn.get(e);return void 0===t&&(t=new Set,Mn.set(e,t)),t}function In(e,t,n){if(!n.has(e)){switch(e){case"scroll":Tn(t,"scroll",!0);break;case"focus":case"blur":Tn(t,"focus",!0),Tn(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":Nn(e)&&Tn(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ze.indexOf(e)&&On(e,t)}n.add(e)}}var Ln={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Fn=["Webkit","ms","Moz","O"];function Dn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Ln.hasOwnProperty(e)&&Ln[e]?(""+t).trim():t+"px"}function zn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=Dn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Ln).forEach((function(e){Fn.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Ln[t]=Ln[e]}))}));var Un=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Wn(e,t){if(t){if(Un[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function Bn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Hn(e,t){var n=An(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=h[t];for(var r=0;r<t.length;r++)In(t[r],e,n)}function Vn(){}function $n(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function qn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Gn(e,t){var n,r=qn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=qn(r)}}function Kn(){for(var e=window,t=$n();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=$n((e=t.contentWindow).document)}return t}function Yn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Qn="$",Xn="/$",Jn="$?",Zn="$!",er=null,tr=null;function nr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function rr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var or="function"==typeof setTimeout?setTimeout:void 0,ir="function"==typeof clearTimeout?clearTimeout:void 0;function ar(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function ur(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Qn||n===Zn||n===Jn){if(0===t)return e;t--}else n===Xn&&t++}e=e.previousSibling}return null}var cr=Math.random().toString(36).slice(2),lr="__reactInternalInstance$"+cr,sr="__reactEventHandlers$"+cr,fr="__reactContainere$"+cr;function dr(e){var t=e[lr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fr]||n[lr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ur(e);null!==e;){if(n=e[lr])return n;e=ur(e)}return t}n=(e=n).parentNode}return null}function pr(e){return!(e=e[lr]||e[fr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function hr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function vr(e){return e[sr]||null}var mr=null,gr=null,yr=null;function br(){if(yr)return yr;var e,t,n=gr,r=n.length,o="value"in mr?mr.value:mr.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return yr=o.slice(e,1<t?1-t:void 0)}var wr=It.extend({data:null}),xr=It.extend({data:null}),Er=[9,13,27,32],Sr=Z&&"CompositionEvent"in window,kr=null;Z&&"documentMode"in document&&(kr=document.documentMode);var Or=Z&&"TextEvent"in window&&!kr,Tr=Z&&(!Sr||kr&&8<kr&&11>=kr),jr=String.fromCharCode(32),Cr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Pr=!1;function _r(e,t){switch(e){case"keyup":return-1!==Er.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Rr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Nr=!1;var Mr={eventTypes:Cr,extractEvents:function(e,t,n,r){var o;if(Sr)e:{switch(e){case"compositionstart":var i=Cr.compositionStart;break e;case"compositionend":i=Cr.compositionEnd;break e;case"compositionupdate":i=Cr.compositionUpdate;break e}i=void 0}else Nr?_r(e,n)&&(i=Cr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=Cr.compositionStart);return i?(Tr&&"ko"!==n.locale&&(Nr||i!==Cr.compositionStart?i===Cr.compositionEnd&&Nr&&(o=br()):(gr="value"in(mr=r)?mr.value:mr.textContent,Nr=!0)),i=wr.getPooled(i,t,n,r),o?i.data=o:null!==(o=Rr(n))&&(i.data=o),Nt(i),o=i):o=null,(e=Or?function(e,t){switch(e){case"compositionend":return Rr(t);case"keypress":return 32!==t.which?null:(Pr=!0,jr);case"textInput":return(e=t.data)===jr&&Pr?null:e;default:return null}}(e,n):function(e,t){if(Nr)return"compositionend"===e||!Sr&&_r(e,t)?(e=br(),yr=gr=mr=null,Nr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Tr&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=xr.getPooled(Cr.beforeInput,t,n,r)).data=e,Nt(t)):t=null,null===o?t:null===t?o:[o,t]}},Ar={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ir(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ar[e.type]:"textarea"===t}var Lr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Fr(e,t,n){return(e=It.getPooled(Lr.change,e,t,n)).type="change",oe(n),Nt(e),e}var Dr=null,zr=null;function Ur(e){_(e)}function Wr(e){if(Oe(hr(e)))return e}function Br(e,t){if("change"===e)return t}var Hr=!1;function Vr(){Dr&&(Dr.detachEvent("onpropertychange",$r),zr=Dr=null)}function $r(e){if("value"===e.propertyName&&Wr(zr))if(e=Fr(zr,e,Tt(e)),se)_(e);else{se=!0;try{ae(Ur,e)}finally{se=!1,de()}}}function qr(e,t,n){"focus"===e?(Vr(),zr=n,(Dr=t).attachEvent("onpropertychange",$r)):"blur"===e&&Vr()}function Gr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Wr(zr)}function Kr(e,t){if("click"===e)return Wr(t)}function Yr(e,t){if("input"===e||"change"===e)return Wr(t)}Z&&(Hr=Nn("input")&&(!document.documentMode||9<document.documentMode));var Qr,Xr={eventTypes:Lr,_isInputEventSupported:Hr,extractEvents:function(e,t,n,r){var o=t?hr(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=Br;else if(Ir(o))if(Hr)a=Yr;else{a=Gr;var u=qr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Kr);if(a&&(a=a(e,t)))return Fr(a,n,r);u&&u(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Re(o,"number",o.value)}},Jr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Zr={eventTypes:Jr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?dr(t):null)&&(t!==(i=et(t))||5!==t.tag&&6!==t.tag)&&(t=null)):a=null,a===t)return null;if("mouseout"===e||"mouseover"===e)var u=en,c=Jr.mouseLeave,l=Jr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=tn,c=Jr.pointerLeave,l=Jr.pointerEnter,s="pointer");if(e=null==a?o:hr(a),o=null==t?o:hr(t),(c=u.getPooled(c,a,n,r)).type=s+"leave",c.target=e,c.relatedTarget=o,(r=u.getPooled(l,t,n,r)).type=s+"enter",r.target=o,r.relatedTarget=e,s=t,(u=a)&&s)e:{for(e=s,a=0,t=l=u;t;t=jt(t))a++;for(t=0,o=e;o;o=jt(o))t++;for(;0<a-t;)l=jt(l),a--;for(;0<t-a;)e=jt(e),t--;for(;a--;){if(l===e||l===e.alternate)break e;l=jt(l),e=jt(e)}l=null}else l=null;for(e=l,l=[];u&&u!==e&&(null===(a=u.alternate)||a!==e);)l.push(u),u=jt(u);for(u=[];s&&s!==e&&(null===(a=s.alternate)||a!==e);)u.push(s),s=jt(s);for(s=0;s<l.length;s++)_t(l[s],"bubbled",c);for(s=u.length;0<s--;)_t(u[s],"captured",r);return n===Qr?(Qr=null,[c]):(Qr=n,[c,r])}};var eo="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},to=Object.prototype.hasOwnProperty;function no(e,t){if(eo(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!to.call(t,n[r])||!eo(e[n[r]],t[n[r]]))return!1;return!0}var ro=Z&&"documentMode"in document&&11>=document.documentMode,oo={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},io=null,ao=null,uo=null,co=!1;function lo(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return co||null==io||io!==$n(n)?null:("selectionStart"in(n=io)&&Yn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},uo&&no(uo,n)?null:(uo=n,(e=It.getPooled(oo.select,ao,e,t)).type="select",e.target=io,Nt(e),e))}var so={eventTypes:oo,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=An(i),o=h.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?hr(t):window,e){case"focus":(Ir(i)||"true"===i.contentEditable)&&(io=i,ao=t,uo=null);break;case"blur":uo=ao=io=null;break;case"mousedown":co=!0;break;case"contextmenu":case"mouseup":case"dragend":return co=!1,lo(n,r);case"selectionchange":if(ro)break;case"keydown":case"keyup":return lo(n,r)}return null}};R.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),E=vr,S=pr,k=hr,R.injectEventPluginsByName({SimpleEventPlugin:gn,EnterLeaveEventPlugin:Zr,ChangeEventPlugin:Xr,SelectEventPlugin:so,BeforeInputEventPlugin:Mr}),new Set;var fo=[],po=-1;function ho(e){0>po||(e.current=fo[po],fo[po]=null,po--)}function vo(e,t){fo[++po]=e.current,e.current=t}var mo={},go={current:mo},yo={current:!1},bo=mo;function wo(e,t){var n=e.type.contextTypes;if(!n)return mo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function xo(e){return null!=(e=e.childContextTypes)}function Eo(e){ho(yo),ho(go)}function So(e){ho(yo),ho(go)}function ko(e,t,n){if(go.current!==mo)throw Error(a(168));vo(go,t),vo(yo,n)}function Oo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,X(t)||"Unknown",i));return o({},n,{},r)}function To(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||mo,bo=go.current,vo(go,t),vo(yo,yo.current),!0}function jo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(t=Oo(e,t,bo),r.__reactInternalMemoizedMergedChildContext=t,ho(yo),ho(go),vo(go,t)):ho(yo),vo(yo,n)}var Co=i.unstable_runWithPriority,Po=i.unstable_scheduleCallback,_o=i.unstable_cancelCallback,Ro=i.unstable_shouldYield,No=i.unstable_requestPaint,Mo=i.unstable_now,Ao=i.unstable_getCurrentPriorityLevel,Io=i.unstable_ImmediatePriority,Lo=i.unstable_UserBlockingPriority,Fo=i.unstable_NormalPriority,Do=i.unstable_LowPriority,zo=i.unstable_IdlePriority,Uo={},Wo=void 0!==No?No:function(){},Bo=null,Ho=null,Vo=!1,$o=Mo(),qo=1e4>$o?Mo:function(){return Mo()-$o};function Go(){switch(Ao()){case Io:return 99;case Lo:return 98;case Fo:return 97;case Do:return 96;case zo:return 95;default:throw Error(a(332))}}function Ko(e){switch(e){case 99:return Io;case 98:return Lo;case 97:return Fo;case 96:return Do;case 95:return zo;default:throw Error(a(332))}}function Yo(e,t){return e=Ko(e),Co(e,t)}function Qo(e,t,n){return e=Ko(e),Po(e,t,n)}function Xo(e){return null===Bo?(Bo=[e],Ho=Po(Io,Zo)):Bo.push(e),Uo}function Jo(){if(null!==Ho){var e=Ho;Ho=null,_o(e)}Zo()}function Zo(){if(!Vo&&null!==Bo){Vo=!0;var e=0;try{var t=Bo;Yo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Bo=null}catch(t){throw null!==Bo&&(Bo=Bo.slice(e+1)),Po(Io,Jo),t}finally{Vo=!1}}}var ei=3;function ti(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function ni(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ri={current:null},oi=null,ii=null,ai=null;function ui(){ai=ii=oi=null}function ci(e,t){var n=e.type._context;vo(ri,n._currentValue),n._currentValue=t}function li(e){var t=ri.current;ho(ri),e.type._context._currentValue=t}function si(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function fi(e,t){oi=e,ai=ii=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&($a=!0),e.firstContext=null)}function di(e,t){if(ai!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ai=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ii){if(null===oi)throw Error(a(308));ii=t,oi.dependencies={expirationTime:0,firstContext:t,responders:null}}else ii=ii.next=t;return e._currentValue}var pi=!1;function hi(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function vi(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function mi(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function gi(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function yi(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=hi(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=hi(e.memoizedState),o=n.updateQueue=hi(n.memoizedState)):r=e.updateQueue=vi(o):null===o&&(o=n.updateQueue=vi(r));null===o||r===o?gi(r,t):null===r.lastUpdate||null===o.lastUpdate?(gi(r,t),gi(o,t)):(gi(r,t),o.lastUpdate=t)}function bi(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=hi(e.memoizedState):wi(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function wi(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=vi(t)),t}function xi(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(i="function"==typeof(e=n.payload)?e.call(a,r,i):e))break;return o({},r,i);case 2:pi=!0}return r}function Ei(e,t,n,r,o){pi=!1;for(var i=(t=wi(e,t)).baseState,a=null,u=0,c=t.firstUpdate,l=i;null!==c;){var s=c.expirationTime;s<o?(null===a&&(a=c,i=l),u<s&&(u=s)):(jc(s,c.suspenseConfig),l=xi(e,0,c,l,n,r),null!==c.callback&&(e.effectTag|=32,c.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=c:(t.lastEffect.nextEffect=c,t.lastEffect=c))),c=c.next}for(s=null,c=t.firstCapturedUpdate;null!==c;){var f=c.expirationTime;f<o?(null===s&&(s=c,null===a&&(i=l)),u<f&&(u=f)):(l=xi(e,0,c,l,n,r),null!==c.callback&&(e.effectTag|=32,c.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=c:(t.lastCapturedEffect.nextEffect=c,t.lastCapturedEffect=c))),c=c.next}null===a&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===s&&(i=l),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=s,Cc(u),e.expirationTime=u,e.memoizedState=l}function Si(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ki(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ki(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ki(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw Error(a(191,n));n.call(r)}e=e.nextEffect}}var Oi=M.ReactCurrentBatchConfig,Ti=(new r.Component).refs;function ji(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Ci={isMounted:function(e){return!!(e=e._reactInternalFiber)&&et(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=hc(),o=Oi.suspense;(o=mi(r=vc(r,e,o),o)).payload=t,null!=n&&(o.callback=n),yi(e,o),mc(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=hc(),o=Oi.suspense;(o=mi(r=vc(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),yi(e,o),mc(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=hc(),r=Oi.suspense;(r=mi(n=vc(n,e,r),r)).tag=2,null!=t&&(r.callback=t),yi(e,r),mc(e,n)}};function Pi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!no(n,r)||!no(o,i))}function _i(e,t,n){var r=!1,o=mo,i=t.contextType;return"object"==typeof i&&null!==i?i=di(i):(o=xo(t)?bo:go.current,i=(r=null!=(r=t.contextTypes))?wo(e,o):mo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Ci,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Ri(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ci.enqueueReplaceState(t,t.state,null)}function Ni(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ti;var i=t.contextType;"object"==typeof i&&null!==i?o.context=di(i):(i=xo(t)?bo:go.current,o.context=wo(e,i)),null!==(i=e.updateQueue)&&(Ei(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(ji(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Ci.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(Ei(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Mi=Array.isArray;function Ai(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===Ti&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ii(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Li(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Kc(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=Xc(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Ai(e,t,n),r.return=e,r):((r=Yc(n.type,n.key,n.props,null,e.mode,r)).ref=Ai(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jc(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Qc(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case L:return(n=Yc(t.type,t.key,t.props,null,e.mode,n)).ref=Ai(e,null,t),n.return=e,n;case F:return(t=Jc(t,e.mode,n)).return=e,t}if(Mi(t)||Q(t))return(t=Qc(t,e.mode,n,null)).return=e,t;Ii(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:c(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case L:return n.key===o?n.type===D?f(e,t,n.props.children,r,o):l(e,t,n,r):null;case F:return n.key===o?s(e,t,n,r):null}if(Mi(n)||Q(n))return null!==o?null:f(e,t,n,r,null);Ii(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return c(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case L:return e=e.get(null===r.key?n:r.key)||null,r.type===D?f(t,e,r.props.children,o,r.key):l(t,e,r,o);case F:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Mi(r)||Q(r))return f(t,e=e.get(n)||null,r,o,null);Ii(t,r)}return null}function v(o,a,u,c){for(var l=null,s=null,f=a,v=a=0,m=null;null!==f&&v<u.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var g=p(o,f,u[v],c);if(null===g){null===f&&(f=m);break}e&&f&&null===g.alternate&&t(o,f),a=i(g,a,v),null===s?l=g:s.sibling=g,s=g,f=m}if(v===u.length)return n(o,f),l;if(null===f){for(;v<u.length;v++)null!==(f=d(o,u[v],c))&&(a=i(f,a,v),null===s?l=f:s.sibling=f,s=f);return l}for(f=r(o,f);v<u.length;v++)null!==(m=h(f,o,v,u[v],c))&&(e&&null!==m.alternate&&f.delete(null===m.key?v:m.key),a=i(m,a,v),null===s?l=m:s.sibling=m,s=m);return e&&f.forEach((function(e){return t(o,e)})),l}function m(o,u,c,l){var s=Q(c);if("function"!=typeof s)throw Error(a(150));if(null==(c=s.call(c)))throw Error(a(151));for(var f=s=null,v=u,m=u=0,g=null,y=c.next();null!==v&&!y.done;m++,y=c.next()){v.index>m?(g=v,v=null):g=v.sibling;var b=p(o,v,y.value,l);if(null===b){null===v&&(v=g);break}e&&v&&null===b.alternate&&t(o,v),u=i(b,u,m),null===f?s=b:f.sibling=b,f=b,v=g}if(y.done)return n(o,v),s;if(null===v){for(;!y.done;m++,y=c.next())null!==(y=d(o,y.value,l))&&(u=i(y,u,m),null===f?s=y:f.sibling=y,f=y);return s}for(v=r(o,v);!y.done;m++,y=c.next())null!==(y=h(v,o,m,y.value,l))&&(e&&null!==y.alternate&&v.delete(null===y.key?m:y.key),u=i(y,u,m),null===f?s=y:f.sibling=y,f=y);return e&&v.forEach((function(e){return t(o,e)})),s}return function(e,r,i,c){var l="object"==typeof i&&null!==i&&i.type===D&&null===i.key;l&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case L:e:{for(s=i.key,l=r;null!==l;){if(l.key===s){if(7===l.tag?i.type===D:l.elementType===i.type){n(e,l.sibling),(r=o(l,i.type===D?i.props.children:i.props)).ref=Ai(e,l,i),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}i.type===D?((r=Qc(i.props.children,e.mode,c,i.key)).return=e,e=r):((c=Yc(i.type,i.key,i.props,null,e.mode,c)).ref=Ai(e,r,i),c.return=e,e=c)}return u(e);case F:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jc(i,e.mode,c)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Xc(i,e.mode,c)).return=e,e=r),u(e);if(Mi(i))return v(e,r,i,c);if(Q(i))return m(e,r,i,c);if(s&&Ii(e,i),void 0===i&&!l)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Fi=Li(!0),Di=Li(!1),zi={},Ui={current:zi},Wi={current:zi},Bi={current:zi};function Hi(e){if(e===zi)throw Error(a(174));return e}function Vi(e,t){vo(Bi,t),vo(Wi,e),vo(Ui,zi);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ue(null,"");break;default:t=Ue(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}ho(Ui),vo(Ui,t)}function $i(e){ho(Ui),ho(Wi),ho(Bi)}function qi(e){Hi(Bi.current);var t=Hi(Ui.current),n=Ue(t,e.type);t!==n&&(vo(Wi,e),vo(Ui,n))}function Gi(e){Wi.current===e&&(ho(Ui),ho(Wi))}var Ki={current:0};function Yi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===Jn||n.data===Zn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Qi(e,t){return{responder:e,props:t}}var Xi=M.ReactCurrentDispatcher,Ji=M.ReactCurrentBatchConfig,Zi=0,ea=null,ta=null,na=null,ra=null,oa=null,ia=null,aa=0,ua=null,ca=0,la=!1,sa=null,fa=0;function da(){throw Error(a(321))}function pa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!eo(e[n],t[n]))return!1;return!0}function ha(e,t,n,r,o,i){if(Zi=i,ea=t,na=null!==e?e.memoizedState:null,Xi.current=null===na?Ma:Aa,t=n(r,o),la){do{la=!1,fa+=1,na=null!==e?e.memoizedState:null,ia=ra,ua=oa=ta=null,Xi.current=Aa,t=n(r,o)}while(la);sa=null,fa=0}if(Xi.current=Na,(e=ea).memoizedState=ra,e.expirationTime=aa,e.updateQueue=ua,e.effectTag|=ca,e=null!==ta&&null!==ta.next,Zi=0,ia=oa=ra=na=ta=ea=null,aa=0,ua=null,ca=0,e)throw Error(a(300));return t}function va(){Xi.current=Na,Zi=0,ia=oa=ra=na=ta=ea=null,aa=0,ua=null,ca=0,la=!1,sa=null,fa=0}function ma(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===oa?ra=oa=e:oa=oa.next=e,oa}function ga(){if(null!==ia)ia=(oa=ia).next,na=null!==(ta=na)?ta.next:null;else{if(null===na)throw Error(a(310));var e={memoizedState:(ta=na).memoizedState,baseState:ta.baseState,queue:ta.queue,baseUpdate:ta.baseUpdate,next:null};oa=null===oa?ra=e:oa.next=e,na=ta.next}return oa}function ya(e,t){return"function"==typeof t?t(e):t}function ba(e){var t=ga(),n=t.queue;if(null===n)throw Error(a(311));if(n.lastRenderedReducer=e,0<fa){var r=n.dispatch;if(null!==sa){var o=sa.get(n);if(void 0!==o){sa.delete(n);var i=t.memoizedState;do{i=e(i,o.action),o=o.next}while(null!==o);return eo(i,t.memoizedState)||($a=!0),t.memoizedState=i,t.baseUpdate===n.last&&(t.baseState=i),n.lastRenderedState=i,[i,r]}}return[t.memoizedState,r]}r=n.last;var u=t.baseUpdate;if(i=t.baseState,null!==u?(null!==r&&(r.next=null),r=u.next):r=null!==r?r.next:null,null!==r){var c=o=null,l=r,s=!1;do{var f=l.expirationTime;f<Zi?(s||(s=!0,c=u,o=i),f>aa&&Cc(aa=f)):(jc(f,l.suspenseConfig),i=l.eagerReducer===e?l.eagerState:e(i,l.action)),u=l,l=l.next}while(null!==l&&l!==r);s||(c=u,o=i),eo(i,t.memoizedState)||($a=!0),t.memoizedState=i,t.baseUpdate=c,t.baseState=o,n.lastRenderedState=i}return[t.memoizedState,n.dispatch]}function wa(e){var t=ma();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:ya,lastRenderedState:e}).dispatch=Ra.bind(null,ea,e),[t.memoizedState,e]}function xa(e){return ba(ya)}function Ea(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===ua?(ua={lastEffect:null}).lastEffect=e.next=e:null===(t=ua.lastEffect)?ua.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,ua.lastEffect=e),e}function Sa(e,t,n,r){var o=ma();ca|=e,o.memoizedState=Ea(t,n,void 0,void 0===r?null:r)}function ka(e,t,n,r){var o=ga();r=void 0===r?null:r;var i=void 0;if(null!==ta){var a=ta.memoizedState;if(i=a.destroy,null!==r&&pa(r,a.deps))return void Ea(0,n,i,r)}ca|=e,o.memoizedState=Ea(t,n,i,r)}function Oa(e,t){return Sa(516,192,e,t)}function Ta(e,t){return ka(516,192,e,t)}function ja(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ca(){}function Pa(e,t){return ma().memoizedState=[e,void 0===t?null:t],e}function _a(e,t){var n=ga();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&pa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ra(e,t,n){if(!(25>fa))throw Error(a(301));var r=e.alternate;if(e===ea||null!==r&&r===ea)if(la=!0,e={expirationTime:Zi,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===sa&&(sa=new Map),void 0===(n=sa.get(t)))sa.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var o=hc(),i=Oi.suspense;i={expirationTime:o=vc(o,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var u=t.last;if(null===u)i.next=i;else{var c=u.next;null!==c&&(i.next=c),u.next=i}if(t.last=i,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var l=t.lastRenderedState,s=r(l,n);if(i.eagerReducer=r,i.eagerState=s,eo(s,l))return}catch(e){}mc(e,o)}}var Na={readContext:di,useCallback:da,useContext:da,useEffect:da,useImperativeHandle:da,useLayoutEffect:da,useMemo:da,useReducer:da,useRef:da,useState:da,useDebugValue:da,useResponder:da,useDeferredValue:da,useTransition:da},Ma={readContext:di,useCallback:Pa,useContext:di,useEffect:Oa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Sa(4,36,ja.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Sa(4,36,e,t)},useMemo:function(e,t){var n=ma();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ma();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ra.bind(null,ea,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ma().memoizedState=e},useState:wa,useDebugValue:Ca,useResponder:Qi,useDeferredValue:function(e,t){var n=wa(e),r=n[0],o=n[1];return Oa((function(){i.unstable_next((function(){var n=Ji.suspense;Ji.suspense=void 0===t?null:t;try{o(e)}finally{Ji.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=wa(!1),n=t[0],r=t[1];return[Pa((function(t){r(!0),i.unstable_next((function(){var n=Ji.suspense;Ji.suspense=void 0===e?null:e;try{r(!1),t()}finally{Ji.suspense=n}}))}),[e,n]),n]}},Aa={readContext:di,useCallback:_a,useContext:di,useEffect:Ta,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ka(4,36,ja.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ka(4,36,e,t)},useMemo:function(e,t){var n=ga();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&pa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:ba,useRef:function(){return ga().memoizedState},useState:xa,useDebugValue:Ca,useResponder:Qi,useDeferredValue:function(e,t){var n=xa(),r=n[0],o=n[1];return Ta((function(){i.unstable_next((function(){var n=Ji.suspense;Ji.suspense=void 0===t?null:t;try{o(e)}finally{Ji.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=xa(),n=t[0],r=t[1];return[_a((function(t){r(!0),i.unstable_next((function(){var n=Ji.suspense;Ji.suspense=void 0===e?null:e;try{r(!1),t()}finally{Ji.suspense=n}}))}),[e,n]),n]}},Ia=null,La=null,Fa=!1;function Da(e,t){var n=qc(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function za(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ua(e){if(Fa){var t=La;if(t){var n=t;if(!za(e,t)){if(!(t=ar(n.nextSibling))||!za(e,t))return e.effectTag=-1025&e.effectTag|2,Fa=!1,void(Ia=e);Da(Ia,n)}Ia=e,La=ar(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Fa=!1,Ia=e}}function Wa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ia=e}function Ba(e){if(e!==Ia)return!1;if(!Fa)return Wa(e),Fa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!rr(t,e.memoizedProps))for(t=La;t;)Da(e,t),t=ar(t.nextSibling);if(Wa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if(n===Xn){if(0===t){La=ar(e.nextSibling);break e}t--}else n!==Qn&&n!==Zn&&n!==Jn||t++}e=e.nextSibling}La=null}}else La=Ia?ar(e.stateNode.nextSibling):null;return!0}function Ha(){La=Ia=null,Fa=!1}var Va=M.ReactCurrentOwner,$a=!1;function qa(e,t,n,r){t.child=null===e?Di(t,null,n,r):Fi(t,e.child,n,r)}function Ga(e,t,n,r,o){n=n.render;var i=t.ref;return fi(t,o),r=ha(e,t,n,r,i,o),null===e||$a?(t.effectTag|=1,qa(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),su(e,t,o))}function Ka(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Gc(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Yc(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ya(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:no)(o,r)&&e.ref===t.ref)?su(e,t,i):(t.effectTag|=1,(e=Kc(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ya(e,t,n,r,o,i){return null!==e&&no(e.memoizedProps,r)&&e.ref===t.ref&&($a=!1,o<i)?su(e,t,i):Xa(e,t,n,r,i)}function Qa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Xa(e,t,n,r,o){var i=xo(n)?bo:go.current;return i=wo(t,i),fi(t,o),n=ha(e,t,n,r,i,o),null===e||$a?(t.effectTag|=1,qa(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),su(e,t,o))}function Ja(e,t,n,r,o){if(xo(n)){var i=!0;To(t)}else i=!1;if(fi(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),_i(t,n,r),Ni(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var c=a.context,l=n.contextType;"object"==typeof l&&null!==l?l=di(l):l=wo(t,l=xo(n)?bo:go.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||c!==l)&&Ri(t,a,r,l),pi=!1;var d=t.memoizedState;c=a.state=d;var p=t.updateQueue;null!==p&&(Ei(t,p,r,a,o),c=t.memoizedState),u!==r||d!==c||yo.current||pi?("function"==typeof s&&(ji(t,n,s,r),c=t.memoizedState),(u=pi||Pi(t,n,u,r,d,c,l))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=c),a.props=r,a.state=c,a.context=l,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:ni(t.type,u),c=a.context,"object"==typeof(l=n.contextType)&&null!==l?l=di(l):l=wo(t,l=xo(n)?bo:go.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||c!==l)&&Ri(t,a,r,l),pi=!1,c=t.memoizedState,d=a.state=c,null!==(p=t.updateQueue)&&(Ei(t,p,r,a,o),d=t.memoizedState),u!==r||c!==d||yo.current||pi?("function"==typeof s&&(ji(t,n,s,r),d=t.memoizedState),(s=pi||Pi(t,n,u,r,c,d,l))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,l)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=l,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),r=!1);return Za(e,t,n,r,i,o)}function Za(e,t,n,r,o,i){Qa(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&jo(t,n,!1),su(e,t,i);r=t.stateNode,Va.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Fi(t,e.child,null,i),t.child=Fi(t,null,u,i)):qa(e,t,u,i),t.memoizedState=r.state,o&&jo(t,n,!0),t.child}function eu(e){var t=e.stateNode;t.pendingContext?ko(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ko(0,t.context,!1),Vi(e,t.containerInfo)}var tu,nu,ru,ou,iu={dehydrated:null,retryTime:0};function au(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Ki.current,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),vo(Ki,1&a),null===e){if(void 0!==i.fallback&&Ua(t),u){if(u=i.fallback,(i=Qc(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Qc(u,o,n,null)).return=t,i.sibling=n,t.memoizedState=iu,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Di(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,u){if(i=i.fallback,(n=Kc(e,e.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(o=Kc(o,i,o.expirationTime)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=iu,t.child=n,o}return n=Fi(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=i.fallback,(i=Qc(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Qc(u,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=iu,t.child=i,n}return t.memoizedState=null,t.child=Fi(t,e,i.children,n)}function uu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),si(e.return,t)}function cu(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function lu(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(qa(e,t,r.children,n),0!=(2&(r=Ki.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&uu(e,n);else if(19===e.tag)uu(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(vo(Ki,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Yi(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),cu(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Yi(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}cu(t,!0,n,null,i,t.lastEffect);break;case"together":cu(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function su(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&Cc(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Kc(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Kc(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function fu(e){e.effectTag|=4}function du(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function pu(e){switch(e.tag){case 1:xo(e.type)&&Eo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if($i(),So(),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Gi(e),null;case 13:return ho(Ki),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ho(Ki),null;case 4:return $i(),null;case 10:return li(e),null;default:return null}}function hu(e,t){return{value:e,source:t,stack:J(t)}}tu=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},nu=function(){},ru=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u,c,l=t.stateNode;switch(Hi(Ui.current),e=null,n){case"input":a=Te(l,a),r=Te(l,r),e=[];break;case"option":a=Ne(l,a),r=Ne(l,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Ae(l,a),r=Ae(l,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(l.onclick=Vn)}for(u in Wn(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u)for(c in l=a[u])l.hasOwnProperty(c)&&(n||(n={}),n[c]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(p.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var s=r[u];if(l=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&s!==l&&(null!=s||null!=l))if("style"===u)if(l){for(c in l)!l.hasOwnProperty(c)||s&&s.hasOwnProperty(c)||(n||(n={}),n[c]="");for(c in s)s.hasOwnProperty(c)&&l[c]!==s[c]&&(n||(n={}),n[c]=s[c])}else n||(e||(e=[]),e.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,l=l?l.__html:void 0,null!=s&&l!==s&&(e=e||[]).push(u,""+s)):"children"===u?l===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(p.hasOwnProperty(u)?(null!=s&&Hn(i,u),e||l===s||(e=[])):(e=e||[]).push(u,s))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&fu(t)}},ou=function(e,t,n,r){n!==r&&fu(t)};var vu="function"==typeof WeakSet?WeakSet:Set;function mu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=J(n)),null!==n&&X(n.type),t=t.value,null!==e&&1===e.tag&&X(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function gu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Uc(e,t)}else t.current=null}function yu(e,t){switch(t.tag){case 0:case 11:case 15:bu(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ni(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(a(163))}}function bu(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var o=r.destroy;r.destroy=void 0,void 0!==o&&o()}0!=(r.tag&t)&&(o=r.create,r.destroy=o()),r=r.next}while(r!==n)}}function wu(e,t,n){switch("function"==typeof Vc&&Vc(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Yo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){Uc(o,e)}}e=e.next}while(e!==r)}))}break;case 1:gu(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Uc(e,t)}}(t,n);break;case 5:gu(t);break;case 4:ku(e,t,n)}}function xu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&xu(t)}function Eu(e){return 5===e.tag||3===e.tag||4===e.tag}function Su(e){e:{for(var t=e.return;null!==t;){if(Eu(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(He(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Eu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){var i=5===o.tag||6===o.tag;if(i){var u=i?o.stateNode:o.stateNode.instance;if(n)if(r){var c=u;u=n,8===(i=t).nodeType?i.parentNode.insertBefore(c,u):i.insertBefore(c,u)}else t.insertBefore(u,n);else r?(8===(c=t).nodeType?(i=c.parentNode).insertBefore(u,c):(i=c).appendChild(u),null!=(c=c._reactRootContainer)||null!==i.onclick||(i.onclick=Vn)):t.appendChild(u)}else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function ku(e,t,n){for(var r,o,i=t,u=!1;;){if(!u){u=i.return;e:for(;;){if(null===u)throw Error(a(160));switch(r=u.stateNode,u.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}u=u.return}u=!0}if(5===i.tag||6===i.tag){e:for(var c=e,l=i,s=n,f=l;;)if(wu(c,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===l)break;for(;null===f.sibling;){if(null===f.return||f.return===l)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(c=r,l=i.stateNode,8===c.nodeType?c.parentNode.removeChild(l):c.removeChild(l)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(wu(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(u=!1)}i.sibling.return=i.return,i=i.sibling}}function Ou(e,t){switch(t.tag){case 0:case 11:case 14:case 15:bu(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[sr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ce(n,r),Bn(e,o),t=Bn(e,r),o=0;o<i.length;o+=2){var u=i[o],c=i[o+1];"style"===u?zn(n,c):"dangerouslySetInnerHTML"===u?Be(n,c):"children"===u?He(n,c):Ee(n,u,c,t)}switch(e){case"input":Pe(n,r);break;case"textarea":Le(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Me(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Me(n,!!r.multiple,r.defaultValue,!0):Me(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(a(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,Ot(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,tc=qo()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=Dn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}Tu(t);break;case 19:Tu(t);break;case 17:case 20:case 21:break;default:throw Error(a(163))}}function Tu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new vu),t.forEach((function(t){var r=Bc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var ju="function"==typeof WeakMap?WeakMap:Map;function Cu(e,t,n){(n=mi(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){oc||(oc=!0,ic=r),mu(e,t)},n}function Pu(e,t,n){(n=mi(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return mu(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===ac?ac=new Set([this]):ac.add(this),mu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var _u,Ru=Math.ceil,Nu=M.ReactCurrentDispatcher,Mu=M.ReactCurrentOwner,Au=0,Iu=8,Lu=16,Fu=32,Du=0,zu=1,Uu=2,Wu=3,Bu=4,Hu=5,Vu=Au,$u=null,qu=null,Gu=0,Ku=Du,Yu=null,Qu=1073741823,Xu=1073741823,Ju=null,Zu=0,ec=!1,tc=0,nc=500,rc=null,oc=!1,ic=null,ac=null,uc=!1,cc=null,lc=90,sc=null,fc=0,dc=null,pc=0;function hc(){return(Vu&(Lu|Fu))!==Au?1073741821-(qo()/10|0):0!==pc?pc:pc=1073741821-(qo()/10|0)}function vc(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Go();if(0==(4&t))return 99===r?1073741823:1073741822;if((Vu&Lu)!==Au)return Gu;if(null!==n)e=ti(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=ti(e,150,100);break;case 97:case 96:e=ti(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==$u&&e===Gu&&--e,e}function mc(e,t){if(50<fc)throw fc=0,dc=null,Error(a(185));if(null!==(e=gc(e,t))){var n=Go();1073741823===t?(Vu&Iu)!==Au&&(Vu&(Lu|Fu))===Au?xc(e):(bc(e),Vu===Au&&Jo()):bc(e),(4&Vu)===Au||98!==n&&99!==n||(null===sc?sc=new Map([[e,t]]):(void 0===(n=sc.get(e))||n>t)&&sc.set(e,t))}}function gc(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&($u===o&&(Cc(t),Ku===Bu&&tl(o,Gu)),nl(o,t)),o}function yc(e){var t=e.lastExpiredTime;return 0!==t?t:el(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function bc(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Xo(xc.bind(null,e));else{var t=yc(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=hc();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Uo&&_o(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Xo(xc.bind(null,e)):Qo(r,wc.bind(null,e),{timeout:10*(1073741821-t)-qo()}),e.callbackNode=t}}}function wc(e,t){if(pc=0,t)return rl(e,t=hc()),bc(e),null;var n=yc(e);if(0!==n){if(t=e.callbackNode,(Vu&(Lu|Fu))!==Au)throw Error(a(327));if(Fc(),e===$u&&n===Gu||kc(e,n),null!==qu){var r=Vu;Vu|=Lu;for(var o=Tc();;)try{_c();break}catch(t){Oc(e,t)}if(ui(),Vu=r,Nu.current=o,Ku===zu)throw t=Yu,kc(e,n),tl(e,n),bc(e),t;if(null===qu)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Ku,$u=null,r){case Du:case zu:throw Error(a(345));case Uu:rl(e,2<n?2:n);break;case Wu:if(tl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Mc(o)),1073741823===Qu&&10<(o=tc+nc-qo())){if(ec){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,kc(e,n);break}}if(0!==(i=yc(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=or(Ac.bind(null,e),o);break}Ac(e);break;case Bu:if(tl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Mc(o)),ec&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,kc(e,n);break}if(0!==(o=yc(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Xu?r=10*(1073741821-Xu)-qo():1073741823===Qu?r=0:(r=10*(1073741821-Qu)-5e3,0>(r=(o=qo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Ru(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=or(Ac.bind(null,e),r);break}Ac(e);break;case Hu:if(1073741823!==Qu&&null!==Ju){i=Qu;var u=Ju;if(0>=(r=0|u.busyMinDurationMs)?r=0:(o=0|u.busyDelayMs,r=(i=qo()-(10*(1073741821-i)-(0|u.timeoutMs||5e3)))<=o?0:o+r-i),10<r){tl(e,n),e.timeoutHandle=or(Ac.bind(null,e),r);break}}Ac(e);break;default:throw Error(a(329))}if(bc(e),e.callbackNode===t)return wc.bind(null,e)}}return null}function xc(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)Ac(e);else{if((Vu&(Lu|Fu))!==Au)throw Error(a(327));if(Fc(),e===$u&&t===Gu||kc(e,t),null!==qu){var n=Vu;Vu|=Lu;for(var r=Tc();;)try{Pc();break}catch(t){Oc(e,t)}if(ui(),Vu=n,Nu.current=r,Ku===zu)throw n=Yu,kc(e,t),tl(e,t),bc(e),n;if(null!==qu)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,$u=null,Ac(e),bc(e)}}return null}function Ec(e,t){var n=Vu;Vu|=1;try{return e(t)}finally{(Vu=n)===Au&&Jo()}}function Sc(e,t){var n=Vu;Vu&=-2,Vu|=Iu;try{return e(t)}finally{(Vu=n)===Au&&Jo()}}function kc(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ir(n)),null!==qu)for(n=qu.return;null!==n;){var r=n;switch(r.tag){case 1:var o=r.type.childContextTypes;null!=o&&Eo();break;case 3:$i(),So();break;case 5:Gi(r);break;case 4:$i();break;case 13:case 19:ho(Ki);break;case 10:li(r)}n=n.return}$u=e,qu=Kc(e.current,null),Gu=t,Ku=Du,Yu=null,Xu=Qu=1073741823,Ju=null,Zu=0,ec=!1}function Oc(e,t){for(;;){try{if(ui(),va(),null===qu||null===qu.return)return Ku=zu,Yu=t,null;e:{var n=e,r=qu.return,o=qu,i=t;if(t=Gu,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==i&&"object"==typeof i&&"function"==typeof i.then){var a=i,u=0!=(1&Ki.current),c=r;do{var l;if(l=13===c.tag){var s=c.memoizedState;if(null!==s)l=null!==s.dehydrated;else{var f=c.memoizedProps;l=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!u)}}if(l){var d=c.updateQueue;if(null===d){var p=new Set;p.add(a),c.updateQueue=p}else d.add(a);if(0==(2&c.mode)){if(c.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var h=mi(1073741823,null);h.tag=2,yi(o,h)}o.expirationTime=1073741823;break e}i=void 0,o=t;var v=n.pingCache;if(null===v?(v=n.pingCache=new ju,i=new Set,v.set(a,i)):void 0===(i=v.get(a))&&(i=new Set,v.set(a,i)),!i.has(o)){i.add(o);var m=Wc.bind(null,n,a,o);a.then(m,m)}c.effectTag|=4096,c.expirationTime=t;break e}c=c.return}while(null!==c);i=Error((X(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+J(o))}Ku!==Hu&&(Ku=Uu),i=hu(i,o),c=r;do{switch(c.tag){case 3:a=i,c.effectTag|=4096,c.expirationTime=t,bi(c,Cu(c,a,t));break e;case 1:a=i;var g=c.type,y=c.stateNode;if(0==(64&c.effectTag)&&("function"==typeof g.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&(null===ac||!ac.has(y)))){c.effectTag|=4096,c.expirationTime=t,bi(c,Pu(c,a,t));break e}}c=c.return}while(null!==c)}qu=Nc(qu)}catch(e){t=e;continue}break}}function Tc(){var e=Nu.current;return Nu.current=Na,null===e?Na:e}function jc(e,t){e<Qu&&2<e&&(Qu=e),null!==t&&e<Xu&&2<e&&(Xu=e,Ju=t)}function Cc(e){e>Zu&&(Zu=e)}function Pc(){for(;null!==qu;)qu=Rc(qu)}function _c(){for(;null!==qu&&!Ro();)qu=Rc(qu)}function Rc(e){var t=_u(e.alternate,e,Gu);return e.memoizedProps=e.pendingProps,null===t&&(t=Nc(e)),Mu.current=null,t}function Nc(e){qu=e;do{var t=qu.alternate;if(e=qu.return,0==(2048&qu.effectTag)){e:{var n=t,r=Gu,i=(t=qu).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:xo(t.type)&&Eo();break;case 3:$i(),So(),(i=t.stateNode).pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),(null===n||null===n.child)&&Ba(t)&&fu(t),nu(t);break;case 5:Gi(t),r=Hi(Bi.current);var u=t.type;if(null!==n&&null!=t.stateNode)ru(n,t,u,i,r),n.ref!==t.ref&&(t.effectTag|=128);else if(i){var c=Hi(Ui.current);if(Ba(t)){var l=(i=t).stateNode;n=i.type;var s=i.memoizedProps,f=r;switch(l[lr]=i,l[sr]=s,u=void 0,r=l,n){case"iframe":case"object":case"embed":On("load",r);break;case"video":case"audio":for(l=0;l<Ze.length;l++)On(Ze[l],r);break;case"source":On("error",r);break;case"img":case"image":case"link":On("error",r),On("load",r);break;case"form":On("reset",r),On("submit",r);break;case"details":On("toggle",r);break;case"input":je(r,s),On("invalid",r),Hn(f,"onChange");break;case"select":r._wrapperState={wasMultiple:!!s.multiple},On("invalid",r),Hn(f,"onChange");break;case"textarea":Ie(r,s),On("invalid",r),Hn(f,"onChange")}for(u in Wn(n,s),l=null,s)s.hasOwnProperty(u)&&(c=s[u],"children"===u?"string"==typeof c?r.textContent!==c&&(l=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(l=["children",""+c]):p.hasOwnProperty(u)&&null!=c&&Hn(f,u));switch(n){case"input":ke(r),_e(r,s,!0);break;case"textarea":ke(r),Fe(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Vn)}u=l,i.updateQueue=u,(i=null!==u)&&fu(t)}else{n=t,f=u,s=i,l=9===r.nodeType?r:r.ownerDocument,c===De.html&&(c=ze(f)),c===De.html?"script"===f?((s=l.createElement("div")).innerHTML="<script><\/script>",l=s.removeChild(s.firstChild)):"string"==typeof s.is?l=l.createElement(f,{is:s.is}):(l=l.createElement(f),"select"===f&&(f=l,s.multiple?f.multiple=!0:s.size&&(f.size=s.size))):l=l.createElementNS(c,f),(s=l)[lr]=n,s[sr]=i,tu(s,t,!1,!1),t.stateNode=s;var d=r,h=Bn(f=u,n=i);switch(f){case"iframe":case"object":case"embed":On("load",s),r=n;break;case"video":case"audio":for(r=0;r<Ze.length;r++)On(Ze[r],s);r=n;break;case"source":On("error",s),r=n;break;case"img":case"image":case"link":On("error",s),On("load",s),r=n;break;case"form":On("reset",s),On("submit",s),r=n;break;case"details":On("toggle",s),r=n;break;case"input":je(s,n),r=Te(s,n),On("invalid",s),Hn(d,"onChange");break;case"option":r=Ne(s,n);break;case"select":s._wrapperState={wasMultiple:!!n.multiple},r=o({},n,{value:void 0}),On("invalid",s),Hn(d,"onChange");break;case"textarea":Ie(s,n),r=Ae(s,n),On("invalid",s),Hn(d,"onChange");break;default:r=n}Wn(f,r),l=void 0,c=f;var v=s,m=r;for(l in m)if(m.hasOwnProperty(l)){var g=m[l];"style"===l?zn(v,g):"dangerouslySetInnerHTML"===l?null!=(g=g?g.__html:void 0)&&Be(v,g):"children"===l?"string"==typeof g?("textarea"!==c||""!==g)&&He(v,g):"number"==typeof g&&He(v,""+g):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(p.hasOwnProperty(l)?null!=g&&Hn(d,l):null!=g&&Ee(v,l,g,h))}switch(f){case"input":ke(s),_e(s,n,!1);break;case"textarea":ke(s),Fe(s);break;case"option":null!=n.value&&s.setAttribute("value",""+xe(n.value));break;case"select":(r=s).multiple=!!n.multiple,null!=(s=n.value)?Me(r,!!n.multiple,s,!1):null!=n.defaultValue&&Me(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(s.onclick=Vn)}(i=nr(u,i))&&fu(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(a(166));break;case 6:if(n&&null!=t.stateNode)ou(n,t,n.memoizedProps,i);else{if("string"!=typeof i&&null===t.stateNode)throw Error(a(166));r=Hi(Bi.current),Hi(Ui.current),Ba(t)?(u=(i=t).stateNode,r=i.memoizedProps,u[lr]=i,(i=u.nodeValue!==r)&&fu(t)):(u=t,(i=(9===r.nodeType?r:r.ownerDocument).createTextNode(i))[lr]=u,t.stateNode=i)}break;case 11:break;case 13:if(ho(Ki),i=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}i=null!==i,u=!1,null===n?void 0!==t.memoizedProps.fallback&&Ba(t):(u=null!==(r=n.memoizedState),i||null===r||null!==(r=n.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=r,r.nextEffect=s):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),i&&!u&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ki.current)?Ku===Du&&(Ku=Wu):(Ku!==Du&&Ku!==Wu||(Ku=Bu),0!==Zu&&null!==$u&&(tl($u,Gu),nl($u,Zu)))),(i||u)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:$i(),nu(t);break;case 10:li(t);break;case 9:case 14:break;case 17:xo(t.type)&&Eo();break;case 19:if(ho(Ki),null===(i=t.memoizedState))break;if(u=0!=(64&t.effectTag),null===(s=i.rendering)){if(u)du(i,!1);else if(Ku!==Du||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(s=Yi(n))){for(t.effectTag|=64,du(i,!1),null!==(u=s.updateQueue)&&(t.updateQueue=u,t.effectTag|=4),null===i.lastEffect&&(t.firstEffect=null),t.lastEffect=i.lastEffect,i=r,u=t.child;null!==u;)n=i,(r=u).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(s=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=s.childExpirationTime,r.expirationTime=s.expirationTime,r.child=s.child,r.memoizedProps=s.memoizedProps,r.memoizedState=s.memoizedState,r.updateQueue=s.updateQueue,n=s.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),u=u.sibling;vo(Ki,1&Ki.current|2),t=t.child;break e}n=n.sibling}}else{if(!u)if(null!==(n=Yi(s))){if(t.effectTag|=64,u=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),du(i,!0),null===i.tail&&"hidden"===i.tailMode){null!==(t=t.lastEffect=i.lastEffect)&&(t.nextEffect=null);break}}else qo()>i.tailExpiration&&1<r&&(t.effectTag|=64,u=!0,du(i,!1),t.expirationTime=t.childExpirationTime=r-1);i.isBackwards?(s.sibling=t.child,t.child=s):(null!==(r=i.last)?r.sibling=s:t.child=s,i.last=s)}if(null!==i.tail){0===i.tailExpiration&&(i.tailExpiration=qo()+500),r=i.tail,i.rendering=r,i.tail=r.sibling,i.lastEffect=t.lastEffect,r.sibling=null,i=Ki.current,vo(Ki,i=u?1&i|2:1&i),t=r;break e}break;case 20:case 21:break;default:throw Error(a(156,t.tag))}t=null}if(i=qu,1===Gu||1!==i.childExpirationTime){for(u=0,r=i.child;null!==r;)(n=r.expirationTime)>u&&(u=n),(s=r.childExpirationTime)>u&&(u=s),r=r.sibling;i.childExpirationTime=u}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=qu.firstEffect),null!==qu.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=qu.firstEffect),e.lastEffect=qu.lastEffect),1<qu.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=qu:e.firstEffect=qu,e.lastEffect=qu))}else{if(null!==(t=pu(qu)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=qu.sibling))return t;qu=e}while(null!==qu);return Ku===Du&&(Ku=Hu),null}function Mc(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function Ac(e){var t=Go();return Yo(99,Ic.bind(null,e,t)),null}function Ic(e,t){if(Fc(),(Vu&(Lu|Fu))!==Au)throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=Mc(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===$u&&(qu=$u=null,Gu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=Vu;Vu|=Fu,Mu.current=null,er=kn;var u=Kn();if(Yn(u)){if("selectionStart"in u)var c={start:u.selectionStart,end:u.selectionEnd};else e:{var l=(c=(c=u.ownerDocument)&&c.defaultView||window).getSelection&&c.getSelection();if(l&&0!==l.rangeCount){c=l.anchorNode;var s=l.anchorOffset,f=l.focusNode;l=l.focusOffset;try{c.nodeType,f.nodeType}catch(e){c=null;break e}var d=0,p=-1,h=-1,v=0,m=0,g=u,y=null;t:for(;;){for(var b;g!==c||0!==s&&3!==g.nodeType||(p=d+s),g!==f||0!==l&&3!==g.nodeType||(h=d+l),3===g.nodeType&&(d+=g.nodeValue.length),null!==(b=g.firstChild);)y=g,g=b;for(;;){if(g===u)break t;if(y===c&&++v===s&&(p=d),y===f&&++m===l&&(h=d),null!==(b=g.nextSibling))break;y=(g=y).parentNode}g=b}c=-1===p||-1===h?null:{start:p,end:h}}else c=null}c=c||{start:0,end:0}}else c=null;tr={focusedElem:u,selectionRange:c},kn=!1,rc=o;do{try{Lc()}catch(e){if(null===rc)throw Error(a(330));Uc(rc,e),rc=rc.nextEffect}}while(null!==rc);rc=o;do{try{for(u=e,c=t;null!==rc;){var w=rc.effectTag;if(16&w&&He(rc.stateNode,""),128&w){var x=rc.alternate;if(null!==x){var E=x.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&w){case 2:Su(rc),rc.effectTag&=-3;break;case 6:Su(rc),rc.effectTag&=-3,Ou(rc.alternate,rc);break;case 1024:rc.effectTag&=-1025;break;case 1028:rc.effectTag&=-1025,Ou(rc.alternate,rc);break;case 4:Ou(rc.alternate,rc);break;case 8:ku(u,s=rc,c),xu(s)}rc=rc.nextEffect}}catch(e){if(null===rc)throw Error(a(330));Uc(rc,e),rc=rc.nextEffect}}while(null!==rc);if(E=tr,x=Kn(),w=E.focusedElem,c=E.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==c&&Yn(w)&&(x=c.start,void 0===(E=c.end)&&(E=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(E,w.value.length)):(E=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(E=E.getSelection(),s=w.textContent.length,u=Math.min(c.start,s),c=void 0===c.end?u:Math.min(c.end,s),!E.extend&&u>c&&(s=c,c=u,u=s),s=Gn(w,u),f=Gn(w,c),s&&f&&(1!==E.rangeCount||E.anchorNode!==s.node||E.anchorOffset!==s.offset||E.focusNode!==f.node||E.focusOffset!==f.offset)&&((x=x.createRange()).setStart(s.node,s.offset),E.removeAllRanges(),u>c?(E.addRange(x),E.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),E.addRange(x))))),x=[];for(E=w;E=E.parentNode;)1===E.nodeType&&x.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(E=x[w]).element.scrollLeft=E.left,E.element.scrollTop=E.top}tr=null,kn=!!er,er=null,e.current=n,rc=o;do{try{for(w=r;null!==rc;){var S=rc.effectTag;if(36&S){var k=rc.alternate;switch(E=w,(x=rc).tag){case 0:case 11:case 15:bu(16,32,x);break;case 1:var O=x.stateNode;if(4&x.effectTag)if(null===k)O.componentDidMount();else{var T=x.elementType===x.type?k.memoizedProps:ni(x.type,k.memoizedProps);O.componentDidUpdate(T,k.memoizedState,O.__reactInternalSnapshotBeforeUpdate)}var j=x.updateQueue;null!==j&&Si(0,j,O);break;case 3:var C=x.updateQueue;if(null!==C){if(u=null,null!==x.child)switch(x.child.tag){case 5:u=x.child.stateNode;break;case 1:u=x.child.stateNode}Si(0,C,u)}break;case 5:var P=x.stateNode;null===k&&4&x.effectTag&&nr(x.type,x.memoizedProps)&&P.focus();break;case 6:case 4:case 12:break;case 13:if(null===x.memoizedState){var _=x.alternate;if(null!==_){var R=_.memoizedState;if(null!==R){var N=R.dehydrated;null!==N&&Ot(N)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(a(163))}}if(128&S){x=void 0;var M=rc.ref;if(null!==M){var A=rc.stateNode;switch(rc.tag){case 5:x=A;break;default:x=A}"function"==typeof M?M(x):M.current=x}}rc=rc.nextEffect}}catch(e){if(null===rc)throw Error(a(330));Uc(rc,e),rc=rc.nextEffect}}while(null!==rc);rc=null,Wo(),Vu=i}else e.current=n;if(uc)uc=!1,cc=e,lc=t;else for(rc=o;null!==rc;)t=rc.nextEffect,rc.nextEffect=null,rc=t;if(0===(t=e.firstPendingTime)&&(ac=null),1073741823===t?e===dc?fc++:(fc=0,dc=e):fc=0,"function"==typeof Hc&&Hc(n.stateNode,r),bc(e),oc)throw oc=!1,e=ic,ic=null,e;return(Vu&Iu)!==Au?null:(Jo(),null)}function Lc(){for(;null!==rc;){var e=rc.effectTag;0!=(256&e)&&yu(rc.alternate,rc),0==(512&e)||uc||(uc=!0,Qo(97,(function(){return Fc(),null}))),rc=rc.nextEffect}}function Fc(){if(90!==lc){var e=97<lc?97:lc;return lc=90,Yo(e,Dc)}}function Dc(){if(null===cc)return!1;var e=cc;if(cc=null,(Vu&(Lu|Fu))!==Au)throw Error(a(331));var t=Vu;for(Vu|=Fu,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:bu(128,0,n),bu(0,64,n)}}catch(t){if(null===e)throw Error(a(330));Uc(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Vu=t,Jo(),!0}function zc(e,t,n){yi(e,t=Cu(e,t=hu(n,t),1073741823)),null!==(e=gc(e,1073741823))&&bc(e)}function Uc(e,t){if(3===e.tag)zc(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){zc(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ac||!ac.has(r))){yi(n,e=Pu(n,e=hu(t,e),1073741823)),null!==(n=gc(n,1073741823))&&bc(n);break}}n=n.return}}function Wc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),$u===e&&Gu===n?Ku===Bu||Ku===Wu&&1073741823===Qu&&qo()-tc<nc?kc(e,Gu):ec=!0:el(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),bc(e)))}function Bc(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=vc(t=hc(),e,null)),null!==(e=gc(e,t))&&bc(e)}_u=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||yo.current)$a=!0;else{if(r<n){switch($a=!1,t.tag){case 3:eu(t),Ha();break;case 5:if(qi(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:xo(t.type)&&To(t);break;case 4:Vi(t,t.stateNode.containerInfo);break;case 10:ci(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?au(e,t,n):(vo(Ki,1&Ki.current),null!==(t=su(e,t,n))?t.sibling:null);vo(Ki,1&Ki.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return lu(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),vo(Ki,Ki.current),!r)return null}return su(e,t,n)}$a=!1}}else $a=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=wo(t,go.current),fi(t,n),o=ha(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,va(),xo(r)){var i=!0;To(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&ji(t,r,u,e),o.updater=Ci,t.stateNode=o,o._reactInternalFiber=t,Ni(t,r,e,n),t=Za(null,t,r,!0,i,n)}else t.tag=0,qa(null,t,o,n),t=t.child;return t;case 16:if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return Gc(e)?1:0;if(null!=e){if((e=e.$$typeof)===V)return 11;if(e===G)return 14}return 2}(o),e=ni(o,e),i){case 0:t=Xa(null,t,o,e,n);break;case 1:t=Ja(null,t,o,e,n);break;case 11:t=Ga(null,t,o,e,n);break;case 14:t=Ka(null,t,o,ni(o.type,e),r,n);break;default:throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Xa(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ja(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 3:if(eu(t),null===(r=t.updateQueue))throw Error(a(282));if(o=null!==(o=t.memoizedState)?o.element:null,Ei(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o)Ha(),t=su(e,t,n);else{if((o=t.stateNode.hydrate)&&(La=ar(t.stateNode.containerInfo.firstChild),Ia=t,o=Fa=!0),o)for(n=Di(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else qa(e,t,r,n),Ha();t=t.child}return t;case 5:return qi(t),null===e&&Ua(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,rr(r,o)?u=null:null!==i&&rr(r,i)&&(t.effectTag|=16),Qa(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(qa(e,t,u,n),t=t.child),t;case 6:return null===e&&Ua(t),null;case 13:return au(e,t,n);case 4:return Vi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Fi(t,null,r,n):qa(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ga(e,t,r,o=t.elementType===r?o:ni(r,o),n);case 7:return qa(e,t,t.pendingProps,n),t.child;case 8:case 12:return qa(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,ci(t,i=o.value),null!==u){var c=u.value;if(0===(i=eo(c,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(c,i):1073741823))){if(u.children===o.children&&!yo.current){t=su(e,t,n);break e}}else for(null!==(c=t.child)&&(c.return=t);null!==c;){var l=c.dependencies;if(null!==l){u=c.child;for(var s=l.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&i)){1===c.tag&&((s=mi(n,null)).tag=2,yi(c,s)),c.expirationTime<n&&(c.expirationTime=n),null!==(s=c.alternate)&&s.expirationTime<n&&(s.expirationTime=n),si(c.return,n),l.expirationTime<n&&(l.expirationTime=n);break}s=s.next}}else u=10===c.tag&&c.type===t.type?null:c.child;if(null!==u)u.return=c;else for(u=c;null!==u;){if(u===t){u=null;break}if(null!==(c=u.sibling)){c.return=u.return,u=c;break}u=u.return}c=u}}qa(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,fi(t,n),r=r(o=di(o,i.unstable_observedBits)),t.effectTag|=1,qa(e,t,r,n),t.child;case 14:return i=ni(o=t.type,t.pendingProps),Ka(e,t,o,i=ni(o.type,i),r,n);case 15:return Ya(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ni(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,xo(r)?(e=!0,To(t)):e=!1,fi(t,n),_i(t,r,o),Ni(t,r,o,n),Za(null,t,r,!0,e,n);case 19:return lu(e,t,n)}throw Error(a(156,t.tag))};var Hc=null,Vc=null;function $c(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function qc(e,t,n,r){return new $c(e,t,n,r)}function Gc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Kc(e,t){var n=e.alternate;return null===n?((n=qc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Yc(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Gc(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case D:return Qc(n.children,o,i,t);case H:u=8,o|=7;break;case z:u=8,o|=1;break;case U:return(e=qc(12,n,t,8|o)).elementType=U,e.type=U,e.expirationTime=i,e;case $:return(e=qc(13,n,t,o)).type=$,e.elementType=$,e.expirationTime=i,e;case q:return(e=qc(19,n,t,o)).elementType=q,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case W:u=10;break e;case B:u=9;break e;case V:u=11;break e;case G:u=14;break e;case K:u=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=qc(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Qc(e,t,n,r){return(e=qc(7,e,r,t)).expirationTime=n,e}function Xc(e,t,n){return(e=qc(6,e,null,t)).expirationTime=n,e}function Jc(e,t,n){return(t=qc(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zc(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function el(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function tl(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function nl(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function rl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function ol(e,t,n,r){var o=t.current,i=hc(),u=Oi.suspense;i=vc(i,o,u);e:if(n){t:{if(et(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var c=n;do{switch(c.tag){case 3:c=c.stateNode.context;break t;case 1:if(xo(c.type)){c=c.stateNode.__reactInternalMemoizedMergedChildContext;break t}}c=c.return}while(null!==c);throw Error(a(171))}if(1===n.tag){var l=n.type;if(xo(l)){n=Oo(n,l,c);break e}}n=c}else n=mo;return null===t.context?t.context=n:t.pendingContext=n,(t=mi(i,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),yi(o,t),mc(o,i),i}function il(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function al(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function ul(e,t){al(e,t),(e=e.alternate)&&al(e,t)}function cl(e,t,n){var r=new Zc(e,t,n=null!=n&&!0===n.hydrate),o=qc(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,e[fr]=r.current,n&&0!==t&&function(e){var t=An(e);vt.forEach((function(n){In(n,e,t)})),mt.forEach((function(n){In(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function ll(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function sl(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=il(a);u.call(e)}}ol(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new cl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var c=o;o=function(){var e=il(a);c.call(e)}}Sc((function(){ol(t,a,e,o)}))}return il(a)}function fl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ll(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:F,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}ot=function(e){if(13===e.tag){var t=ti(hc(),150,100);mc(e,t),ul(e,t)}},it=function(e){if(13===e.tag){hc();var t=ei++;mc(e,t),ul(e,t)}},at=function(e){if(13===e.tag){var t=hc();mc(e,t=vc(t,e,null)),ul(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Pe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=vr(r);if(!o)throw Error(a(90));Oe(r),Pe(r,o)}}}break;case"textarea":Le(e,n);break;case"select":null!=(t=n.value)&&Me(e,!!n.multiple,t,!1)}},cl.prototype.render=function(e,t){ol(e,this._internalRoot,null,void 0===t?null:t)},cl.prototype.unmount=function(e){ol(null,this._internalRoot,null,void 0===e?null:e)},ae=Ec,ue=function(e,t,n,r){var o=Vu;Vu|=4;try{return Yo(98,e.bind(null,t,n,r))}finally{(Vu=o)===Au&&Jo()}},ce=function(){(Vu&(1|Lu|Fu))===Au&&(function(){if(null!==sc){var e=sc;sc=null,e.forEach((function(e,t){rl(t,e),bc(t)})),Jo()}}(),Fc())},le=function(e,t){var n=Vu;Vu|=2;try{return e(t)}finally{(Vu=n)===Au&&Jo()}};var dl,pl,hl={createPortal:fl,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=rt(t))?null:e.stateNode},hydrate:function(e,t,n){if(!ll(t))throw Error(a(200));return sl(null,e,t,!0,n)},render:function(e,t,n){if(!ll(t))throw Error(a(200));return sl(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!ll(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return sl(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!ll(e))throw Error(a(40));return!!e._reactRootContainer&&(Sc((function(){sl(null,null,e,!1,(function(){e._reactRootContainer=null}))})),!0)},unstable_createPortal:function(){return fl.apply(void 0,arguments)},unstable_batchedUpdates:Ec,flushSync:function(e,t){if((Vu&(Lu|Fu))!==Au)throw Error(a(187));var n=Vu;Vu|=1;try{return Yo(99,e.bind(null,t))}finally{Vu=n,Jo()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[pr,hr,vr,R.injectEventPluginsByName,d,Nt,function(e){j(e,Rt)},oe,ie,_n,_,Fc,{current:!1}]}};pl=(dl={findFiberByHostInstance:dr,bundleType:0,version:"16.11.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Hc=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Vc=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},dl,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:M.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return pl?pl(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var vl={default:hl},ml=vl&&hl||vl;e.exports=ml.default||ml},function(e,t,n){"use strict";e.exports=n(396)},function(e,t,n){"use strict";
/** @license React v0.17.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,u;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,l=null,s=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==c?setTimeout(r,0,e):(c=e,setTimeout(s,0))},o=function(e,t){l=setTimeout(e,t)},i=function(){clearTimeout(l)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,v=window.clearTimeout,m=window.requestAnimationFrame,g=window.cancelAnimationFrame;if("undefined"!=typeof console&&("function"!=typeof m&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")),"object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var b=!1,w=null,x=-1,E=5,S=0;a=function(){return t.unstable_now()>=S},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):E=0<e?Math.floor(1e3/e):33.33};var k=new MessageChannel,O=k.port2;k.port1.onmessage=function(){if(null!==w){var e=t.unstable_now();S=e+E;try{w(!0,e)?O.postMessage(null):(b=!1,w=null)}catch(e){throw O.postMessage(null),e}}else b=!1},r=function(e){w=e,b||(b=!0,O.postMessage(null))},o=function(e,n){x=h((function(){e(t.unstable_now())}),n)},i=function(){v(x),x=-1}}function T(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),o=e[r];if(!(void 0!==o&&0<P(o,t)))break e;e[r]=t,e[n]=o,n=r}}function j(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],u=i+1,c=e[u];if(void 0!==a&&0>P(a,n))void 0!==c&&0>P(c,a)?(e[r]=c,e[u]=n,r=u):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==c&&0>P(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}return null}function P(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var _=[],R=[],N=1,M=null,A=3,I=!1,L=!1,F=!1;function D(e){for(var t=j(R);null!==t;){if(null===t.callback)C(R);else{if(!(t.startTime<=e))break;C(R),t.sortIndex=t.expirationTime,T(_,t)}t=j(R)}}function z(e){if(F=!1,D(e),!L)if(null!==j(_))L=!0,r(U);else{var t=j(R);null!==t&&o(z,t.startTime-e)}}function U(e,n){L=!1,F&&(F=!1,i()),I=!0;var r=A;try{for(D(n),M=j(_);null!==M&&(!(M.expirationTime>n)||e&&!a());){var u=M.callback;if(null!==u){M.callback=null,A=M.priorityLevel;var c=u(M.expirationTime<=n);n=t.unstable_now(),"function"==typeof c?M.callback=c:M===j(_)&&C(_),D(n)}else C(_);M=j(_)}if(null!==M)var l=!0;else{var s=j(R);null!==s&&o(z,s.startTime-n),l=!1}return l}finally{M=null,A=r,I=!1}}function W(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=u;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=A;A=e;try{return t()}finally{A=n}},t.unstable_next=function(e){switch(A){case 1:case 2:case 3:var t=3;break;default:t=A}var n=A;A=t;try{return e()}finally{A=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var c=a.delay;c="number"==typeof c&&0<c?u+c:u,a="number"==typeof a.timeout?a.timeout:W(e)}else a=W(e),c=u;return e={id:N++,callback:n,priorityLevel:e,startTime:c,expirationTime:a=c+a,sortIndex:-1},c>u?(e.sortIndex=c,T(R,e),null===j(_)&&e===j(R)&&(F?i():F=!0,o(z,c-u))):(e.sortIndex=a,T(_,e),L||I||(L=!0,r(U))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=A;return function(){var n=A;A=t;try{return e.apply(this,arguments)}finally{A=n}}},t.unstable_getCurrentPriorityLevel=function(){return A},t.unstable_shouldYield=function(){var e=t.unstable_now();D(e);var n=j(_);return n!==M&&null!==M&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<M.expirationTime||a()},t.unstable_requestPaint=B,t.unstable_continueExecution=function(){L||I||(L=!0,r(U))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return j(_)},t.unstable_Profiling=null},function(e,t,n){"use strict";var r=n(398);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.11.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,c=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.suspense_list"):60120,m=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case c:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case p:case l:return e;default:return t}}case g:case m:case i:return t}}}function E(e){return x(e)===d}t.typeOf=x,t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=l,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=m,t.Portal=i,t.Profiler=c,t.StrictMode=u,t.Suspense=h,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===c||e===u||e===h||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===l||e.$$typeof===s||e.$$typeof===p||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w)},t.isAsyncMode=function(e){return E(e)||x(e)===f},t.isConcurrentMode=E,t.isContextConsumer=function(e){return x(e)===s},t.isContextProvider=function(e){return x(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return x(e)===p},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===g},t.isMemo=function(e){return x(e)===m},t.isPortal=function(e){return x(e)===i},t.isProfiler=function(e){return x(e)===c},t.isStrictMode=function(e){return x(e)===u},t.isSuspense=function(e){return x(e)===h}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict"},function(e,t,n){"use strict";var r=n(26),o=n(167),i=n(404),a=n(173);function u(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var c=u(n(170));c.Axios=i,c.create=function(e){return u(a(c.defaults,e))},c.Cancel=n(174),c.CancelToken=n(417),c.isCancel=n(169),c.all=function(e){return Promise.all(e)},c.spread=n(418),e.exports=c,e.exports.default=c},function(e,t){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&null!=e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}},function(e,t,n){"use strict";var r=n(26),o=n(168),i=n(405),a=n(406),u=n(173);function c(e){this.defaults=e,this.interceptors={request:new i,response:new i}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=u(this.defaults,e)).method=e.method?e.method.toLowerCase():"get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},c.prototype.getUri=function(e){return e=u(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=c},function(e,t,n){"use strict";var r=n(26);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(26),o=n(407),i=n(169),a=n(170),u=n(415),c=n(416);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.baseURL&&!u(e.url)&&(e.url=c(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return l(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(l(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(26);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,l=[],s=!1,f=-1;function d(){s&&c&&(s=!1,c.length?l=c.concat(l):f=-1,l.length&&p())}function p(){if(!s){var e=u(d);s=!0;for(var t=l.length;t;){for(c=l,l=[];++f<t;)c&&c[f].run();f=-1,t=l.length}c=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new h(e,t)),1!==l.length||s||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(26);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(172);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(26),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(26);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(26);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(174);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(175);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=i.default.memo(i.default.forwardRef((function(t,n){return i.default.createElement(a.default,(0,o.default)({ref:n},t),e)})));0;return n.muiName=a.default.muiName,n};var o=r(n(420)),i=r(n(0)),a=r(n(425))},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){var r=n(120);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1},i=n(177)(r,o);r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(120,(function(){var t=n(120);"string"==typeof t&&(t=[[e.i,t,""]]),i(t)})),e.hot.dispose((function(){i()}))},function(e,t,n){var r=n(121);"string"==typeof r&&(r=[[e.i,r,""]]);var o={insert:"head",singleton:!1},i=n(177)(r,o);r.locals&&(e.exports=r.locals),r.locals||e.hot.accept(121,(function(){var t=n(121);"string"==typeof t&&(t=[[e.i,t,""]]),i(t)})),e.hot.dispose((function(){i()}))},function(e,t,n){"use strict";n.r(t);n(191);var r=n(0),o=n.n(r),i=n(20),a=n.n(i),u=n(5),c=n.n(u),l=o.a.createContext(null);var s=function(e){e()},f=function(){return s},d=null,p={notify:function(){}};var h=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=p,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){var e,t,n;this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=(e=f(),t=[],n=[],{clear:function(){n=d,t=d},notify:function(){var r=t=n;e((function(){for(var e=0;e<r.length;e++)r[e]()}))},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&t!==d&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}))},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=p)},e}();function v(e){var t=e.store,n=e.context,i=e.children,a=Object(r.useMemo)((function(){var e=new h(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),u=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=a.subscription;return e.trySubscribe(),u!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,u]);var c=n||l;return o.a.createElement(c.Provider,{value:a},i)}v.propTypes={store:c.a.shape({subscribe:c.a.func.isRequired,dispatch:c.a.func.isRequired,getState:c.a.func.isRequired}),context:c.a.object,children:c.a.any};var m=v,g=n(1),y=n(16),b=n(60),w=n.n(b),x=n(43),E=n.n(x),S=n(90),k=[],O=[null,null];function T(e,t){var n=e[1];return[t.payload,n+1]}var j=function(){return[null,0]},C="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;function P(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,a=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,u=n.methodName,c=void 0===u?"connectAdvanced":u,s=n.renderCountProp,f=void 0===s?void 0:s,d=n.shouldHandleStateChanges,p=void 0===d||d,v=n.storeKey,m=void 0===v?"store":v,b=n.withRef,x=void 0!==b&&b,P=n.forwardRef,_=void 0!==P&&P,R=n.context,N=void 0===R?l:R,M=Object(y.a)(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);E()(void 0===f,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),E()(!x,"withRef is removed. To access the wrapped instance, use a ref on the connected component");E()("store"===m,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var A=N;return function(t){var n=t.displayName||t.name||"Component",i=a(n),u=Object(g.a)({},M,{getDisplayName:a,methodName:c,renderCountProp:f,shouldHandleStateChanges:p,storeKey:m,displayName:i,wrappedComponentName:n,WrappedComponent:t}),l=M.pure;var s=l?r.useMemo:function(e){return e()};function d(n){var a=Object(r.useMemo)((function(){var e=n.forwardedRef,t=Object(y.a)(n,["forwardedRef"]);return[n.context,e,t]}),[n]),c=a[0],l=a[1],f=a[2],d=Object(r.useMemo)((function(){return c&&c.Consumer&&Object(S.isContextConsumer)(o.a.createElement(c.Consumer,null))?c:A}),[c,A]),v=Object(r.useContext)(d),m=Boolean(n.store),b=Boolean(v)&&Boolean(v.store);E()(m||b,'Could not find "store" in the context of "'+i+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+i+" in connect options.");var w=n.store||v.store,x=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,u)}(w)}),[w]),P=Object(r.useMemo)((function(){if(!p)return O;var e=new h(w,m?null:v.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[w,m,v]),_=P[0],R=P[1],N=Object(r.useMemo)((function(){return m?v:Object(g.a)({},v,{subscription:_})}),[m,v,_]),M=Object(r.useReducer)(T,k,j),I=M[0][0],L=M[1];if(I&&I.error)throw I.error;var F=Object(r.useRef)(),D=Object(r.useRef)(f),z=Object(r.useRef)(),U=Object(r.useRef)(!1),W=s((function(){return z.current&&f===D.current?z.current:x(w.getState(),f)}),[w,I,f]);C((function(){D.current=f,F.current=W,U.current=!1,z.current&&(z.current=null,R())})),C((function(){if(p){var e=!1,t=null,n=function(){if(!e){var n,r,o=w.getState();try{n=x(o,D.current)}catch(e){r=e,t=e}r||(t=null),n===F.current?U.current||R():(F.current=n,z.current=n,U.current=!0,L({type:"STORE_UPDATED",payload:{latestStoreState:o,error:r}}))}};_.onStateChange=n,_.trySubscribe(),n();return function(){if(e=!0,_.tryUnsubscribe(),_.onStateChange=null,t)throw t}}}),[w,_,x]);var B=Object(r.useMemo)((function(){return o.a.createElement(t,Object(g.a)({},W,{ref:l}))}),[l,t,W]);return Object(r.useMemo)((function(){return p?o.a.createElement(d.Provider,{value:N},B):B}),[d,B,N])}var v=l?o.a.memo(d):d;if(v.WrappedComponent=t,v.displayName=i,_){var b=o.a.forwardRef((function(e,t){return o.a.createElement(v,Object(g.a)({},e,{forwardedRef:t}))}));return b.displayName=i,b.WrappedComponent=t,w()(b,t)}return w()(v,t)}}var _=Object.prototype.hasOwnProperty;function R(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function N(e,t){if(R(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!_.call(t,n[o])||!R(e[n[o]],t[n[o]]))return!1;return!0}var M=n(122),A=function(){return Math.random().toString(36).substring(7).split("").join(".")},I={INIT:"@@redux/INIT"+A(),REPLACE:"@@redux/REPLACE"+A(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+A()}};function L(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function F(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function D(e,t){return function(){return t(e.apply(this,arguments))}}function z(e,t){if("function"==typeof e)return D(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=D(o,t))}return n}function U(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function W(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function B(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?W(n,!0).forEach((function(t){U(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):W(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function H(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function V(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function $(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function q(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=$(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=$(o),o=r(t,n)),o},r}}var G=[function(e){return"function"==typeof e?q(e):void 0},function(e){return e?void 0:V((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?V((function(t){return z(e,t)})):void 0}];var K=[function(e){return"function"==typeof e?q(e):void 0},function(e){return e?void 0:V((function(){return{}}))}];function Y(e,t,n){return Object(g.a)({},n,{},e,{},t)}var Q=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var c=e(t,n,u);return a?o&&i(c,r)||(r=c):(a=!0,r=c),r}}}(e):void 0},function(e){return e?void 0:function(){return Y}}];function X(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function J(e,t,n,r,o){var i,a,u,c,l,s=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h,v,m=!f(p,a),g=!s(o,i);return i=o,a=p,m&&g?(u=e(i,a),t.dependsOnOwnProps&&(c=t(r,a)),l=n(u,c,a)):m?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(c=t(r,a)),l=n(u,c,a)):g?(h=e(i,a),v=!d(h,u),u=h,v&&(l=n(u,c,a)),l):l}return function(o,s){return p?h(o,s):(u=e(i=o,a=s),c=t(r,a),l=n(u,c,a),p=!0,l)}}function Z(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=Object(y.a)(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),c=o(e,i);return(i.pure?J:X)(a,u,c,e,i)}function ee(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function te(e,t){return e===t}var ne,re,oe,ie,ae,ue,ce,le,se,fe,de,pe,he=(oe=(re=void 0===ne?{}:ne).connectHOC,ie=void 0===oe?P:oe,ae=re.mapStateToPropsFactories,ue=void 0===ae?K:ae,ce=re.mapDispatchToPropsFactories,le=void 0===ce?G:ce,se=re.mergePropsFactories,fe=void 0===se?Q:se,de=re.selectorFactory,pe=void 0===de?Z:de,function(e,t,n,r){void 0===r&&(r={});var o=r,i=o.pure,a=void 0===i||i,u=o.areStatesEqual,c=void 0===u?te:u,l=o.areOwnPropsEqual,s=void 0===l?N:l,f=o.areStatePropsEqual,d=void 0===f?N:f,p=o.areMergedPropsEqual,h=void 0===p?N:p,v=Object(y.a)(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),m=ee(e,ue,"mapStateToProps"),b=ee(t,le,"mapDispatchToProps"),w=ee(n,fe,"mergeProps");return ie(pe,Object(g.a)({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:m,initMapDispatchToProps:b,initMergeProps:w,pure:a,areStatesEqual:c,areOwnPropsEqual:s,areStatePropsEqual:d,areMergedPropsEqual:h},v))});function ve(){var e=Object(r.useContext)(l);return E()(e,"could not find react-redux context value; please ensure the component is wrapped in a <Provider>"),e}function me(e){void 0===e&&(e=l);var t=e===l?ve:function(){return Object(r.useContext)(e)};return function(){return t().store}}var ge=me();!function(e){void 0===e&&(e=l);var t=e===l?ge:me(e)}();var ye="undefined"!=typeof window?r.useLayoutEffect:r.useEffect,be=function(e,t){return e===t};var we;!function(e){void 0===e&&(e=l);var t=e===l?ve:function(){return Object(r.useContext)(e)}}();function xe(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}we=i.unstable_batchedUpdates,s=we;var Ee=xe();Ee.withExtraArgument=xe;var Se=Ee,ke=n(179),Oe="GET_NOTE_RECEIEVE_DATA",Te="GET_NOTE_COMPLETED_DATA";function je(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ce(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?je(n,!0).forEach((function(t){Pe(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):je(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Pe(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var _e={loading_getnotes:!0,getnotes:[]};var Re=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:I.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:I.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+I.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},u=0;u<a.length;u++){var c=a[u],l=n[c],s=e[c],f=l(s,t);if(void 0===f){var d=F(c,t);throw new Error(d)}o[c]=f,r=r||f!==s}return r?o:e}}({data:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:_e,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case Oe:return Object.assign({},e,Ce({},e,{loading_getnotes:!0}));case Te:return Object.assign({},e,Ce({},e,{loading_getnotes:!1,getnotes:t.getnotes}));default:return e}}}),Ne=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return B({},n,{dispatch:r=H.apply(void 0,i)(n.dispatch)})}}}(Se,Object(ke.createLogger)({collapsed:!0}))((function e(t,n,r){var o;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(e)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var i=t,a=n,u=[],c=u,l=!1;function s(){c===u&&(c=u.slice())}function f(){if(l)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return a}function d(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(l)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return s(),c.push(e),function(){if(t){if(l)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,s();var n=c.indexOf(e);c.splice(n,1)}}}function p(e){if(!L(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(l)throw new Error("Reducers may not dispatch actions.");try{l=!0,a=i(a,e)}finally{l=!1}for(var t=u=c,n=0;n<t.length;n++){(0,t[n])()}return e}return p({type:I.INIT}),(o={dispatch:p,subscribe:d,getState:f,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");i=e,p({type:I.REPLACE})}})[M.a]=function(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(f())}return n(),{unsubscribe:t(n)}}})[M.a]=function(){return this},e},o}))(Re),Me=n(21);function Ae(e){return"/"===e.charAt(0)}function Ie(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var Le=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&Ae(e),a=t&&Ae(t),u=i||a;if(e&&Ae(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var c=o[o.length-1];n="."===c||".."===c||""===c}else n=!1;for(var l=0,s=o.length;s>=0;s--){var f=o[s];"."===f?Ie(o,s):".."===f?(Ie(o,s),l++):l&&(Ie(o,s),l--)}if(!u)for(;l--;l)o.unshift("..");!u||""===o[0]||o[0]&&Ae(o[0])||o.unshift("");var d=o.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d};var Fe=!0,De="Invariant failed";var ze=function(e,t){if(!e)throw Fe?new Error(De):new Error(De+": "+(t||""))};function Ue(e){return"/"===e.charAt(0)?e:"/"+e}function We(e){return"/"===e.charAt(0)?e.substr(1):e}function Be(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function He(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function Ve(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function $e(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=Object(g.a)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Le(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function qe(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var Ge=!("undefined"==typeof window||!window.document||!window.document.createElement);function Ke(e,t){t(window.confirm(e))}var Ye="popstate",Qe="hashchange";function Xe(){try{return window.history.state||{}}catch(e){return{}}}function Je(e){void 0===e&&(e={}),Ge||ze(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,u=void 0!==a&&a,c=i.getUserConfirmation,l=void 0===c?Ke:c,s=i.keyLength,f=void 0===s?6:s,d=e.basename?He(Ue(e.basename)):"";function p(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return d&&(i=Be(i,d)),$e(i,r,n)}function h(){return Math.random().toString(36).substr(2,f)}var v=qe();function m(e){Object(g.a)(P,e),P.length=n.length,v.notifyListeners(P.location,P.action)}function y(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||x(p(e.state))}function b(){x(p(Xe()))}var w=!1;function x(e){if(w)w=!1,m();else{v.confirmTransitionTo(e,"POP",l,(function(t){t?m({action:"POP",location:e}):function(e){var t=P.location,n=S.indexOf(t.key);-1===n&&(n=0);var r=S.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(w=!0,O(o))}(e)}))}}var E=p(Xe()),S=[E.key];function k(e){return d+Ve(e)}function O(e){n.go(e)}var T=0;function j(e){1===(T+=e)&&1===e?(window.addEventListener(Ye,y),o&&window.addEventListener(Qe,b)):0===T&&(window.removeEventListener(Ye,y),o&&window.removeEventListener(Qe,b))}var C=!1;var P={length:n.length,action:"POP",location:E,createHref:k,push:function(e,t){var o=$e(e,t,h(),P.location);v.confirmTransitionTo(o,"PUSH",l,(function(e){if(e){var t=k(o),i=o.key,a=o.state;if(r)if(n.pushState({key:i,state:a},null,t),u)window.location.href=t;else{var c=S.indexOf(P.location.key),l=S.slice(0,c+1);l.push(o.key),S=l,m({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=$e(e,t,h(),P.location);v.confirmTransitionTo(o,"REPLACE",l,(function(e){if(e){var t=k(o),i=o.key,a=o.state;if(r)if(n.replaceState({key:i,state:a},null,t),u)window.location.replace(t);else{var c=S.indexOf(P.location.key);-1!==c&&(S[c]=o.key),m({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:O,goBack:function(){O(-1)},goForward:function(){O(1)},block:function(e){void 0===e&&(e=!1);var t=v.setPrompt(e);return C||(j(1),C=!0),function(){return C&&(C=!1,j(-1)),t()}},listen:function(e){var t=v.appendListener(e);return j(1),function(){j(-1),t()}}};return P}var Ze="hashchange",et={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+We(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:We,decodePath:Ue},slash:{encodePath:Ue,decodePath:Ue}};function tt(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function nt(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function rt(e){window.location.replace(tt(window.location.href)+"#"+e)}function ot(e){void 0===e&&(e={}),Ge||ze(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?Ke:r,i=n.hashType,a=void 0===i?"slash":i,u=e.basename?He(Ue(e.basename)):"",c=et[a],l=c.encodePath,s=c.decodePath;function f(){var e=s(nt());return u&&(e=Be(e,u)),$e(e)}var d=qe();function p(e){Object(g.a)(T,e),T.length=t.length,d.notifyListeners(T.location,T.action)}var h=!1,v=null;function m(){var e,t,n=nt(),r=l(n);if(n!==r)rt(r);else{var i=f(),a=T.location;if(!h&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(v===Ve(i))return;v=null,function(e){if(h)h=!1,p();else{d.confirmTransitionTo(e,"POP",o,(function(t){t?p({action:"POP",location:e}):function(e){var t=T.location,n=x.lastIndexOf(Ve(t));-1===n&&(n=0);var r=x.lastIndexOf(Ve(e));-1===r&&(r=0);var o=n-r;o&&(h=!0,E(o))}(e)}))}}(i)}}var y=nt(),b=l(y);y!==b&&rt(b);var w=f(),x=[Ve(w)];function E(e){t.go(e)}var S=0;function k(e){1===(S+=e)&&1===e?window.addEventListener(Ze,m):0===S&&window.removeEventListener(Ze,m)}var O=!1;var T={length:t.length,action:"POP",location:w,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=tt(window.location.href)),n+"#"+l(u+Ve(e))},push:function(e,t){var n=$e(e,void 0,void 0,T.location);d.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=Ve(n),r=l(u+t);if(nt()!==r){v=t,function(e){window.location.hash=e}(r);var o=x.lastIndexOf(Ve(T.location)),i=x.slice(0,o+1);i.push(t),x=i,p({action:"PUSH",location:n})}else p()}}))},replace:function(e,t){var n=$e(e,void 0,void 0,T.location);d.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=Ve(n),r=l(u+t);nt()!==r&&(v=t,rt(r));var o=x.indexOf(Ve(T.location));-1!==o&&(x[o]=t),p({action:"REPLACE",location:n})}}))},go:E,goBack:function(){E(-1)},goForward:function(){E(1)},block:function(e){void 0===e&&(e=!1);var t=d.setPrompt(e);return O||(k(1),O=!0),function(){return O&&(O=!1,k(-1)),t()}},listen:function(e){var t=d.appendListener(e);return k(1),function(){k(-1),t()}}};return T}function it(e,t,n){return Math.min(Math.max(e,t),n)}var at=n(123),ut=n.n(at),ct=n(185),lt=n.n(ct),st=1073741823;var ft=o.a.createContext||function(e,t){var n,o,i="__create-react-context-"+lt()()+"__",a=function(e){function n(){var t,n,r;return(t=e.apply(this,arguments)||this).emitter=(n=t.props.value,r=[],{on:function(e){r.push(e)},off:function(e){r=r.filter((function(t){return t!==e}))},get:function(){return n},set:function(e,t){n=e,r.forEach((function(e){return e(n,t)}))}}),t}ut()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[i]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):st,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(r.Component);a.childContextTypes=((n={})[i]=c.a.object.isRequired,n);var u=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}ut()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?st:t},r.componentDidMount=function(){this.context[i]&&this.context[i].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?st:e},r.componentWillUnmount=function(){this.context[i]&&this.context[i].off(this.onUpdate)},r.getValue=function(){return this.context[i]?this.context[i].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return u.contextTypes=((o={})[i]=c.a.object,o),{Provider:a,Consumer:u}},dt=n(124),pt=n.n(dt),ht=function(e){var t=ft();return t.displayName=e,t}("Router"),vt=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(Me.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.a.createElement(ht.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(o.a.Component);o.a.Component;o.a.Component;var mt={},gt=1e4,yt=0;function bt(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,u=void 0!==a&&a,c=n.sensitive,l=void 0!==c&&c;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=mt[n]||(mt[n]={});if(r[e])return r[e];var o=[],i={regexp:pt()(e,o,t),keys:o};return yt<gt&&(r[e]=i,yt++),i}(n,{end:i,strict:u,sensitive:l}),o=r.regexp,a=r.keys,c=o.exec(e);if(!c)return null;var s=c[0],f=c.slice(1),d=e===s;return i&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var wt=function(e){function t(){return e.apply(this,arguments)||this}return Object(Me.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(ht.Consumer,null,(function(t){t||ze(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?bt(n.pathname,e.props):t.match,i=Object(g.a)({},t,{location:n,match:r}),a=e.props,u=a.children,c=a.component,l=a.render;return Array.isArray(u)&&0===u.length&&(u=null),o.a.createElement(ht.Provider,{value:i},i.match?u?"function"==typeof u?u(i):u:c?o.a.createElement(c,i):l?l(i):null:"function"==typeof u?u(i):null)}))},t}(o.a.Component);function xt(e){return"/"===e.charAt(0)?e:"/"+e}function Et(e,t){if(!e)return t;var n=xt(e);return 0!==t.pathname.indexOf(n)?t:Object(g.a)({},t,{pathname:t.pathname.substr(n.length)})}function St(e){return"string"==typeof e?e:Ve(e)}function kt(e){return function(){ze(!1)}}function Ot(){}o.a.Component;var Tt=function(e){function t(){return e.apply(this,arguments)||this}return Object(Me.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(ht.Consumer,null,(function(t){t||ze(!1);var n,r,i=e.props.location||t.location;return o.a.Children.forEach(e.props.children,(function(e){if(null==r&&o.a.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?bt(i.pathname,Object(g.a)({},e.props,{path:a})):t.match}})),r?o.a.cloneElement(n,{location:i,computedMatch:r}):null}))},t}(o.a.Component);o.a.useContext;o.a.Component;var jt=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=ot(t.props),t}return Object(Me.a)(t,e),t.prototype.render=function(){return o.a.createElement(vt,{history:this.history,children:this.props.children})},t}(o.a.Component);var Ct=function(e,t){return"function"==typeof e?e(t):e},Pt=function(e,t){return"string"==typeof e?$e(e,null,null,t):e},_t=function(e){return e},Rt=o.a.forwardRef;void 0===Rt&&(Rt=_t);var Nt=Rt((function(e,t){var n=e.innerRef,r=e.navigate,i=e.onClick,a=Object(y.a)(e,["innerRef","navigate","onClick"]),u=a.target,c=Object(g.a)({},a,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||u&&"_self"!==u||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return c.ref=_t!==Rt&&t||n,o.a.createElement("a",c)}));var Mt=Rt((function(e,t){var n=e.component,r=void 0===n?Nt:n,i=e.replace,a=e.to,u=e.innerRef,c=Object(y.a)(e,["component","replace","to","innerRef"]);return o.a.createElement(ht.Consumer,null,(function(e){e||ze(!1);var n=e.history,l=Pt(Ct(a,e.location),e.location),s=l?n.createHref(l):"",f=Object(g.a)({},c,{href:s,navigate:function(){var t=Ct(a,e.location);(i?n.replace:n.push)(t)}});return _t!==Rt?f.ref=t||u:f.innerRef=u,o.a.createElement(r,f)}))})),At=function(e){return e},It=o.a.forwardRef;void 0===It&&(It=At);It((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,i=e.activeClassName,a=void 0===i?"active":i,u=e.activeStyle,c=e.className,l=e.exact,s=e.isActive,f=e.location,d=e.strict,p=e.style,h=e.to,v=e.innerRef,m=Object(y.a)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","strict","style","to","innerRef"]);return o.a.createElement(ht.Consumer,null,(function(e){e||ze(!1);var n=f||e.location,i=Pt(Ct(h,n),n),y=i.pathname,b=y&&y.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),w=b?bt(n.pathname,{path:b,exact:l,strict:d}):null,x=!!(s?s(w,n):w),E=x?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(c,a):c,S=x?Object(g.a)({},p,{},u):p,k=Object(g.a)({"aria-current":x&&r||null,className:E,style:S,to:i},m);return At!==It?k.ref=t||v:k.innerRef=v,o.a.createElement(Mt,k)}))}));var Lt=n(446),Ft=n(68);var Dt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Object(Lt.a)(e,Object(g.a)({defaultTheme:Ft.a},t))},zt=n(3),Ut=n(12),Wt=n(4),Bt=n(6),Ht=n(11),Vt=o.a.forwardRef((function(e,t){var n=e.classes,r=e.className,i=e.component,a=void 0===i?"div":i,u=e.fixed,c=void 0!==u&&u,l=e.maxWidth,s=void 0===l?"lg":l,f=Object(zt.a)(e,["classes","className","component","fixed","maxWidth"]);return o.a.createElement(a,Object(g.a)({className:Object(Wt.a)(n.root,r,c&&n.fixed,!1!==s&&n["maxWidth".concat(Object(Ht.a)(String(s)))]),ref:t},f))})),$t=Object(Bt.a)((function(e){var t;return{root:(t={width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",paddingLeft:e.spacing(2),paddingRight:e.spacing(2)},Object(Ut.a)(t,e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),Object(Ut.a)(t,e.breakpoints.up("md"),{paddingLeft:e.spacing(4),paddingRight:e.spacing(4)}),t),fixed:Object.keys(e.breakpoints.values).reduce((function(t,n){var r=e.breakpoints.values[n];return 0!==r&&(t[e.breakpoints.up(n)]={maxWidth:r}),t}),{}),maxWidthXs:Object(Ut.a)({},e.breakpoints.up("xs"),{maxWidth:Math.max(e.breakpoints.values.xs,444)}),maxWidthSm:Object(Ut.a)({},e.breakpoints.up("sm"),{maxWidth:e.breakpoints.values.sm}),maxWidthMd:Object(Ut.a)({},e.breakpoints.up("md"),{maxWidth:e.breakpoints.values.md}),maxWidthLg:Object(Ut.a)({},e.breakpoints.up("lg"),{maxWidth:e.breakpoints.values.lg}),maxWidthXl:Object(Ut.a)({},e.breakpoints.up("xl"),{maxWidth:e.breakpoints.values.xl})}}),{name:"MuiContainer"})(Vt),qt=n(180),Gt=n(91),Kt=n(181);var Yt=!1,Qt=o.a.createContext(null),Xt="unmounted",Jt="exited",Zt="entering",en="entered",tn=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,i=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?i?(o=Jt,r.appearStatus=Zt):o=en:o=t.unmountOnExit||t.mountOnEnter?Xt:Jt,r.state={status:o},r.nextCallback=null,r}Object(Me.a)(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===Xt?{status:Jt}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Zt&&n!==en&&(t=Zt):n!==Zt&&n!==en||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=a.a.findDOMNode(this);t===Zt?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===Jt&&this.setState({status:Xt})},n.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context?this.context.isMounting:t,i=this.getTimeouts(),a=o?i.appear:i.enter;!t&&!r||Yt?this.safeSetState({status:en},(function(){n.props.onEntered(e)})):(this.props.onEnter(e,o),this.safeSetState({status:Zt},(function(){n.props.onEntering(e,o),n.onTransitionEnd(e,a,(function(){n.safeSetState({status:en},(function(){n.props.onEntered(e,o)}))}))})))},n.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n&&!Yt?(this.props.onExit(e),this.safeSetState({status:"exiting"},(function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,(function(){t.safeSetState({status:Jt},(function(){t.props.onExited(e)}))}))}))):this.safeSetState({status:Jt},(function(){t.props.onExited(e)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t,n){this.setNextCallback(n);var r=null==t&&!this.props.addEndListener;e&&!r?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===Xt)return null;var t=this.props,n=t.children,r=Object(y.a)(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return o.a.createElement(Qt.Provider,{value:null},n(e,r));var i=o.a.Children.only(n);return(o.a.createElement(Qt.Provider,{value:null},o.a.cloneElement(i,r)))},t}(o.a.Component);function nn(){}tn.contextType=Qt,tn.propTypes={},tn.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:nn,onEntering:nn,onEntered:nn,onExit:nn,onExiting:nn,onExited:nn},tn.UNMOUNTED=0,tn.EXITED=1,tn.ENTERING=2,tn.ENTERED=3,tn.EXITING=4;var rn=tn,on=n(61);function an(e,t){var n=e.timeout,r=e.style,o=void 0===r?{}:r;return{duration:o.transitionDuration||"number"==typeof n?n:n[t.mode]||0,delay:o.transitionDelay}}var un=n(447);function cn(){return Object(un.a)()||Ft.a}var ln=o.a.forwardRef((function(e,t){var n=e.children,r=e.classes,i=e.className,a=e.collapsedHeight,u=void 0===a?"0px":a,c=e.component,l=void 0===c?"div":c,s=e.in,f=e.onEnter,d=e.onEntered,p=e.onEntering,h=e.onExit,v=e.onExiting,m=e.style,y=e.timeout,b=void 0===y?on.b.standard:y,w=Object(zt.a)(e,["children","classes","className","collapsedHeight","component","in","onEnter","onEntered","onEntering","onExit","onExiting","style","timeout"]),x=cn(),E=o.a.useRef(),S=o.a.useRef(null),k=o.a.useRef();o.a.useEffect((function(){return function(){clearTimeout(E.current)}}),[]);return o.a.createElement(rn,Object(g.a)({in:s,onEnter:function(e,t){e.style.height=u,f&&f(e,t)},onEntered:function(e,t){e.style.height="auto",d&&d(e,t)},onEntering:function(e,t){var n=S.current?S.current.clientHeight:0,r=an({style:m,timeout:b},{mode:"enter"}).duration;if("auto"===b){var o=x.transitions.getAutoHeightDuration(n);e.style.transitionDuration="".concat(o,"ms"),k.current=o}else e.style.transitionDuration="string"==typeof r?r:"".concat(r,"ms");e.style.height="".concat(n,"px"),p&&p(e,t)},onExit:function(e){var t=S.current?S.current.clientHeight:0;e.style.height="".concat(t,"px"),h&&h(e)},onExiting:function(e){var t=S.current?S.current.clientHeight:0,n=an({style:m,timeout:b},{mode:"exit"}).duration;if("auto"===b){var r=x.transitions.getAutoHeightDuration(t);e.style.transitionDuration="".concat(r,"ms"),k.current=r}else e.style.transitionDuration="string"==typeof n?n:"".concat(n,"ms");e.style.height=u,v&&v(e)},addEndListener:function(e,t){"auto"===b&&(E.current=setTimeout(t,k.current||0))},timeout:"auto"===b?null:b},w),(function(e,a){return o.a.createElement(l,Object(g.a)({className:Object(Wt.a)(r.container,i,{entered:r.entered,exited:!s&&"0px"===u&&r.hidden}[e]),style:Object(g.a)({minHeight:u},m),ref:t},a),o.a.createElement("div",{className:r.wrapper,ref:S},o.a.createElement("div",{className:r.wrapperInner},n)))}))}));ln.muiSupportAuto=!0;var sn=Object(Bt.a)((function(e){return{container:{height:0,overflow:"hidden",transition:e.transitions.create("height")},entered:{height:"auto",overflow:"visible"},hidden:{visibility:"hidden"},wrapper:{display:"flex"},wrapperInner:{width:"100%"}}}),{name:"MuiCollapse"})(ln),fn=o.a.forwardRef((function(e,t){var n=e.classes,r=e.className,i=e.component,a=void 0===i?"div":i,u=e.square,c=void 0!==u&&u,l=e.elevation,s=void 0===l?1:l,f=Object(zt.a)(e,["classes","className","component","square","elevation"]);cn();var d=Object(Wt.a)(n.root,n["elevation".concat(s)],r,!c&&n.rounded);return o.a.createElement(a,Object(g.a)({className:d,ref:t},f))})),dn=Object(Bt.a)((function(e){var t={};return e.shadows.forEach((function(e,n){t["elevation".concat(n)]={boxShadow:e}})),Object(g.a)({root:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},rounded:{borderRadius:e.shape.borderRadius}},t)}),{name:"MuiPaper"})(fn),pn=o.a.forwardRef((function(e,t){var n=e.children,r=e.classes,i=e.className,a=e.defaultExpanded,u=void 0!==a&&a,c=e.disabled,l=void 0!==c&&c,s=e.expanded,f=e.onChange,d=e.square,p=void 0!==d&&d,h=e.TransitionComponent,v=void 0===h?sn:h,m=e.TransitionProps,y=Object(zt.a)(e,["children","classes","className","defaultExpanded","disabled","expanded","onChange","square","TransitionComponent","TransitionProps"]),b=o.a.useRef(null!=s).current,w=o.a.useState(u),x=w[0],E=w[1],S=b?s:x;var k,O=o.a.Children.toArray(n),T=(k=O,Object(qt.a)(k)||Object(Gt.a)(k)||Object(Kt.a)()),j=T[0],C=T.slice(1);return o.a.createElement(dn,Object(g.a)({className:Object(Wt.a)(r.root,i,S&&r.expanded,l&&r.disabled,!p&&r.rounded),ref:t,square:p},y),o.a.cloneElement(j,{disabled:l,expanded:S,onChange:function(e){b||E(!S),f&&f(e,!S)}}),o.a.createElement(v,Object(g.a)({in:S,timeout:"auto"},m),o.a.createElement("div",{"aria-labelledby":j.props.id,id:j.props["aria-controls"],role:"region"},C)))})),hn=Object(Bt.a)((function(e){var t={duration:e.transitions.duration.shortest};return{root:{position:"relative",transition:e.transitions.create(["margin"],t),"&:before":{position:"absolute",left:0,top:-1,right:0,height:1,content:'""',opacity:1,backgroundColor:e.palette.divider,transition:e.transitions.create(["opacity","background-color"],t)},"&:first-child":{"&:before":{display:"none"}},"&$expanded":{margin:"16px 0","&:first-child":{marginTop:0},"&:last-child":{marginBottom:0},"&:before":{opacity:0}},"&$expanded + &":{"&:before":{display:"none"}},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}},rounded:{borderRadius:0,"&:first-child":{borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius},"&:last-child":{borderBottomLeftRadius:e.shape.borderRadius,borderBottomRightRadius:e.shape.borderRadius,"@supports (-ms-ime-align: auto)":{borderBottomLeftRadius:0,borderBottomRightRadius:0}}},expanded:{},disabled:{}}}),{name:"MuiExpansionPanel"})(pn);function vn(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function mn(e,t){return o.a.useMemo((function(){return null==e&&null==t?null:function(n){vn(e,n),vn(t,n)}}),[e,t])}var gn="undefined"!=typeof window?o.a.useLayoutEffect:o.a.useEffect;function yn(e){var t=o.a.useRef(e);return gn((function(){t.current=e})),o.a.useCallback((function(e){return(0,t.current)(e)}),[])}var bn="undefined"!=typeof window?o.a.useLayoutEffect:o.a.useEffect;var wn=function(e){var t=e.children,n=e.defer,r=void 0!==n&&n,i=e.fallback,a=void 0===i?null:i,u=o.a.useState(!1),c=u[0],l=u[1];return bn((function(){r||l(!0)}),[r]),o.a.useEffect((function(){r&&l(!0)}),[r]),o.a.createElement(o.a.Fragment,null,c?t:a)},xn=!0,En=!1,Sn=null,kn={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function On(){xn=!0}function Tn(){xn=!1}function jn(){"hidden"===this.visibilityState&&En&&(xn=!0)}function Cn(e){var t,n,r,o=e.target;try{return o.matches(":focus-visible")}catch(e){}return xn||(n=(t=o).type,!("INPUT"!==(r=t.tagName)||!kn[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function Pn(){En=!0,window.clearTimeout(Sn),Sn=window.setTimeout((function(){En=!1,window.clearTimeout(Sn)}),100)}function _n(){return{isFocusVisible:Cn,onBlurVisible:Pn,ref:o.a.useCallback((function(e){var t=a.a.findDOMNode(e);null!=t&&function(e){e.addEventListener("keydown",On,!0),e.addEventListener("mousedown",Tn,!0),e.addEventListener("pointerdown",Tn,!0),e.addEventListener("touchstart",Tn,!0),e.addEventListener("visibilitychange",jn,!0)}(t.ownerDocument)}),[])}}var Rn=n(92),Nn=n(69);function Mn(e,t){var n=Object.create(null);return e&&r.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&Object(r.isValidElement)(e)?t(e):e}(e)})),n}function An(e,t,n){return null!=n[t]?n[t]:e.props[t]}function In(e,t,n){var o=Mn(e.children),i=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var u={};for(var c in t){if(o[c])for(r=0;r<o[c].length;r++){var l=o[c][r];u[o[c][r]]=n(l)}u[c]=n(c)}for(r=0;r<i.length;r++)u[i[r]]=n(i[r]);return u}(t,o);return Object.keys(i).forEach((function(a){var u=i[a];if(Object(r.isValidElement)(u)){var c=a in t,l=a in o,s=t[a],f=Object(r.isValidElement)(s)&&!s.props.in;!l||c&&!f?l||!c||f?l&&c&&Object(r.isValidElement)(s)&&(i[a]=Object(r.cloneElement)(u,{onExited:n.bind(null,u),in:s.props.in,exit:An(u,"exit",e),enter:An(u,"enter",e)})):i[a]=Object(r.cloneElement)(u,{in:!1}):i[a]=Object(r.cloneElement)(u,{onExited:n.bind(null,u),in:!0,exit:An(u,"exit",e),enter:An(u,"enter",e)})}})),i}var Ln=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Fn=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(Object(Nn.a)(Object(Nn.a)(r)));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}Object(Me.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,o,i=t.children,a=t.handleExited;return{children:t.firstRender?(n=e,o=a,Mn(n.children,(function(e){return Object(r.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:An(e,"appear",n),enter:An(e,"enter",n),exit:An(e,"exit",n)})}))):In(e,i,a),firstRender:!1}},n.handleExited=function(e,t){var n=Mn(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=Object(g.a)({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=Object(y.a)(e,["component","childFactory"]),i=this.state.contextValue,a=Ln(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?o.a.createElement(Qt.Provider,{value:i},a):o.a.createElement(Qt.Provider,{value:i},o.a.createElement(t,r,a))},t}(o.a.Component);Fn.propTypes={},Fn.defaultProps={component:"div",childFactory:function(e){return e}};var Dn=Fn,zn="undefined"==typeof window?o.a.useEffect:o.a.useLayoutEffect;var Un=function(e){var t=e.classes,n=e.pulsate,r=void 0!==n&&n,i=e.rippleX,a=e.rippleY,u=e.rippleSize,c=e.in,l=e.onExited,s=void 0===l?function(){}:l,f=e.timeout,d=o.a.useState(!1),p=d[0],h=d[1],v=Object(Wt.a)(t.ripple,t.rippleVisible,r&&t.ripplePulsate),m={width:u,height:u,top:-u/2+a,left:-u/2+i},g=Object(Wt.a)(t.child,p&&t.childLeaving,r&&t.childPulsate),y=yn(s);return zn((function(){if(!c){h(!0);var e=setTimeout(y,f);return function(){clearTimeout(e)}}}),[y,c,f]),o.a.createElement("span",{className:v,style:m},o.a.createElement("span",{className:g}))},Wn=o.a.forwardRef((function(e,t){var n=e.center,r=void 0!==n&&n,i=e.classes,a=e.className,u=Object(zt.a)(e,["center","classes","className"]),c=o.a.useState([]),l=c[0],s=c[1],f=o.a.useRef(0),d=o.a.useRef(null);o.a.useEffect((function(){d.current&&(d.current(),d.current=null)}),[l]);var p=o.a.useRef(!1),h=o.a.useRef(null),v=o.a.useRef(null),m=o.a.useRef(null);o.a.useEffect((function(){return function(){clearTimeout(h.current)}}),[]);var y=o.a.useCallback((function(e){var t=e.pulsate,n=e.rippleX,r=e.rippleY,a=e.rippleSize,u=e.cb;s((function(e){return[].concat(Object(Rn.a)(e),[o.a.createElement(Un,{key:f.current,classes:i,timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:a})])})),f.current+=1,d.current=u}),[i]),b=o.a.useCallback((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,o=t.pulsate,i=void 0!==o&&o,a=t.center,u=void 0===a?r||t.pulsate:a,c=t.fakeElement,l=void 0!==c&&c;if("mousedown"===e.type&&p.current)p.current=!1;else{"touchstart"===e.type&&(p.current=!0);var s,f,d,g=l?null:m.current,b=g?g.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(u||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)s=Math.round(b.width/2),f=Math.round(b.height/2);else{var w=e.clientX?e.clientX:e.touches[0].clientX,x=e.clientY?e.clientY:e.touches[0].clientY;s=Math.round(w-b.left),f=Math.round(x-b.top)}if(u)(d=Math.sqrt((2*Math.pow(b.width,2)+Math.pow(b.height,2))/3))%2==0&&(d+=1);else{var E=2*Math.max(Math.abs((g?g.clientWidth:0)-s),s)+2,S=2*Math.max(Math.abs((g?g.clientHeight:0)-f),f)+2;d=Math.sqrt(Math.pow(E,2)+Math.pow(S,2))}e.touches?(v.current=function(){y({pulsate:i,rippleX:s,rippleY:f,rippleSize:d,cb:n})},h.current=setTimeout((function(){v.current&&(v.current(),v.current=null)}),80)):y({pulsate:i,rippleX:s,rippleY:f,rippleSize:d,cb:n})}}),[r,y]),w=o.a.useCallback((function(){b({},{pulsate:!0})}),[b]),x=o.a.useCallback((function(e,t){if(clearTimeout(h.current),"touchend"===e.type&&v.current)return e.persist(),v.current(),v.current=null,void(h.current=setTimeout((function(){x(e,t)})));v.current=null,s((function(e){return e.length>0?e.slice(1):e})),d.current=t}),[]);return o.a.useImperativeHandle(t,(function(){return{pulsate:w,start:b,stop:x}}),[w,b,x]),o.a.createElement("span",Object(g.a)({className:Object(Wt.a)(i.root,a),ref:m},u),o.a.createElement(Dn,{component:null,exit:!0},l))}));var Bn,Hn=Object(Bt.a)((function(e){return{root:{overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"$enter ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"$exit ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"$pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}}),{flip:!1,name:"MuiTouchRipple"})(((Bn=o.a.memo(Wn)).muiName="MuiTouchRipple",Bn)),Vn=o.a.forwardRef((function(e,t){var n=e.action,r=e.buttonRef,i=e.centerRipple,u=void 0!==i&&i,c=e.children,l=e.classes,s=e.className,f=e.component,d=void 0===f?"button":f,p=e.disabled,h=void 0!==p&&p,v=e.disableRipple,m=void 0!==v&&v,y=e.disableTouchRipple,b=void 0!==y&&y,w=e.focusRipple,x=void 0!==w&&w,E=e.focusVisibleClassName,S=e.onBlur,k=e.onClick,O=e.onFocus,T=e.onFocusVisible,j=e.onKeyDown,C=e.onKeyUp,P=e.onMouseDown,_=e.onMouseLeave,R=e.onMouseUp,N=e.onTouchEnd,M=e.onTouchMove,A=e.onTouchStart,I=e.onDragLeave,L=e.tabIndex,F=void 0===L?0:L,D=e.TouchRippleProps,z=e.type,U=void 0===z?"button":z,W=Object(zt.a)(e,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type"]),B=o.a.useRef(null);var H=o.a.useRef(null),V=o.a.useState(!1),$=V[0],q=V[1];h&&$&&q(!1);var G=_n(),K=G.isFocusVisible,Y=G.onBlurVisible,Q=G.ref;function X(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:b;return yn((function(r){return t&&t(r),!(r.defaultPrevented||n)&&H.current&&H.current[e](r),!0}))}o.a.useImperativeHandle(n,(function(){return{focusVisible:function(){q(!0),B.current.focus()}}}),[]),o.a.useEffect((function(){$&&x&&!m&&H.current.pulsate()}),[m,x,$]);var J=X("start",P),Z=X("stop",I),ee=X("stop",R),te=X("stop",(function(e){$&&e.preventDefault(),_&&_(e)})),ne=X("start",A),re=X("stop",N),oe=X("stop",M),ie=X("stop",(function(e){$&&(Y(e),q(!1)),S&&S(e)}),!1),ae=yn((function(e){h||(B.current||(B.current=e.currentTarget),K(e)&&(q(!0),T&&T(e)),O&&O(e))})),ue=o.a.useRef(!1),ce=yn((function(e){x&&!ue.current&&$&&H.current&&" "===e.key&&(ue.current=!0,e.persist(),H.current.stop(e,(function(){H.current.start(e)}))),j&&j(e);var t=a.a.findDOMNode(B.current);e.target!==e.currentTarget||!d||"button"===d||" "!==e.key&&"Enter"!==e.key||"A"===t.tagName&&t.href||(e.preventDefault(),k&&k(e))})),le=yn((function(e){x&&" "===e.key&&H.current&&$&&(ue.current=!1,e.persist(),H.current.stop(e,(function(){H.current.pulsate(e)}))),C&&C(e)})),se=d;"button"===se&&W.href&&(se="a");var fe={};"button"===se?(fe.type=U,fe.disabled=h):("a"===se&&W.href||(fe.role="button"),fe["aria-disabled"]=h);var de=mn(r,t),pe=mn(Q,B),he=mn(de,pe);return o.a.createElement(se,Object(g.a)({className:Object(Wt.a)(l.root,s,$&&[l.focusVisible,E],h&&l.disabled),onBlur:ie,onClick:k,onFocus:ae,onKeyDown:ce,onKeyUp:le,onMouseDown:J,onMouseLeave:te,onMouseUp:ee,onDragLeave:Z,onTouchEnd:re,onTouchMove:oe,onTouchStart:ne,ref:he,tabIndex:h?-1:F},fe,W),c,m||h?null:o.a.createElement(wn,null,o.a.createElement(Hn,Object(g.a)({ref:H,center:u},D))))})),$n=Object(Bt.a)({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})(Vn),qn=n(17),Gn=o.a.forwardRef((function(e,t){var n=e.edge,r=void 0!==n&&n,i=e.children,a=e.classes,u=e.className,c=e.color,l=void 0===c?"default":c,s=e.disabled,f=void 0!==s&&s,d=e.disableFocusRipple,p=void 0!==d&&d,h=e.size,v=void 0===h?"medium":h,m=Object(zt.a)(e,["edge","children","classes","className","color","disabled","disableFocusRipple","size"]);return o.a.createElement($n,Object(g.a)({className:Object(Wt.a)(a.root,u,"default"!==l&&a["color".concat(Object(Ht.a)(l))],f&&a.disabled,{small:a["size".concat(Object(Ht.a)(v))]}[v],{start:a.edgeStart,end:a.edgeEnd}[r]),centerRipple:!0,focusRipple:!p,disabled:f,ref:t},m),o.a.createElement("span",{className:a.label},i))})),Kn=Object(Bt.a)((function(e){return{root:{textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:12,borderRadius:"50%",overflow:"visible",color:e.palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{backgroundColor:Object(qn.c)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{backgroundColor:"transparent",color:e.palette.action.disabled}},edgeStart:{marginLeft:-12,"$sizeSmall&":{marginLeft:-3}},edgeEnd:{marginRight:-12,"$sizeSmall&":{marginRight:-3}},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:Object(qn.c)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},colorSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object(qn.c)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},disabled:{},sizeSmall:{padding:3,fontSize:e.typography.pxToRem(18)},label:{width:"100%",display:"flex",alignItems:"inherit",justifyContent:"inherit"}}}),{name:"MuiIconButton"})(Gn),Yn=o.a.forwardRef((function(e,t){var n=e.children,r=e.classes,i=e.className,a=e.disabled,u=void 0!==a&&a,c=e.expanded,l=e.expandIcon,s=e.IconButtonProps,f=e.onBlur,d=e.onChange,p=e.onClick,h=e.onFocusVisible,v=Object(zt.a)(e,["children","classes","className","disabled","expanded","expandIcon","IconButtonProps","onBlur","onChange","onClick","onFocusVisible"]),m=o.a.useState(!1),y=m[0],b=m[1];return o.a.createElement($n,Object(g.a)({focusRipple:!1,disableRipple:!0,disabled:u,component:"div","aria-expanded":c,className:Object(Wt.a)(r.root,i,u&&r.disabled,c&&r.expanded,y&&r.focused),onFocusVisible:function(e){b(!0),h&&h(e)},onBlur:function(e){b(!1),f&&f(e)},onClick:function(e){d&&d(e),p&&p(e)},ref:t},v),o.a.createElement("div",{className:Object(Wt.a)(r.content,c&&r.expanded)},n),l&&o.a.createElement(Kn,Object(g.a)({disabled:u,className:Object(Wt.a)(r.expandIcon,c&&r.expanded),edge:"end",component:"div",tabIndex:-1,"aria-hidden":!0},s),l))})),Qn=Object(Bt.a)((function(e){var t={duration:e.transitions.duration.shortest};return{root:{display:"flex",minHeight:48,transition:e.transitions.create(["min-height","background-color"],t),padding:"0 24px 0 24px","&:hover:not($disabled)":{cursor:"pointer"},"&$expanded":{minHeight:64},"&$focused":{backgroundColor:e.palette.grey[300]},"&$disabled":{opacity:.38}},expanded:{},focused:{},disabled:{},content:{display:"flex",flexGrow:1,transition:e.transitions.create(["margin"],t),margin:"12px 0","&$expanded":{margin:"20px 0"}},expandIcon:{transform:"rotate(0deg)",transition:e.transitions.create("transform",t),"&:hover":{backgroundColor:"transparent"},"&$expanded":{transform:"rotate(180deg)"}}}}),{name:"MuiExpansionPanelSummary"})(Yn);var Xn=o.a.createContext();var Jn=Xn;function Zn(e,t){return parseInt(e[t],10)||0}var er="undefined"!=typeof window?o.a.useLayoutEffect:o.a.useEffect,tr={visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"},nr=o.a.forwardRef((function(e,t){var n=e.onChange,r=e.rows,i=e.rowsMax,a=e.style,u=e.value,c=Object(zt.a)(e,["onChange","rows","rowsMax","style","value"]),l=o.a.useRef(null!=u).current,s=o.a.useRef(null),f=mn(t,s),d=o.a.useRef(null),p=o.a.useState({}),h=p[0],v=p[1],m=o.a.useCallback((function(){var t=s.current,n=window.getComputedStyle(t),o=d.current;o.style.width=n.width,o.value=t.value||e.placeholder||"x";var a=n["box-sizing"],u=Zn(n,"padding-bottom")+Zn(n,"padding-top"),c=Zn(n,"border-bottom-width")+Zn(n,"border-top-width"),l=o.scrollHeight-u;o.value="x";var f=o.scrollHeight-u,p=l;null!=r&&(p=Math.max(Number(r)*f,p)),null!=i&&(p=Math.min(Number(i)*f,p));var h=(p=Math.max(p,f))+("border-box"===a?u+c:0),m=Math.abs(p-l)<=1;v((function(e){return h>0&&Math.abs((e.outerHeightStyle||0)-h)>1||e.overflow!==m?{overflow:m,outerHeightStyle:h}:e}))}),[r,i,e.placeholder]);o.a.useEffect((function(){var e=function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:166;function r(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];var a=this;clearTimeout(t),t=setTimeout((function(){e.apply(a,o)}),n)}return r.clear=function(){clearTimeout(t)},r}((function(){m()}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}),[m]),er((function(){m()}));return o.a.createElement(o.a.Fragment,null,o.a.createElement("textarea",Object(g.a)({value:u,onChange:function(e){l||m(),n&&n(e)},ref:f,rows:r||1,style:Object(g.a)({height:h.outerHeightStyle,overflow:h.overflow?"hidden":null},a)},c)),o.a.createElement("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:d,tabIndex:-1,style:Object(g.a)({},tr,{},a)}))}));function rr(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}var or="undefined"==typeof window?o.a.useEffect:o.a.useLayoutEffect,ir=o.a.forwardRef((function(e,t){var n=e["aria-describedby"],r=e.autoComplete,i=e.autoFocus,a=e.classes,u=e.className,c=e.defaultValue,l=e.disabled,s=e.endAdornment,f=(e.error,e.fullWidth),d=void 0!==f&&f,p=e.id,h=e.inputComponent,v=void 0===h?"input":h,m=e.inputProps,y=(m=void 0===m?{}:m).className,b=Object(zt.a)(m,["className"]),w=e.inputRef,x=(e.margin,e.multiline),E=void 0!==x&&x,S=e.name,k=e.onBlur,O=e.onChange,T=e.onClick,j=e.onFocus,C=e.onKeyDown,P=e.onKeyUp,_=e.placeholder,R=e.readOnly,N=e.renderSuffix,M=e.rows,A=e.rowsMax,I=e.select,L=void 0!==I&&I,F=e.startAdornment,D=e.type,z=void 0===D?"text":D,U=e.value,W=Object(zt.a)(e,["aria-describedby","autoComplete","autoFocus","classes","className","defaultValue","disabled","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","multiline","name","onBlur","onChange","onClick","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderSuffix","rows","rowsMax","select","startAdornment","type","value"]),B=o.a.useRef(null!=U).current,H=o.a.useRef(),V=o.a.useCallback((function(e){0}),[]),$=mn(b.ref,V),q=mn(w,$),G=mn(H,q),K=o.a.useState(!1),Y=K[0],Q=K[1],X=o.a.useContext(Xn);var J=function(e){var t=e.props,n=e.states,r=e.muiFormControl;return n.reduce((function(e,n){return e[n]=t[n],r&&void 0===t[n]&&(e[n]=r[n]),e}),{})}({props:e,muiFormControl:X,states:["disabled","error","hiddenLabel","margin","required","filled"]});J.focused=X?X.focused:Y,o.a.useEffect((function(){!X&&l&&Y&&(Q(!1),k&&k())}),[X,l,Y,k]);var Z=X&&X.onFilled,ee=X&&X.onEmpty,te=o.a.useCallback((function(e){!function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(rr(e.value)&&""!==e.value||t&&rr(e.defaultValue)&&""!==e.defaultValue)}(e)?ee&&ee():Z&&Z()}),[Z,ee]);or((function(){B&&te({value:U})}),[U,te,B]);o.a.useEffect((function(){te(H.current)}),[]);var ne=v,re=Object(g.a)({},b,{ref:G});"string"!=typeof ne?re=Object(g.a)({inputRef:G,type:z},re,{ref:null}):E?M&&!A?ne="textarea":(re=Object(g.a)({rows:M,rowsMax:A},re),ne=nr):re=Object(g.a)({type:z},re);return o.a.createElement("div",Object(g.a)({className:Object(Wt.a)(a.root,u,J.disabled&&a.disabled,J.error&&a.error,d&&a.fullWidth,J.focused&&a.focused,X&&a.formControl,E&&a.multiline,F&&a.adornedStart,s&&a.adornedEnd,{dense:a.marginDense}[J.margin]),onClick:function(e){H.current&&e.currentTarget===e.target&&H.current.focus(),T&&T(e)},ref:t},W),F,o.a.createElement(Jn.Provider,{value:null},o.a.createElement(ne,Object(g.a)({"aria-invalid":J.error,"aria-describedby":n,autoComplete:r,autoFocus:i,className:Object(Wt.a)(a.input,y,J.disabled&&a.disabled,E&&a.inputMultiline,L&&a.inputSelect,J.hiddenLabel&&a.inputHiddenLabel,F&&a.inputAdornedStart,s&&a.inputAdornedEnd,{search:a.inputTypeSearch}[z],{dense:a.inputMarginDense}[J.margin]),defaultValue:c,disabled:J.disabled,id:p,onAnimationStart:function(e){te(-1!==e.animationName.indexOf("auto-fill-cancel")?H.current:{value:"x"})},name:S,onBlur:function(e){k&&k(e),X&&X.onBlur?X.onBlur(e):Q(!1)},onChange:function(e){if(!B){var t=e.target||H.current;if(null==t)throw new TypeError("Material-UI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://material-ui.com/r/input-component-ref-interface for more info.");te({value:t.value})}if(O){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];O.apply(void 0,[e].concat(r))}},onFocus:function(e){J.disabled?e.stopPropagation():(j&&j(e),X&&X.onFocus?X.onFocus(e):Q(!0))},onKeyDown:C,onKeyUp:P,placeholder:_,readOnly:R,required:J.required,rows:M,value:U},re))),s,N?N(Object(g.a)({},J,{startAdornment:F})):null)})),ar=Object(Bt.a)((function(e){var t="light"===e.palette.type,n={color:"currentColor",opacity:t?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},r={opacity:"0 !important"},o={opacity:t?.42:.5};return{root:{fontFamily:e.typography.fontFamily,color:e.palette.text.primary,fontSize:e.typography.pxToRem(16),lineHeight:"1.1875em",boxSizing:"border-box",position:"relative",cursor:"text",display:"inline-flex",alignItems:"center","&$disabled":{color:e.palette.text.disabled,cursor:"default"}},formControl:{},focused:{},disabled:{},adornedStart:{},adornedEnd:{},error:{},marginDense:{},multiline:{padding:"".concat(6,"px 0 ").concat(7,"px"),"&$marginDense":{paddingTop:3}},fullWidth:{width:"100%"},input:{font:"inherit",color:"currentColor",padding:"".concat(6,"px 0 ").concat(7,"px"),border:0,boxSizing:"content-box",background:"none",height:"1.1875em",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%",animationName:"$auto-fill-cancel","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{"-webkit-appearance":"none"},"label[data-shrink=false] + $formControl &":{"&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus::-webkit-input-placeholder":o,"&:focus::-moz-placeholder":o,"&:focus:-ms-input-placeholder":o,"&:focus::-ms-input-placeholder":o},"&$disabled":{opacity:1},"&:-webkit-autofill":{animationDuration:"5000s",animationName:"$auto-fill"}},"@keyframes auto-fill":{from:{}},"@keyframes auto-fill-cancel":{from:{}},inputMarginDense:{paddingTop:3},inputSelect:{paddingRight:24},inputMultiline:{height:"auto",resize:"none",padding:0},inputTypeSearch:{"-moz-appearance":"textfield","-webkit-appearance":"textfield"},inputAdornedStart:{},inputAdornedEnd:{},inputHiddenLabel:{}}}),{name:"MuiInputBase"})(ir),ur=o.a.forwardRef((function(e,t){var n=e.classes,r=e.className,i=e.color,a=void 0===i?"inherit":i,u=e.component,c=void 0===u?"span":u,l=e.fontSize,s=void 0===l?"default":l,f=Object(zt.a)(e,["classes","className","color","component","fontSize"]);return o.a.createElement(c,Object(g.a)({className:Object(Wt.a)("material-icons",n.root,r,"inherit"!==a&&n["color".concat(Object(Ht.a)(a))],"default"!==s&&n["fontSize".concat(Object(Ht.a)(s))]),"aria-hidden":!0,ref:t},f))}));ur.muiName="Icon";var cr=Object(Bt.a)((function(e){return{root:{userSelect:"none",fontSize:e.typography.pxToRem(24),width:"1em",height:"1em",overflow:"hidden",flexShrink:0},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(36)}}}),{name:"MuiIcon"})(ur),lr=o.a.forwardRef((function(e,t){var n=e.classes,r=e.className,i=Object(zt.a)(e,["classes","className"]);return o.a.createElement("div",Object(g.a)({className:Object(Wt.a)(n.root,r),ref:t},i))})),sr=Object(Bt.a)({root:{display:"flex",padding:"8px 24px 24px"}},{name:"MuiExpansionPanelDetails"})(lr),fr=o.a.forwardRef((function(e,t){var n=e.absolute,r=void 0!==n&&n,i=e.classes,a=e.className,u=e.component,c=void 0===u?"hr":u,l=e.light,s=void 0!==l&&l,f=e.orientation,d=void 0===f?"horizontal":f,p=e.role,h=void 0===p?"hr"!==c?"separator":void 0:p,v=e.variant,m=void 0===v?"fullWidth":v,y=Object(zt.a)(e,["absolute","classes","className","component","light","orientation","role","variant"]);return o.a.createElement(c,Object(g.a)({className:Object(Wt.a)(i.root,a,"fullWidth"!==m&&i[m],r&&i.absolute,s&&i.light,{vertical:i.vertical}[d]),role:h,ref:t},y))})),dr=Object(Bt.a)((function(e){return{root:{height:1,margin:0,border:"none",flexShrink:0,backgroundColor:e.palette.divider},absolute:{position:"absolute",bottom:0,left:0,width:"100%"},inset:{marginLeft:72},light:{backgroundColor:Object(qn.c)(e.palette.divider,.08)},middle:{marginLeft:e.spacing(2),marginRight:e.spacing(2)},vertical:{height:"100%",width:1}}}),{name:"MuiDivider"})(fr),pr=o.a.forwardRef((function(e,t){var n=e.classes,r=e.className,i=e.disableSpacing,a=void 0!==i&&i,u=Object(zt.a)(e,["classes","className","disableSpacing"]);return o.a.createElement("div",Object(g.a)({className:Object(Wt.a)(n.root,r,!a&&n.spacing),ref:t},u))})),hr=Object(Bt.a)({root:{display:"flex",alignItems:"center",padding:8,justifyContent:"flex-end"},spacing:{"& > * + *":{marginLeft:8}}},{name:"MuiExpansionPanelActions"})(pr),vr=o.a.forwardRef((function(e,t){var n=e.children,r=e.classes,i=e.className,a=e.color,u=void 0===a?"default":a,c=e.component,l=void 0===c?"button":c,s=e.disabled,f=void 0!==s&&s,d=e.disableFocusRipple,p=void 0!==d&&d,h=e.endIcon,v=e.focusVisibleClassName,m=e.fullWidth,y=void 0!==m&&m,b=e.size,w=void 0===b?"medium":b,x=e.startIcon,E=e.type,S=void 0===E?"button":E,k=e.variant,O=void 0===k?"text":k,T=Object(zt.a)(e,["children","classes","className","color","component","disabled","disableFocusRipple","endIcon","focusVisibleClassName","fullWidth","size","startIcon","type","variant"]),j=x&&o.a.createElement("span",{className:Object(Wt.a)(r.startIcon,r["iconSize".concat(Object(Ht.a)(w))])},x),C=h&&o.a.createElement("span",{className:Object(Wt.a)(r.endIcon,r["iconSize".concat(Object(Ht.a)(w))])},h);return o.a.createElement($n,Object(g.a)({className:Object(Wt.a)(r.root,r[O],i,"inherit"===u?r.colorInherit:"default"!==u&&r["".concat(O).concat(Object(Ht.a)(u))],"medium"!==w&&[r["".concat(O,"Size").concat(Object(Ht.a)(w))],r["size".concat(Object(Ht.a)(w))]],f&&r.disabled,y&&r.fullWidth),component:l,disabled:f,focusRipple:!p,focusVisibleClassName:Object(Wt.a)(r.focusVisible,v),ref:t,type:S},T),o.a.createElement("span",{className:r.label},j,n,C))})),mr=Object(Bt.a)((function(e){return{root:Object(g.a)({},e.typography.button,{boxSizing:"border-box",minWidth:64,padding:"6px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:Object(qn.c)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{padding:"6px 8px"},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:Object(qn.c)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:Object(qn.c)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlined:{padding:"5px 15px",border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)"),"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat(Object(qn.c)(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:Object(qn.c)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat(Object(qn.c)(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:Object(qn.c)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&:hover":{backgroundColor:e.palette.grey.A100,boxShadow:e.shadows[4],"@media (hover: none)":{boxShadow:e.shadows[2],backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}},"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},focusVisible:{},disabled:{},colorInherit:{color:"inherit",borderColor:"currentColor"},textSizeSmall:{padding:"4px 5px",fontSize:e.typography.pxToRem(13)},textSizeLarge:{padding:"8px 11px",fontSize:e.typography.pxToRem(15)},outlinedSizeSmall:{padding:"3px 9px",fontSize:e.typography.pxToRem(13)},outlinedSizeLarge:{padding:"7px 21px",fontSize:e.typography.pxToRem(15)},containedSizeSmall:{padding:"4px 10px",fontSize:e.typography.pxToRem(13)},containedSizeLarge:{padding:"8px 22px",fontSize:e.typography.pxToRem(15)},sizeSmall:{},sizeLarge:{},fullWidth:{width:"100%"},startIcon:{display:"inherit",marginRight:8,marginLeft:-4},endIcon:{display:"inherit",marginRight:-4,marginLeft:8},iconSizeSmall:{"& > *:first-child":{fontSize:18}},iconSizeMedium:{"& > *:first-child":{fontSize:20}},iconSizeLarge:{"& > *:first-child":{fontSize:22}}}}),{name:"MuiButton"})(vr);var gr=function(e){return e&&e.ownerDocument||document};function yr(e){return e.substring(2).toLowerCase()}var br=o.a.forwardRef((function(e,t){var n=e.children,r=e.mouseEvent,i=void 0===r?"onClick":r,u=e.touchEvent,c=void 0===u?"onTouchEnd":u,l=e.onClickAway,s=o.a.useRef(!1),f=o.a.useRef(null),d=o.a.useRef(!1);o.a.useEffect((function(){return d.current=!0,function(){d.current=!1}}),[]);var p=mn(f,t),h=o.a.useCallback((function(e){vn(p,a.a.findDOMNode(e))}),[p]),v=mn(n.ref,h),m=yn((function(e){if(!e.defaultPrevented&&d.current)if(s.current)s.current=!1;else if(f.current){var t=gr(f.current);t.documentElement&&t.documentElement.contains(e.target)&&!f.current.contains(e.target)&&l(e)}})),g=o.a.useCallback((function(){s.current=!0}),[]);return o.a.useEffect((function(){if(!1!==c){var e=yr(c);return document.addEventListener(e,m),document.addEventListener("touchmove",g),function(){document.removeEventListener(e,m),document.removeEventListener("touchmove",g)}}}),[m,g,c]),o.a.useEffect((function(){if(!1!==i){var e=yr(i);return document.addEventListener(e,m),function(){document.removeEventListener(e,m)}}}),[m,i]),o.a.createElement(o.a.Fragment,null,o.a.cloneElement(n,{ref:v}))}));function wr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}}),(function(){}))}function xr(e){return"scale(".concat(e,", ").concat(Math.pow(e,2),")")}var Er={entering:{opacity:1,transform:xr(1)},entered:{opacity:1,transform:"none"}},Sr=o.a.forwardRef((function(e,t){var n=e.children,r=e.in,i=e.onEnter,a=e.onExit,u=e.style,c=e.timeout,l=void 0===c?"auto":c,s=Object(zt.a)(e,["children","in","onEnter","onExit","style","timeout"]),f=o.a.useRef(),d=o.a.useRef(),p=mn(n.ref,t),h=cn();return o.a.useEffect((function(){return function(){clearTimeout(f.current)}}),[]),o.a.createElement(rn,Object(g.a)({appear:!0,in:r,onEnter:function(e,t){!function(e){e.scrollTop}(e);var n,r=an({style:u,timeout:l},{mode:"enter"}),o=r.duration,a=r.delay;"auto"===l?(n=h.transitions.getAutoHeightDuration(e.clientHeight),d.current=n):n=o,e.style.transition=[h.transitions.create("opacity",{duration:n,delay:a}),h.transitions.create("transform",{duration:.666*n,delay:a})].join(","),i&&i(e,t)},onExit:function(e){var t,n=an({style:u,timeout:l},{mode:"exit"}),r=n.duration,o=n.delay;"auto"===l?(t=h.transitions.getAutoHeightDuration(e.clientHeight),d.current=t):t=r,e.style.transition=[h.transitions.create("opacity",{duration:t,delay:o}),h.transitions.create("transform",{duration:.666*t,delay:o||.333*t})].join(","),e.style.opacity="0",e.style.transform=xr(.75),a&&a(e)},addEndListener:function(e,t){"auto"===l&&(f.current=setTimeout(t,d.current||0))},timeout:"auto"===l?null:l},s),(function(e,t){return o.a.cloneElement(n,Object(g.a)({style:Object(g.a)({opacity:0,transform:xr(.75),visibility:"exited"!==e||r?void 0:"hidden"},Er[e],{},u,{},n.props.style),ref:p},t))}))}));Sr.muiSupportAuto=!0;var kr=Sr,Or={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},Tr=o.a.forwardRef((function(e,t){var n=e.align,r=void 0===n?"inherit":n,i=e.classes,a=e.className,u=e.color,c=void 0===u?"initial":u,l=e.component,s=e.display,f=void 0===s?"initial":s,d=e.gutterBottom,p=void 0!==d&&d,h=e.noWrap,v=void 0!==h&&h,m=e.paragraph,y=void 0!==m&&m,b=e.variant,w=void 0===b?"body1":b,x=e.variantMapping,E=void 0===x?Or:x,S=Object(zt.a)(e,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","variant","variantMapping"]),k=l||(y?"p":E[w]||Or[w])||"span";return o.a.createElement(k,Object(g.a)({className:Object(Wt.a)(i.root,a,"inherit"!==w&&i[w],"initial"!==c&&i["color".concat(Object(Ht.a)(c))],v&&i.noWrap,p&&i.gutterBottom,y&&i.paragraph,"inherit"!==r&&i["align".concat(Object(Ht.a)(r))],"initial"!==f&&i["display".concat(Object(Ht.a)(f))]),ref:t},S))})),jr=Object(Bt.a)((function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}}),{name:"MuiTypography"})(Tr),Cr=o.a.forwardRef((function(e,t){var n=e.action,r=e.classes,i=e.className,a=e.message,u=Object(zt.a)(e,["action","classes","className","message"]);return o.a.createElement(dn,Object(g.a)({component:jr,variant:"body2",variantMapping:{body1:"div",body2:"div"},role:"alertdialog",square:!0,elevation:6,className:Object(Wt.a)(r.root,i),ref:t},u),o.a.createElement("div",{className:r.message},a),n?o.a.createElement("div",{className:r.action},n):null)})),Pr=Object(Bt.a)((function(e){var t="light"===e.palette.type?.8:.98,n=Object(qn.b)(e.palette.background.default,t);return{root:Object(Ut.a)({color:e.palette.getContrastText(n),backgroundColor:n,display:"flex",alignItems:"center",flexWrap:"wrap",padding:"6px 16px",borderRadius:e.shape.borderRadius,flexGrow:1},e.breakpoints.up("sm"),{flexGrow:"initial",minWidth:288}),message:{padding:"8px 0"},action:{display:"flex",alignItems:"center",marginLeft:"auto",paddingLeft:16,marginRight:-8}}}),{name:"MuiSnackbarContent"})(Cr),_r=o.a.forwardRef((function(e,t){var n=e.action,r=e.anchorOrigin,i=(r=void 0===r?{vertical:"bottom",horizontal:"center"}:r).vertical,a=r.horizontal,u=e.autoHideDuration,c=e.children,l=e.classes,s=e.className,f=e.ClickAwayListenerProps,d=e.ContentProps,p=e.disableWindowBlurListener,h=void 0!==p&&p,v=e.message,m=e.onClose,y=e.onEnter,b=e.onEntered,w=e.onEntering,x=e.onExit,E=e.onExited,S=e.onExiting,k=e.onMouseEnter,O=e.onMouseLeave,T=e.open,j=e.resumeHideDuration,C=e.TransitionComponent,P=void 0===C?kr:C,_=e.transitionDuration,R=void 0===_?{enter:on.b.enteringScreen,exit:on.b.leavingScreen}:_,N=e.TransitionProps,M=Object(zt.a)(e,["action","anchorOrigin","autoHideDuration","children","classes","className","ClickAwayListenerProps","ContentProps","disableWindowBlurListener","message","onClose","onEnter","onEntered","onEntering","onExit","onExited","onExiting","onMouseEnter","onMouseLeave","open","resumeHideDuration","TransitionComponent","transitionDuration","TransitionProps"]),A=o.a.useRef(),I=o.a.useState(!0),L=I[0],F=I[1],D=o.a.useCallback((function(e){var t=null!=e?e:u;m&&null!=t&&(clearTimeout(A.current),A.current=setTimeout((function(){m&&null!=(null!=e?e:u)&&m(null,"timeout")}),t))}),[u,m]);o.a.useEffect((function(){return T&&D(),function(){clearTimeout(A.current)}}),[T,D]);var z=function(){clearTimeout(A.current)},U=o.a.useCallback((function(){if(null!=u){if(null!=j)return void D(j);D(.5*u)}}),[u,j,D]);return o.a.useEffect((function(){if(!h&&T)return window.addEventListener("focus",U),window.addEventListener("blur",z),function(){window.removeEventListener("focus",U),window.removeEventListener("blur",z)}}),[h,U,T]),!T&&L?null:o.a.createElement(br,Object(g.a)({onClickAway:function(e){m&&m(e,"clickaway")}},f),o.a.createElement("div",Object(g.a)({className:Object(Wt.a)(l.root,l["anchorOrigin".concat(Object(Ht.a)(i)).concat(Object(Ht.a)(a))],s),onMouseEnter:function(e){k&&k(e),z()},onMouseLeave:function(e){O&&O(e),U()},ref:t},M),o.a.createElement(P,Object(g.a)({appear:!0,in:T,onEnter:wr((function(){F(!1)}),y),onEntered:b,onEntering:w,onExit:x,onExited:wr((function(){F(!0)}),E),onExiting:S,timeout:R,direction:"top"===i?"down":"up"},N),c||o.a.createElement(Pr,Object(g.a)({message:v,action:n},d)))))})),Rr=Object(Bt.a)((function(e){var t={top:8},n={bottom:8},r={justifyContent:"flex-end"},o={justifyContent:"flex-start"},i={top:24},a={bottom:24},u={right:24},c={left:24},l={left:"50%",right:"auto",transform:"translateX(-50%)"};return{root:{zIndex:e.zIndex.snackbar,position:"fixed",display:"flex",left:8,right:8,justifyContent:"center",alignItems:"center"},anchorOriginTopCenter:Object(g.a)({},t,Object(Ut.a)({},e.breakpoints.up("sm"),Object(g.a)({},i,{},l))),anchorOriginBottomCenter:Object(g.a)({},n,Object(Ut.a)({},e.breakpoints.up("sm"),Object(g.a)({},a,{},l))),anchorOriginTopRight:Object(g.a)({},t,{},r,Object(Ut.a)({},e.breakpoints.up("sm"),Object(g.a)({left:"auto"},i,{},u))),anchorOriginBottomRight:Object(g.a)({},n,{},r,Object(Ut.a)({},e.breakpoints.up("sm"),Object(g.a)({left:"auto"},a,{},u))),anchorOriginTopLeft:Object(g.a)({},t,{},o,Object(Ut.a)({},e.breakpoints.up("sm"),Object(g.a)({right:"auto"},i,{},c))),anchorOriginBottomLeft:Object(g.a)({},n,{},o,Object(Ut.a)({},e.breakpoints.up("sm"),Object(g.a)({right:"auto"},a,{},c)))}}),{flip:!1,name:"MuiSnackbar"})(_r);function Nr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Mr=Dt((function(e){return{close:{padding:e.spacing(.5)}}})),Ar=function(e){var t=o.a.useRef([]),n=Nr(o.a.useState(!1),2),i=n[0],a=n[1],u=Nr(o.a.useState(void 0),2),c=u[0],l=u[1];Object(r.useEffect)((function(){if(e.snackFlag){var n=e.message;t.current.push({message:n,key:(new Date).getTime()}),i?a(!1):s()}else a(!1)}),[e]);var s=function(){t.current.length>0&&(l(t.current.shift()),a(!0))};Mr();return o.a.createElement("div",null,o.a.createElement(Rr,{key:c?c.key:void 0,anchorOrigin:{vertical:"bottom",horizontal:"center"},open:i,autoHideDuration:2e3,onClose:function(e,t){"clickaway"!==t&&a(!1)},onExited:function(){s()},ContentProps:{"aria-describedby":"message-id"},message:o.a.createElement("span",{id:"message-id"},c?c.message:void 0),action:e.hasAction&&[o.a.createElement(mr,{key:"undo",color:"secondary",size:"small",onClick:e.onUndo},"UNDO")]}))};function Ir(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Lr=Dt((function(e){return{root:{width:"100%",paddingTop:".7em",paddingBottom:"1.6em"},panel:{border:"2px solid #ccc",boxShadow:"0px 0px 4px 4px #cccccc52"},tick:{position:"absolute",right:"20px",top:"15px"},heading:{fontSize:e.typography.pxToRem(15)},title:{fontSize:"1.25rem",fontWeight:"500",lineHeight:"1.6",letterSpacing:"0.0075em",color:"rgba(0, 0, 0, 0.54)",display:"flex",flex:1},secondaryHeading:{fontSize:e.typography.pxToRem(15),color:e.palette.text.secondary},icon:{verticalAlign:"bottom",height:20,width:20},details:{alignItems:"center"},column:{flexBasis:"33.33%",display:"flex",flex:1,paddingRight:"4.4em"},column100:{width:"100%"},textarea:{border:"none",outline:"none",width:"100%",height:"100%",resize:"none",fontSize:"0.875rem",fontFamily:"Roboto, Helvetica, Arial, sans-serif"},helper:{borderLeft:"2px solid ".concat(e.palette.divider),padding:e.spacing(1,2)},link:{color:e.palette.primary.main,textDecoration:"none","&:hover":{textDecoration:"underline"}}}})),Fr=function(e){var t=Lr(),n=Ir(Object(r.useState)(!1),2),i=n[0],a=n[1],u=Ir(Object(r.useState)(""),2),c=u[0],l=u[1],s=Ir(Object(r.useState)(""),2),f=s[0],d=s[1],p=Ir(Object(r.useState)("Take a note..."),2),h=p[0],v=p[1],m=Ir(Object(r.useState)(!1),2),g=m[0],y=m[1],b=function(t){c&&f?e.createNote(c,f):y(!0),setTimeout((function(){y(!1)}),1e3),v("Take a note..."),l(""),d(""),a(!1)};return o.a.createElement("div",{className:t.root},o.a.createElement(Ar,{hasAction:!1,message:"Make a note and give it a title...",snackFlag:g}),o.a.createElement(hn,{className:t.panel,expanded:i},o.a.createElement(Qn,{"aria-controls":"panel1c-content",id:"panel1c-header",onClick:function(e){v("Title"),a(!0)}},o.a.createElement("div",{className:t.column},o.a.createElement(ar,{value:c,className:t.title,placeholder:h,inputProps:{"aria-label":"title"},onChange:function(e){l(e.target.value)}})),o.a.createElement(cr,{className:t.tick},"check")),o.a.createElement(sr,{className:t.details},o.a.createElement("div",{className:t.column100},o.a.createElement("textarea",{className:t.textarea,value:f,placeholder:"Write here...",id:"names",name:"hard",rows:10,wrap:"hard",onChange:function(e){d(e.target.value)}}))),o.a.createElement(dr,null),o.a.createElement(hr,null,o.a.createElement(mr,{size:"small",onClick:function(e){b()}},"Close"))))},Dr=n(182);var zr="undefined"!=typeof window?o.a.useLayoutEffect:o.a.useEffect;var Ur=o.a.forwardRef((function(e,t){var n=e.children,r=e.container,i=e.disablePortal,u=void 0!==i&&i,c=e.onRendered,l=o.a.useState(null),s=l[0],f=l[1],d=mn(n.ref,t);return zr((function(){u||f(function(e){return e="function"==typeof e?e():e,a.a.findDOMNode(e)}(r)||document.body)}),[r,u]),zr((function(){if(s&&!u)return vn(t,s),function(){vn(t,null)}}),[t,s,u]),zr((function(){c&&(s||u)&&c()}),[c,s,u]),u?(o.a.Children.only(n),o.a.cloneElement(n,{ref:d})):s?a.a.createPortal(n,s):s}));function Wr(e){return"function"==typeof e?e():e}var Br="undefined"!=typeof window?o.a.useLayoutEffect:o.a.useEffect,Hr={},Vr=o.a.forwardRef((function(e,t){var n=e.anchorEl,r=e.children,i=e.container,a=e.disablePortal,u=void 0!==a&&a,c=e.keepMounted,l=void 0!==c&&c,s=e.modifiers,f=e.open,d=e.placement,p=void 0===d?"bottom":d,h=e.popperOptions,v=void 0===h?Hr:h,m=e.popperRef,y=e.transition,b=void 0!==y&&y,w=Object(zt.a)(e,["anchorEl","children","container","disablePortal","keepMounted","modifiers","open","placement","popperOptions","popperRef","transition"]),x=o.a.useRef(null),E=mn(x,t),S=o.a.useRef(null),k=mn(S,m),O=o.a.useRef(k);Br((function(){O.current=k}),[k]),o.a.useImperativeHandle(m,(function(){return S.current}),[]);var T=o.a.useState(!0),j=T[0],C=T[1],P=function(e){if("rtl"!==("undefined"!=typeof window&&document.body.getAttribute("dir")||"ltr"))return e;switch(e){case"bottom-end":return"bottom-start";case"bottom-start":return"bottom-end";case"top-end":return"top-start";case"top-start":return"top-end";default:return e}}(p),_=o.a.useState(P),R=_[0],N=_[1],M=o.a.useCallback((function(){if(x.current&&n&&f){S.current&&(S.current.destroy(),O.current(null));var e=function(e){N(e.placement)},t=(Wr(n),new Dr.a(Wr(n),x.current,Object(g.a)({placement:P},v,{modifiers:Object(g.a)({},u?{}:{preventOverflow:{boundariesElement:"window"}},{},s,{},v.modifiers),onCreate:wr(e,v.onCreate),onUpdate:wr(e,v.onUpdate)})));O.current(t)}}),[n,u,s,f,P,v]),A=o.a.useCallback((function(e){vn(E,e),M()}),[E,M]),I=function(){S.current&&(S.current.destroy(),O.current(null))};if(o.a.useEffect((function(){M()}),[M]),o.a.useEffect((function(){return function(){I()}}),[]),o.a.useEffect((function(){f||b||I()}),[f,b]),!l&&!f&&(!b||j))return null;var L={placement:R};return b&&(L.TransitionProps={in:f,onEnter:function(){C(!1)},onExited:function(){C(!0),I()}}),o.a.createElement(Ur,{disablePortal:u,container:i},o.a.createElement("div",Object(g.a)({ref:A,role:"tooltip",style:{position:"fixed"}},w),"function"==typeof r?r(L):r))}));function $r(e){return Math.round(1e5*e)/1e5}var qr=o.a.forwardRef((function(e,t){var n=e.children,r=e.classes,i=e.disableFocusListener,u=void 0!==i&&i,c=e.disableHoverListener,l=void 0!==c&&c,s=e.disableTouchListener,f=void 0!==s&&s,d=e.enterDelay,p=void 0===d?0:d,h=e.enterTouchDelay,v=void 0===h?700:h,m=e.id,y=e.interactive,b=void 0!==y&&y,w=e.leaveDelay,x=void 0===w?0:w,E=e.leaveTouchDelay,S=void 0===E?1500:E,k=e.onClose,O=e.onOpen,T=e.open,j=e.placement,C=void 0===j?"bottom":j,P=e.PopperProps,_=e.title,R=e.TransitionComponent,N=void 0===R?kr:R,M=e.TransitionProps,A=Object(zt.a)(e,["children","classes","disableFocusListener","disableHoverListener","disableTouchListener","enterDelay","enterTouchDelay","id","interactive","leaveDelay","leaveTouchDelay","onClose","onOpen","open","placement","PopperProps","title","TransitionComponent","TransitionProps"]),I=cn(),L=o.a.useState(!1),F=L[0],D=L[1],z=o.a.useState(0)[1],U=o.a.useState(),W=U[0],B=U[1],H=o.a.useRef(!1),V=o.a.useRef(null!=T).current,$=o.a.useRef(),q=o.a.useRef(),G=o.a.useRef(),K=o.a.useRef(),Y=o.a.useRef();o.a.useEffect((function(){$.current||($.current="mui-tooltip-".concat(Math.round(1e5*Math.random()))),T&&z((function(e){return!e}))}),[T]),o.a.useEffect((function(){return function(){clearTimeout(q.current),clearTimeout(G.current),clearTimeout(K.current),clearTimeout(Y.current)}}),[]);var Q=function(e){V||F||D(!0),O&&O(e)},X=function(e){var t=n.props;"mouseover"===e.type&&t.onMouseOver&&t.onMouseOver(e),H.current&&"touchstart"!==e.type||(W&&W.removeAttribute("title"),clearTimeout(G.current),clearTimeout(K.current),p?(e.persist(),G.current=setTimeout((function(){Q(e)}),p)):Q(e))},J=_n(),Z=J.isFocusVisible,ee=J.onBlurVisible,te=J.ref,ne=o.a.useState(!1),re=ne[0],oe=ne[1],ie=function(e){V||D(!1),k&&k(e),clearTimeout(q.current),q.current=setTimeout((function(){H.current=!1}),I.transitions.duration.shortest)},ae=function(e){var t=n.props;"blur"===e.type&&(t.onBlur&&t.onBlur(e),re&&(oe(!1),ee())),"mouseleave"===e.type&&t.onMouseLeave&&t.onMouseLeave(e),clearTimeout(G.current),clearTimeout(K.current),e.persist(),K.current=setTimeout((function(){ie(e)}),x)},ue=mn(B,t),ce=mn(te,ue),le=o.a.useCallback((function(e){vn(ce,a.a.findDOMNode(e))}),[ce]),se=mn(n.ref,le),fe=V?T:F;""===_&&(fe=!1);var de=!fe&&!l,pe=Object(g.a)({"aria-describedby":fe?m||$.current:null,title:de&&"string"==typeof _?_:null},A,{},n.props,{className:Object(Wt.a)(A.className,n.props.className)});f||(pe.onTouchStart=function(e){H.current=!0;var t=n.props;t.onTouchStart&&t.onTouchStart(e),clearTimeout(K.current),clearTimeout(q.current),clearTimeout(Y.current),e.persist(),Y.current=setTimeout((function(){X(e)}),v)},pe.onTouchEnd=function(e){n.props.onTouchEnd&&n.props.onTouchEnd(e),clearTimeout(Y.current),clearTimeout(K.current),e.persist(),K.current=setTimeout((function(){ie(e)}),S)}),l||(pe.onMouseOver=X,pe.onMouseLeave=ae),u||(pe.onFocus=function(e){W||B(e.currentTarget),Z(e)&&(oe(!0),X(e));var t=n.props;t.onFocus&&t.onFocus(e)},pe.onBlur=ae);var he=b?{onMouseOver:pe.onMouseOver,onMouseLeave:pe.onMouseLeave,onFocus:pe.onFocus,onBlur:pe.onBlur}:{};return o.a.createElement(o.a.Fragment,null,o.a.cloneElement(n,Object(g.a)({ref:se},pe)),o.a.createElement(Vr,Object(g.a)({className:Object(Wt.a)(r.popper,b&&r.popperInteractive),placement:C,anchorEl:W,open:!!W&&fe,id:pe["aria-describedby"],transition:!0},he,P),(function(e){var t=e.placement,n=e.TransitionProps;return o.a.createElement(N,Object(g.a)({timeout:I.transitions.duration.shorter},n,M),o.a.createElement("div",{className:Object(Wt.a)(r.tooltip,r["tooltipPlacement".concat(Object(Ht.a)(t.split("-")[0]))],H.current&&r.touch)},_))})))})),Gr=Object(Bt.a)((function(e){return{popper:{zIndex:e.zIndex.tooltip,pointerEvents:"none",flip:!1},popperInteractive:{pointerEvents:"auto"},tooltip:{backgroundColor:Object(qn.c)(e.palette.grey[700],.9),borderRadius:e.shape.borderRadius,color:e.palette.common.white,fontFamily:e.typography.fontFamily,padding:"4px 8px",fontSize:e.typography.pxToRem(10),lineHeight:"".concat($r(1.4),"em"),maxWidth:300,wordWrap:"break-word",fontWeight:e.typography.fontWeightMedium},touch:{padding:"8px 16px",fontSize:e.typography.pxToRem(14),lineHeight:"".concat($r(16/14),"em"),fontWeight:e.typography.fontWeightRegular},tooltipPlacementLeft:Object(Ut.a)({transformOrigin:"right center",margin:"0 24px "},e.breakpoints.up("sm"),{margin:"0 14px"}),tooltipPlacementRight:Object(Ut.a)({transformOrigin:"left center",margin:"0 24px"},e.breakpoints.up("sm"),{margin:"0 14px"}),tooltipPlacementTop:Object(Ut.a)({transformOrigin:"center bottom",margin:"24px 0"},e.breakpoints.up("sm"),{margin:"14px 0"}),tooltipPlacementBottom:Object(Ut.a)({transformOrigin:"center top",margin:"24px 0"},e.breakpoints.up("sm"),{margin:"14px 0"})}}),{name:"MuiTooltip"})(qr);function Kr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Yr=Dt((function(e){return{root:{width:"100%",paddingBottom:"8px"},panel:{border:"1px solid transparent","&:hover":{cursor:"pointer",border:"1px solid #ccc"},"&:hover>div>div>span":{display:"block"}},edit:{display:"none",position:"absolute",right:"20px",top:"15px"},delete:{display:"none",position:"absolute",right:"60px",top:"15px"},heading:{fontSize:e.typography.pxToRem(15)},title:{fontSize:"1.25rem",fontWeight:"500",lineHeight:"1.6",letterSpacing:"0.0075em",color:"rgba(0, 0, 0, 0.54)",display:"flex",flex:1},secondaryHeading:{fontSize:e.typography.pxToRem(15),color:e.palette.text.secondary},icon:{verticalAlign:"bottom",height:20,width:20},details:{alignItems:"center"},column:{flexBasis:"33.33%",display:"flex",flex:1,paddingRight:"4.4em"},column100:{width:"100%"},textarea:{border:"none",outline:"none",width:"100%",height:"100%",resize:"none",fontSize:"0.875rem",fontFamily:"Roboto, Helvetica, Arial, sans-serif"},helper:{borderLeft:"2px solid ".concat(e.palette.divider),padding:e.spacing(1,2)},link:{color:e.palette.primary.main,textDecoration:"none","&:hover":{textDecoration:"underline"}}}})),Qr=Object(Bt.a)((function(e){return{tooltip:{backgroundColor:e.palette.common.white,color:"rgba(0, 0, 0, 0.87)",boxShadow:e.shadows[1],fontSize:11}}}))(Gr),Xr=!1,Jr=function(e){var t=Yr(),n=Kr(Object(r.useState)("Take a note..."),2),i=n[0],a=(n[1],Kr(Object(r.useState)(t.root),2)),u=a[0],c=a[1],l=Kr(Object(r.useState)(!1),2),s=l[0],f=l[1],d=Kr(Object(r.useState)(!0),2),p=d[0],h=d[1],v=Kr(Object(r.useState)(e.title),2),m=v[0],g=v[1],y=Kr(Object(r.useState)(e.note),2),b=y[0],w=y[1],x=Kr(Object(r.useState)(null),2),E=x[0],S=x[1];Object(r.useEffect)((function(){if(Xr=!1,g(e.title),w(e.note),E){document.getElementById("root").className="",k(document.querySelectorAll("#root > div:nth-child(2) > div:nth-child(2) > div")),k(document.querySelectorAll("#root > div:nth-child(2) > div:nth-child(2) > div > div")),k(document.querySelectorAll("#root > div:nth-child(2) > div:nth-child(2) > div > div > div")),E.style.animationName="snackbar",E.style["-webkit-animationName"]="snackbar",S(),t&&clearTimeout(t);var t=setTimeout((function(){k(document.querySelectorAll("#root > div:nth-child(2) > div:nth-child(2) > div > div"))}),1e3)}}),[e]);var k=function(e){for(var t=0,n=e.length;t<n;t++)e[t].style=""};return o.a.createElement("div",{className:u},o.a.createElement(hn,{className:t.panel,expanded:s},o.a.createElement(Qn,{"aria-controls":"panel1c-content",id:"panel1c-header",onClick:function(){Xr||f(!s)}},o.a.createElement("div",{className:t.column},o.a.createElement(ar,{value:m,className:t.title,placeholder:i,inputProps:{"aria-label":"title",readOnly:p},onChange:function(e){g(e.target.value)}})),o.a.createElement(Qr,{title:"Delete task",placement:"top"},o.a.createElement(cr,{onClick:function(t){!function(t){Xr=!0,S(t.target.parentNode.parentNode.parentNode),f(!1),e.onDelete(e.id)}(t)},className:t.delete},"delete")),o.a.createElement(Qr,{title:"Edit task",placement:"top"},o.a.createElement(cr,{className:t.edit,onClick:function(e){c(t.root+" fullscreen"),document.getElementById("root").className="selected",h(!1),Xr=!0,f(!0)}},"edit"))),o.a.createElement(sr,{className:t.details},o.a.createElement("div",{className:t.column100},o.a.createElement("textarea",{className:t.textarea,value:b,readOnly:p,placeholder:"Write here...",id:"names",name:"hard",rows:10,wrap:"hard",onChange:function(e){w(e.target.value)}}))),o.a.createElement(dr,null),o.a.createElement(hr,null,o.a.createElement(mr,{size:"small",onClick:function(n){!function(n){!Xr||e.title==m&&e.note==b||(S(n.target.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode),e.onUpdate(e.id,m,b)),Xr=!1,document.getElementById("root").className="",c(t.root),h(!0),f(!1)}(n)}},"Close"))))},Zr=n(62),eo=n.n(Zr),to=n(183),no=n.n(to);function ro(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var oo=Dt((function(e){return{root:{flexGrow:1},search:ro({position:"relative",borderRadius:e.shape.borderRadius,backgroundColor:Object(qn.c)(e.palette.common.white,.15),"&:hover":{backgroundColor:Object(qn.c)(e.palette.common.white,.25)},marginLeft:"0 !important",width:"100%"},e.breakpoints.up("sm"),{marginLeft:e.spacing(1),width:"auto"}),searchIcon:{width:e.spacing(7),height:"100%",position:"absolute",pointerEvents:"none",display:"flex",alignItems:"center",justifyContent:"center"},inputRoot:{color:"inherit",width:"100%"},inputInput:ro({padding:e.spacing(1,1,1,7),transition:e.transitions.create("width"),width:"100%"},e.breakpoints.up("sm"),{width:"100%","&:focus":{width:"100%"}}),appBar:ro({top:"auto"},"top",0)}})),io=function(e){var t=oo();return o.a.createElement($t,{maxWidth:"sm",style:{padding:"0.5em 1em"}},o.a.createElement("div",{className:t.search},o.a.createElement("div",{className:t.searchIcon},o.a.createElement(no.a,null)),o.a.createElement(ar,{placeholder:"Search Title or Content",onChange:function(t){return e.onSearch(t)},classes:{root:t.inputRoot,input:t.inputInput},inputProps:{"aria-label":"search"}})))};function ao(e){return(ao="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function uo(e){return(uo="function"==typeof Symbol&&"symbol"===ao(Symbol.iterator)?function(e){return ao(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":ao(e)})(e)}function co(){return(co=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function lo(e,t,n,r,o,i,a){try{var u=e[i](a),c=u.value}catch(e){return void n(e)}u.done?t(c):Promise.resolve(c).then(r,o)}function so(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){lo(i,r,o,a,u,"next",e)}function u(e){lo(i,r,o,a,u,"throw",e)}a(void 0)}))}}function fo(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function po(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ho(e){return(ho=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function vo(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function mo(e,t){return(mo=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function go(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var yo=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=function(e,t){return!t||"object"!==uo(t)&&"function"!=typeof t?vo(e):t}(this,ho(t).call(this,e)),go(vo(n),"onDelete",(function(e){var t=setTimeout((function(){var t,r=fo(n.state.notes);r.some((function(n,r){return n.id===e&&(t=r,!0)})),-1!=t&&n.deleteNote(e).then((function(e){e.success&&(r.splice(t,1),n.setState({notes:r}))})).catch((function(e){console.log(e)})),n.setState({snackFlag:!1})}),2e3);n.setState({setTime:t,snackFlag:!0})})),go(vo(n),"deleteNote",function(){var e=so(regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,eo.a.delete("http://localhost:3003/api/tasks/"+t);case 2:return n=e.sent,e.abrupt("return",n.data);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),go(vo(n),"onUndo",(function(){n.setState({snackFlag:!1,deleted:!1}),clearTimeout(n.state.setTime)})),go(vo(n),"onUpdate",(function(e,t,r){var o,i=fo(n.state.notes);i.some((function(t,n){return t.id===e&&(o=n,!0)}));var a=vo(n);n.updateNote(e,t,r).then((function(e){i[o].title=t,i[o].note=r,a.setState({notes:i})})).catch((function(e){console.log(e)}))})),go(vo(n),"updateNote",function(){var e=so(regeneratorRuntime.mark((function e(t,n,r){var o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,eo.a.put("http://localhost:3003/api/tasks/"+t,{headers:{"content-type":"application/json "}},{data:{title:n,note:r}});case 2:return o=e.sent,e.abrupt("return",o.data);case 4:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}()),go(vo(n),"onSearch",(function(e){var t=e.target.value,r=fo(n.state.notes).filter((function(e){return 0===t.length||e.title.includes(t)||e.note.includes(t)}));n.setState({notesSearch:r,textToSearch:t})})),n.state={notes:[],notesSearch:[],textToSearch:"",snackFlag:!1,setTime:"",hasAction:!0},n}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&mo(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.props.fetch_getnotes_data()}},{key:"componentWillReceiveProps",value:function(e){if(0!=e.createData.length){var t=this.state.notes.concat(e.createData);this.setState({notes:t})}else this.setState({notes:e.getnotes.getnotes})}},{key:"render",value:function(){var e=this,t=0==this.state.textToSearch.length&&0===this.state.notesSearch.length?this.state.notes:this.state.notesSearch;return o.a.createElement("div",null,o.a.createElement(io,{onSearch:this.onSearch}),o.a.createElement(Ar,{hasAction:this.state.hasAction,onUndo:this.onUndo,message:"Are you sure?",snackFlag:this.state.snackFlag}),null!=t&&t.length>0&&t.map((function(t,n){if(null!=t)return o.a.createElement(Jr,co({id:t.id,onDelete:e.onDelete,onUpdate:e.onUpdate,key:n},t))})))}}])&&po(n.prototype,r),i&&po(n,i),t}(o.a.Component);function bo(){return(bo=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function wo(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var xo=Dt((function(e){return{root:{padding:"4em 1em",paddingBottom:"1em",paddingTop:"5em"}}})),Eo=function(e){var t=xo(),n=wo(Object(r.useState)([]),2),i=n[0],a=n[1];return o.a.createElement($t,{maxWidth:"sm",className:t.root},o.a.createElement(Fr,bo({createNote:function(e,t){!function(e,t){eo.a.post("http://localhost:3003/api/tasks",{headers:{"content-type":"application/json "}},{data:{title:e,note:t}}).then((function(e){a(e.data.result[0])})).catch((function(e){console.log(e)}))}(e,t)}},e)),o.a.createElement(yo,bo({createData:i},e)))},So=n(184),ko=n.n(So);function Oo(e,t){return e===t}function To(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}function jo(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}var Co=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=Array(t),o=0;o<t;o++)r[o]=arguments[o];var i=0,a=r.pop(),u=jo(r),c=e.apply(void 0,[function(){return i++,a.apply(null,arguments)}].concat(n)),l=e((function(){for(var e=[],t=u.length,n=0;n<t;n++)e.push(u[n].apply(null,arguments));return c.apply(null,e)}));return l.resultFunc=a,l.dependencies=u,l.recomputations=function(){return i},l.resetRecomputations=function(){return i=0},l}}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Oo,n=null,r=null;return function(){return To(t,n,arguments)||(r=e.apply(null,arguments)),n=arguments,r}}));var Po=function(e){return e.data},_o=Co(Po,(function(e){return e})),Ro=(Co(Po,(function(e){return e.createnote})),{fetch_getnotes_data:function(e){return function(e){return e({type:Oe}),eo.a.get(ko.a.BASE_URL+"tasks").then((function(t){var n;e((n=t.data.result,{type:Te,getnotes:n}))}),(function(e){return console.log("fail ajax on home page",e)}))}}});var No=function(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=Object(y.a)(t,["wrappedComponentRef"]);return o.a.createElement(ht.Consumer,null,(function(t){return t||ze(!1),o.a.createElement(e,Object(g.a)({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,w()(n,e)}(he((function(e){return{getnotes:function(e){return{getnotes:_o(e)}}(e).getnotes}}),(function(e){return z(Ro,e)}))(Eo)),Mo=o.a.forwardRef((function(e,t){var n=e.classes,r=e.className,i=e.color,a=void 0===i?"primary":i,u=e.position,c=void 0===u?"fixed":u,l=Object(zt.a)(e,["classes","className","color","position"]);return o.a.createElement(dn,Object(g.a)({square:!0,component:"header",elevation:4,className:Object(Wt.a)(n.root,n["position".concat(Object(Ht.a)(c))],r,"inherit"!==a&&n["color".concat(Object(Ht.a)(a))],{fixed:"mui-fixed"}[c]),ref:t},l))})),Ao=Object(Bt.a)((function(e){var t="light"===e.palette.type?e.palette.grey[100]:e.palette.grey[900];return{root:{display:"flex",flexDirection:"column",width:"100%",boxSizing:"border-box",zIndex:e.zIndex.appBar,flexShrink:0},positionFixed:{position:"fixed",top:0,left:"auto",right:0},positionAbsolute:{position:"absolute",top:0,left:"auto",right:0},positionSticky:{position:"sticky",top:0,left:"auto",right:0},positionStatic:{position:"static",transform:"translateZ(0)"},positionRelative:{position:"relative"},colorDefault:{backgroundColor:t,color:e.palette.getContrastText(t)},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText}}}),{name:"MuiAppBar"})(Mo),Io=o.a.forwardRef((function(e,t){var n=e.classes,r=e.className,i=e.component,a=void 0===i?"div":i,u=e.disableGutters,c=void 0!==u&&u,l=e.variant,s=void 0===l?"regular":l,f=Object(zt.a)(e,["classes","className","component","disableGutters","variant"]),d=Object(Wt.a)(n.root,n[s],r,!c&&n.gutters);return o.a.createElement(a,Object(g.a)({className:d,ref:t},f))})),Lo=Object(Bt.a)((function(e){return{root:{position:"relative",display:"flex",alignItems:"center"},gutters:Object(Ut.a)({paddingLeft:e.spacing(2),paddingRight:e.spacing(2)},e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),regular:e.mixins.toolbar,dense:{minHeight:48}}}),{name:"MuiToolbar"})(Io);function Fo(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Do=Dt((function(e){return{root:{flexGrow:1},menuButton:{marginRight:e.spacing(2)},title:Fo({flexGrow:1,display:"none",position:"absolute"},e.breakpoints.up("sm"),{display:"block"}),search:Fo({position:"relative",borderRadius:e.shape.borderRadius,backgroundColor:Object(qn.c)(e.palette.common.white,.15),"&:hover":{backgroundColor:Object(qn.c)(e.palette.common.white,.25)},marginLeft:"0 !important",width:"100%"},e.breakpoints.up("sm"),{marginLeft:e.spacing(1),width:"auto"}),searchIcon:{width:e.spacing(7),height:"100%",position:"absolute",pointerEvents:"none",display:"flex",alignItems:"center",justifyContent:"center"},inputRoot:{color:"inherit",width:"100%"},inputInput:Fo({padding:e.spacing(1,1,1,7),transition:e.transitions.create("width"),width:"100%"},e.breakpoints.up("sm"),{width:"100%","&:focus":{width:"100%"}}),appBar:Fo({top:"auto"},"top",0)}})),zo=function(e){var t=Do();return o.a.createElement("div",{className:t.root},o.a.createElement(Ao,{position:"fixed",className:t.appBar},o.a.createElement(Lo,null,o.a.createElement(jr,{className:t.title,variant:"h6",noWrap:!0},"Travix"))))};function Uo(e){return(Uo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Wo(e){return(Wo="function"==typeof Symbol&&"symbol"===Uo(Symbol.iterator)?function(e){return Uo(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":Uo(e)})(e)}function Bo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ho(e,t){return!t||"object"!==Wo(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Vo(e){return(Vo=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function $o(e,t){return($o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var qo=function(e){function t(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),Ho(this,Vo(t).call(this,e))}var n,r,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&$o(e,t)}(t,e),n=t,(r=[{key:"render",value:function(){return o.a.createElement(jt,null,o.a.createElement(zo,null),o.a.createElement(Tt,null,o.a.createElement(wt,{exact:!0,path:"/",component:No})))}}])&&Bo(n.prototype,r),i&&Bo(n,i),t}(o.a.Component);n(422),n(423);a.a.render(o.a.createElement(m,{store:Ne},o.a.createElement(qo,null)),document.getElementById("root"))},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n(3),i=n(0),a=n.n(i),u=(n(5),n(4)),c=n(6),l=n(11),s=a.a.forwardRef((function(e,t){var n=e.children,i=e.classes,c=e.className,s=e.color,f=void 0===s?"inherit":s,d=e.component,p=void 0===d?"svg":d,h=e.fontSize,v=void 0===h?"default":h,m=e.htmlColor,g=e.titleAccess,y=e.viewBox,b=void 0===y?"0 0 24 24":y,w=Object(o.a)(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return a.a.createElement(p,Object(r.a)({className:Object(u.a)(i.root,c,"inherit"!==f&&i["color".concat(Object(l.a)(f))],"default"!==v&&i["fontSize".concat(Object(l.a)(v))]),focusable:"false",viewBox:b,color:m,"aria-hidden":g?"false":"true",role:g?"img":"presentation",ref:t},w),n,g?a.a.createElement("title",null,g):null)}));s.muiName="SvgIcon";var f=Object(c.a)((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(s);n.d(t,"default",(function(){return f}))},,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(3),o=n(1),i=n(0),a=n.n(i),u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c="object"===("undefined"==typeof window?"undefined":u(window))&&"object"===("undefined"==typeof document?"undefined":u(document))&&9===document.nodeType;n(47);function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t&&l(e.prototype,t),n&&l(e,n),e}var f=n(21),d=n(69),p=n(16),h={}.constructor;function v(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(v);if(e.constructor!==h)return e;var t={};for(var n in e)t[n]=v(e[n]);return t}function m(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=v(t),i=r.plugins.onCreateRule(e,o,n);return i||(e[0],null)}var g=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n};function y(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=g(e[r]," ");else n=g(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n}function b(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function w(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,i=void 0===o?0:o,a=t.fallbacks;if(e&&i++,a)if(Array.isArray(a))for(var u=0;u<a.length;u++){var c=a[u];for(var l in c){var s=c[l];null!=s&&(r&&(r+="\n"),r+=""+b(l+": "+y(s)+";",i))}}else for(var f in a){var d=a[f];null!=d&&(r&&(r+="\n"),r+=""+b(f+": "+y(d)+";",i))}for(var p in t){var h=t[p];null!=h&&"fallbacks"!==p&&(r&&(r+="\n"),r+=""+b(p+": "+y(h)+";",i))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),b(e+" {"+r,--i)+b("}",i)):r}var x=/([[\].#*$><+~=|^:(),"'`\s])/g,E="undefined"!=typeof CSS&&CSS.escape,S=function(e){return E?E(e):e.replace(x,"\\$1")},k=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var i=null==o||!1===o,a=e in this.style;if(i&&!a&&!r)return this;var u=i&&a;if(u?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return u?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var c=this.options.sheet;return c&&c.attached,this},e}(),O=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var i=r.selector,a=r.scoped,u=r.sheet,c=r.generateId;return i?o.selectorText=i:!1!==a&&(o.id=c(Object(d.a)(Object(d.a)(o)),u),o.selectorText="."+S(o.id)),o}Object(f.a)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=y(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(o.a)({},e,{allowEmpty:!0}):e;return w(this.selectorText,this.style,n)},s(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(k),T={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new O(e,t,n)}},j={indent:1,children:!0},C=/@([\w-]+)/,P=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e;var r=e.match(C);for(var i in this.at=r?r[1]:"unknown",this.options=n,this.rules=new X(Object(o.a)({},n,{parent:this})),t)this.rules.add(i,t[i]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=j),null==e.indent&&(e.indent=j.indent),null==e.children&&(e.children=j.children),!1===e.children)return this.key+" {}";var t=this.rules.toString(e);return t?this.key+" {\n"+t+"\n}":""},e}(),_=/@media|@supports\s+/,R={onCreateRule:function(e,t,n){return _.test(e)?new P(e,t,n):null}},N={indent:1,children:!0},M=/@keyframes\s+([\w-]+)/,A=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var r=e.match(M);r&&r[1]?this.name=r[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var i=n.scoped,a=n.sheet,u=n.generateId;for(var c in this.id=!1===i?this.name:S(u(this,a)),this.rules=new X(Object(o.a)({},n,{parent:this})),t)this.rules.add(c,t[c],Object(o.a)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=N),null==e.indent&&(e.indent=N.indent),null==e.children&&(e.children=N.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),I=/@keyframes\s+/,L=/\$([\w-]+)/g,F=function(e,t){return"string"==typeof e?e.replace(L,(function(e,n){return n in t?t[n]:e})):e},D=function(e,t,n){var r=e[t],o=F(r,n);o!==r&&(e[t]=o)},z={onCreateRule:function(e,t,n){return"string"==typeof e&&I.test(e)?new A(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&D(e,"animation-name",n.keyframes),"animation"in e&&D(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return F(e,r.keyframes);default:return e}}},U=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return Object(f.a)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?Object(o.a)({},e,{allowEmpty:!0}):e;return w(this.key,this.style,n)},t}(k),W={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new U(e,t,n):null}},B=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=w(this.key,this.style[n]),this.style[n+1]&&(t+="\n");return t}return w(this.key,this.style,e)},e}(),H={onCreateRule:function(e,t,n){return"@font-face"===e?new B(e,t,n):null}},V=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return w(this.key,this.style,e)},e}(),$={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new V(e,t,n):null}},q=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),G={"@charset":!0,"@import":!0,"@namespace":!0},K=[T,R,z,W,H,$,{onCreateRule:function(e,t,n){return e in G?new q(e,t,n):null}}],Y={process:!0},Q={force:!0,process:!0},X=function(){function e(e){this.map={},this.raw={},this.index=[],this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var r=this.options,i=r.parent,a=r.sheet,u=r.jss,c=r.Renderer,l=r.generateId,s=r.scoped,f=Object(o.a)({classes:this.classes,parent:i,sheet:a,jss:u,Renderer:c,generateId:l,scoped:s},n);this.raw[e]=t,e in this.classes&&(f.selector="."+S(this.classes[e]));var d=m(e,t,f);if(!d)return null;this.register(d);var p=void 0===f.index?this.index.length:f.index;return this.index.splice(p,0,d),d},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof O?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof A&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof O?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof A&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.onUpdate(t,this.get(e),n);else for(var r=0;r<this.index.length;r++)this.onUpdate(t,this.index[r],n)},t.onUpdate=function(t,n,r){void 0===r&&(r=Y);var o=this.options,i=o.jss.plugins,a=o.sheet;if(n.rules instanceof e)n.rules.update(t,r);else{var u=n,c=u.style;if(i.onUpdate(t,n,a,r),r.process&&c&&c!==u.style){for(var l in i.onProcessStyle(u.style,u,a),u.style){var s=u.style[l];s!==c[l]&&u.prop(l,s,Q)}for(var f in c){var d=u.style[f],p=c[f];null==d&&d!==p&&u.prop(f,null,Q)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t},e}(),J=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=Object(o.a)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new X(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached?this:(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy(),this)},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t=this.rules.get(e);return!!t&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.toString=function(e){return this.rules.toString(e)},e}(),Z=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),ee=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=Object(p.a)(t,["attached"]),o="",i=0;i<this.registry.length;i++){var a=this.registry[i];null!=n&&a.attached!==n||(o&&(o+="\n"),o+=a.toString(r))}return o},s(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),te="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),ne="2f1acc6c3a606b082e5eef5e54414ffb";null==te[ne]&&(te[ne]=0);var re=te[ne]++,oe=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var o="",i="";return r&&(r.options.classNamePrefix&&(i=r.options.classNamePrefix),null!=r.options.jss.id&&(o=String(r.options.jss.id))),e.minify?""+(i||"c")+re+o+t:i+n.key+"-"+re+(o?"-"+o:"")+"-"+t}},ie=function(e){var t;return function(){return t||(t=e()),t}};function ae(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}}function ue(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=y(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0}function ce(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}}function le(e,t){return e.selectorText=t,e.selectorText===t}var se=ie((function(){return document.querySelector("head")}));function fe(e){var t=ee.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var o=function(e){for(var t=se(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}var de=ie((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),pe=function(e,t,n){var r=e.cssRules.length;(void 0===n||n>r)&&(n=r);try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(e){return!1}return e.cssRules[n]},he=function(){var e=document.createElement("style");return e.textContent="\n",e},ve=function(){function e(e){this.getPropertyValue=ae,this.setProperty=ue,this.removeProperty=ce,this.setSelector=le,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,e&&ee.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,o=t.element;this.element=o||he(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var i=de();i&&this.element.setAttribute("nonce",i)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=fe(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var o=n,i=o.parentNode;i&&i.insertBefore(e,o.nextSibling)}else se().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){var e=this.element.parentNode;e&&e.removeChild(this.element)},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;return("conditional"!==e.type&&"keyframes"!==e.type||!1!==(o=pe(n,r.toString({children:!1}),t)))&&(this.insertRules(r.rules,o),o)}if(e.renderable&&e.renderable.parentStyleSheet===this.element.sheet)return e.renderable;var i=e.toString();if(!i)return!1;var a=pe(n,i,t);return!1!==a&&(this.hasInsertedRules=!0,e.renderable=a,a)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)},t.indexOf=function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),me=0,ge=function(){function e(e){this.id=me++,this.version="10.0.0",this.plugins=new Z,this.options={id:{minify:!1},createGenerateId:oe,Renderer:c?ve:null,plugins:[]},this.generateId=oe({minify:!1});for(var t=0;t<K.length;t++)this.plugins.use(K[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=Object(o.a)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===ee.index?0:ee.index+1);var r=new J(e,Object(o.a)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r},t.removeStyleSheet=function(e){return e.detach(),ee.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var r=Object(o.a)({},n,{jss:this,Renderer:this.options.Renderer});r.generateId||(r.generateId=this.generateId),r.classes||(r.classes={}),r.keyframes||(r.keyframes={});var i=m(e,t,r);return i&&this.plugins.onProcessRule(i),i},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();var ye="undefined"!=typeof CSS&&CSS&&"number"in CSS,be=function(e){return new ge(e)};
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */be();var we=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var r=Object(o.a)({},t);return Object.keys(n).forEach((function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))})),r},xe={set:function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}},Ee=n(447),Se=(n(5),"function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__"),ke=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];var Oe=Date.now(),Te="fnValues"+Oe,je="fnStyle"+ ++Oe;var Ce=function(){return{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=m(e,{},n);return r[je]=t,r},onProcessStyle:function(e,t){if(Te in t||je in t)return e;var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return t[Te]=n,e},onUpdate:function(e,t,n,r){var o=t,i=o[je];i&&(o.style=i(e)||{});var a=o[Te];if(a)for(var u in a)o.prop(u,a[u](e),r)}}},Pe="@global",_e="@global ",Re=function(){function e(e,t,n){for(var r in this.type="global",this.at=Pe,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new X(Object(o.a)({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),Ne=function(){function e(e,t,n){this.type="global",this.at=Pe,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr(_e.length);this.rule=n.jss.createRule(r,t,Object(o.a)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),Me=/\s*,\s*/g;function Ae(e,t){for(var n=e.split(Me),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}var Ie=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===Pe)return new Re(e,t,n);if("@"===e[0]&&e.substr(0,_e.length)===_e)return new Ne(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e){"style"===e.type&&(function(e){var t=e.options,n=e.style,r=n?n[Pe]:null;if(r){for(var i in r)t.sheet.addRule(i,r[i],Object(o.a)({},t,{selector:Ae(i,e.selector)}));delete n[Pe]}}(e),function(e){var t=e.options,n=e.style;for(var r in n)if("@"===r[0]&&r.substr(0,Pe.length)===Pe){var i=Ae(r.substr(Pe.length),e.selector);t.sheet.addRule(i,n[r],Object(o.a)({},t,{selector:i})),delete n[r]}}(e))}}},Le=/\s*,\s*/g,Fe=/&/g,De=/\$([\w-]+)/g;var ze=function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split(Le),r=e.split(Le),o="",i=0;i<n.length;i++)for(var a=n[i],u=0;u<r.length;u++){var c=r[u];o&&(o+=", "),o+=-1!==c.indexOf("&")?c.replace(Fe,a):a+" "+c}return o}function n(e,t,n){if(n)return Object(o.a)({},n,{index:n.index+1});var r=e.options.nestingLevel;return r=void 0===r?1:r+1,Object(o.a)({},e.options,{nestingLevel:r,index:t.indexOf(e)+1})}return{onProcessStyle:function(r,i,a){if("style"!==i.type)return r;var u,c,l=i,s=l.options.parent;for(var f in r){var d=-1!==f.indexOf("&"),p="@"===f[0];if(d||p){if(u=n(l,s,u),d){var h=t(f,l.selector);c||(c=e(s,a)),h=h.replace(De,c),s.addRule(h,r[f],Object(o.a)({},u,{selector:h}))}else p&&s.addRule(f,{},u).addRule(l.key,r[f],{selector:l.selector});delete r[f]}}return r}}},Ue=/[A-Z]/g,We=/^ms-/,Be={};function He(e){return"-"+e.toLowerCase()}var Ve=function(e){if(Be.hasOwnProperty(e))return Be[e];var t=e.replace(Ue,He);return Be[e]=We.test(t)?"-"+t:t};function $e(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:Ve(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map($e):t.fallbacks=$e(e.fallbacks)),t}var qe=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=$e(e[t]);return e}return $e(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=Ve(t);return t===r?e:(n.prop(r,e),null)}}},Ge=ye&&CSS?CSS.px:"px",Ke=ye&&CSS?CSS.ms:"ms",Ye=ye&&CSS?CSS.percent:"%";function Qe(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var Xe=Qe({"animation-delay":Ke,"animation-duration":Ke,"background-position":Ge,"background-position-x":Ge,"background-position-y":Ge,"background-size":Ge,border:Ge,"border-bottom":Ge,"border-bottom-left-radius":Ge,"border-bottom-right-radius":Ge,"border-bottom-width":Ge,"border-left":Ge,"border-left-width":Ge,"border-radius":Ge,"border-right":Ge,"border-right-width":Ge,"border-top":Ge,"border-top-left-radius":Ge,"border-top-right-radius":Ge,"border-top-width":Ge,"border-width":Ge,margin:Ge,"margin-bottom":Ge,"margin-left":Ge,"margin-right":Ge,"margin-top":Ge,padding:Ge,"padding-bottom":Ge,"padding-left":Ge,"padding-right":Ge,"padding-top":Ge,"mask-position-x":Ge,"mask-position-y":Ge,"mask-size":Ge,height:Ge,width:Ge,"min-height":Ge,"max-height":Ge,"min-width":Ge,"max-width":Ge,bottom:Ge,left:Ge,top:Ge,right:Ge,"box-shadow":Ge,"text-shadow":Ge,"column-gap":Ge,"column-rule":Ge,"column-rule-width":Ge,"column-width":Ge,"font-size":Ge,"font-size-delta":Ge,"letter-spacing":Ge,"text-indent":Ge,"text-stroke":Ge,"text-stroke-width":Ge,"word-spacing":Ge,motion:Ge,"motion-offset":Ge,outline:Ge,"outline-offset":Ge,"outline-width":Ge,perspective:Ge,"perspective-origin-x":Ye,"perspective-origin-y":Ye,"transform-origin":Ye,"transform-origin-x":Ye,"transform-origin-y":Ye,"transform-origin-z":Ye,"transition-delay":Ke,"transition-duration":Ke,"vertical-align":Ge,"flex-basis":Ge,"shape-margin":Ge,size:Ge,grid:Ge,"grid-gap":Ge,"grid-row-gap":Ge,"grid-column-gap":Ge,"grid-template-rows":Ge,"grid-template-columns":Ge,"grid-auto-rows":Ge,"grid-auto-columns":Ge,"box-shadow-x":Ge,"box-shadow-y":Ge,"box-shadow-blur":Ge,"box-shadow-spread":Ge,"font-line-height":Ge,"text-shadow-x":Ge,"text-shadow-y":Ge,"text-shadow-blur":Ge});function Je(e,t,n){if(!t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=Je(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=Je(o,t[o],n);else for(var i in t)t[i]=Je(e+"-"+i,t[i],n);else if("number"==typeof t)return n[e]?""+t+n[e]:Xe[e]?"function"==typeof Xe[e]?Xe[e](t).toString():""+t+Xe[e]:t.toString();return t}var Ze=function(e){void 0===e&&(e={});var t=Qe(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=Je(r,e[r],t);return e},onChangeValue:function(e,n){return Je(n,e,t)}}},et=n(92),tt="",nt="",rt="",ot="",it=c&&"ontouchstart"in document.documentElement;if(c){var at={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},ut=document.createElement("p").style;for(var ct in at)if(ct+"Transform"in ut){tt=ct,nt=at[ct];break}"Webkit"===tt&&"msHyphens"in ut&&(tt="ms",nt=at.ms,ot="edge"),"Webkit"===tt&&"-apple-trailing-word"in ut&&(rt="apple")}var lt={js:tt,css:nt,vendor:rt,browser:ot,isTouch:it};var st={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===lt.js?"-webkit-"+e:lt.css+e)}},ft={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===lt.js?lt.css+"print-"+e:e)}},dt=/[-\s]+(.)?/g;function pt(e,t){return t?t.toUpperCase():""}function ht(e){return e.replace(dt,pt)}function vt(e){return ht("-"+e)}var mt,gt={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===lt.js){if(ht("mask-image")in t)return e;if(lt.js+vt("mask-image")in t)return lt.css+e}return e}},yt={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==lt.vendor||lt.isTouch?e:lt.css+e)}},bt={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:lt.css+e)}},wt={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:lt.css+e)}},xt={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===lt.js||"ms"===lt.js?lt.css+e:e)}},Et={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===lt.js||"ms"===lt.js||"apple"===lt.vendor?lt.css+e:e)}},St={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===lt.js?"WebkitColumn"+vt(e)in t&&lt.css+"column-"+e:"Moz"===lt.js&&("page"+vt(e)in t&&"page-"+e))}},kt={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===lt.js)return e;var n=e.replace("-inline","");return lt.js+vt(n)in t&&lt.css+n}},Ot={supportedProperty:function(e,t){return ht(e)in t&&e}},Tt={supportedProperty:function(e,t){var n=vt(e);return"-"===e[0]?e:"-"===e[0]&&"-"===e[1]?e:lt.js+n in t?lt.css+e:"Webkit"!==lt.js&&"Webkit"+n in t&&"-webkit-"+e}},jt={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===lt.js?""+lt.css+e:e)}},Ct={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===lt.js?lt.css+"scroll-chaining":e)}},Pt={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},_t={supportedProperty:function(e,t){var n=Pt[e];return!!n&&(lt.js+vt(n)in t&&lt.css+n)}},Rt={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},Nt=Object.keys(Rt),Mt=function(e){return lt.css+e},At=[st,ft,gt,yt,bt,wt,xt,Et,St,kt,Ot,Tt,jt,Ct,_t,{supportedProperty:function(e,t,n){var r=n.multiple;if(Nt.indexOf(e)>-1){var o=Rt[e];if(!Array.isArray(o))return lt.js+vt(o)in t&&lt.css+o;if(!r)return!1;for(var i=0;i<o.length;i++)if(!(lt.js+vt(o[0])in t))return!1;return o.map(Mt)}return!1}}],It=At.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),Lt=At.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,Object(et.a)(t.noPrefill)),e}),[]),Ft={};if(c){mt=document.createElement("p");var Dt=window.getComputedStyle(document.documentElement,"");for(var zt in Dt)isNaN(zt)||(Ft[Dt[zt]]=Dt[zt]);Lt.forEach((function(e){return delete Ft[e]}))}function Ut(e,t){if(void 0===t&&(t={}),!mt)return e;if(null!=Ft[e])return Ft[e];"transition"!==e&&"transform"!==e||(t[e]=e in mt.style);for(var n=0;n<It.length&&(Ft[e]=It[n](e,mt.style,t),!Ft[e]);n++);try{mt.style[e]=""}catch(e){return!1}return Ft[e]}var Wt,Bt={},Ht={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},Vt=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function $t(e,t,n){if("var"===t)return"var";if("all"===t)return"all";if("all"===n)return", all";var r=t?Ut(t):", "+Ut(n);return r||(t||n)}function qt(e,t){var n=t;if(!Wt||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=Bt[r])return Bt[r];try{Wt.style[e]=n}catch(e){return Bt[r]=!1,!1}if(Ht[e])n=n.replace(Vt,$t);else if(""===Wt.style[e]&&("-ms-flex"===(n=lt.css+n)&&(Wt.style[e]="-ms-flexbox"),Wt.style[e]=n,""===Wt.style[e]))return Bt[r]=!1,!1;return Wt.style[e]="",Bt[r]=n,Bt[r]}c&&(Wt=document.createElement("p"));var Gt=function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var o=!1,i=Ut(n);i&&i!==n&&(o=!0);var a=!1,u=qt(i,y(r));u&&u!==r&&(a=!0),(o||a)&&(o&&delete t[n],t[i||n]=u||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at="-"===(n=t.at)[1]?n:"ms"===lt.js?n:"@"+lt.css+"keyframes"+n.substr(10)}var n},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return qt(t,y(e))||e}}};var Kt=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},o=Object.keys(t).sort(e),i=0;i<o.length;i++)r[o[i]]=t[o[i]];return r}}};var Yt=function(){return{plugins:[Ce(),Ie(),ze(),qe(),Ze(),"undefined"==typeof window?null:Gt(),Kt()]}},Qt=be(Yt()),Xt={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,i=e.seed,a=void 0===i?"":i,u=""===a?"":"".concat(a,"-"),c=0;return function(e,t){c+=1;var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==ke.indexOf(e.key))return"Mui-".concat(e.key);var i="".concat(u).concat(r,"-").concat(e.key);return t.options.theme[Se]&&""===a?"".concat(i,"-").concat(c):i}return"".concat(u).concat(o).concat(c)}}(),jss:Qt,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},Jt=a.a.createContext(Xt);var Zt=-1e9;n(401);var en=n(48),tn=n.n(en);function nn(e,t){return t}var rn=function(e){var t="function"==typeof e;return{create:function(n,r){var i;try{i=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return i;var a=n.overrides[r],u=Object(o.a)({},i);return Object.keys(a).forEach((function(e){u[e]=tn()(u[e],a[e],{arrayMerge:nn})})),u},options:{}}},on={};function an(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=we({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function un(e,t){var n=e.state,r=e.theme,i=e.stylesOptions,a=e.stylesCreator,u=e.name;if(!i.disableGeneration){var c=xe.get(i.sheetsManager,a,r);c||(c={refs:0,staticSheet:null,dynamicStyles:null},xe.set(i.sheetsManager,a,r,c));var l=Object(o.a)({},a.options,{},i,{theme:r,flip:"boolean"==typeof i.flip?i.flip:"rtl"===r.direction});l.generateId=l.serverGenerateClassName||l.generateClassName;var s=i.sheetsRegistry;if(0===c.refs){var f;i.sheetsCache&&(f=xe.get(i.sheetsCache,a,r));var d=a.create(r,u);f||((f=i.jss.createStyleSheet(d,Object(o.a)({link:!1},l))).attach(),i.sheetsCache&&xe.set(i.sheetsCache,a,r,f)),s&&s.add(f),c.staticSheet=f,c.dynamicStyles=function e(t){var n=null;for(var r in t){var o=t[r],i=typeof o;if("function"===i)n||(n={}),n[r]=o;else if("object"===i&&null!==o&&!Array.isArray(o)){var a=e(o);a&&(n||(n={}),n[r]=a)}}return n}(d)}if(c.dynamicStyles){var p=i.jss.createStyleSheet(c.dynamicStyles,Object(o.a)({link:!0},l));p.update(t).attach(),n.dynamicSheet=p,n.classes=we({baseClasses:c.staticSheet.classes,newClasses:p.classes}),s&&s.add(p)}else n.classes=c.staticSheet.classes;c.refs+=1}}function cn(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function ln(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var i=xe.get(r.sheetsManager,o,n);i.refs-=1;var a=r.sheetsRegistry;0===i.refs&&(xe.delete(r.sheetsManager,o,n),r.jss.removeStyleSheet(i.staticSheet),a&&a.remove(i.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function sn(e,t){var n,r=a.a.useRef([]),o=a.a.useMemo((function(){return{}}),t);r.current!==o&&(r.current=o,n=e()),a.a.useEffect((function(){return function(){n&&n()}}),[o])}t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,i=t.classNamePrefix,u=t.Component,c=t.defaultTheme,l=void 0===c?on:c,s=Object(r.a)(t,["name","classNamePrefix","Component","defaultTheme"]),f=rn(e),d=n||i||"makeStyles";return f.options={index:Zt+=1,name:n,meta:d,classNamePrefix:d},function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object(Ee.a)()||l,r=Object(o.a)({},a.a.useContext(Jt),{},s),i=a.a.useRef(),c=a.a.useRef();return sn((function(){var o={name:n,state:{},stylesCreator:f,stylesOptions:r,theme:t};return un(o,e),c.current=!1,i.current=o,function(){ln(o)}}),[t,f]),a.a.useEffect((function(){c.current&&cn(i.current,e),c.current=!0})),an(i.current,e.classes,u)}}},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=o.a.createContext(null);function a(){return o.a.useContext(i)}n.d(t,"a",(function(){return a}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRUaGVtZVByb3BzL2dldFRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL3dpdGhTdHlsZXMvd2l0aFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy93aXRoU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2NhcGl0YWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY29sb3JNYW5pcHVsYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW52YXJpYW50L2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS13YXJuaW5nL2Rpc3QvdGlueS13YXJuaW5nLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3RyYW5zaXRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvbm9kZV9tb2R1bGVzL2lzLXBsYWluLW9iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvbm9kZV9tb2R1bGVzL2lzb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZU1peGlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9pbmRpZ28uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvcGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9ncmV5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL3JlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlUGFsZXR0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3NoYWRvd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvc2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvekluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2NyZWF0ZU11aVRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVTcGFjaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZm9yY2VkLXBhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLWZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvY3NzL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL3Njc3Mvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtbG9nMXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tdG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1sb2dnZXIvZGlzdC9yZWR1eC1sb2dnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9kaXN0L2VzbS9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9TZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vY29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ndWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcubGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLmF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmltdWxoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgudW11bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1wb2x5ZmlsbC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3Mvbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvY3NzL3N0eWxlLmNzcz9iYTMyIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvc2Nzcy9zdHlsZS5zY3NzPzgyYTEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VSZWR1eENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VEaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWN0aW9uL0FjdGlvbkNvbnN0YW50LmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2VyL0hvbWVSZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS9TdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvZXNtL3ZhbHVlLWVxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvbWFrZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0NvbnRhaW5lci9Db250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL2NvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3RyYW5zaXRpb25zL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3VzZVRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQ29sbGFwc2UvQ29sbGFwc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9QYXBlci9QYXBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0V4cGFuc2lvblBhbmVsL0V4cGFuc2lvblBhbmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvc2V0UmVmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvdXNlRm9ya1JlZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Ob1Nzci9Ob1Nzci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2ZvY3VzVmlzaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vdXRpbHMvQ2hpbGRNYXBwaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b25CYXNlL1JpcHBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0J1dHRvbkJhc2UvVG91Y2hSaXBwbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b25CYXNlL0J1dHRvbkJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JY29uQnV0dG9uL0ljb25CdXR0b24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9FeHBhbnNpb25QYW5lbFN1bW1hcnkvRXhwYW5zaW9uUGFuZWxTdW1tYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUNvbnRyb2wvRm9ybUNvbnRyb2xDb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVGV4dGFyZWFBdXRvc2l6ZS9UZXh0YXJlYUF1dG9zaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dEJhc2UvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9JbnB1dEJhc2UvSW5wdXRCYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRm9ybUNvbnRyb2wvZm9ybUNvbnRyb2xTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0ljb24vSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0V4cGFuc2lvblBhbmVsRGV0YWlscy9FeHBhbnNpb25QYW5lbERldGFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9EaXZpZGVyL0RpdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9FeHBhbnNpb25QYW5lbEFjdGlvbnMvRXhwYW5zaW9uUGFuZWxBY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL293bmVyRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9DbGlja0F3YXlMaXN0ZW5lci9DbGlja0F3YXlMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0dyb3cvR3Jvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1R5cG9ncmFwaHkvVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1NuYWNrYmFyQ29udGVudC9TbmFja2JhckNvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TbmFja2Jhci9TbmFja2Jhci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50L1NuYWNrYmFyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvQWRkQm94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUG9ydGFsL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1BvcHBlci9Qb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Ub29sdGlwL1Rvb2x0aXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9DYXJkL0NhcmRzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvU2VhcmNoQm94LmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvQ2FyZC9DYXJkSG9sZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnQvSG9tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzZWxlY3QvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlbGVjdG9yL0hvbWVTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udGFpbmVyL0hvbWVDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbi9Ib21lQWN0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9zZWxlY3Rvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0FwcEJhci9BcHBCYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Ub29sYmFyL1Rvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudC9OYXZiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvdXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1N2Z0ljb24vU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1N2Z0ljb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWluLWJyb3dzZXIvZGlzdC9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvZGlzdC9qc3MuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tZXJnZUNsYXNzZXMvbWVyZ2VDbGFzc2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL211bHRpS2V5U3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1RoZW1lUHJvdmlkZXIvbmVzdGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZS9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uL2Rpc3QvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1nbG9iYWwvZGlzdC9qc3MtcGx1Z2luLWdsb2JhbC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tbmVzdGVkL2Rpc3QvanNzLXBsdWdpbi1uZXN0ZWQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1jYW1lbC1jYXNlL2Rpc3QvanNzLXBsdWdpbi1jYW1lbC1jYXNlLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQvZGlzdC9qc3MtcGx1Z2luLWRlZmF1bHQtdW5pdC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvZGlzdC9jc3MtdmVuZG9yLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi12ZW5kb3ItcHJlZml4ZXIvZGlzdC9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tcHJvcHMtc29ydC9kaXN0L2pzcy1wbHVnaW4tcHJvcHMtc29ydC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2pzc1ByZXNldC9qc3NQcmVzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1N0eWxlc1Byb3ZpZGVyL1N0eWxlc1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL2luZGV4Q291bnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vZ2V0U3R5bGVzQ3JlYXRvci9nZXRTdHlsZXNDcmVhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9nZXRTdHlsZXNDcmVhdG9yL25vb3BUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWFrZVN0eWxlcy9tYWtlU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL3VzZVRoZW1lL3VzZVRoZW1lLmpzIl0sIm5hbWVzIjpbInBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrIiwid2luZG93IiwiY2h1bmtJZCIsIm1vcmVNb2R1bGVzIiwiaG90QXZhaWxhYmxlRmlsZXNNYXAiLCJob3RSZXF1ZXN0ZWRGaWxlc01hcCIsIm1vZHVsZUlkIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaG90VXBkYXRlIiwiaG90V2FpdGluZ0ZpbGVzIiwiaG90Q2h1bmtzTG9hZGluZyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RBZGRVcGRhdGVDaHVuayIsImhvdEN1cnJlbnRDaGlsZE1vZHVsZSIsImhvdEFwcGx5T25VcGRhdGUiLCJob3RDdXJyZW50SGFzaCIsImhvdFJlcXVlc3RUaW1lb3V0IiwiaG90Q3VycmVudE1vZHVsZURhdGEiLCJob3RDdXJyZW50UGFyZW50cyIsImhvdEN1cnJlbnRQYXJlbnRzVGVtcCIsImhvdENyZWF0ZVJlcXVpcmUiLCJtZSIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZm4iLCJyZXF1ZXN0IiwiaG90IiwiYWN0aXZlIiwicGFyZW50cyIsImluZGV4T2YiLCJwdXNoIiwiY2hpbGRyZW4iLCJjb25zb2xlIiwid2FybiIsIk9iamVjdEZhY3RvcnkiLCJuYW1lIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJlIiwiaG90U3RhdHVzIiwiaG90U2V0U3RhdHVzIiwidGhlbiIsImZpbmlzaENodW5rTG9hZGluZyIsImVyciIsImhvdFdhaXRpbmdGaWxlc01hcCIsImhvdEVuc3VyZVVwZGF0ZUNodW5rIiwidCIsIm1vZGUiLCJob3RDcmVhdGVNb2R1bGUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfZGVjbGluZWREZXBlbmRlbmNpZXMiLCJfc2VsZkFjY2VwdGVkIiwiX3NlbGZEZWNsaW5lZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfbWFpbiIsImFjY2VwdCIsImRlcCIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwiaSIsImxlbmd0aCIsImRlY2xpbmUiLCJkaXNwb3NlIiwiYWRkRGlzcG9zZUhhbmRsZXIiLCJyZW1vdmVEaXNwb3NlSGFuZGxlciIsImlkeCIsInNwbGljZSIsImNoZWNrIiwiaG90Q2hlY2siLCJhcHBseSIsImhvdEFwcGx5Iiwic3RhdHVzIiwibCIsImhvdFN0YXR1c0hhbmRsZXJzIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJkYXRhIiwibmV3U3RhdHVzIiwiaG90RGVmZXJyZWQiLCJob3RVcGRhdGVOZXdIYXNoIiwidG9Nb2R1bGVJZCIsImlkIiwiRXJyb3IiLCJyZXF1ZXN0VGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1ZXN0UGF0aCIsInAiLCJvcGVuIiwidGltZW91dCIsInNlbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwidXBkYXRlIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiYyIsImgiLCJwcm9taXNlIiwic2NyaXB0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2hhcnNldCIsInNyYyIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImhvdERvd25sb2FkVXBkYXRlQ2h1bmsiLCJkZWZlcnJlZCIsInJlc3VsdCIsIm91dGRhdGVkTW9kdWxlcyIsIm9wdGlvbnMiLCJjYiIsImoiLCJtb2R1bGUiLCJnZXRBZmZlY3RlZFN0dWZmIiwidXBkYXRlTW9kdWxlSWQiLCJvdXRkYXRlZERlcGVuZGVuY2llcyIsInF1ZXVlIiwibWFwIiwiY2hhaW4iLCJxdWV1ZUl0ZW0iLCJwb3AiLCJ0eXBlIiwicGFyZW50SWQiLCJwYXJlbnQiLCJjb25jYXQiLCJhZGRBbGxUb1NldCIsImEiLCJiIiwiaXRlbSIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsImpvaW4iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMiLCJlcnJvckhhbmRsZXIiLCJrZXlzIiwiZm9yRWFjaCIsImluc3RhbGxlZENodW5rcyIsImhvdERpc3Bvc2VDaHVuayIsImRlcGVuZGVuY3kiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsInNsaWNlIiwiZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJtb2R1bGVzIiwiZXJyb3IiLCJjYWxsYmFja3MiLCJvbkVycm9yZWQiLCJkZXBlbmRlbmN5SWQiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMiIsIm9yaWdpbmFsRXJyb3IiLCJleHBvcnRzIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImFyZ3VtZW50cyIsInNvdXJjZSIsInRoaXMiLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwiZXhwUHJvdG8iLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9WYWwiLCJtaXgiLCJrIiwieSIsInN0ciIsIngiLCJwYXJhbXMiLCJ0aGVtZSIsInByb3BzIiwicHJvcE5hbWUiLCJkZWZhdWx0UHJvcHMiLCJzdHlsZXNPckNyZWF0b3IiLCJDb21wb25lbnQiLCJkZWZhdWx0VGhlbWUiLCJfb3B0aW9ucyR3aXRoVGhlbWUiLCJ3aXRoVGhlbWUiLCJzdHlsZXNPcHRpb25zIiwiY2xhc3NOYW1lUHJlZml4IiwidXNlU3R5bGVzIiwibWFrZVN0eWxlcyIsImRpc3BsYXlOYW1lIiwiV2l0aFN0eWxlcyIsImZvcndhcmRSZWYiLCJyZWYiLCJjbGFzc2VzIiwiaW5uZXJSZWYiLCJvdGhlciIsIm1vcmUiLCJ1c2VUaGVtZSIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJjYXBpdGFsaXplIiwic3RyaW5nIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJ3cml0YWJsZSIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsInRvSW50ZWdlciIsIm1pbiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlS2V5cyIsImNsYW1wIiwibWF4IiwiZGVjb21wb3NlQ29sb3IiLCJjb2xvciIsInN1YnN0ciIsInJlIiwiUmVnRXhwIiwiY29sb3JzIiwibWF0Y2giLCJwYXJzZUludCIsImhleFRvUmdiIiwibWFya2VyIiwic3Vic3RyaW5nIiwidmFsdWVzIiwic3BsaXQiLCJwYXJzZUZsb2F0IiwicmVjb21wb3NlQ29sb3IiLCJnZXRDb250cmFzdFJhdGlvIiwiZm9yZWdyb3VuZCIsImJhY2tncm91bmQiLCJsdW1BIiwiZ2V0THVtaW5hbmNlIiwibHVtQiIsInJnYiIsImYiLCJyb3VuZCIsImhzbFRvUmdiIiwidmFsIiwicG93IiwiTnVtYmVyIiwidG9GaXhlZCIsImVtcGhhc2l6ZSIsImNvZWZmaWNpZW50IiwiZGFya2VuIiwibGlnaHRlbiIsImZhZGUiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJkUCIsIk8iLCJBdHRyaWJ1dGVzIiwiZGVmaW5lZCIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsImNyZWF0ZURlc2MiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJpbnNwZWN0U291cmNlIiwic2FmZSIsImlzRnVuY3Rpb24iLCJTdHJpbmciLCJmYWlscyIsInF1b3QiLCJjcmVhdGVIVE1MIiwidGFnIiwiYXR0cmlidXRlIiwicDEiLCJyZXBsYWNlIiwiTkFNRSIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsImlzQnVmZmVyIiwidG9TdHJpbmciLCJpc0FycmF5IiwiaXNBcnJheUJ1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNVbmRlZmluZWQiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIm1lcmdlIiwiYXNzaWduVmFsdWUiLCJkZWVwTWVyZ2UiLCJleHRlbmQiLCJ0aGlzQXJnIiwidHJpbSIsIklPYmplY3QiLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidG9PYmplY3QiLCJJRV9QUk9UTyIsIk9iamVjdFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJ2ZXJzaW9uIiwiX19lIiwiYUZ1bmN0aW9uIiwidGhhdCIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwibWV0aG9kIiwiYXJnIiwidmFsdWVPZiIsIktFWSIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsIkxJQlJBUlkiLCIkdHlwZWQiLCIkYnVmZmVyIiwiYW5JbnN0YW5jZSIsInByb3BlcnR5RGVzYyIsInJlZGVmaW5lQWxsIiwidG9JbmRleCIsInRvQWJzb2x1dGVJbmRleCIsImNsYXNzb2YiLCJpc0FycmF5SXRlciIsImdPUE4iLCJnZXRJdGVyRm4iLCJ3a3MiLCJjcmVhdGVBcnJheU1ldGhvZCIsImNyZWF0ZUFycmF5SW5jbHVkZXMiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJBcnJheUl0ZXJhdG9ycyIsIkl0ZXJhdG9ycyIsIiRpdGVyRGV0ZWN0Iiwic2V0U3BlY2llcyIsImFycmF5RmlsbCIsImFycmF5Q29weVdpdGhpbiIsIiREUCIsIiRHT1BEIiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJBcnJheVByb3RvIiwiQXJyYXkiLCIkQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiZW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFycmF5UmVkdWNlIiwicmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0Iiwic29ydCIsImFycmF5U2xpY2UiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiSVRFUkFUT1IiLCJUQUciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJDT05TVFIiLCJUWVBFRF9BUlJBWSIsIlRZUEVEIiwiVklFVyIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsIkZPUkNFRF9TRVQiLCJ0b09mZnNldCIsIkJZVEVTIiwib2Zmc2V0IiwidmFsaWRhdGUiLCJDIiwic3BlY2llc0Zyb21MaXN0IiwibGlzdCIsImZyb21MaXN0IiwiYWRkR2V0dGVyIiwiaW50ZXJuYWwiLCJfZCIsIiRmcm9tIiwic3RlcCIsIml0ZXJhdG9yIiwiYUxlbiIsIm1hcGZuIiwibWFwcGluZyIsIml0ZXJGbiIsIm5leHQiLCJkb25lIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsInByb3RvIiwiY29weVdpdGhpbiIsInN0YXJ0IiwiZXZlcnkiLCJmaWxsIiwiZmlsdGVyIiwiZmluZCIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJ3cmFwcGVyIiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJCYXNlIiwiVEFDIiwiRk9SQ0VEIiwiQUJWIiwiVHlwZWRBcnJheVByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJ2Iiwic2V0dGVyIiwiJG9mZnNldCIsIiRsZW5ndGgiLCJieXRlTGVuZ3RoIiwia2xhc3MiLCIkbGVuIiwiaXRlciIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwib2YiLCJmcm9tIiwiTWFwIiwic2hhcmVkIiwiZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCIsInRhcmdldEtleSIsInRhcmdldE1ldGFkYXRhIiwia2V5TWV0YWRhdGEiLCJNZXRhZGF0YUtleSIsIm1ldGFkYXRhTWFwIiwiTWV0YWRhdGFWYWx1ZSIsIl8iLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhcmdzIiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsIk1FVEEiLCJzZXREZXNjIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsIlVOU0NPUEFCTEVTIiwiaXNQcm9kdWN0aW9uIiwibWVzc2FnZSIsInRleHQiLCJpc01lcmdlYWJsZU9iamVjdCIsImlzTm9uTnVsbE9iamVjdCIsInN0cmluZ1ZhbHVlIiwiJCR0eXBlb2YiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJpc1JlYWN0RWxlbWVudCIsImlzU3BlY2lhbCIsImZvciIsImNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIiwiY2xvbmUiLCJkZWVwbWVyZ2UiLCJkZWZhdWx0QXJyYXlNZXJnZSIsImVsZW1lbnQiLCJnZXRLZXlzIiwic3ltYm9sIiwiZ2V0RW51bWVyYWJsZU93blByb3BlcnR5U3ltYm9scyIsInByb3BlcnR5SXNPbk9iamVjdCIsIm1lcmdlT2JqZWN0IiwiZGVzdGluYXRpb24iLCJwcm9wZXJ0eUlzVW5zYWZlIiwiY3VzdG9tTWVyZ2UiLCJnZXRNZXJnZUZ1bmN0aW9uIiwiYXJyYXlNZXJnZSIsInNvdXJjZUlzQXJyYXkiLCJhbGwiLCJhcnJheSIsInByZXYiLCJkZWVwbWVyZ2VfMSIsImJpdG1hcCIsInB4IiwicmFuZG9tIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsImRQcyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiY29udGVudFdpbmRvdyIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiX3QiLCJSZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsImVhc2luZyIsImVhc2VJbk91dCIsImVhc2VPdXQiLCJlYXNlSW4iLCJzaGFycCIsImR1cmF0aW9uIiwic2hvcnRlc3QiLCJzaG9ydGVyIiwic2hvcnQiLCJzdGFuZGFyZCIsImNvbXBsZXgiLCJlbnRlcmluZ1NjcmVlbiIsImxlYXZpbmdTY3JlZW4iLCJmb3JtYXRNcyIsIm1pbGxpc2Vjb25kcyIsIl9vcHRpb25zJGR1cmF0aW9uIiwiZHVyYXRpb25PcHRpb24iLCJfb3B0aW9ucyRlYXNpbmciLCJlYXNpbmdPcHRpb24iLCJfb3B0aW9ucyRkZWxheSIsImRlbGF5IiwiYW5pbWF0ZWRQcm9wIiwiZ2V0QXV0b0hlaWdodER1cmF0aW9uIiwiaGVpZ2h0IiwiY29uc3RhbnQiLCJnIiwiZGVmIiwic3RhdCIsImNvZiIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJpc09iamVjdE9iamVjdCIsImlzUGxhaW5PYmplY3QiLCJjdG9yIiwicHJvdCIsImNyZWF0ZU1peGlucyIsImJyZWFrcG9pbnRzIiwic3BhY2luZyIsIl90b29sYmFyIiwiZ3V0dGVycyIsInN0eWxlcyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwidXAiLCJ0b29sYmFyIiwibWluSGVpZ2h0IiwiNTAiLCIxMDAiLCIyMDAiLCIzMDAiLCI0MDAiLCI1MDAiLCI2MDAiLCI3MDAiLCI4MDAiLCI5MDAiLCJBMTAwIiwiQTIwMCIsIkE0MDAiLCJBNzAwIiwiYmxhY2siLCJ3aGl0ZSIsImxpZ2h0IiwicHJpbWFyeSIsInNlY29uZGFyeSIsImRpc2FibGVkIiwiaGludCIsImRpdmlkZXIiLCJwYXBlciIsImRlZmF1bHQiLCJhY3Rpb24iLCJob3ZlciIsImhvdmVyT3BhY2l0eSIsInNlbGVjdGVkIiwiZGlzYWJsZWRCYWNrZ3JvdW5kIiwiZGFyayIsImljb24iLCJhZGRMaWdodE9yRGFyayIsImludGVudCIsImRpcmVjdGlvbiIsInNoYWRlIiwidG9uYWxPZmZzZXQiLCJtYWluIiwiY2FzZUFsbENhcHMiLCJ0ZXh0VHJhbnNmb3JtIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJjcmVhdGVUeXBvZ3JhcGh5IiwicGFsZXR0ZSIsInR5cG9ncmFwaHkiLCJfcmVmIiwiX3JlZiRmb250RmFtaWx5IiwiZm9udEZhbWlseSIsIl9yZWYkZm9udFNpemUiLCJmb250U2l6ZSIsIl9yZWYkZm9udFdlaWdodExpZ2h0IiwiZm9udFdlaWdodExpZ2h0IiwiX3JlZiRmb250V2VpZ2h0UmVndWxhIiwiZm9udFdlaWdodFJlZ3VsYXIiLCJfcmVmJGZvbnRXZWlnaHRNZWRpdW0iLCJmb250V2VpZ2h0TWVkaXVtIiwiX3JlZiRmb250V2VpZ2h0Qm9sZCIsImZvbnRXZWlnaHRCb2xkIiwiX3JlZiRodG1sRm9udFNpemUiLCJodG1sRm9udFNpemUiLCJhbGxWYXJpYW50cyIsInB4VG9SZW0yIiwicHhUb1JlbSIsImNvZWYiLCJzaXplIiwiYnVpbGRWYXJpYW50IiwiZm9udFdlaWdodCIsImxpbmVIZWlnaHQiLCJsZXR0ZXJTcGFjaW5nIiwiY2FzaW5nIiwidmFyaWFudHMiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJib2R5MSIsImJvZHkyIiwiYnV0dG9uIiwiY2FwdGlvbiIsIm92ZXJsaW5lIiwic2hhZG93S2V5VW1icmFPcGFjaXR5Iiwic2hhZG93S2V5UGVudW1icmFPcGFjaXR5Iiwic2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkiLCJjcmVhdGVTaGFkb3ciLCJib3JkZXJSYWRpdXMiLCJtb2JpbGVTdGVwcGVyIiwic3BlZWREaWFsIiwiYXBwQmFyIiwiZHJhd2VyIiwibW9kYWwiLCJzbmFja2JhciIsInRvb2x0aXAiLCJfb3B0aW9ucyRicmVha3BvaW50cyIsImJyZWFrcG9pbnRzSW5wdXQiLCJfb3B0aW9ucyRtaXhpbnMiLCJtaXhpbnNJbnB1dCIsIl9vcHRpb25zJHBhbGV0dGUiLCJwYWxldHRlSW5wdXQiLCJzaGFkb3dzSW5wdXQiLCJzaGFkb3dzIiwic3BhY2luZ0lucHV0IiwiX29wdGlvbnMkdHlwb2dyYXBoeSIsInR5cG9ncmFwaHlJbnB1dCIsIl9wYWxldHRlJHByaW1hcnkiLCJfcGFsZXR0ZSRzZWNvbmRhcnkiLCJfcGFsZXR0ZSRlcnJvciIsIl9wYWxldHRlJHR5cGUiLCJfcGFsZXR0ZSRjb250cmFzdFRocmUiLCJjb250cmFzdFRocmVzaG9sZCIsIl9wYWxldHRlJHRvbmFsT2Zmc2V0IiwiZ2V0Q29udHJhc3RUZXh0IiwiYXVnbWVudENvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsImNvbnRyYXN0VGV4dCIsInR5cGVzIiwiY29tbW9uIiwiZ3JleSIsImNyZWF0ZVBhbGV0dGUiLCJfYnJlYWtwb2ludHMkdmFsdWVzIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsIl9icmVha3BvaW50cyR1bml0IiwidW5pdCIsIl9icmVha3BvaW50cyRzdGVwIiwiYmV0d2VlbiIsImVuZEluZGV4IiwiZG93biIsInVwcGVyYm91bmQiLCJvbmx5Iiwid2lkdGgiLCJjcmVhdGVCcmVha3BvaW50cyIsInRyYW5zZm9ybSIsIm11aSIsImZhY3RvciIsIl9sZW4iLCJfa2V5Iiwib3V0cHV0IiwiY3JlYXRlU3BhY2luZyIsIm92ZXJyaWRlcyIsInNoYXBlIiwidHJhbnNpdGlvbnMiLCJ6SW5kZXgiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJjb3B5cmlnaHQiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsIkQiLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwiVE9fU1RSSU5HIiwicG9zIiwiY2hhckNvZGVBdCIsIk1BVENIIiwiaXNSZWdFeHAiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwiYnVpbHRpbkV4ZWMiLCJyZWdleHBFeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJncm91cHMiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibmF0aXZlTWV0aG9kIiwicmVnZXhwIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwidXNlckFnZW50IiwiZm9yT2YiLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwibWV0aG9kcyIsIklTX1dFQUsiLCJBRERFUiIsImZpeE1ldGhvZCIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiY2xlYXIiLCJnZXRDb25zdHJ1Y3RvciIsInNldFN0cm9uZyIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsIksiLCJfX2RlZmluZVNldHRlcl9fIiwiQ09MTEVDVElPTiIsIkEiLCJtYXBGbiIsIm5leHRJdGVtIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycjIiLCJpdGVyYWJsZVRvQXJyYXkiLCJpcyIsIndrc0V4dCIsIiRTeW1ib2wiLCJkb2N1bWVudEVsZW1lbnQiLCJzZXRQcm90b3R5cGVPZiIsImJ1Z2d5IiwiY291bnQiLCJJbmZpbml0eSIsInNpZ24iLCIkZXhwbTEiLCJleHBtMSIsIiRpdGVyQ3JlYXRlIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwic2VhcmNoU3RyaW5nIiwiJGRlZmluZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJvcmlnaW5hbCIsImVuZFBvcyIsImFkZFRvVW5zY29wYWJsZXMiLCJpdGVyYXRlZCIsIl9pIiwiX2siLCJBcmd1bWVudHMiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwibGFzdEluZGV4IiwicmVDb3B5IiwiYXQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInJ1biIsImxpc3RlbmVyIiwiZXZlbnQiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImlzTm9kZSIsImxhc3QiLCJub3RpZnkiLCJmbHVzaCIsImRvbWFpbiIsImV4aXQiLCJlbnRlciIsInN0YW5kYWxvbmUiLCJ0b2dnbGUiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInRhc2siLCJQcm9taXNlQ2FwYWJpbGl0eSIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiUFJPVE9UWVBFIiwiV1JPTkdfSU5ERVgiLCJCYXNlQnVmZmVyIiwiYWJzIiwibG9nIiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwiTmFOIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiQXJyYXlCdWZmZXJQcm90byIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsImJ1ZmZlckxlbmd0aCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0Iiwicm9vdCIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJjb21waWxlIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJ0b2tlbnMiLCJwYXRoIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImVzY2FwZWQiLCJwcmVmaXgiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwicGF0dGVybiIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwibWF0Y2hlcyIsIm9wdHMiLCJlbmNvZGUiLCJwcmV0dHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b2tlbiIsInNlZ21lbnQiLCJzdHJpbmdpZnkiLCJhdHRhY2hLZXlzIiwiZmxhZ3MiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsIm5hbWVzIiwiZGVmaW5lUHJvcGVydGllcyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BTIiwiJGFzc2lnbiIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJwYXJ0QXJncyIsImJvdW5kIiwidW4iLCIkcGFyc2VJbnQiLCIkdHJpbSIsIndzIiwiaGV4IiwicmFkaXgiLCIkcGFyc2VGbG9hdCIsIm1zZyIsImlzRmluaXRlIiwibG9nMXAiLCJFUFNJTE9OIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsImZyb3VuZCIsIiRhYnMiLCIkc2lnbiIsInJldCIsIm1lbW8iLCJpc1JpZ2h0IiwidG8iLCJpbmMiLCJmb3JjZWQiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsInByb21pc2VDYXBhYmlsaXR5Iiwic3Ryb25nIiwiZW50cnkiLCJnZXRFbnRyeSIsIiRpdGVyRGVmaW5lIiwiU0laRSIsIl9mIiwiX2wiLCJhZGQiLCJJbnRlcm5hbE1hcCIsImVhY2giLCJ3ZWFrIiwiTkFUSVZFX1dFQUtfTUFQIiwiSVNfSUUxMSIsIkFjdGl2ZVhPYmplY3QiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwidWZzdG9yZSIsIiRXZWFrTWFwIiwiJGhhcyIsIlVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJudW1iZXIiLCJSZWZsZWN0Iiwib3duS2V5cyIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiZmxhdHRlbkludG9BcnJheSIsInNvdXJjZUxlbiIsImRlcHRoIiwibWFwcGVyIiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaXNFbnRyaWVzIiwic2NhbGUiLCJpbkxvdyIsImluSGlnaCIsIm91dExvdyIsIm91dEhpZ2giLCJwcm9wSXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsInV0aWxzIiwidXJsIiwicGFyYW1zU2VyaWFsaXplciIsInNlcmlhbGl6ZWRQYXJhbXMiLCJ0b0lTT1N0cmluZyIsImhhc2htYXJrSW5kZXgiLCJfX0NBTkNFTF9fIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiaGVhZGVycyIsImFkYXB0ZXIiLCJkZWZhdWx0cyIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzZXR0bGUiLCJidWlsZFVSTCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwiY29uZmlnIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImF1dGgiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInJlc3BvbnNlIiwicmVzcG9uc2VUeXBlIiwic3RhdHVzVGV4dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwiY2FuY2VsIiwiYWJvcnQiLCJlbmhhbmNlRXJyb3IiLCJjb2RlIiwiY29uZmlnMSIsImNvbmZpZzIiLCJwcm9wIiwiQ2FuY2VsIiwidXNlU291cmNlTWFwIiwiY29udGVudCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwidW5lc2NhcGUiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJCb29sZWFuIiwiYXRvYiIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsImFkZFN0eWxlc1RvRG9tIiwiZG9tU3R5bGUiLCJyZWZzIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJfZG9tU3R5bGUiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwic3VwZXJfIiwidSIsIk4iLCJwcmVmaWx0ZXIiLCJub3JtYWxpemUiLCJsaHMiLCJyaHMiLCJncm91cENvbGxhcHNlZCIsImdyb3VwRW5kIiwibG9nZ2VyIiwiYWN0aW9uVHJhbnNmb3JtZXIiLCJ0aXRsZUZvcm1hdHRlciIsInRpbWVzdGFtcCIsImNvbGxhcHNlZCIsImxldmVsIiwiZGlmZiIsInN0YXJ0ZWQiLCJzdGFydGVkVGltZSIsInByZXZTdGF0ZSIsInRvb2siLCJuZXh0U3RhdGUiLCJFIiwidGl0bGUiLCJMIiwiTSIsInN0YXRlVHJhbnNmb3JtZXIiLCJlcnJvclRyYW5zZm9ybWVyIiwibG9nRXJyb3JzIiwiZGlmZlByZWRpY2F0ZSIsImdldFN0YXRlIiwiZGlzcGF0Y2giLCJEYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInBlcmZvcm1hbmNlIiwiRGVlcERpZmYiLCJvYnNlcnZhYmxlRGlmZiIsImFwcGx5RGlmZiIsImFwcGx5Q2hhbmdlIiwicmV2ZXJ0Q2hhbmdlIiwiaXNDb25mbGljdCIsIm5vQ29uZmxpY3QiLCJ0cmFuc2Zvcm1lciIsImNyZWF0ZUxvZ2dlciIsIl9hcnJheVdpdGhIb2xlcyIsIl9ub25JdGVyYWJsZVJlc3QiLCJpc0Jyb3dzZXIiLCJ0aW1lb3V0RHVyYXRpb24iLCJsb25nZXJUaW1lb3V0QnJvd3NlcnMiLCJkZWJvdW5jZSIsImNhbGxlZCIsInNjaGVkdWxlZCIsImZ1bmN0aW9uVG9DaGVjayIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsIm5vZGVUeXBlIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFBhcmVudE5vZGUiLCJub2RlTmFtZSIsImhvc3QiLCJnZXRTY3JvbGxQYXJlbnQiLCJib2R5IiwiX2dldFN0eWxlQ29tcHV0ZWRQcm9wIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJnZXRSZWZlcmVuY2VOb2RlIiwicmVmZXJlbmNlIiwicmVmZXJlbmNlTm9kZSIsImlzSUUxMSIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnRNb2RlIiwiaXNJRTEwIiwiaXNJRSIsImdldE9mZnNldFBhcmVudCIsIm5vT2Zmc2V0UGFyZW50Iiwib2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ2V0Um9vdCIsImZpbmRDb21tb25PZmZzZXRQYXJlbnQiLCJlbGVtZW50MSIsImVsZW1lbnQyIiwib3JkZXIiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk5vZGUiLCJET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkciLCJyYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsImNvbnRhaW5zIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJlbGVtZW50MXJvb3QiLCJnZXRTY3JvbGwiLCJ1cHBlclNpZGUiLCJzY3JvbGxpbmdFbGVtZW50IiwiZ2V0Qm9yZGVyc1NpemUiLCJheGlzIiwic2lkZUEiLCJzaWRlQiIsImdldFNpemUiLCJjb21wdXRlZFN0eWxlIiwiZ2V0V2luZG93U2l6ZXMiLCJjbGFzc0NhbGxDaGVjayIsImNyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiZ2V0Q2xpZW50UmVjdCIsIm9mZnNldHMiLCJyaWdodCIsImJvdHRvbSIsInRvcCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlY3QiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0Iiwic2l6ZXMiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImhvcml6U2Nyb2xsYmFyIiwib2Zmc2V0V2lkdGgiLCJ2ZXJ0U2Nyb2xsYmFyIiwib2Zmc2V0SGVpZ2h0IiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwiZml4ZWRQb3NpdGlvbiIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJzdWJ0cmFjdCIsImluY2x1ZGVTY3JvbGwiLCJnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50IiwicGFyZW50RWxlbWVudCIsImdldEJvdW5kYXJpZXMiLCJwb3BwZXIiLCJwYWRkaW5nIiwiYm91bmRhcmllc0VsZW1lbnQiLCJib3VuZGFyaWVzIiwiZXhjbHVkZVNjcm9sbCIsInJlbGF0aXZlT2Zmc2V0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlIiwiYm91bmRhcmllc05vZGUiLCJpc0ZpeGVkIiwiX2dldFdpbmRvd1NpemVzIiwiaXNQYWRkaW5nTnVtYmVyIiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJwbGFjZW1lbnQiLCJyZWZSZWN0IiwicmVjdHMiLCJzb3J0ZWRBcmVhcyIsImFyZWEiLCJmaWx0ZXJlZEFyZWFzIiwiX3JlZjIiLCJjb21wdXRlZFBsYWNlbWVudCIsInZhcmlhdGlvbiIsImdldFJlZmVyZW5jZU9mZnNldHMiLCJzdGF0ZSIsImdldE91dGVyU2l6ZXMiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5SaWdodCIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwiaGFzaCIsIm1hdGNoZWQiLCJnZXRQb3BwZXJPZmZzZXRzIiwicmVmZXJlbmNlT2Zmc2V0cyIsInBvcHBlclJlY3QiLCJwb3BwZXJPZmZzZXRzIiwiaXNIb3JpeiIsIm1haW5TaWRlIiwic2Vjb25kYXJ5U2lkZSIsIm1lYXN1cmVtZW50Iiwic2Vjb25kYXJ5TWVhc3VyZW1lbnQiLCJydW5Nb2RpZmllcnMiLCJtb2RpZmllcnMiLCJlbmRzIiwiY3VyIiwiZW5hYmxlZCIsImlzRGVzdHJveWVkIiwiYXJyb3dTdHlsZXMiLCJmbGlwcGVkIiwicG9zaXRpb25GaXhlZCIsImZsaXAiLCJvcmlnaW5hbFBsYWNlbWVudCIsInBvc2l0aW9uIiwiaXNDcmVhdGVkIiwib25VcGRhdGUiLCJvbkNyZWF0ZSIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwiZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lIiwicHJlZml4ZXMiLCJ1cHBlclByb3AiLCJ0b0NoZWNrIiwiZGVzdHJveSIsInJlbW92ZUF0dHJpYnV0ZSIsIndpbGxDaGFuZ2UiLCJkaXNhYmxlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVPbkRlc3Ryb3kiLCJnZXRXaW5kb3ciLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwidXBkYXRlQm91bmQiLCJwYXNzaXZlIiwic2Nyb2xsRWxlbWVudCIsImF0dGFjaFRvU2Nyb2xsUGFyZW50cyIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJldmVudHNFbmFibGVkIiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJzY2hlZHVsZVVwZGF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzTnVtZXJpYyIsInNldFN0eWxlcyIsImlzRmlyZWZveCIsImlzTW9kaWZpZXJSZXF1aXJlZCIsInJlcXVlc3RpbmdOYW1lIiwicmVxdWVzdGVkTmFtZSIsInJlcXVlc3RpbmciLCJpc1JlcXVpcmVkIiwiX3JlcXVlc3RpbmciLCJyZXF1ZXN0ZWQiLCJwbGFjZW1lbnRzIiwidmFsaWRQbGFjZW1lbnRzIiwiY2xvY2t3aXNlIiwiQkVIQVZJT1JTIiwiRkxJUCIsIkNMT0NLV0lTRSIsIkNPVU5URVJDTE9DS1dJU0UiLCJwYXJzZU9mZnNldCIsImJhc2VQbGFjZW1lbnQiLCJ1c2VIZWlnaHQiLCJmcmFnbWVudHMiLCJmcmFnIiwic2VhcmNoIiwic3BsaXRSZWdleCIsIm9wcyIsIm9wIiwibWVyZ2VXaXRoUHJldmlvdXMiLCJ0b1ZhbHVlIiwiaW5kZXgyIiwiRGVmYXVsdHMiLCJzaGlmdCIsInNoaWZ0dmFyaWF0aW9uIiwiX2RhdGEkb2Zmc2V0cyIsImlzVmVydGljYWwiLCJzaWRlIiwic2hpZnRPZmZzZXRzIiwicHJldmVudE92ZXJmbG93IiwidHJhbnNmb3JtUHJvcCIsInBvcHBlclN0eWxlcyIsInByaW9yaXR5IiwiZXNjYXBlV2l0aFJlZmVyZW5jZSIsImtlZXBUb2dldGhlciIsIm9wU2lkZSIsImFycm93IiwiX2RhdGEkb2Zmc2V0cyRhcnJvdyIsImFycm93RWxlbWVudCIsInNpZGVDYXBpdGFsaXplZCIsImFsdFNpZGUiLCJhcnJvd0VsZW1lbnRTaXplIiwiY2VudGVyIiwicG9wcGVyTWFyZ2luU2lkZSIsInBvcHBlckJvcmRlclNpZGUiLCJzaWRlVmFsdWUiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsImJlaGF2aW9yIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb25CeVJlZiIsImZsaXBWYXJpYXRpb25zIiwiZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudCIsImZsaXBWYXJpYXRpb25zQnlDb250ZW50IiwiZmxpcHBlZFZhcmlhdGlvbiIsImdldE9wcG9zaXRlVmFyaWF0aW9uIiwiaW5uZXIiLCJzdWJ0cmFjdExlbmd0aCIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJzaG91bGRSb3VuZCIsIm5vUm91bmQiLCJyZWZlcmVuY2VXaWR0aCIsInBvcHBlcldpZHRoIiwiaXNWYXJpYXRpb24iLCJob3Jpem9udGFsVG9JbnRlZ2VyIiwidmVydGljYWxUb0ludGVnZXIiLCJnZXRSb3VuZGVkT2Zmc2V0cyIsImRldmljZVBpeGVsUmF0aW8iLCJwcmVmaXhlZFByb3BlcnR5IiwiaW52ZXJ0VG9wIiwiaW52ZXJ0TGVmdCIsImFwcGx5U3R5bGUiLCJvbkxvYWQiLCJtb2RpZmllck9wdGlvbnMiLCJQb3BwZXIiLCJfdGhpcyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImpxdWVyeSIsIlV0aWxzIiwiUG9wcGVyVXRpbHMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3JlYWN0IiwiX2RlZmF1bHQiLCJfYmFiZWxQb2x5ZmlsbCIsIkRFRklORV9QUk9QRVJUWSIsImRlZmluZSIsInBhZFN0YXJ0IiwicGFkRW5kIiwiJGZhaWxzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BTIiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsIiRnZXRQcm90b3R5cGVPZiIsIiRmcmVlemUiLCIkc2VhbCIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRpc0Zyb3plbiIsIiRpc1NlYWxlZCIsIiRpc0V4dGVuc2libGUiLCJGUHJvdG8iLCJuYW1lUkUiLCJIQVNfSU5TVEFOQ0UiLCJGdW5jdGlvblByb3RvIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImZpcnN0IiwiZGlnaXRzIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJFUlJPUiIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsImFjYyIsImZyYWN0aW9uRGlnaXRzIiwieiIsIngyIiwiJHRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCJfaXNGaW5pdGUiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJzcXJ0IiwiJGFjb3NoIiwiYWNvc2giLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInlsIiwibG9nMTAiLCJMT0cxMEUiLCJsb2cyIiwic2luaCIsInRhbmgiLCJ0cnVuYyIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwiJGF0IiwicG9pbnQiLCJjb2RlUG9pbnRBdCIsImNvbnRleHQiLCIkZW5kc1dpdGgiLCJlbmRzV2l0aCIsImVuZFBvc2l0aW9uIiwiJHN0YXJ0c1dpdGgiLCJzdGFydHNXaXRoIiwiZ2V0VGltZSIsInRvSlNPTiIsInB2IiwiJHRvSVNPU3RyaW5nIiwibHoiLCJudW0iLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01pbGxpc2Vjb25kcyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJEYXRlUHJvdG8iLCJjcmVhdGVQcm9wZXJ0eSIsInVwVG8iLCJjbG9uZWQiLCIkc29ydCIsIiRmb3JFYWNoIiwiU1RSSUNUIiwiJGZpbHRlciIsIiRzb21lIiwiJGV2ZXJ5IiwiJHJlZHVjZSIsIiRpbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIiRmaW5kIiwiJGZsYWdzIiwiJFJlZ0V4cCIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCJwcm94eSIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlZ0V4cEV4ZWMiLCIkbWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJyeCIsImZ1bGxVbmljb2RlIiwibWF0Y2hTdHIiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJmdW5jdGlvbmFsUmVwbGFjZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VyQXJncyIsImdldFN1YnN0aXR1dGlvbiIsInRhaWxQb3MiLCJjaCIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIiRzZWFyY2giLCJwcmV2aW91c0xhc3RJbmRleCIsImNhbGxSZWdFeHBFeGVjIiwiJG1pbiIsIiRwdXNoIiwiU1VQUE9SVFNfWSIsIlNQTElUIiwiJHNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGFzdExlbmd0aCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibGltIiwicSIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwicHJvbWlzZVJlc29sdmUiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJlbXB0eSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0IiwiX24iLCJfYyIsIl92Iiwib2siLCJfcyIsInJlYWN0aW9uIiwiZXhpdGVkIiwiaGFuZGxlciIsImZhaWwiLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl93IiwiJHJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhcGFiaWxpdHkiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIiRpc1ZpZXciLCJmaW4iLCJ2aWV3UyIsInZpZXdUIiwiaW5pdCIsInJBcHBseSIsImZBcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJyQ29uc3RydWN0IiwiTkVXX1RBUkdFVF9CVUciLCJBUkdTX0JVRyIsIlRhcmdldCIsIm5ld1RhcmdldCIsIiRhcmdzIiwicHJvcGVydHlLZXkiLCJkZWxldGVQcm9wZXJ0eSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsInJlY2VpdmVyIiwiZ2V0UHJvdG8iLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsInNldFByb3RvIiwiJGluY2x1ZGVzIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiZmxhdE1hcCIsImZsYXR0ZW4iLCJkZXB0aEFyZyIsIiRwYWQiLCJXRUJLSVRfQlVHIiwiZ2V0RmxhZ3MiLCJSZWdFeHBQcm90byIsIiRSZWdFeHBTdHJpbmdJdGVyYXRvciIsIl9yIiwibWF0Y2hBbGwiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZ2V0RGVzYyIsIiR2YWx1ZXMiLCJfX2RlZmluZUdldHRlcl9fIiwiX19sb29rdXBHZXR0ZXJfXyIsIl9fbG9va3VwU2V0dGVyX18iLCJpc0Vycm9yIiwibG93ZXIiLCJ1cHBlciIsIkRFR19QRVJfUkFEIiwiUEkiLCJSQURfUEVSX0RFRyIsImRlZ3JlZXMiLCJyYWRpYW5zIiwiZnNjYWxlIiwiaWFkZGgiLCJ4MCIsIngxIiwieTAiLCJ5MSIsIiR4MCIsIiR5MCIsImlzdWJoIiwiaW11bGgiLCIkdSIsIiR2IiwidTAiLCJ2MCIsInUxIiwidjEiLCJ1bXVsaCIsInNpZ25iaXQiLCJvbkZpbmFsbHkiLCJtZXRhZGF0YSIsInRvTWV0YUtleSIsIm9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEiLCJkZWZpbmVNZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsImRlbGV0ZU1ldGFkYXRhIiwib3JkaW5hcnlIYXNPd25NZXRhZGF0YSIsIm9yZGluYXJ5R2V0T3duTWV0YWRhdGEiLCJvcmRpbmFyeUdldE1ldGFkYXRhIiwiZ2V0TWV0YWRhdGEiLCJTZXQiLCJvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5TWV0YWRhdGFLZXlzIiwib0tleXMiLCJwS2V5cyIsImdldE1ldGFkYXRhS2V5cyIsImdldE93bk1ldGFkYXRhIiwiZ2V0T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlIYXNNZXRhZGF0YSIsImhhc01ldGFkYXRhIiwiaGFzT3duTWV0YWRhdGEiLCIkbWV0YWRhdGEiLCJhc2FwIiwiT0JTRVJWQUJMRSIsImNsZWFudXBTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb24iLCJjbGVhbnVwIiwic3Vic2NyaXB0aW9uQ2xvc2VkIiwiX28iLCJjbG9zZVN1YnNjcmlwdGlvbiIsIlN1YnNjcmlwdGlvbiIsIm9ic2VydmVyIiwic3Vic2NyaWJlciIsIlN1YnNjcmlwdGlvbk9ic2VydmVyIiwidW5zdWJzY3JpYmUiLCJjb21wbGV0ZSIsIiRPYnNlcnZhYmxlIiwic3Vic2NyaWJlIiwiaXRlbXMiLCJPYnNlcnZhYmxlIiwiTVNJRSIsInRpbWUiLCJib3VuZEFyZ3MiLCJzZXRJbnRlcnZhbCIsIiR0YXNrIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiaW5Nb2R1bGUiLCJydW50aW1lIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkdlbmVyYXRvciIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsIm1hcmsiLCJhd3JhcCIsIl9fYXdhaXQiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiYXN5bmMiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwiQ29udGV4dCIsInJlc2V0Iiwic2tpcFRlbXBSZXNldCIsInNlbnQiLCJfc2VudCIsImRlbGVnYXRlIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJzdG9wIiwicm9vdFJlY29yZCIsImNvbXBsZXRpb24iLCJydmFsIiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJyZWNvcmQiLCJ0cnlMb2MiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhYnJ1cHQiLCJmaW5hbGx5RW50cnkiLCJhZnRlckxvYyIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInByb3RvR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiX2ludm9rZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInJldHVybiIsImluZm8iLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiaXRlcmF0b3JNZXRob2QiLCJlc2NhcGUiLCIkcmUiLCJyZWdFeHAiLCJhYSIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJ1cGRhdGVyIiwiaXNSZWFjdENvbXBvbmVudCIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJIIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJJIiwiY3VycmVudCIsIkoiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIl9vd25lciIsIlEiLCJrZXlQcmVmaXgiLCJmdW5jIiwiY2EiLCJkYSIsImJhIiwiWCIsIkNoaWxkcmVuIiwidG9BcnJheSIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlRGVidWdWYWx1ZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImlzVmFsaWRFbGVtZW50IiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJzdXNwZW5zZSIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJZIiwiWiIsImVhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJmYSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwiaGEiLCJyZWdpc3RyYXRpb25OYW1lIiwiaWEiLCJqYSIsImRlcGVuZGVuY2llcyIsImthIiwib25FcnJvciIsImxhIiwibWEiLCJuYSIsIm9hIiwicGEiLCJxYSIsInNhIiwidWEiLCJ2YSIsIndhIiwiY3VycmVudFRhcmdldCIsInJhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJCYSIsIkNhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkRhIiwic3RhdGVOb2RlIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsIlBhIiwiUWEiLCJSYSIsIlNhIiwiVGEiLCJVYSIsIldhIiwiWGEiLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJzYiIsInRiIiwidWIiLCJ2YiIsInFiIiwicmIiLCJwYiIsInNldEF0dHJpYnV0ZU5TIiwid2IiLCJ5YiIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwieGIiLCJ6YiIsImNoZWNrZWQiLCJBYiIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQmIiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQ2IiLCJFYiIsIkZiIiwiR2IiLCJhY3RpdmVFbGVtZW50IiwiSWIiLCJIYiIsIkpiIiwiZGVmYXVsdFNlbGVjdGVkIiwiS2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkxiIiwiTWIiLCJOYiIsInRleHRDb250ZW50IiwieGxpbmtIcmVmIiwiT2IiLCJtYXRobWwiLCJzdmciLCJQYiIsIlFiIiwiUmIiLCJTYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJUYiIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsIlViIiwiVmIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJXYiIsIlhiIiwiWWIiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJkYyIsImVjIiwiYWx0ZXJuYXRlIiwiZWZmZWN0VGFnIiwiZmMiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImdjIiwiaWMiLCJzaWJsaW5nIiwiaGMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwib2MiLCJwYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJ2YyIsInpjIiwiYmxvY2tlZE9uIiwidG9wTGV2ZWxUeXBlIiwiZXZlbnRTeXN0ZW1GbGFncyIsIm5hdGl2ZUV2ZW50IiwiQWMiLCJkZWxldGUiLCJwb2ludGVySWQiLCJCYyIsIkNjIiwiRWMiLCJGYyIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkxjIiwiTWMiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJOYyIsIk9jIiwiZGlzcGF0Y2hDb25maWciLCJQYyIsIl90YXJnZXRJbnN0IiwiUWMiLCJSYyIsIlNjIiwiVGMiLCJVYyIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsIldjIiwiZXZlbnRQb29sIiwiWGMiLCJkZXN0cnVjdG9yIiwiVmMiLCJnZXRQb29sZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJZYyIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJaYyIsImNsaXBib2FyZERhdGEiLCIkYyIsImRldGFpbCIsImFkIiwicmVsYXRlZFRhcmdldCIsImJkIiwia2V5Q29kZSIsImNoYXJDb2RlIiwiY2QiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiZWQiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwiZmQiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiZ2QiLCJnZXRNb2RpZmllclN0YXRlIiwiaGQiLCJsb2NhdGlvbiIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJsb2NhbGUiLCJ3aGljaCIsImpkIiwia2QiLCJsZCIsIm5kIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJidXR0b25zIiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJvZCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJwZCIsImRhdGFUcmFuc2ZlciIsInFkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInJkIiwic2QiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsInRkIiwidWQiLCJ2ZCIsInhkIiwieWQiLCJ6ZCIsIkFkIiwiQmQiLCJDZCIsIkRkIiwiYnViYmxlZCIsImNhcHR1cmVkIiwiZXZlbnRQcmlvcml0eSIsIkVkIiwiZ2V0RXZlbnRQcmlvcml0eSIsIkZkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJHZCIsIkhkIiwiSWQiLCJKZCIsIktkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsIkxkIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIkRjIiwiUmQiLCJTZCIsIldlYWtNYXAiLCJ4YyIsInljIiwiVGQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJsaW5lQ2xhbXAiLCJvcGFjaXR5Iiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiVWQiLCJWZCIsIldkIiwic2V0UHJvcGVydHkiLCJYZCIsIm1lbnVpdGVtIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsImRlIiwibmV4dFNpYmxpbmciLCJmZSIsImhyZWYiLCJnZSIsImNvbnRlbnRFZGl0YWJsZSIsImhlIiwiaWUiLCJqZSIsImtlIiwibGUiLCJuZSIsImF1dG9Gb2N1cyIsIm9lIiwiX19odG1sIiwicGUiLCJxZSIsImNsZWFyVGltZW91dCIsInNlIiwicHJldmlvdXNTaWJsaW5nIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJBZSIsIkJlIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJHZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJiZWZvcmVJbnB1dCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJTZSIsIlFlIiwiY2hhciIsIlJlIiwiVGUiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwidGVsIiwid2VlayIsIlVlIiwiVmUiLCJjaGFuZ2UiLCJXZSIsIlhlIiwiWWUiLCJaZSIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGV0YWNoRXZlbnQiLCJkZiIsImVmIiwiYXR0YWNoRXZlbnQiLCJmZiIsImdmIiwiaGYiLCJsZiIsImpmIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsImtmIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJtZiIsInBhcmVudFdpbmRvdyIsInBmIiwicWYiLCJyZiIsInNmIiwic2VsZWN0IiwidGYiLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwieWYiLCJvblNlbGVjdCIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJnZXRDaGlsZENvbnRleHQiLCJKZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIk9mIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJQZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlFmIiwidW5zdGFibGVfbm93IiwiUmYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlNmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJUZiIsIlVmIiwiVmYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIldmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsInZnIiwiZmlyc3RDb250ZXh0IiwiZXhwaXJhdGlvblRpbWUiLCJ3ZyIsInhnIiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsInlnIiwiemciLCJiYXNlU3RhdGUiLCJmaXJzdFVwZGF0ZSIsImxhc3RVcGRhdGUiLCJmaXJzdENhcHR1cmVkVXBkYXRlIiwibGFzdENhcHR1cmVkVXBkYXRlIiwiZmlyc3RFZmZlY3QiLCJsYXN0RWZmZWN0IiwiZmlyc3RDYXB0dXJlZEVmZmVjdCIsImxhc3RDYXB0dXJlZEVmZmVjdCIsIkFnIiwiQmciLCJzdXNwZW5zZUNvbmZpZyIsInBheWxvYWQiLCJuZXh0RWZmZWN0IiwiQ2ciLCJEZyIsInVwZGF0ZVF1ZXVlIiwiRWciLCJGZyIsIkdnIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlNnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIlBnIiwiUWciLCJSZyIsIlRnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiVWciLCJWZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIldnIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJYZyIsIllnIiwiX3N0cmluZ1JlZiIsIlpnIiwiJGciLCJhaCIsImJoIiwiZWxlbWVudFR5cGUiLCJpbXBsZW1lbnRhdGlvbiIsImRoIiwiZWgiLCJ0YSIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJraCIsImxoIiwibWgiLCJ0YWdOYW1lIiwibmgiLCJvaCIsInBoIiwicWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJyaCIsInJlc3BvbmRlciIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwiYmFzZVVwZGF0ZSIsIk9oIiwiUGgiLCJRaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJSaCIsIlNoIiwiVGgiLCJVaCIsImRlcHMiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVuc3RhYmxlX25leHQiLCJjaSIsImRpIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJwZW5kaW5nUHJvcHMiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsInNpIiwidGkiLCJ1aSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsInZpIiwid2kiLCJwZW5kaW5nQ29udGV4dCIsIkhpIiwiSWkiLCJKaSIsIktpIiwieGkiLCJyZXRyeVRpbWUiLCJ5aSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ6aSIsIkFpIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJ0YWlsIiwidGFpbEV4cGlyYXRpb24iLCJ0YWlsTW9kZSIsIkJpIiwiQ2kiLCJMaSIsIk1pIiwiTmkiLCJzdGFjayIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiT2kiLCJXZWFrU2V0IiwiUGkiLCJTaSIsIlJpIiwiVGkiLCJVaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVmkiLCJXaSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiUWkiLCJYaSIsIllpIiwiWmkiLCIkaSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJhaiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJiaiIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImlqIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJqaiIsImNvbXBvbmVudFN0YWNrIiwiZ2siLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicGoiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwidGltZW91dE1zIiwiS2oiLCJMaiIsIk1qIiwiTmoiLCJPaiIsImxhc3RFeHBpcmVkVGltZSIsIlBqIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQaW5nZWRUaW1lIiwibmV4dEtub3duUGVuZGluZ0xldmVsIiwiY2FsbGJhY2tFeHBpcmF0aW9uVGltZSIsImNhbGxiYWNrUHJpb3JpdHkiLCJjYWxsYmFja05vZGUiLCJRaiIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJXaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIlhqIiwidGltZW91dEhhbmRsZSIsIllqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIlpqIiwiYmsiLCJjayIsInBpbmdDYWNoZSIsImRrIiwiZWsiLCJmayIsImNyZWF0ZUVsZW1lbnROUyIsImlrIiwiZmlyc3RTdXNwZW5kZWRUaW1lIiwicmFuZ2VDb3VudCIsIkRiIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImprIiwiZWUiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImZvY3VzIiwiRGgiLCJjYyIsImRkIiwiaGsiLCJFaCIsIkZoIiwieGsiLCJEaSIsIkVpIiwiRmkiLCJ3ZCIsIkdpIiwia2siLCJsayIsIm1rIiwiaGlkZGVuIiwiVmEiLCJuayIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInBrIiwicGVuZGluZ0NoaWxkcmVuIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsIndrIiwid2MiLCJfaW50ZXJuYWxSb290IiwieWsiLCJBayIsImhhc0F0dHJpYnV0ZSIsInprIiwiQmsiLCJ2ayIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwidW5tb3VudCIsImFrIiwiQ2siLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiRXZlbnRzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVQcm9wcyIsInNldFN1c3BlbnNlSGFuZGxlciIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsIkRrIiwiRWsiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwidHlwZU9mIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJheGlvcyIsImluc3RhbmNlQ29uZmlnIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsInByb21pc2VzIiwic3ByZWFkIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJnZXRVcmkiLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwidHJhbnNmb3JtRGF0YSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiYmFzZVVSTCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJicm93c2VyIiwiZW52IiwiYXJndiIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJub3JtYWxpemVkTmFtZSIsImlzQXhpb3NFcnJvciIsImRlc2NyaXB0aW9uIiwiY29sdW1uTnVtYmVyIiwiaWdub3JlRHVwbGljYXRlT2YiLCJwYXJzZWQiLCJsaW5lIiwib3JpZ2luVVJMIiwibXNpZSIsInVybFBhcnNpbmdOb2RlIiwicmVzb2x2ZVVSTCIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsInJlcXVlc3RVUkwiLCJleHBpcmVzIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZWxhdGl2ZVVSTCIsInJlc29sdmVQcm9taXNlIiwiX1N2Z0ljb24iLCJfZXh0ZW5kczIiLCJtdWlOYW1lIiwibG9jYWxzIiwibmV3Q29udGVudCIsIlJlYWN0UmVkdXhDb250ZXh0IiwiZ2V0QmF0Y2giLCJDTEVBUkVEIiwibnVsbExpc3RlbmVycyIsInBhcmVudFN1YiIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJfcHJvdG8iLCJhZGROZXN0ZWRTdWIiLCJ0cnlTdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwib25TdGF0ZUNoYW5nZSIsImlzU3Vic2NyaWJlZCIsImJhdGNoIiwidHJ5VW5zdWJzY3JpYmUiLCJjb250ZXh0VmFsdWUiLCJwcmV2aW91c1N0YXRlIiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsImluaXRTdGF0ZVVwZGF0ZXMiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZjIkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZjIkc2hvdWxkSGFuZGxlU3RhIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZjIkc3RvcmVLZXkiLCJzdG9yZUtleSIsIl9yZWYyJHdpdGhSZWYiLCJ3aXRoUmVmIiwiX3JlZjIkZm9yd2FyZFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJwdXJlIiwidXNlUHVyZU9ubHlNZW1vIiwiQ29ubmVjdEZ1bmN0aW9uIiwiX3VzZU1lbW8iLCJmb3J3YXJkZWRSZWYiLCJ3cmFwcGVyUHJvcHMiLCJwcm9wc0NvbnRleHQiLCJDb250ZXh0VG9Vc2UiLCJkaWRTdG9yZUNvbWVGcm9tUHJvcHMiLCJkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCIsImNoaWxkUHJvcHNTZWxlY3RvciIsImNyZWF0ZUNoaWxkU2VsZWN0b3IiLCJfdXNlTWVtbzIiLCJvdmVycmlkZGVuQ29udGV4dFZhbHVlIiwiX3VzZVJlZHVjZXIiLCJwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0IiwiZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCIsImxhc3RDaGlsZFByb3BzIiwibGFzdFdyYXBwZXJQcm9wcyIsImNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUiLCJyZW5kZXJJc1NjaGVkdWxlZCIsImFjdHVhbENoaWxkUHJvcHMiLCJkaWRVbnN1YnNjcmliZSIsImxhc3RUaHJvd25FcnJvciIsImNoZWNrRm9yVXBkYXRlcyIsIm5ld0NoaWxkUHJvcHMiLCJsYXRlc3RTdG9yZVN0YXRlIiwicmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50IiwiQ29ubmVjdCIsImZvcndhcmRlZCIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiZW51bWVyYWJsZU9ubHkiLCJfb2JqZWN0U3ByZWFkMiIsImNvbXBvc2UiLCJmdW5jcyIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJkZXBlbmRzT25Pd25Qcm9wcyIsImdldERlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBNYXBUb1Byb3BzRnVuYyIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwibWFwU3RhdGVUb1Byb3BzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsIm1lcmdlUHJvcHMiLCJtZXJnZWRQcm9wcyIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibmV4dE1lcmdlZFByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiYXJlU3RhdGVzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiaGFzUnVuQXRMZWFzdE9uY2UiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0T3duUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJzdHJpY3RFcXVhbCIsIl90ZW1wIiwiX3JlZiRjb25uZWN0SE9DIiwiY29ubmVjdEhPQyIsIl9yZWYkbWFwU3RhdGVUb1Byb3BzRiIsIm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWFwRGlzcGF0Y2hUb1BybyIsIm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyIsIl9yZWYkbWVyZ2VQcm9wc0ZhY3RvciIsIm1lcmdlUHJvcHNGYWN0b3JpZXMiLCJfcmVmJHNlbGVjdG9yRmFjdG9yeSIsIl9yZWYzIiwiX3JlZjMkcHVyZSIsIl9yZWYzJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjMkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjMkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjMkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwiY3JlYXRlU3RvcmVIb29rIiwidXNlUmVkdXhDb250ZXh0IiwidXNlU3RvcmUiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJyZWZFcXVhbGl0eSIsIm5ld0JhdGNoIiwiY3JlYXRlU2VsZWN0b3JIb29rIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJHRVRfTk9URV9SRUNFSUVWRV9EQVRBIiwiR0VUX05PVEVfQ09NUExFVEVEX0RBVEEiLCJpbml0YXRlX3N0YXRlIiwibG9hZGluZ19nZXRub3RlcyIsImdldG5vdGVzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsInJlZHVjZXIiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImNvbWJpbmVSZWR1Y2VycyIsIm1pZGRsZXdhcmVzIiwiY3JlYXRlU3RvcmUiLCJfZGlzcGF0Y2giLCJtaWRkbGV3YXJlQVBJIiwibWlkZGxld2FyZSIsImFwcGx5TWlkZGxld2FyZSIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlU3RhdGUiLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwiaGFzVHJhaWxpbmdTbGFzaCIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImNyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsIm5vdGlmeUxpc3RlbmVycyIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJ0cmFuc2l0aW9uTWFuYWdlciIsImhhbmRsZVBvcFN0YXRlIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwiYWxsS2V5cyIsImRlbHRhIiwiZ28iLCJyZXZlcnRQb3AiLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hDaGFuZ2VFdmVudCQxIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwic3RyaXBIYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJiYXNlVGFnIiwiZ2V0QXR0cmlidXRlIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiX0NvbXBvbmVudCIsImVtaXR0ZXIiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJfQ29tcG9uZW50MiIsIl90aGlzMiIsIl9wcm90bzIiLCJfUmVhY3QkQ29tcG9uZW50IiwiUm91dGVyIiwiX2lzTW91bnRlZCIsIl9wZW5kaW5nTG9jYXRpb24iLCJzdGF0aWNDb250ZXh0IiwiY29tcHV0ZVJvb3RNYXRjaCIsImlzRXhhY3QiLCJjYWNoZSQxIiwiY2FjaGVMaW1pdCQxIiwiY2FjaGVDb3VudCQxIiwibWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsImNhY2hlS2V5IiwicGF0aENhY2hlIiwiY29tcGlsZVBhdGgkMSIsIlJvdXRlIiwiY29udGV4dCQxIiwiY29tcHV0ZWRNYXRjaCIsIl90aGlzJHByb3BzIiwiY3JlYXRlVVJMIiwic3RhdGljSGFuZGxlciIsIlN3aXRjaCIsIkhhc2hSb3V0ZXIiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsImZvcndhcmRSZWZTaGltIiwiTGlua0FuY2hvciIsIm5hdmlnYXRlIiwiX29uQ2xpY2siLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIkY29tcG9uZW50IiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIl9yZWYkYXJpYUN1cnJlbnQiLCJhcmlhQ3VycmVudCIsIl9yZWYkYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJjbGFzc05hbWVQcm9wIiwiY2xhc3NOYW1lIiwiaXNBY3RpdmVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3R5bGVQcm9wIiwiZXNjYXBlZFBhdGgiLCJjbGFzc25hbWVzIiwiam9pbkNsYXNzbmFtZXMiLCJfcHJvcHMkY29tcG9uZW50IiwiX3Byb3BzJGZpeGVkIiwiZml4ZWQiLCJfcHJvcHMkbWF4V2lkdGgiLCJtYXhXaWR0aCIsIndpdGhTdHlsZXMiLCJfcm9vdCIsImJveFNpemluZyIsImJyZWFrcG9pbnQiLCJtYXhXaWR0aFhzIiwibWF4V2lkdGhTbSIsIm1heFdpZHRoTWQiLCJtYXhXaWR0aExnIiwibWF4V2lkdGhYbCIsIlVOTU9VTlRFRCIsIkVYSVRFRCIsIkVOVEVSSU5HIiwiRU5URVJFRCIsIlRyYW5zaXRpb24iLCJpbml0aWFsU3RhdHVzIiwiYXBwZWFyIiwiaXNNb3VudGluZyIsImFwcGVhclN0YXR1cyIsImluIiwidW5tb3VudE9uRXhpdCIsIm1vdW50T25FbnRlciIsIm5leHRDYWxsYmFjayIsInVwZGF0ZVN0YXR1cyIsInByZXZQcm9wcyIsIm5leHRTdGF0dXMiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsIm1vdW50aW5nIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJhcHBlYXJpbmciLCJ0aW1lb3V0cyIsImVudGVyVGltZW91dCIsInNhZmVTZXRTdGF0ZSIsIm9uRW50ZXJlZCIsIm9uRW50ZXIiLCJvbkVudGVyaW5nIiwib25UcmFuc2l0aW9uRW5kIiwiX3RoaXMzIiwib25FeGl0Iiwib25FeGl0aW5nIiwib25FeGl0ZWQiLCJzZXROZXh0Q2FsbGJhY2siLCJfdGhpczQiLCJkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyIiwiYWRkRW5kTGlzdGVuZXIiLCJjaGlsZFByb3BzIiwiVHJhbnNpdGlvbkdyb3VwQ29udGV4dCIsIkVYSVRJTkciLCJnZXRUcmFuc2l0aW9uUHJvcHMiLCJfcHJvcHMkc3R5bGUiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJfcHJvcHMkY29sbGFwc2VkSGVpZ2giLCJjb2xsYXBzZWRIZWlnaHQiLCJpblByb3AiLCJfcHJvcHMkdGltZW91dCIsInRpbWVyIiwid3JhcHBlclJlZiIsImF1dG9UcmFuc2l0aW9uRHVyYXRpb24iLCJpc0FwcGVhcmluZyIsIndyYXBwZXJIZWlnaHQiLCJkdXJhdGlvbjIiLCJjb250YWluZXIiLCJlbnRlcmVkIiwid3JhcHBlcklubmVyIiwibXVpU3VwcG9ydEF1dG8iLCJ2aXNpYmlsaXR5IiwiX3Byb3BzJHNxdWFyZSIsInNxdWFyZSIsIl9wcm9wcyRlbGV2YXRpb24iLCJlbGV2YXRpb24iLCJyb3VuZGVkIiwiZWxldmF0aW9ucyIsInNoYWRvdyIsImJveFNoYWRvdyIsImJhY2tncm91bmRDb2xvciIsImNoaWxkcmVuUHJvcCIsIl9wcm9wcyRkZWZhdWx0RXhwYW5kZSIsImRlZmF1bHRFeHBhbmRlZCIsIl9wcm9wcyRkaXNhYmxlZCIsImV4cGFuZGVkUHJvcCIsImV4cGFuZGVkIiwib25DaGFuZ2UiLCJfcHJvcHMkVHJhbnNpdGlvbkNvbXAiLCJUcmFuc2l0aW9uQ29tcG9uZW50IiwiVHJhbnNpdGlvblByb3BzIiwiaXNDb250cm9sbGVkIiwiX1JlYWN0JHVzZVN0YXRlIiwiZXhwYW5kZWRTdGF0ZSIsInNldEV4cGFuZGVkU3RhdGUiLCJfUmVhY3QkQ2hpbGRyZW4kdG9BcnIiLCJfUmVhY3QkQ2hpbGRyZW4kdG9BcnIyIiwiYXJyYXlXaXRoSG9sZXMiLCJub25JdGVyYWJsZVJlc3QiLCJzdW1tYXJ5Iiwicm9sZSIsIm1hcmdpbiIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsInNldFJlZiIsInVzZUZvcmtSZWYiLCJyZWZBIiwicmVmQiIsInJlZlZhbHVlIiwidXNlRW5oYW5jZWRFZmZlY3QiLCJ1c2VFdmVudENhbGxiYWNrIiwiX3Byb3BzJGRlZmVyIiwiX3Byb3BzJGZhbGxiYWNrIiwibW91bnRlZFN0YXRlIiwic2V0TW91bnRlZFN0YXRlIiwiaGFkS2V5Ym9hcmRFdmVudCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0IiwiaW5wdXRUeXBlc1doaXRlbGlzdCIsImhhbmRsZVBvaW50ZXJEb3duIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsInJlYWRPbmx5IiwiaXNDb250ZW50RWRpdGFibGUiLCJoYW5kbGVCbHVyVmlzaWJsZSIsInVzZUlzRm9jdXNWaXNpYmxlIiwiaXNGb2N1c1Zpc2libGUiLCJvbkJsdXJWaXNpYmxlIiwicHJlcGFyZSIsImdldENoaWxkTWFwcGluZyIsImdldFByb3AiLCJnZXROZXh0Q2hpbGRNYXBwaW5nIiwicHJldkNoaWxkTWFwcGluZyIsIm5leHRDaGlsZE1hcHBpbmciLCJnZXRWYWx1ZUZvcktleSIsIm5leHRLZXlzUGVuZGluZyIsInBlbmRpbmdLZXlzIiwicHJldktleSIsImNoaWxkTWFwcGluZyIsIm5leHRLZXkiLCJwZW5kaW5nTmV4dEtleSIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsImhhc1ByZXYiLCJoYXNOZXh0IiwicHJldkNoaWxkIiwiaXNMZWF2aW5nIiwiVHJhbnNpdGlvbkdyb3VwIiwiaGFuZGxlRXhpdGVkIiwiZmlyc3RSZW5kZXIiLCJtb3VudGVkIiwiY3VycmVudENoaWxkTWFwcGluZyIsImNoaWxkRmFjdG9yeSIsIl9wcm9wcyRwdWxzYXRlIiwicHVsc2F0ZSIsInJpcHBsZVgiLCJyaXBwbGVZIiwicmlwcGxlU2l6ZSIsIl9wcm9wcyRvbkV4aXRlZCIsImxlYXZpbmciLCJzZXRMZWF2aW5nIiwicmlwcGxlQ2xhc3NOYW1lIiwicmlwcGxlIiwicmlwcGxlVmlzaWJsZSIsInJpcHBsZVB1bHNhdGUiLCJyaXBwbGVTdHlsZXMiLCJjaGlsZENsYXNzTmFtZSIsImNoaWxkTGVhdmluZyIsImNoaWxkUHVsc2F0ZSIsInRpbWVvdXRJZCIsIl9wcm9wcyRjZW50ZXIiLCJjZW50ZXJQcm9wIiwicmlwcGxlcyIsInNldFJpcHBsZXMiLCJyaXBwbGVDYWxsYmFjayIsImlnbm9yaW5nTW91c2VEb3duIiwic3RhcnRUaW1lciIsInN0YXJ0VGltZXJDb21taXQiLCJzdGFydENvbW1pdCIsIm9sZFJpcHBsZXMiLCJfb3B0aW9ucyRwdWxzYXRlIiwiX29wdGlvbnMkY2VudGVyIiwiX29wdGlvbnMkZmFrZUVsZW1lbnQiLCJmYWtlRWxlbWVudCIsInNpemVYIiwic2l6ZVkiLCJwb2ludGVyRXZlbnRzIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJidXR0b25SZWZQcm9wIiwiYnV0dG9uUmVmIiwiX3Byb3BzJGNlbnRlclJpcHBsZSIsImNlbnRlclJpcHBsZSIsIl9wcm9wcyRkaXNhYmxlUmlwcGxlIiwiZGlzYWJsZVJpcHBsZSIsIl9wcm9wcyRkaXNhYmxlVG91Y2hSaSIsImRpc2FibGVUb3VjaFJpcHBsZSIsIl9wcm9wcyRmb2N1c1JpcHBsZSIsImZvY3VzUmlwcGxlIiwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lIiwib25CbHVyIiwib25Gb2N1cyIsIm9uRm9jdXNWaXNpYmxlIiwib25LZXlEb3duIiwib25LZXlVcCIsIm9uTW91c2VEb3duIiwib25Nb3VzZUxlYXZlIiwib25Nb3VzZVVwIiwib25Ub3VjaEVuZCIsIm9uVG91Y2hNb3ZlIiwib25Ub3VjaFN0YXJ0Iiwib25EcmFnTGVhdmUiLCJfcHJvcHMkdGFiSW5kZXgiLCJ0YWJJbmRleCIsIlRvdWNoUmlwcGxlUHJvcHMiLCJfcHJvcHMkdHlwZSIsInJpcHBsZVJlZiIsImZvY3VzVmlzaWJsZSIsInNldEZvY3VzVmlzaWJsZSIsIl91c2VJc0ZvY3VzVmlzaWJsZSIsImZvY3VzVmlzaWJsZVJlZiIsInVzZVJpcHBsZUhhbmRsZXIiLCJyaXBwbGVBY3Rpb24iLCJldmVudENhbGxiYWNrIiwic2tpcFJpcHBsZUFjdGlvbiIsImhhbmRsZU1vdXNlRG93biIsImhhbmRsZURyYWdMZWF2ZSIsImhhbmRsZU1vdXNlVXAiLCJoYW5kbGVNb3VzZUxlYXZlIiwiaGFuZGxlVG91Y2hTdGFydCIsImhhbmRsZVRvdWNoRW5kIiwiaGFuZGxlVG91Y2hNb3ZlIiwiaGFuZGxlQmx1ciIsImhhbmRsZUZvY3VzIiwia2V5ZG93blJlZiIsImhhbmRsZUtleURvd24iLCJoYW5kbGVLZXlVcCIsIkNvbXBvbmVudFByb3AiLCJidXR0b25Qcm9wcyIsImhhbmRsZVVzZXJSZWYiLCJoYW5kbGVPd25SZWYiLCJoYW5kbGVSZWYiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJXZWJraXRUYXBIaWdobGlnaHRDb2xvciIsIm91dGxpbmUiLCJib3JkZXIiLCJjdXJzb3IiLCJ1c2VyU2VsZWN0IiwidmVydGljYWxBbGlnbiIsInRleHREZWNvcmF0aW9uIiwiYm9yZGVyU3R5bGUiLCJfcHJvcHMkZWRnZSIsImVkZ2UiLCJfcHJvcHMkY29sb3IiLCJfcHJvcHMkZGlzYWJsZUZvY3VzUmkiLCJkaXNhYmxlRm9jdXNSaXBwbGUiLCJfcHJvcHMkc2l6ZSIsInNtYWxsIiwiZWRnZVN0YXJ0IiwiZWRnZUVuZCIsImxhYmVsIiwidGV4dEFsaWduIiwiY29sb3JJbmhlcml0IiwiY29sb3JQcmltYXJ5IiwiY29sb3JTZWNvbmRhcnkiLCJzaXplU21hbGwiLCJleHBhbmRJY29uIiwiSWNvbkJ1dHRvblByb3BzIiwiZm9jdXNlZFN0YXRlIiwic2V0Rm9jdXNlZFN0YXRlIiwiZm9jdXNlZCIsIkZvcm1Db250cm9sQ29udGV4dCIsImdldFN0eWxlVmFsdWUiLCJyb3dzIiwicm93c01heCIsImlucHV0UmVmIiwic2hhZG93UmVmIiwic3luY0hlaWdodCIsImlucHV0U2hhbGxvdyIsInBsYWNlaG9sZGVyIiwic2Nyb2xsSGVpZ2h0Iiwic2luZ2xlUm93SGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJvdXRlckhlaWdodFN0eWxlIiwiaGFuZGxlUmVzaXplIiwid2FpdCIsImRlYm91bmNlZCIsImhhc1ZhbHVlIiwiYXJpYURlc2NyaWJlZGJ5IiwiYXV0b0NvbXBsZXRlIiwiZW5kQWRvcm5tZW50IiwiX3Byb3BzJGZ1bGxXaWR0aCIsImZ1bGxXaWR0aCIsIl9wcm9wcyRpbnB1dENvbXBvbmVudCIsImlucHV0Q29tcG9uZW50IiwiX3Byb3BzJGlucHV0UHJvcHMiLCJpbnB1dFByb3BzIiwiaW5wdXRQcm9wc0NsYXNzTmFtZSIsImlucHV0UHJvcHNQcm9wIiwiaW5wdXRSZWZQcm9wIiwiX3Byb3BzJG11bHRpbGluZSIsInJlbmRlclN1ZmZpeCIsIl9wcm9wcyRzZWxlY3QiLCJzdGFydEFkb3JubWVudCIsImhhbmRsZUlucHV0UmVmV2FybmluZyIsImhhbmRsZUlucHV0UHJvcHNSZWZQcm9wIiwiaGFuZGxlSW5wdXRSZWZQcm9wIiwiaGFuZGxlSW5wdXRSZWYiLCJzZXRGb2N1c2VkIiwibXVpRm9ybUNvbnRyb2wiLCJmY3MiLCJzdGF0ZXMiLCJmb3JtQ29udHJvbFN0YXRlIiwib25GaWxsZWQiLCJvbkVtcHR5IiwiY2hlY2tEaXJ0eSIsIlNTUiIsImlzRmlsbGVkIiwiSW5wdXRDb21wb25lbnQiLCJmb3JtQ29udHJvbCIsImFkb3JuZWRTdGFydCIsImFkb3JuZWRFbmQiLCJkZW5zZSIsIm1hcmdpbkRlbnNlIiwiaW5wdXRNdWx0aWxpbmUiLCJpbnB1dFNlbGVjdCIsImhpZGRlbkxhYmVsIiwiaW5wdXRIaWRkZW5MYWJlbCIsImlucHV0QWRvcm5lZFN0YXJ0IiwiaW5wdXRBZG9ybmVkRW5kIiwiaW5wdXRUeXBlU2VhcmNoIiwiaW5wdXRNYXJnaW5EZW5zZSIsIm9uQW5pbWF0aW9uU3RhcnQiLCJyZXF1aXJlZCIsInBsYWNlaG9sZGVySGlkZGVuIiwicGxhY2Vob2xkZXJWaXNpYmxlIiwicGFkZGluZ1RvcCIsImZvbnQiLCJtaW5XaWR0aCIsInJlc2l6ZSIsIl9wcm9wcyRmb250U2l6ZSIsImNvbG9yQWN0aW9uIiwiY29sb3JFcnJvciIsImNvbG9yRGlzYWJsZWQiLCJmb250U2l6ZUluaGVyaXQiLCJmb250U2l6ZVNtYWxsIiwiZm9udFNpemVMYXJnZSIsIl9wcm9wcyRhYnNvbHV0ZSIsImFic29sdXRlIiwiX3Byb3BzJGxpZ2h0IiwiX3Byb3BzJG9yaWVudGF0aW9uIiwib3JpZW50YXRpb24iLCJfcHJvcHMkcm9sZSIsIl9wcm9wcyR2YXJpYW50IiwidmFyaWFudCIsInZlcnRpY2FsIiwiaW5zZXQiLCJfcHJvcHMkZGlzYWJsZVNwYWNpbmciLCJkaXNhYmxlU3BhY2luZyIsImVuZEljb25Qcm9wIiwiZW5kSWNvbiIsInN0YXJ0SWNvblByb3AiLCJzdGFydEljb24iLCJ0ZXh0UHJpbWFyeSIsInRleHRTZWNvbmRhcnkiLCJvdXRsaW5lZCIsIm91dGxpbmVkUHJpbWFyeSIsIm91dGxpbmVkU2Vjb25kYXJ5IiwiY29udGFpbmVkIiwiY29udGFpbmVkUHJpbWFyeSIsImNvbnRhaW5lZFNlY29uZGFyeSIsImJvcmRlckNvbG9yIiwidGV4dFNpemVTbWFsbCIsInRleHRTaXplTGFyZ2UiLCJvdXRsaW5lZFNpemVTbWFsbCIsIm91dGxpbmVkU2l6ZUxhcmdlIiwiY29udGFpbmVkU2l6ZVNtYWxsIiwiY29udGFpbmVkU2l6ZUxhcmdlIiwic2l6ZUxhcmdlIiwiaWNvblNpemVTbWFsbCIsImljb25TaXplTWVkaXVtIiwiaWNvblNpemVMYXJnZSIsIm1hcEV2ZW50UHJvcFRvRXZlbnQiLCJldmVudFByb3AiLCJfcHJvcHMkbW91c2VFdmVudCIsIm1vdXNlRXZlbnQiLCJfcHJvcHMkdG91Y2hFdmVudCIsInRvdWNoRXZlbnQiLCJvbkNsaWNrQXdheSIsIm1vdmVkUmVmIiwibm9kZVJlZiIsIm1vdW50ZWRSZWYiLCJoYW5kbGVOb2RlUmVmIiwiaGFuZGxlQ2xpY2tBd2F5IiwiZG9jIiwibWFwcGVkVG91Y2hFdmVudCIsIm1hcHBlZE1vdXNlRXZlbnQiLCJjcmVhdGVDaGFpbmVkRnVuY3Rpb24iLCJfbGVuMiIsIl9rZXkyIiwiZ2V0U2NhbGUiLCJlbnRlcmluZyIsImF1dG9UaW1lb3V0IiwicmVmbG93IiwiX2dldFRyYW5zaXRpb25Qcm9wcyIsIl9nZXRUcmFuc2l0aW9uUHJvcHMyIiwiZGVmYXVsdFZhcmlhbnRNYXBwaW5nIiwiX3Byb3BzJGFsaWduIiwiYWxpZ24iLCJfcHJvcHMkZGlzcGxheSIsIl9wcm9wcyRndXR0ZXJCb3R0b20iLCJndXR0ZXJCb3R0b20iLCJfcHJvcHMkbm9XcmFwIiwibm9XcmFwIiwiX3Byb3BzJHBhcmFncmFwaCIsInBhcmFncmFwaCIsIl9wcm9wcyR2YXJpYW50TWFwcGluZyIsInZhcmlhbnRNYXBwaW5nIiwic3JPbmx5IiwiYWxpZ25MZWZ0IiwiYWxpZ25DZW50ZXIiLCJhbGlnblJpZ2h0IiwiYWxpZ25KdXN0aWZ5IiwidGV4dE92ZXJmbG93Iiwid2hpdGVTcGFjZSIsImNvbG9yVGV4dFByaW1hcnkiLCJjb2xvclRleHRTZWNvbmRhcnkiLCJkaXNwbGF5SW5saW5lIiwiZGlzcGxheUJsb2NrIiwiZW1waGFzaXMiLCJmbGV4V3JhcCIsIl9wcm9wcyRhbmNob3JPcmlnaW4iLCJhbmNob3JPcmlnaW4iLCJob3Jpem9udGFsIiwiYXV0b0hpZGVEdXJhdGlvbiIsIkNsaWNrQXdheUxpc3RlbmVyUHJvcHMiLCJDb250ZW50UHJvcHMiLCJfcHJvcHMkZGlzYWJsZVdpbmRvd0IiLCJkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyIiwib25DbG9zZSIsIm9uTW91c2VFbnRlciIsInJlc3VtZUhpZGVEdXJhdGlvbiIsIl9wcm9wcyR0cmFuc2l0aW9uRHVyYSIsInRpbWVyQXV0b0hpZGUiLCJzZXRFeGl0ZWQiLCJzZXRBdXRvSGlkZVRpbWVyIiwiYXV0b0hpZGVEdXJhdGlvblBhcmFtIiwiYXV0b0hpZGVEdXJhdGlvbkJlZm9yZSIsImhhbmRsZVBhdXNlIiwiaGFuZGxlUmVzdW1lIiwidG9wMSIsImJvdHRvbTEiLCJ0b3AzIiwiYm90dG9tMyIsInJpZ2h0MyIsImxlZnQzIiwiYW5jaG9yT3JpZ2luVG9wQ2VudGVyIiwiYW5jaG9yT3JpZ2luQm90dG9tQ2VudGVyIiwiYW5jaG9yT3JpZ2luVG9wUmlnaHQiLCJhbmNob3JPcmlnaW5Cb3R0b21SaWdodCIsImFuY2hvck9yaWdpblRvcExlZnQiLCJhbmNob3JPcmlnaW5Cb3R0b21MZWZ0IiwicXVldWVSZWYiLCJSZWFjdCIsInNldE9wZW4iLCJtZXNzYWdlSW5mbyIsInNldE1lc3NhZ2VJbmZvIiwicHJvY2Vzc1F1ZXVlIiwib25VbmRvIiwicGFkZGluZ0JvdHRvbSIsInBhbmVsIiwidGljayIsImhlYWRpbmciLCJzZWNvbmRhcnlIZWFkaW5nIiwiZGV0YWlscyIsImNvbHVtbiIsImZsZXhCYXNpcyIsImNvbHVtbjEwMCIsInRleHRhcmVhIiwiaGVscGVyIiwiYm9yZGVyTGVmdCIsImlzRXhwYW5kZWQiLCJzZXRFeHBhbmRlZCIsInNldFRpdGxlIiwibm90ZSIsInNldE5vdGUiLCJ0aXRsZVBsYWNlaG9sZGVyIiwic2V0VGl0bGVQbGFjZWhvbGRlciIsInNuYWNrRmxhZyIsInNldFNuYWNrRmxhZyIsIm9uQ2FuY2VsQ2xpY2siLCJoYXNBY3Rpb24iLCJhcmlhLWNvbnRyb2xzIiwiX3Byb3BzJGRpc2FibGVQb3J0YWwiLCJkaXNhYmxlUG9ydGFsIiwib25SZW5kZXJlZCIsIm1vdW50Tm9kZSIsInNldE1vdW50Tm9kZSIsImdldENvbnRhaW5lciIsImdldEFuY2hvckVsIiwiYW5jaG9yRWwiLCJkZWZhdWx0UG9wcGVyT3B0aW9ucyIsIl9wcm9wcyRrZWVwTW91bnRlZCIsImtlZXBNb3VudGVkIiwiX3Byb3BzJHBsYWNlbWVudCIsImluaXRpYWxQbGFjZW1lbnQiLCJfcHJvcHMkcG9wcGVyT3B0aW9ucyIsInBvcHBlck9wdGlvbnMiLCJwb3BwZXJSZWZQcm9wIiwicG9wcGVyUmVmIiwiX3Byb3BzJHRyYW5zaXRpb24iLCJ0b29sdGlwUmVmIiwib3duUmVmIiwiaGFuZGxlUG9wcGVyUmVmIiwiaGFuZGxlUG9wcGVyUmVmUmVmIiwicnRsUGxhY2VtZW50IiwiZmxpcFBsYWNlbWVudCIsIl9SZWFjdCR1c2VTdGF0ZTIiLCJzZXRQbGFjZW1lbnQiLCJoYW5kbGVPcGVuIiwiaGFuZGxlUG9wcGVyVXBkYXRlIiwiaGFuZGxlQ2xvc2UiLCJfcHJvcHMkZGlzYWJsZUZvY3VzTGkiLCJkaXNhYmxlRm9jdXNMaXN0ZW5lciIsIl9wcm9wcyRkaXNhYmxlSG92ZXJMaSIsImRpc2FibGVIb3Zlckxpc3RlbmVyIiwiX3Byb3BzJGRpc2FibGVUb3VjaExpIiwiZGlzYWJsZVRvdWNoTGlzdGVuZXIiLCJfcHJvcHMkZW50ZXJEZWxheSIsImVudGVyRGVsYXkiLCJfcHJvcHMkZW50ZXJUb3VjaERlbGEiLCJlbnRlclRvdWNoRGVsYXkiLCJfcHJvcHMkaW50ZXJhY3RpdmUiLCJpbnRlcmFjdGl2ZSIsIl9wcm9wcyRsZWF2ZURlbGF5IiwibGVhdmVEZWxheSIsIl9wcm9wcyRsZWF2ZVRvdWNoRGVsYSIsImxlYXZlVG91Y2hEZWxheSIsIm9uT3BlbiIsIm9wZW5Qcm9wIiwiUG9wcGVyUHJvcHMiLCJvcGVuU3RhdGUiLCJzZXRPcGVuU3RhdGUiLCJfUmVhY3QkdXNlU3RhdGUzIiwiY2hpbGROb2RlIiwic2V0Q2hpbGROb2RlIiwiaWdub3JlTm9uVG91Y2hFdmVudHMiLCJkZWZhdWx0SWQiLCJjbG9zZVRpbWVyIiwiZW50ZXJUaW1lciIsImxlYXZlVGltZXIiLCJ0b3VjaFRpbWVyIiwiaGFuZGxlRW50ZXIiLCJjaGlsZHJlblByb3BzIiwib25Nb3VzZU92ZXIiLCJfUmVhY3QkdXNlU3RhdGU0IiwiY2hpbGRJc0ZvY3VzVmlzaWJsZSIsInNldENoaWxkSXNGb2N1c1Zpc2libGUiLCJoYW5kbGVMZWF2ZSIsImhhbmRsZVVzZVJlZiIsImhhbmRsZUZvY3VzUmVmIiwic2hvdWxkU2hvd05hdGl2ZVRpdGxlIiwiaW50ZXJhY3RpdmVXcmFwcGVyTGlzdGVuZXJzIiwicG9wcGVySW50ZXJhY3RpdmUiLCJwbGFjZW1lbnRJbm5lciIsIlRyYW5zaXRpb25Qcm9wc0lubmVyIiwidG91Y2giLCJ3b3JkV3JhcCIsInRvb2x0aXBQbGFjZW1lbnRMZWZ0IiwidHJhbnNmb3JtT3JpZ2luIiwidG9vbHRpcFBsYWNlbWVudFJpZ2h0IiwidG9vbHRpcFBsYWNlbWVudFRvcCIsInRvb2x0aXBQbGFjZW1lbnRCb3R0b20iLCJlZGl0IiwiTGlnaHRUb29sdGlwIiwiX2lzU25hY2tPcGVuIiwic2V0U2VsZWN0ZWQiLCJyZWFkb25seSIsInNldFJlYWRvbmx5IiwidG9EbyIsInNldFRvRG8iLCJjbGVhclN0eWxlIiwiZWxlbXMiLCJvbkRlbGV0ZSIsInNlYXJjaEljb24iLCJpbnB1dFJvb3QiLCJpbnB1dElucHV0Iiwibm90ZXMiLCJzZXRUaW1lIiwiZGVsZXRlZCIsInRleHRUb1NlYXJjaCIsIm5vdGVzU2VhcmNoIiwiam9pbmVkIiwib25TZWFyY2giLCJjcmVhdGVEYXRhIiwic2V0Q3JlYXRlRGF0YSIsImNyZWF0ZU5vdGUiLCJkZWZhdWx0RXF1YWxpdHlDaGVjayIsImFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsIiwiZXF1YWxpdHlDaGVjayIsImdldERlcGVuZGVuY2llcyIsImRlcGVuZGVuY3lUeXBlcyIsImNyZWF0ZVNlbGVjdG9yIiwibWVtb2l6ZSIsIm1lbW9pemVPcHRpb25zIiwicmVjb21wdXRhdGlvbnMiLCJyZXN1bHRGdW5jIiwibWVtb2l6ZWRSZXN1bHRGdW5jIiwic2VsZWN0b3IiLCJyZXNldFJlY29tcHV0YXRpb25zIiwiY3JlYXRlU2VsZWN0b3JDcmVhdG9yIiwibGFzdEFyZ3MiLCJsYXN0UmVzdWx0Iiwic2VsZWN0ZWRfZ2V0bm90ZXMiLCJhY3Rpb25zIiwiZmV0Y2hfZ2V0bm90ZXNfZGF0YSIsIndpdGhSb3V0ZXIiLCJ3cmFwcGVkQ29tcG9uZW50UmVmIiwicmVtYWluaW5nUHJvcHMiLCJjb25uZWN0Iiwic2VsZWN0b3JzX2hvbWUiLCJfcHJvcHMkcG9zaXRpb24iLCJiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0IiwiZmxleERpcmVjdGlvbiIsInBvc2l0aW9uQWJzb2x1dGUiLCJwb3NpdGlvblN0aWNreSIsInBvc2l0aW9uU3RhdGljIiwicG9zaXRpb25SZWxhdGl2ZSIsImNvbG9yRGVmYXVsdCIsIl9wcm9wcyRkaXNhYmxlR3V0dGVycyIsImRpc2FibGVHdXR0ZXJzIiwicmVndWxhciIsIm1lbnVCdXR0b24iLCJIb21lVmlldyIsIlJlYWN0RE9NIiwiaHRtbENvbG9yIiwidGl0bGVBY2Nlc3MiLCJfcHJvcHMkdmlld0JveCIsInZpZXdCb3giLCJmb2N1c2FibGUiLCJfdHlwZW9mIiwiX2RlZmluZVByb3BlcnRpZXMiLCJfY3JlYXRlQ2xhc3MiLCJwbGFpbk9iamVjdENvbnN0cnVyY3RvciIsImNsb25lU3R5bGUiLCJuZXdTdHlsZSIsImNyZWF0ZVJ1bGUiLCJkZWNsIiwianNzIiwiZGVjbENvcHkiLCJydWxlIiwicGx1Z2lucyIsIm9uQ3JlYXRlUnVsZSIsImJ5IiwidG9Dc3NWYWx1ZSIsImlnbm9yZUltcG9ydGFudCIsImNzc1ZhbHVlIiwiaW5kZW50U3RyIiwiaW5kZW50IiwidG9Dc3MiLCJfb3B0aW9ucyRpbmRlbnQiLCJmYWxsYmFja3MiLCJfcHJvcCIsIl92YWx1ZSIsIl9wcm9wMiIsIl92YWx1ZTIiLCJhbGxvd0VtcHR5IiwiZXNjYXBlUmVnZXgiLCJuYXRpdmVFc2NhcGUiLCJDU1MiLCJCYXNlU3R5bGVSdWxlIiwiaXNQcm9jZXNzZWQiLCJyZW5kZXJlciIsInJlbmRlcmFibGUiLCJzaGVldCIsIlJlbmRlcmVyIiwiZm9yY2UiLCJvbkNoYW5nZVZhbHVlIiwiaXNFbXB0eSIsImlzRGVmaW5lZCIsInJlbW92ZVByb3BlcnR5IiwiYXR0YWNoZWQiLCJfQmFzZVN0eWxlUnVsZSIsIlN0eWxlUnVsZSIsInNlbGVjdG9yVGV4dCIsInNjb3BlZCIsImdlbmVyYXRlSWQiLCJhcHBseVRvIiwianNvbiIsInNldFNlbGVjdG9yIiwicmVwbGFjZVJ1bGUiLCJwbHVnaW5TdHlsZVJ1bGUiLCJkZWZhdWx0VG9TdHJpbmdPcHRpb25zIiwiYXRSZWdFeHAiLCJDb25kaXRpb25hbFJ1bGUiLCJydWxlcyIsImF0TWF0Y2giLCJnZXRSdWxlIiwiYWRkUnVsZSIsIm9uUHJvY2Vzc1J1bGUiLCJrZXlSZWdFeHAiLCJwbHVnaW5Db25kaXRpb25hbFJ1bGUiLCJkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEiLCJuYW1lUmVnRXhwIiwiS2V5ZnJhbWVzUnVsZSIsImZyYW1lcyIsIm5hbWVNYXRjaCIsImtleVJlZ0V4cCQxIiwicmVmUmVnRXhwIiwiZmluZFJlZmVyZW5jZWRLZXlmcmFtZSIsImtleWZyYW1lcyIsInJlZktleWZyYW1lIiwib25Qcm9jZXNzU3R5bGUiLCJLZXlmcmFtZVJ1bGUiLCJwbHVnaW5LZXlmcmFtZVJ1bGUiLCJGb250RmFjZVJ1bGUiLCJwbHVnaW5Gb250RmFjZVJ1bGUiLCJWaWV3cG9ydFJ1bGUiLCJwbHVnaW5WaWV3cG9ydFJ1bGUiLCJTaW1wbGVSdWxlIiwia2V5c01hcCIsImRlZmF1bHRVcGRhdGVPcHRpb25zIiwiZm9yY2VVcGRhdGVPcHRpb25zIiwiUnVsZUxpc3QiLCJydWxlT3B0aW9ucyIsIl90aGlzJG9wdGlvbnMiLCJyZWdpc3RlciIsInVucmVnaXN0ZXIiLCJwbHVnaW5zJCQxIiwiX3RoaXMkb3B0aW9uczIiLCJzdHlsZVJ1bGUiLCJuZXh0VmFsdWUiLCJfbmV4dFZhbHVlIiwiX3ByZXZWYWx1ZSIsIlN0eWxlU2hlZXQiLCJkZXBsb3llZCIsImF0dGFjaCIsImRlcGxveSIsImRldGFjaCIsImluc2VydFJ1bGUiLCJhZGRSdWxlcyIsImFkZGVkIiwiZGVsZXRlUnVsZSIsIl90aGlzJHJ1bGVzIiwiUGx1Z2luc1JlZ2lzdHJ5IiwiZXh0ZXJuYWwiLCJyZWdpc3RyeSIsIm9uUHJvY2Vzc1NoZWV0IiwicHJvY2Vzc2VkVmFsdWUiLCJuZXdQbHVnaW4iLCJwbHVnaW4iLCJzaGVldHMiLCJTaGVldHNSZWdpc3RyeSIsImdsb2JhbFRoaXMiLCJjcmVhdGVHZW5lcmF0ZUlkIiwicnVsZUNvdW50ZXIiLCJqc3NJZCIsIm1pbmlmeSIsImdldFByb3BlcnR5VmFsdWUiLCJjc3NSdWxlIiwiYXR0cmlidXRlU3R5bGVNYXAiLCJnZXRIZWFkIiwiZmluZFByZXZOb2RlIiwiaW5zZXJ0aW9uUG9pbnQiLCJmaW5kSGlnaGVyU2hlZXQiLCJmaW5kSGlnaGVzdFNoZWV0IiwiY29tbWVudCIsImZpbmRDb21tZW50Tm9kZSIsImdldE5vbmNlIiwiX2luc2VydFJ1bGUiLCJtYXhJbmRleCIsImNzc1J1bGVzIiwiYXBwZW5kUnVsZSIsImNyZWF0ZVN0eWxlIiwiRG9tUmVuZGVyZXIiLCJoYXNJbnNlcnRlZFJ1bGVzIiwibmV4dE5vZGUiLCJpbnNlcnRpb25Qb2ludEVsZW1lbnQiLCJpbnNlcnRTdHlsZSIsImluc2VydFJ1bGVzIiwibmF0aXZlUGFyZW50IiwibGF0ZXN0TmF0aXZlUGFyZW50IiwicGFyZW50U3R5bGVTaGVldCIsInJ1bGVTdHIiLCJuYXRpdmVSdWxlIiwiZ2V0UnVsZXMiLCJpbnN0YW5jZUNvdW50ZXIiLCJKc3MiLCJzZXR1cCIsImNyZWF0ZVN0eWxlU2hlZXQiLCJyZW1vdmVTdHlsZVNoZWV0IiwiaGFzQ1NTVE9NU3VwcG9ydCIsImJhc2VDbGFzc2VzIiwibmV3Q2xhc3NlcyIsIm5leHRDbGFzc2VzIiwiY2FjaGUiLCJrZXkxIiwia2V5MiIsInN1YkNhY2hlIiwicHNldWRvQ2xhc3NlcyIsImZuVmFsdWVzTnMiLCJmblJ1bGVOcyIsImZuVmFsdWVzIiwiZm5SdWxlIiwiYXRQcmVmaXgiLCJHbG9iYWxDb250YWluZXJSdWxlIiwiR2xvYmFsUHJlZml4ZWRSdWxlIiwic2VwYXJhdG9yUmVnRXhwIiwiYWRkU2NvcGUiLCJzY29wZSIsImhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUiLCJoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUiLCJwYXJlbnRSZWdFeHAiLCJnZXRSZXBsYWNlUmVmIiwicmVwbGFjZVBhcmVudFJlZnMiLCJuZXN0ZWRQcm9wIiwicGFyZW50UHJvcCIsInBhcmVudFNlbGVjdG9ycyIsIm5lc3RlZFNlbGVjdG9ycyIsIm5lc3RlZCIsImdldE9wdGlvbnMiLCJuZXN0aW5nTGV2ZWwiLCJyZXBsYWNlUmVmIiwiaXNOZXN0ZWQiLCJpc05lc3RlZENvbmRpdGlvbmFsIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsInRvSHlwaGVuTG93ZXIiLCJoTmFtZSIsImNvbnZlcnRDYXNlIiwiY29udmVydGVkIiwiaHlwaGVuYXRlZFByb3AiLCJtcyIsInBlcmNlbnQiLCJhZGRDYW1lbENhc2VkVmVyc2lvbiIsInVuaXRzIiwibW90aW9uIiwicGVyc3BlY3RpdmUiLCJncmlkIiwiaXRlcmF0ZSIsImlubmVyUHJvcCIsIl9pbm5lclByb3AiLCJjYW1lbENhc2VkT3B0aW9ucyIsImpzIiwidmVuZG9yIiwiaXNUb3VjaCIsImpzQ3NzTWFwIiwiTW96IiwiV2Via2l0IiwiYXBwZWFyZW5jZSIsIm5vUHJlZmlsbCIsInN1cHBvcnRlZFByb3BlcnR5IiwiY29sb3JBZGp1c3QiLCJ0b1VwcGVyIiwiY2FtZWxpemUiLCJwYXNjYWxpemUiLCJtYXNrIiwidGV4dE9yaWVudGF0aW9uIiwid3JpdGluZ01vZGUiLCJicmVha1Byb3BzT2xkIiwiaW5saW5lTG9naWNhbE9sZCIsIm5ld1Byb3AiLCJ1bnByZWZpeGVkIiwicHJlZml4ZWQiLCJwYXNjYWxpemVkIiwic2Nyb2xsU25hcCIsIm92ZXJzY3JvbGxCZWhhdmlvciIsInByb3BNYXAiLCJmbGV4MjAxMiIsInByb3BNYXAkMSIsInByb3BLZXlzIiwicHJlZml4Q3NzIiwicHJvcGVydHlEZXRlY3RvcnMiLCJjb21wdXRlZCIsImtleSQxIiwiZWwkMSIsInRyYW5zaXRpb25Qcm9wZXJ0aWVzIiwidHJhbnNQcm9wc1JlZ0V4cCIsInByZWZpeFRyYW5zaXRpb25DYWxsYmFjayIsInAyIiwicHJlZml4ZWRWYWx1ZSIsInN1cHBvcnRlZFZhbHVlIiwicHJlZml4U3R5bGUiLCJjaGFuZ2VQcm9wIiwic3VwcG9ydGVkUHJvcCIsImNoYW5nZVZhbHVlIiwic3VwcG9ydGVkVmFsdWUkJDEiLCJhdFJ1bGUiLCJwcm9wMCIsInByb3AxIiwiZGVmYXVsdE9wdGlvbnMiLCJkaXNhYmxlR2VuZXJhdGlvbiIsImdlbmVyYXRlQ2xhc3NOYW1lIiwiX29wdGlvbnMkZGlzYWJsZUdsb2JhIiwiZGlzYWJsZUdsb2JhbCIsIl9vcHRpb25zJHByb2R1Y3Rpb25QciIsInByb2R1Y3Rpb25QcmVmaXgiLCJfb3B0aW9ucyRzZWVkIiwic2VlZCIsInNlZWRQcmVmaXgiLCJjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSIsInNoZWV0c0NhY2hlIiwic2hlZXRzTWFuYWdlciIsInNoZWV0c1JlZ2lzdHJ5IiwiU3R5bGVzQ29udGV4dCIsImluZGV4Q291bnRlciIsInRoZW1pbmdFbmFibGVkIiwic3R5bGVzV2l0aE92ZXJyaWRlcyIsImdldENsYXNzZXMiLCJjYWNoZUNsYXNzZXMiLCJsYXN0UHJvcCIsImxhc3RKU1MiLCJnZW5lcmF0ZSIsInN0eWxlc0NyZWF0b3IiLCJzaGVldE1hbmFnZXIiLCJzdGF0aWNTaGVldCIsImR5bmFtaWNTdHlsZXMiLCJzZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZSIsImdldER5bmFtaWNTdHlsZXMiLCJleHRyYWN0ZWQiLCJkeW5hbWljU2hlZXQiLCJfcmVmNCIsInVzZVN5bmNocm9ub3VzRWZmZWN0IiwiY3VycmVudEtleSIsImNsYXNzTmFtZVByZWZpeE9wdGlvbiIsIl9vcHRpb25zJGRlZmF1bHRUaGVtZSIsInN0eWxlc09wdGlvbnMyIiwic2hvdWxkVXBkYXRlIl0sIm1hcHBpbmdzIjoiYUFHRSxJQUFJQSxFQUEwQkMsT0FBeUIsaUJBQ3ZEQSxPQUF5QixpQkFDekIsU0FBa0NDLEVBQVNDLElBZ1IzQyxTQUEyQkQsRUFBU0MsR0FDbkMsSUFBS0MsRUFBcUJGLEtBQWFHLEVBQXFCSCxHQUMzRCxPQUVELElBQUssSUFBSUksS0FEVEQsRUFBcUJILElBQVcsRUFDWEMsRUFDaEJJLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtQLEVBQWFHLEtBQ3JESyxFQUFVTCxHQUFZSCxFQUFZRyxJQUdWLEtBQXBCTSxHQUE4QyxJQUFyQkMsR0FDOUJDLElB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QUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFH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QixHQUMzTixHQUFHQSxJQUFRbzhDLEVBQU8xc0MsTUFBTzFQLEVBQUtnQyxTQUFTN00sS0FBSzhLLEtBQUssR0FBR0QsVSxrQ0MxQnRELEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixF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RUFBZ0IsWUFBUyxHQUFJLElBQU1nNUQsV0FBVzgxRSxJQUFnQixHQUFJc0IsR0FFbEUzbEgsRUFBVyxJQUFNOHVDLFNBQ2pCODJFLEVBQWUsSUFBTTkyRSxTQXVCekIsT0F0QkF5MkUsSUFBcUIsV0FDbkIsSUFBSTc0RSxFQUFVLENBQ1o3akUsS0FBTUEsRUFDTnk3QyxNQUFPLEdBQ1B3Z0csY0FBZUEsRUFDZnZ2SSxjQUFlQSxFQUNmVCxNQUFPQSxHQUtULE9BSEEra0ksR0FBT250RSxFQUFTMzNELEdBQ2hCNndJLEVBQWFsNUUsU0FBVSxFQUN2QjFzQyxFQUFTMHNDLFFBQVVBLEVBQ1osV0FDTHF0RSxHQUFPcnRFLE1BRVIsQ0FBQzUzRCxFQUFPZ3dJLElBQ1gsSUFBTXQyRSxXQUFVLFdBQ1ZvM0UsRUFBYWw1RSxTQUNmNy9ELEdBQU9tekIsRUFBUzBzQyxRQUFTMzNELEdBRzNCNndJLEVBQWFsNUUsU0FBVSxLQUVsQiszRSxHQUFXemtILEVBQVMwc0MsUUFBUzMzRCxFQUFNZ0IsUUFBU1osTSxpRENyUHhDLEVBREksSUFBTXU0RCxjQUFjLE1DQ3hCLFNBQVN2M0QsSUFDdEIsT0FBTyxJQUFNbzRELFdBQVcsR0FIMUIiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0ZnVuY3Rpb24gaG90RGlzcG9zZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdH1cbiBcdHZhciBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayA9IHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl07XG4gXHR3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdID0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0XHRpZiAocGFyZW50SG90VXBkYXRlQ2FsbGJhY2spIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdH0gO1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XG4gXHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG4gXHRcdGlmIChudWxsKSBzY3JpcHQuY3Jvc3NPcmlnaW4gPSBudWxsO1xuIFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRNYW5pZmVzdChyZXF1ZXN0VGltZW91dCkge1xuIFx0XHRyZXF1ZXN0VGltZW91dCA9IHJlcXVlc3RUaW1lb3V0IHx8IDEwMDAwO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0aWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnRcIikpO1xuIFx0XHRcdH1cbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0dmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiBcdFx0XHRcdHZhciByZXF1ZXN0UGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNvblwiO1xuIFx0XHRcdFx0cmVxdWVzdC5vcGVuKFwiR0VUXCIsIHJlcXVlc3RQYXRoLCB0cnVlKTtcbiBcdFx0XHRcdHJlcXVlc3QudGltZW91dCA9IHJlcXVlc3RUaW1lb3V0O1xuIFx0XHRcdFx0cmVxdWVzdC5zZW5kKG51bGwpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChlcnIpO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0aWYgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkgcmV0dXJuO1xuIFx0XHRcdFx0aWYgKHJlcXVlc3Quc3RhdHVzID09PSAwKSB7XG4gXHRcdFx0XHRcdC8vIHRpbWVvdXRcbiBcdFx0XHRcdFx0cmVqZWN0KFxuIFx0XHRcdFx0XHRcdG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIHRpbWVkIG91dC5cIilcbiBcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDQwNCkge1xuIFx0XHRcdFx0XHQvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG4gXHRcdFx0XHRcdHJlc29sdmUoKTtcbiBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgIT09IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMzA0KSB7XG4gXHRcdFx0XHRcdC8vIG90aGVyIGZhaWx1cmVcbiBcdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIGZhaWxlZC5cIikpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0Ly8gc3VjY2Vzc1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdHZhciB1cGRhdGUgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuIFx0XHRcdFx0XHRcdHJlamVjdChlKTtcbiBcdFx0XHRcdFx0XHRyZXR1cm47XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0cmVzb2x2ZSh1cGRhdGUpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHR2YXIgaG90QXBwbHlPblVwZGF0ZSA9IHRydWU7XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50SGFzaCA9IFwiYWE4OTE0Y2E4ODlmNzk2MTQ4NmFcIjtcbiBcdHZhciBob3RSZXF1ZXN0VGltZW91dCA9IDEwMDAwO1xuIFx0dmFyIGhvdEN1cnJlbnRNb2R1bGVEYXRhID0ge307XG4gXHR2YXIgaG90Q3VycmVudENoaWxkTW9kdWxlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IFtdO1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdGlmICghbWUpIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fO1xuIFx0XHR2YXIgZm4gPSBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gXHRcdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcbiBcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG4gXHRcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcbiBcdFx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG4gXHRcdFx0XHRcdFx0cmVxdWVzdCArXG4gXHRcdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0KTtcbiBcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHJlcXVlc3QpO1xuIFx0XHR9O1xuIFx0XHR2YXIgT2JqZWN0RmFjdG9yeSA9IGZ1bmN0aW9uIE9iamVjdEZhY3RvcnkobmFtZSkge1xuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XG4gXHRcdFx0XHR9LFxuIFx0XHRcdFx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuIFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdID0gdmFsdWU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fTtcbiBcdFx0Zm9yICh2YXIgbmFtZSBpbiBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9fd2VicGFja19yZXF1aXJlX18sIG5hbWUpICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcImVcIiAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJ0XCJcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgT2JqZWN0RmFjdG9yeShuYW1lKSk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGZuLmUgPSBmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJyZWFkeVwiKSBob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdGhvdENodW5rc0xvYWRpbmcrKztcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKGNodW5rSWQpLnRoZW4oZmluaXNoQ2h1bmtMb2FkaW5nLCBmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdGZpbmlzaENodW5rTG9hZGluZygpO1xuIFx0XHRcdFx0dGhyb3cgZXJyO1xuIFx0XHRcdH0pO1xuXG4gXHRcdFx0ZnVuY3Rpb24gZmluaXNoQ2h1bmtMb2FkaW5nKCkge1xuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZy0tO1xuIFx0XHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIpIHtcbiBcdFx0XHRcdFx0aWYgKCFob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoaG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJiBob3RXYWl0aW5nRmlsZXMgPT09IDApIHtcbiBcdFx0XHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH07XG4gXHRcdGZuLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRcdGlmIChtb2RlICYgMSkgdmFsdWUgPSBmbih2YWx1ZSk7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18udCh2YWx1ZSwgbW9kZSAmIH4xKTtcbiBcdFx0fTtcbiBcdFx0cmV0dXJuIGZuO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgaG90ID0ge1xuIFx0XHRcdC8vIHByaXZhdGUgc3R1ZmZcbiBcdFx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG4gXHRcdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG4gXHRcdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG4gXHRcdFx0X21haW46IGhvdEN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQsXG5cbiBcdFx0XHQvLyBNb2R1bGUgQVBJXG4gXHRcdFx0YWN0aXZlOiB0cnVlLFxuIFx0XHRcdGFjY2VwdDogZnVuY3Rpb24oZGVwLCBjYWxsYmFjaykge1xuIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRlY2xpbmU6IGZ1bmN0aW9uKGRlcCkge1xuIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGlzcG9zZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcbiBcdFx0XHRjaGVjazogaG90Q2hlY2ssXG4gXHRcdFx0YXBwbHk6IGhvdEFwcGx5LFxuIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aWYgKCFsKSByZXR1cm4gaG90U3RhdHVzO1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90U3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuIFx0XHR9O1xuIFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG4gXHRcdHJldHVybiBob3Q7XG4gXHR9XG5cbiBcdHZhciBob3RTdGF0dXNIYW5kbGVycyA9IFtdO1xuIFx0dmFyIGhvdFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4gXHRmdW5jdGlvbiBob3RTZXRTdGF0dXMobmV3U3RhdHVzKSB7XG4gXHRcdGhvdFN0YXR1cyA9IG5ld1N0YXR1cztcbiBcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcbiBcdFx0XHRob3RTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG4gXHR9XG5cbiBcdC8vIHdoaWxlIGRvd25sb2FkaW5nXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcbiBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcbiBcdHZhciBob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdEF2YWlsYWJsZUZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90RGVmZXJyZWQ7XG5cbiBcdC8vIFRoZSB1cGRhdGUgaW5mb1xuIFx0dmFyIGhvdFVwZGF0ZSwgaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0ZnVuY3Rpb24gdG9Nb2R1bGVJZChpZCkge1xuIFx0XHR2YXIgaXNOdW1iZXIgPSAraWQgKyBcIlwiID09PSBpZDtcbiBcdFx0cmV0dXJuIGlzTnVtYmVyID8gK2lkIDogaWQ7XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5KSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG4gXHRcdH1cbiBcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGFwcGx5O1xuIFx0XHRob3RTZXRTdGF0dXMoXCJjaGVja1wiKTtcbiBcdFx0cmV0dXJuIGhvdERvd25sb2FkTWFuaWZlc3QoaG90UmVxdWVzdFRpbWVvdXQpLnRoZW4oZnVuY3Rpb24odXBkYXRlKSB7XG4gXHRcdFx0aWYgKCF1cGRhdGUpIHtcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdFx0XHRyZXR1cm4gbnVsbDtcbiBcdFx0XHR9XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RBdmFpbGFibGVGaWxlc01hcCA9IHVwZGF0ZS5jO1xuIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcblxuIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdGhvdERlZmVycmVkID0ge1xuIFx0XHRcdFx0XHRyZXNvbHZlOiByZXNvbHZlLFxuIFx0XHRcdFx0XHRyZWplY3Q6IHJlamVjdFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHRob3RVcGRhdGUgPSB7fTtcbiBcdFx0XHR2YXIgY2h1bmtJZCA9IDA7XG4gXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG4gXHRcdFx0e1xuIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cbiBcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmXG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nID09PSAwICYmXG4gXHRcdFx0XHRob3RXYWl0aW5nRmlsZXMgPT09IDBcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIHByb21pc2U7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gfHwgIWhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdKVxuIFx0XHRcdHJldHVybjtcbiBcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSBmYWxzZTtcbiBcdFx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmICgtLWhvdFdhaXRpbmdGaWxlcyA9PT0gMCAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwKSB7XG4gXHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xuIFx0XHRcdGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcbiBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XG4gXHRcdHZhciBkZWZlcnJlZCA9IGhvdERlZmVycmVkO1xuIFx0XHRob3REZWZlcnJlZCA9IG51bGw7XG4gXHRcdGlmICghZGVmZXJyZWQpIHJldHVybjtcbiBcdFx0aWYgKGhvdEFwcGx5T25VcGRhdGUpIHtcbiBcdFx0XHQvLyBXcmFwIGRlZmVycmVkIG9iamVjdCBpbiBQcm9taXNlIHRvIG1hcmsgaXQgYXMgYSB3ZWxsLWhhbmRsZWQgUHJvbWlzZSB0b1xuIFx0XHRcdC8vIGF2b2lkIHRyaWdnZXJpbmcgdW5jYXVnaHQgZXhjZXB0aW9uIHdhcm5pbmcgaW4gQ2hyb21lLlxuIFx0XHRcdC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NjU2NjZcbiBcdFx0XHRQcm9taXNlLnJlc29sdmUoKVxuIFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBob3RBcHBseShob3RBcHBseU9uVXBkYXRlKTtcbiBcdFx0XHRcdH0pXG4gXHRcdFx0XHQudGhlbihcbiBcdFx0XHRcdFx0ZnVuY3Rpb24ocmVzdWx0KSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuIFx0XHRcdFx0XHR9LFxuIFx0XHRcdFx0XHRmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0KTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHRvTW9kdWxlSWQoaWQpKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJyZWFkeVwiKVxuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcbiBcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiBcdFx0dmFyIGNiO1xuIFx0XHR2YXIgaTtcbiBcdFx0dmFyIGo7XG4gXHRcdHZhciBtb2R1bGU7XG4gXHRcdHZhciBtb2R1bGVJZDtcblxuIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKHVwZGF0ZU1vZHVsZUlkKSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG4gXHRcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cbiBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMubWFwKGZ1bmN0aW9uKGlkKSB7XG4gXHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRjaGFpbjogW2lkXSxcbiBcdFx0XHRcdFx0aWQ6IGlkXG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG4gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG4gXHRcdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmICghbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCkgY29udGludWU7XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcbiBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdFx0Y29udGludWU7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHtcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG5cbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuIFx0XHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuIFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG4gXHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcbiBcdFx0XHR9O1xuIFx0XHR9XG5cbiBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuIFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuIFx0XHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG4gXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cbiBcdFx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSgpIHtcbiBcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlc3VsdC5tb2R1bGVJZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuIFx0XHRcdCk7XG4gXHRcdH07XG5cbiBcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0bW9kdWxlSWQgPSB0b01vZHVsZUlkKGlkKTtcbiBcdFx0XHRcdC8qKiBAdHlwZSB7VE9ET30gKi9cbiBcdFx0XHRcdHZhciByZXN1bHQ7XG4gXHRcdFx0XHRpZiAoaG90VXBkYXRlW2lkXSkge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZUlkKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IGlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuIFx0XHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcbiBcdFx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcbiBcdFx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuIFx0XHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0ZGVmYXVsdDpcbiBcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcbiBcdFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiYWJvcnRcIik7XG4gXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChhYm9ydEVycm9yKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0FwcGx5KSB7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gaG90VXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRcdFx0XHRpZiAoXG4gXHRcdFx0XHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcyxcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdFx0XHRcdClcbiBcdFx0XHRcdFx0XHQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG4gXHRcdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdG1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdICYmXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZCAmJlxuIFx0XHRcdFx0Ly8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZFxuIFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcbiBcdFx0T2JqZWN0LmtleXMoaG90QXZhaWxhYmxlRmlsZXNNYXApLmZvckVhY2goZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSA9PT0gZmFsc2UpIHtcbiBcdFx0XHRcdGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdH0pO1xuXG4gXHRcdHZhciBpZHg7XG4gXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuIFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG4gXHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG4gXHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuIFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuIFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0Y2IgPSBkaXNwb3NlSGFuZGxlcnNbal07XG4gXHRcdFx0XHRjYihkYXRhKTtcbiBcdFx0XHR9XG4gXHRcdFx0aG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdID0gZGF0YTtcblxuIFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG4gXHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuIFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuIFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcbiBcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgY2hpbGQgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZS5jaGlsZHJlbltqXV07XG4gXHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIHtcbiBcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuIFx0XHR2YXIgZGVwZW5kZW5jeTtcbiBcdFx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuIFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuIFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiYXBwbHlcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuIFx0XHRob3RDdXJyZW50SGFzaCA9IGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG4gXHRcdGZvciAobW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXBwbGllZFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG4gXHRcdHZhciBlcnJvciA9IG51bGw7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXTtcbiBcdFx0XHRcdFx0XHRjYiA9IG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuIFx0XHRcdFx0XHRcdGlmIChjYikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGNiKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goY2IpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0Y2IgPSBjYWxsYmFja3NbaV07XG4gXHRcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRcdGNiKG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcbiBcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbaV07XG4gXHRcdFx0bW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcbiBcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyKTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuIFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnIyO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG4gXHRcdGlmIChlcnJvcikge1xuIFx0XHRcdGhvdFNldFN0YXR1cyhcImZhaWxcIik7XG4gXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiBcdFx0fVxuXG4gXHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gXHRcdFx0cmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aG90OiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpLFxuIFx0XHRcdHBhcmVudHM6IChob3RDdXJyZW50UGFyZW50c1RlbXAgPSBob3RDdXJyZW50UGFyZW50cywgaG90Q3VycmVudFBhcmVudHMgPSBbXSwgaG90Q3VycmVudFBhcmVudHNUZW1wKSxcbiBcdFx0XHRjaGlsZHJlbjogW11cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkpO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL2Fzc2V0cy9cIjtcblxuIFx0Ly8gX193ZWJwYWNrX2hhc2hfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5oID0gZnVuY3Rpb24oKSB7IHJldHVybiBob3RDdXJyZW50SGFzaDsgfTtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBob3RDcmVhdGVSZXF1aXJlKDQyNCkoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNDI0KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJpbXBvcnQgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiLi9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiZnVuY3Rpb24gdG9WYWwobWl4KSB7XG5cdHZhciBrLCB5LCBzdHI9Jyc7XG5cdGlmIChtaXgpIHtcblx0XHRpZiAodHlwZW9mIG1peCA9PT0gJ29iamVjdCcpIHtcblx0XHRcdGlmICghIW1peC5wdXNoKSB7XG5cdFx0XHRcdGZvciAoaz0wOyBrIDwgbWl4Lmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdFx0aWYgKG1peFtrXSAmJiAoeSA9IHRvVmFsKG1peFtrXSkpKSB7XG5cdFx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdFx0c3RyICs9IHk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKGsgaW4gbWl4KSB7XG5cdFx0XHRcdFx0aWYgKG1peFtrXSAmJiAoeSA9IHRvVmFsKGspKSkge1xuXHRcdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRcdHN0ciArPSB5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIG1peCAhPT0gJ2Jvb2xlYW4nICYmICFtaXguY2FsbCkge1xuXHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdHN0ciArPSBtaXg7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcblx0dmFyIGk9MCwgeCwgc3RyPScnO1xuXHR3aGlsZSAoaSA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRpZiAoeCA9IHRvVmFsKGFyZ3VtZW50c1tpKytdKSkge1xuXHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdHN0ciArPSB4XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzdHI7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgdmFyIHRoZW1lID0gcGFyYW1zLnRoZW1lLFxuICAgICAgbmFtZSA9IHBhcmFtcy5uYW1lLFxuICAgICAgcHJvcHMgPSBwYXJhbXMucHJvcHM7XG5cbiAgaWYgKCF0aGVtZSB8fCAhdGhlbWUucHJvcHMgfHwgIXRoZW1lLnByb3BzW25hbWVdKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9IC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wcywgY29kZSBib3Jyb3cgZnJvbSBSZWFjdCBzb3VyY2UuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzE1YThmMDMxODM4YTU1M2U0MWMwYjY2ZWIxYmNmMWRhODQ0ODEwNGQvcGFja2FnZXMvcmVhY3Qvc3JjL1JlYWN0RWxlbWVudC5qcyNMMjIxXG5cblxuICB2YXIgZGVmYXVsdFByb3BzID0gdGhlbWUucHJvcHNbbmFtZV07XG4gIHZhciBwcm9wTmFtZTtcblxuICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFRoZW1lUHJvcHM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaG9pc3ROb25SZWFjdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMsIGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBtYWtlU3R5bGVzIGZyb20gJy4uL21ha2VTdHlsZXMnO1xuaW1wb3J0IGdldFRoZW1lUHJvcHMgZnJvbSAnLi4vZ2V0VGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnOyAvLyBMaW5rIGEgc3R5bGUgc2hlZXQgd2l0aCBhIGNvbXBvbmVudC5cbi8vIEl0IGRvZXMgbm90IG1vZGlmeSB0aGUgY29tcG9uZW50IHBhc3NlZCB0byBpdDtcbi8vIGluc3RlYWQsIGl0IHJldHVybnMgYSBuZXcgY29tcG9uZW50LCB3aXRoIGEgYGNsYXNzZXNgIHByb3BlcnR5LlxuXG52YXIgd2l0aFN0eWxlcyA9IGZ1bmN0aW9uIHdpdGhTdHlsZXMoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChDb21wb25lbnQpIHtcbiAgICB2YXIgZGVmYXVsdFRoZW1lID0gb3B0aW9ucy5kZWZhdWx0VGhlbWUsXG4gICAgICAgIF9vcHRpb25zJHdpdGhUaGVtZSA9IG9wdGlvbnMud2l0aFRoZW1lLFxuICAgICAgICB3aXRoVGhlbWUgPSBfb3B0aW9ucyR3aXRoVGhlbWUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkd2l0aFRoZW1lLFxuICAgICAgICBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgICBzdHlsZXNPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImRlZmF1bHRUaGVtZVwiLCBcIndpdGhUaGVtZVwiLCBcIm5hbWVcIl0pO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChDb21wb25lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoWydZb3UgYXJlIGNhbGxpbmcgd2l0aFN0eWxlcyhzdHlsZXMpKENvbXBvbmVudCkgd2l0aCBhbiB1bmRlZmluZWQgY29tcG9uZW50LicsICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGltcG9ydCBpdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZVByZWZpeCA9IG5hbWU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIC8vIFByb3ZpZGUgYSBiZXR0ZXIgRFggb3V0c2lkZSBwcm9kdWN0aW9uLlxuICAgICAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZShDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChkaXNwbGF5TmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xhc3NOYW1lUHJlZml4ID0gZGlzcGxheU5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyhzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICAgIGRlZmF1bHRUaGVtZTogZGVmYXVsdFRoZW1lLFxuICAgICAgQ29tcG9uZW50OiBDb21wb25lbnQsXG4gICAgICBuYW1lOiBuYW1lIHx8IENvbXBvbmVudC5kaXNwbGF5TmFtZSxcbiAgICAgIGNsYXNzTmFtZVByZWZpeDogY2xhc3NOYW1lUHJlZml4XG4gICAgfSwgc3R5bGVzT3B0aW9ucykpO1xuICAgIHZhciBXaXRoU3R5bGVzID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBXaXRoU3R5bGVzKHByb3BzLCByZWYpIHtcbiAgICAgIHZhciBjbGFzc2VzUHJvcCA9IHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZixcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImlubmVyUmVmXCJdKTtcblxuICAgICAgdmFyIGNsYXNzZXMgPSB1c2VTdHlsZXMocHJvcHMpO1xuICAgICAgdmFyIHRoZW1lO1xuICAgICAgdmFyIG1vcmUgPSBvdGhlcjtcblxuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fCB3aXRoVGhlbWUpIHtcbiAgICAgICAgLy8gbmFtZSBhbmQgd2l0aFRoZW1lIGFyZSBpbnZhcmlhbnQgaW4gdGhlIG91dGVyIHNjb3BlXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICB0aGVtZSA9IHVzZVRoZW1lKCkgfHwgZGVmYXVsdFRoZW1lO1xuXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgbW9yZSA9IGdldFRoZW1lUHJvcHMoe1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHByb3BzOiBvdGhlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIFByb3ZpZGUgdGhlIHRoZW1lIHRvIHRoZSB3cmFwcGVkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gU28gd2UgZG9uJ3QgaGF2ZSB0byB1c2UgdGhlIGB3aXRoVGhlbWUoKWAgSGlnaGVyLW9yZGVyIENvbXBvbmVudC5cblxuXG4gICAgICAgIGlmICh3aXRoVGhlbWUgJiYgIW1vcmUudGhlbWUpIHtcbiAgICAgICAgICBtb3JlLnRoZW1lID0gdGhlbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogaW5uZXJSZWYgfHwgcmVmLFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzXG4gICAgICB9LCBtb3JlKSk7XG4gICAgfSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gV2l0aFN0eWxlcy5wcm9wVHlwZXMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICAgICAqL1xuICAgICAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2UgdGhhdCBwcm9wIHRvIHBhc3MgYSByZWYgdG8gdGhlIGRlY29yYXRlZCBjb21wb25lbnQuXG4gICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICovXG4gICAgICBpbm5lclJlZjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wcy5pbm5lclJlZiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDsgLy8gcmV0dXJuIG5ldyBFcnJvcihcbiAgICAgICAgLy8gICAnTWF0ZXJpYWwtVUk6IHRoZSBgaW5uZXJSZWZgIHByb3AgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHY1LiAnICtcbiAgICAgICAgLy8gICAgICdSZWZzIGFyZSBub3cgYXV0b21hdGljYWxseSBmb3J3YXJkZWQgdG8gdGhlIGlubmVyIGNvbXBvbmVudC4nLFxuICAgICAgICAvLyApO1xuICAgICAgfSlcbiAgICB9IDogdm9pZCAwO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFdpdGhTdHlsZXMuZGlzcGxheU5hbWUgPSBcIldpdGhTdHlsZXMoXCIuY29uY2F0KGdldERpc3BsYXlOYW1lKENvbXBvbmVudCksIFwiKVwiKTtcbiAgICB9XG5cbiAgICBob2lzdE5vblJlYWN0U3RhdGljcyhXaXRoU3R5bGVzLCBDb21wb25lbnQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIEV4cG9zZWQgZm9yIHRlc3QgcHVycG9zZXMuXG4gICAgICBXaXRoU3R5bGVzLk5ha2VkID0gQ29tcG9uZW50O1xuICAgICAgV2l0aFN0eWxlcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgIFdpdGhTdHlsZXMudXNlU3R5bGVzID0gdXNlU3R5bGVzO1xuICAgIH1cblxuICAgIHJldHVybiBXaXRoU3R5bGVzO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlczsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IHdpdGhTdHlsZXMgYXMgd2l0aFN0eWxlc1dpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcblxuZnVuY3Rpb24gd2l0aFN0eWxlcyhzdHlsZXNPckNyZWF0b3IsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHdpdGhTdHlsZXNXaXRob3V0RGVmYXVsdChzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZVxuICB9LCBvcHRpb25zKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXM7IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvLyBJdCBzaG91bGQgdG8gYmUgbm90ZWQgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzbid0IGVxdWl2YWxlbnQgdG8gYHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplYC5cbi8vXG4vLyBBIHN0cmljdCBjYXBpdGFsaXphdGlvbiBzaG91bGQgdXBwZXJjYXNlIHRoZSBmaXJzdCBsZXR0ZXIgb2YgZWFjaCB3b3JkIGEgdGhlIHNlbnRlbmNlLlxuLy8gV2Ugb25seSBoYW5kbGUgdGhlIGZpcnN0IHdvcmQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogY2FwaXRhbGl6ZShzdHJpbmcpIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnQuJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn0iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIHdob3NlIHZhbHVlIGlzIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgY2xhbXBlZFxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBUaGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHJldHVybnMge251bWJlcn0gQSBudW1iZXIgaW4gdGhlIHJhbmdlIFttaW4sIG1heF1cbiAqL1xuZnVuY3Rpb24gY2xhbXAodmFsdWUpIHtcbiAgdmFyIG1pbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgdmFyIG1heCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiB0aGUgdmFsdWUgcHJvdmlkZWQgXCIuY29uY2F0KHZhbHVlLCBcIiBpcyBvdXQgb2YgcmFuZ2UgW1wiKS5jb25jYXQobWluLCBcIiwgXCIpLmNvbmNhdChtYXgsIFwiXS5cIikpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh2YWx1ZSA8IG1pbikge1xuICAgIHJldHVybiBtaW47XG4gIH1cblxuICBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICByZXR1cm4gbWF4O1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGhleFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gY29sb3Iuc3Vic3RyKDEpO1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiLnsxLFwiLmNvbmNhdChjb2xvci5sZW5ndGggLyAzLCBcIn1cIiksICdnJyk7XG4gIHZhciBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG5cbiAgaWYgKGNvbG9ycyAmJiBjb2xvcnNbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAobikge1xuICAgICAgcmV0dXJuIG4gKyBuO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9ycyA/IFwicmdiKFwiLmNvbmNhdChjb2xvcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KG4sIDE2KTtcbiAgfSkuam9pbignLCAnKSwgXCIpXCIpIDogJyc7XG59XG5cbmZ1bmN0aW9uIGludFRvSGV4KGludCkge1xuICB2YXIgaGV4ID0gaW50LnRvU3RyaW5nKDE2KTtcbiAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBcIjBcIi5jb25jYXQoaGV4KSA6IGhleDtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyByZ2IgZm9ybWF0IHRvIENTUyBoZXggZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIFJHQiBjb2xvciwgaS5lLiByZ2IobiwgbiwgbilcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmcsIGkuZS4gI25ubm5ublxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSGV4KGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIHZhciBfZGVjb21wb3NlQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvciksXG4gICAgICB2YWx1ZXMgPSBfZGVjb21wb3NlQ29sb3IudmFsdWVzO1xuXG4gIHJldHVybiBcIiNcIi5jb25jYXQodmFsdWVzLm1hcChmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBpbnRUb0hleChuKTtcbiAgfSkuam9pbignJykpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gaHNsIGZvcm1hdCB0byByZ2IgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhTTCBjb2xvciB2YWx1ZXNcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHJnYiBjb2xvciB2YWx1ZXNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhciBfY29sb3IgPSBjb2xvcixcbiAgICAgIHZhbHVlcyA9IF9jb2xvci52YWx1ZXM7XG4gIHZhciBoID0gdmFsdWVzWzBdO1xuICB2YXIgcyA9IHZhbHVlc1sxXSAvIDEwMDtcbiAgdmFyIGwgPSB2YWx1ZXNbMl0gLyAxMDA7XG4gIHZhciBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcblxuICB2YXIgZiA9IGZ1bmN0aW9uIGYobikge1xuICAgIHZhciBrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAobiArIGggLyAzMCkgJSAxMjtcbiAgICByZXR1cm4gbCAtIGEgKiBNYXRoLm1heChNYXRoLm1pbihrIC0gMywgOSAtIGssIDEpLCAtMSk7XG4gIH07XG5cbiAgdmFyIHR5cGUgPSAncmdiJztcbiAgdmFyIHJnYiA9IFtNYXRoLnJvdW5kKGYoMCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoOCkgKiAyNTUpLCBNYXRoLnJvdW5kKGYoNCkgKiAyNTUpXTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ2hzbGEnKSB7XG4gICAgdHlwZSArPSAnYSc7XG4gICAgcmdiLnB1c2godmFsdWVzWzNdKTtcbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZTogdHlwZSxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgdHlwZSBhbmQgdmFsdWVzIG9mIGEgY29sb3IuXG4gKlxuICogTm90ZTogRG9lcyBub3Qgc3VwcG9ydCByZ2IgJSB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge29iamVjdH0gLSBBIE1VSSBjb2xvciBvYmplY3Q6IHt0eXBlOiBzdHJpbmcsIHZhbHVlczogbnVtYmVyW119XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcG9zZUNvbG9yKGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLnR5cGUpIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICByZXR1cm4gZGVjb21wb3NlQ29sb3IoaGV4VG9SZ2IoY29sb3IpKTtcbiAgfVxuXG4gIHZhciBtYXJrZXIgPSBjb2xvci5pbmRleE9mKCcoJyk7XG4gIHZhciB0eXBlID0gY29sb3Iuc3Vic3RyaW5nKDAsIG1hcmtlcik7XG5cbiAgaWYgKFsncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXS5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihbXCJNYXRlcmlhbC1VSTogdW5zdXBwb3J0ZWQgYFwiLmNvbmNhdChjb2xvciwgXCJgIGNvbG9yLlwiKSwgJ1dlIHN1cHBvcnQgdGhlIGZvbGxvd2luZyBmb3JtYXRzOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLiddLmpvaW4oJ1xcbicpKTtcbiAgfVxuXG4gIHZhciB2YWx1ZXMgPSBjb2xvci5zdWJzdHJpbmcobWFya2VyICsgMSwgY29sb3IubGVuZ3RoIC0gMSkuc3BsaXQoJywnKTtcbiAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWVzOiB2YWx1ZXNcbiAgfTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBvYmplY3Qgd2l0aCB0eXBlIGFuZCB2YWx1ZXMgdG8gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2Y6ICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSdcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgdmFyIHR5cGUgPSBjb2xvci50eXBlO1xuICB2YXIgdmFsdWVzID0gY29sb3IudmFsdWVzO1xuXG4gIGlmICh0eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIC8vIE9ubHkgY29udmVydCB0aGUgZmlyc3QgMyB2YWx1ZXMgdG8gaW50IChpLmUuIG5vdCBhbHBoYSlcbiAgICB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uIChuLCBpKSB7XG4gICAgICByZXR1cm4gaSA8IDMgPyBwYXJzZUludChuLCAxMCkgOiBuO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgdmFsdWVzWzFdID0gXCJcIi5jb25jYXQodmFsdWVzWzFdLCBcIiVcIik7XG4gICAgdmFsdWVzWzJdID0gXCJcIi5jb25jYXQodmFsdWVzWzJdLCBcIiVcIik7XG4gIH1cblxuICByZXR1cm4gXCJcIi5jb25jYXQodHlwZSwgXCIoXCIpLmNvbmNhdCh2YWx1ZXMuam9pbignLCAnKSwgXCIpXCIpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9yZWdyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gQSBjb250cmFzdCByYXRpbyB2YWx1ZSBpbiB0aGUgcmFuZ2UgMCAtIDIxLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250cmFzdFJhdGlvKGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgdmFyIGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIHZhciBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICByZXR1cm4gKE1hdGgubWF4KGx1bUEsIGx1bUIpICsgMC4wNSkgLyAoTWF0aC5taW4obHVtQSwgbHVtQikgKyAwLjA1KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgdGhlIGNvbG9yIGluIHRoZSByYW5nZSAwIC0gMVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMdW1pbmFuY2UoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhciByZ2IgPSBjb2xvci50eXBlID09PSAnaHNsJyA/IGRlY29tcG9zZUNvbG9yKGhzbFRvUmdiKGNvbG9yKSkudmFsdWVzIDogY29sb3IudmFsdWVzO1xuICByZ2IgPSByZ2IubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG5cbiAgICByZXR1cm4gdmFsIDw9IDAuMDM5MjggPyB2YWwgLyAxMi45MiA6IE1hdGgucG93KCh2YWwgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgfSk7IC8vIFRydW5jYXRlIGF0IDMgZGlnaXRzXG5cbiAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbn1cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvciwgZGVwZW5kaW5nIG9uIGl0cyBsdW1pbmFuY2UuXG4gKiBMaWdodCBjb2xvcnMgYXJlIGRhcmtlbmVkLCBkYXJrIGNvbG9ycyBhcmUgbGlnaHRlbmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudD0wLjE1IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVtcGhhc2l6ZShjb2xvcikge1xuICB2YXIgY29lZmZpY2llbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDAuMTU7XG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC41ID8gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkgOiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG59XG4vKipcbiAqIFNldCB0aGUgYWJzb2x1dGUgdHJhbnNwYXJlbmN5IG9mIGEgY29sb3IuXG4gKiBBbnkgZXhpc3RpbmcgYWxwaGEgdmFsdWVzIGFyZSBvdmVyd3JpdHRlbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB2YWx1ZSB0byBzZXQgdGhlIGFscGhhIGNoYW5uZWwgdG8gaW4gdGhlIHJhbmdlIDAgLTFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZhZGUoY29sb3IsIHZhbHVlKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YWx1ZSA9IGNsYW1wKHZhbHVlKTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuXG4gIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBMaWdodGVucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICs9ICgxMDAgLSBjb2xvci52YWx1ZXNbMl0pICogY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgyNTUgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlY29tcG9zZUNvbG9yKGNvbG9yKTtcbn0iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gZXF1YWwgdG8gbWVyZ2Ugd2l0aCB0aGUgZGlmZmVyZW5jZSBiZWluZyB0aGF0IG5vIHJlZmVyZW5jZVxuICogdG8gb3JpZ2luYWwgb2JqZWN0cyBpcyBrZXB0LlxuICpcbiAqIEBzZWUgbWVyZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBkZWVwTWVyZ2U6IGRlZXBNZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjEwJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKSB7XG4gIHZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xuICB2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG4gIHZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4gIHZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xuICB2YXIgJGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG4gIHZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbiAgdmFyIHByb3BlcnR5RGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbiAgdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4gIHZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xuICB2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xuICB2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbiAgdmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbiAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG4gIHZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbiAgdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG4gIHZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuICB2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xuICB2YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG4gIHZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xuICB2YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbiAgdmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xuICB2YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4gIHZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpO1xuICB2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xuICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG4gIHZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG4gIHZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbiAgdmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbiAgdmFyIGFycmF5Q29weVdpdGhpbiA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyk7XG4gIHZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbiAgdmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9lczYubWFwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpO1xudmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKCkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZiAoIXRhcmdldE1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZiAoIWtleU1ldGFkYXRhKSB7XG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCkge1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5KSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgdmFyIGtleXMgPSBbXTtcbiAgaWYgKG1ldGFkYXRhTWFwKSBtZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24gKE8pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCFpc1Byb2R1Y3Rpb24pIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRleHQgPSBcIldhcm5pbmc6IFwiICsgbWVzc2FnZTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUud2Fybih0ZXh0KTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdGhyb3cgRXJyb3IodGV4dCk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3YXJuaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNNZXJnZWFibGVPYmplY3QgPSBmdW5jdGlvbiBpc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gaXNOb25OdWxsT2JqZWN0KHZhbHVlKVxuXHRcdCYmICFpc1NwZWNpYWwodmFsdWUpXG59O1xuXG5mdW5jdGlvbiBpc05vbk51bGxPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xufVxuXG5mdW5jdGlvbiBpc1NwZWNpYWwodmFsdWUpIHtcblx0dmFyIHN0cmluZ1ZhbHVlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcblxuXHRyZXR1cm4gc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG5cdFx0fHwgc3RyaW5nVmFsdWUgPT09ICdbb2JqZWN0IERhdGVdJ1xuXHRcdHx8IGlzUmVhY3RFbGVtZW50KHZhbHVlKVxufVxuXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYjVhYzk2M2ZiNzkxZDEyOThlN2YzOTYyMzYzODNiYzk1NWY5MTZjMS9zcmMvaXNvbW9ycGhpYy9jbGFzc2ljL2VsZW1lbnQvUmVhY3RFbGVtZW50LmpzI0wyMS1MMjVcbnZhciBjYW5Vc2VTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gY2FuVXNlU3ltYm9sID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIDogMHhlYWM3O1xuXG5mdW5jdGlvbiBpc1JlYWN0RWxlbWVudCh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRVxufVxuXG5mdW5jdGlvbiBlbXB0eVRhcmdldCh2YWwpIHtcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge31cbn1cblxuZnVuY3Rpb24gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodmFsdWUsIG9wdGlvbnMpIHtcblx0cmV0dXJuIChvcHRpb25zLmNsb25lICE9PSBmYWxzZSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSlcblx0XHQ/IGRlZXBtZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksIHZhbHVlLCBvcHRpb25zKVxuXHRcdDogdmFsdWVcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0cmV0dXJuIHRhcmdldC5jb25jYXQoc291cmNlKS5tYXAoZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChlbGVtZW50LCBvcHRpb25zKVxuXHR9KVxufVxuXG5mdW5jdGlvbiBnZXRNZXJnZUZ1bmN0aW9uKGtleSwgb3B0aW9ucykge1xuXHRpZiAoIW9wdGlvbnMuY3VzdG9tTWVyZ2UpIHtcblx0XHRyZXR1cm4gZGVlcG1lcmdlXG5cdH1cblx0dmFyIGN1c3RvbU1lcmdlID0gb3B0aW9ucy5jdXN0b21NZXJnZShrZXkpO1xuXHRyZXR1cm4gdHlwZW9mIGN1c3RvbU1lcmdlID09PSAnZnVuY3Rpb24nID8gY3VzdG9tTWVyZ2UgOiBkZWVwbWVyZ2Vcbn1cblxuZnVuY3Rpb24gZ2V0RW51bWVyYWJsZU93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpIHtcblx0cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNcblx0XHQ/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KS5maWx0ZXIoZnVuY3Rpb24oc3ltYm9sKSB7XG5cdFx0XHRyZXR1cm4gdGFyZ2V0LnByb3BlcnR5SXNFbnVtZXJhYmxlKHN5bWJvbClcblx0XHR9KVxuXHRcdDogW11cbn1cblxuZnVuY3Rpb24gZ2V0S2V5cyh0YXJnZXQpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKHRhcmdldCkuY29uY2F0KGdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSlcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlJc09uT2JqZWN0KG9iamVjdCwgcHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gcHJvcGVydHkgaW4gb2JqZWN0XG5cdH0gY2F0Y2goXykge1xuXHRcdHJldHVybiBmYWxzZVxuXHR9XG59XG5cbi8vIFByb3RlY3RzIGZyb20gcHJvdG90eXBlIHBvaXNvbmluZyBhbmQgdW5leHBlY3RlZCBtZXJnaW5nIHVwIHRoZSBwcm90b3R5cGUgY2hhaW4uXG5mdW5jdGlvbiBwcm9wZXJ0eUlzVW5zYWZlKHRhcmdldCwga2V5KSB7XG5cdHJldHVybiBwcm9wZXJ0eUlzT25PYmplY3QodGFyZ2V0LCBrZXkpIC8vIFByb3BlcnRpZXMgYXJlIHNhZmUgdG8gbWVyZ2UgaWYgdGhleSBkb24ndCBleGlzdCBpbiB0aGUgdGFyZ2V0IHlldCxcblx0XHQmJiAhKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KSAvLyB1bnNhZmUgaWYgdGhleSBleGlzdCB1cCB0aGUgcHJvdG90eXBlIGNoYWluLFxuXHRcdFx0JiYgT2JqZWN0LnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGFyZ2V0LCBrZXkpKSAvLyBhbmQgYWxzbyB1bnNhZmUgaWYgdGhleSdyZSBub25lbnVtZXJhYmxlLlxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHR2YXIgZGVzdGluYXRpb24gPSB7fTtcblx0aWYgKG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuXHRcdGdldEtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHRhcmdldFtrZXldLCBvcHRpb25zKTtcblx0XHR9KTtcblx0fVxuXHRnZXRLZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRpZiAocHJvcGVydHlJc1Vuc2FmZSh0YXJnZXQsIGtleSkpIHtcblx0XHRcdHJldHVyblxuXHRcdH1cblxuXHRcdGlmICghb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdChzb3VyY2Vba2V5XSkgfHwgIXByb3BlcnR5SXNPbk9iamVjdCh0YXJnZXQsIGtleSkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBnZXRNZXJnZUZ1bmN0aW9uKGtleSwgb3B0aW9ucykodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRvcHRpb25zLmFycmF5TWVyZ2UgPSBvcHRpb25zLmFycmF5TWVyZ2UgfHwgZGVmYXVsdEFycmF5TWVyZ2U7XG5cdG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgPSBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0IHx8IGlzTWVyZ2VhYmxlT2JqZWN0O1xuXHQvLyBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCBpcyBhZGRlZCB0byBgb3B0aW9uc2Agc28gdGhhdCBjdXN0b20gYXJyYXlNZXJnZSgpXG5cdC8vIGltcGxlbWVudGF0aW9ucyBjYW4gdXNlIGl0LiBUaGUgY2FsbGVyIG1heSBub3QgcmVwbGFjZSBpdC5cblx0b3B0aW9ucy5jbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkO1xuXG5cdHZhciBzb3VyY2VJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuXHR2YXIgdGFyZ2V0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkodGFyZ2V0KTtcblx0dmFyIHNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2ggPSBzb3VyY2VJc0FycmF5ID09PSB0YXJnZXRJc0FycmF5O1xuXG5cdGlmICghc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSBpZiAoc291cmNlSXNBcnJheSkge1xuXHRcdHJldHVybiBvcHRpb25zLmFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9XG59XG5cbmRlZXBtZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnMpIHtcblx0aWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5Jylcblx0fVxuXG5cdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuXHRcdHJldHVybiBkZWVwbWVyZ2UocHJldiwgbmV4dCwgb3B0aW9ucylcblx0fSwge30pXG59O1xuXG52YXIgZGVlcG1lcmdlXzEgPSBkZWVwbWVyZ2U7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVlcG1lcmdlXzE7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGU6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICAgIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgICBtaXhpbnM6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgY2FsbGVlOiB0cnVlLFxuICAgIGFyZ3VtZW50czogdHJ1ZSxcbiAgICBhcml0eTogdHJ1ZVxufTtcblxudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgICByZW5kZXI6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZVxufTtcblxudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIGNvbXBhcmU6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG59O1xuXG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbUmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gICAgaWYgKFJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICAgICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgICB9XG4gICAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcbiAgICAgICAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgICAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICAgICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbmV4cG9ydCB2YXIgZWFzaW5nID0ge1xuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbiBlYXNpbmcgY3VydmUuXG4gIGVhc2VJbk91dDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGVudGVyIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eSBmcm9tIG9mZi1zY3JlZW4gYW5kXG4gIC8vIHNsb3dseSBkZWNlbGVyYXRlIHRvIGEgcmVzdGluZyBwb2ludC5cbiAgZWFzZU91dDogJ2N1YmljLWJlemllcigwLjAsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGxlYXZlIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eS4gVGhleSBkbyBub3QgZGVjZWxlcmF0ZSB3aGVuIG9mZi1zY3JlZW4uXG4gIGVhc2VJbjogJ2N1YmljLWJlemllcigwLjQsIDAsIDEsIDEpJyxcbiAgLy8gVGhlIHNoYXJwIGN1cnZlIGlzIHVzZWQgYnkgb2JqZWN0cyB0aGF0IG1heSByZXR1cm4gdG8gdGhlIHNjcmVlbiBhdCBhbnkgdGltZS5cbiAgc2hhcnA6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpJ1xufTsgLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLWNvbW1vbi1kdXJhdGlvbnNcbi8vIHRvIGxlYXJuIHdoZW4gdXNlIHdoYXQgdGltaW5nXG5cbmV4cG9ydCB2YXIgZHVyYXRpb24gPSB7XG4gIHNob3J0ZXN0OiAxNTAsXG4gIHNob3J0ZXI6IDIwMCxcbiAgc2hvcnQ6IDI1MCxcbiAgLy8gbW9zdCBiYXNpYyByZWNvbW1lbmRlZCB0aW1pbmdcbiAgc3RhbmRhcmQ6IDMwMCxcbiAgLy8gdGhpcyBpcyB0byBiZSB1c2VkIGluIGNvbXBsZXggYW5pbWF0aW9uc1xuICBjb21wbGV4OiAzNzUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGVudGVyaW5nIHNjcmVlblxuICBlbnRlcmluZ1NjcmVlbjogMjI1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBsZWF2aW5nIHNjcmVlblxuICBsZWF2aW5nU2NyZWVuOiAxOTVcbn07XG5leHBvcnQgdmFyIGZvcm1hdE1zID0gZnVuY3Rpb24gZm9ybWF0TXMobWlsbGlzZWNvbmRzKSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChNYXRoLnJvdW5kKG1pbGxpc2Vjb25kcyksIFwibXNcIik7XG59O1xuZXhwb3J0IHZhciBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufTtcbmV4cG9ydCB2YXIgaXNOdW1iZXIgPSBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbn07XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5fSBwcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0ucHJvcFxuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtLmR1cmF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW0uZWFzaW5nXG4gKiBAcGFyYW0ge251bWJlcn0gcGFyYW0uZGVsYXlcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGVhc2luZzogZWFzaW5nLFxuICBkdXJhdGlvbjogZHVyYXRpb24sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogWydhbGwnXTtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICB2YXIgX29wdGlvbnMkZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgICBkdXJhdGlvbk9wdGlvbiA9IF9vcHRpb25zJGR1cmF0aW9uID09PSB2b2lkIDAgPyBkdXJhdGlvbi5zdGFuZGFyZCA6IF9vcHRpb25zJGR1cmF0aW9uLFxuICAgICAgICBfb3B0aW9ucyRlYXNpbmcgPSBvcHRpb25zLmVhc2luZyxcbiAgICAgICAgZWFzaW5nT3B0aW9uID0gX29wdGlvbnMkZWFzaW5nID09PSB2b2lkIDAgPyBlYXNpbmcuZWFzZUluT3V0IDogX29wdGlvbnMkZWFzaW5nLFxuICAgICAgICBfb3B0aW9ucyRkZWxheSA9IG9wdGlvbnMuZGVsYXksXG4gICAgICAgIGRlbGF5ID0gX29wdGlvbnMkZGVsYXkgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRkZWxheSxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiZHVyYXRpb25cIiwgXCJlYXNpbmdcIiwgXCJkZWxheVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFpc1N0cmluZyhwcm9wcykgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBhcmd1bWVudCBcInByb3BzXCIgbXVzdCBiZSBhIHN0cmluZyBvciBBcnJheS4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc051bWJlcihkdXJhdGlvbk9wdGlvbikgJiYgIWlzU3RyaW5nKGR1cmF0aW9uT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IGFyZ3VtZW50IFxcXCJkdXJhdGlvblxcXCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZyBidXQgZm91bmQgXCIuY29uY2F0KGR1cmF0aW9uT3B0aW9uLCBcIi5cIikpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzU3RyaW5nKGVhc2luZ09wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IGFyZ3VtZW50IFwiZWFzaW5nXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc051bWJlcihkZWxheSkgJiYgIWlzU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogYXJndW1lbnQgXCJkZWxheVwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogdW5yZWNvZ25pemVkIGFyZ3VtZW50KHMpIFtcIi5jb25jYXQoT2JqZWN0LmtleXMob3RoZXIpLmpvaW4oJywnKSwgXCJdXCIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdKS5tYXAoZnVuY3Rpb24gKGFuaW1hdGVkUHJvcCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGFuaW1hdGVkUHJvcCwgXCIgXCIpLmNvbmNhdCh0eXBlb2YgZHVyYXRpb25PcHRpb24gPT09ICdzdHJpbmcnID8gZHVyYXRpb25PcHRpb24gOiBmb3JtYXRNcyhkdXJhdGlvbk9wdGlvbiksIFwiIFwiKS5jb25jYXQoZWFzaW5nT3B0aW9uLCBcIiBcIikuY29uY2F0KHR5cGVvZiBkZWxheSA9PT0gJ3N0cmluZycgPyBkZWxheSA6IGZvcm1hdE1zKGRlbGF5KSk7XG4gICAgfSkuam9pbignLCcpO1xuICB9LFxuICBnZXRBdXRvSGVpZ2h0RHVyYXRpb246IGZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgICBpZiAoIWhlaWdodCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgdmFyIGNvbnN0YW50ID0gaGVpZ2h0IC8gMzY7IC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuXG4gICAgcmV0dXJuIE1hdGgucm91bmQoKDQgKyAxNSAqIE1hdGgucG93KGNvbnN0YW50LCAwLjI1KSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG4gIH1cbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIvKiFcbiAqIGlzLXBsYWluLW9iamVjdCA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXMtcGxhaW4tb2JqZWN0PlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3LCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnaXNvYmplY3QnO1xuXG5mdW5jdGlvbiBpc09iamVjdE9iamVjdChvKSB7XG4gIHJldHVybiBpc09iamVjdChvKSA9PT0gdHJ1ZVxuICAgICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qobykge1xuICB2YXIgY3Rvcixwcm90O1xuXG4gIGlmIChpc09iamVjdE9iamVjdChvKSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiBoYXMgbW9kaWZpZWQgY29uc3RydWN0b3JcbiAgY3RvciA9IG8uY29uc3RydWN0b3I7XG4gIGlmICh0eXBlb2YgY3RvciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIGhhcyBtb2RpZmllZCBwcm90b3R5cGVcbiAgcHJvdCA9IGN0b3IucHJvdG90eXBlO1xuICBpZiAoaXNPYmplY3RPYmplY3QocHJvdCkgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgY29uc3RydWN0b3IgZG9lcyBub3QgaGF2ZSBhbiBPYmplY3Qtc3BlY2lmaWMgbWV0aG9kXG4gIGlmIChwcm90Lmhhc093blByb3BlcnR5KCdpc1Byb3RvdHlwZU9mJykgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gTW9zdCBsaWtlbHkgYSBwbGFpbiBPYmplY3RcbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiLyohXG4gKiBpc29iamVjdCA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXNvYmplY3Q+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTcsIEpvbiBTY2hsaW5rZXJ0LlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheSh2YWwpID09PSBmYWxzZTtcbn07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG4vLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4vLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG5leHBvcnQgdmFyIGtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107IC8vIEtlZXAgaW4gbWluZCB0aGF0IEBtZWRpYSBpcyBpbmNsdXNpdmUgYnkgdGhlIENTUyBzcGVjaWZpY2F0aW9uLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICB2YXIgX2JyZWFrcG9pbnRzJHZhbHVlcyA9IGJyZWFrcG9pbnRzLnZhbHVlcyxcbiAgICAgIHZhbHVlcyA9IF9icmVha3BvaW50cyR2YWx1ZXMgPT09IHZvaWQgMCA/IHtcbiAgICB4czogMCxcbiAgICBzbTogNjAwLFxuICAgIG1kOiA5NjAsXG4gICAgbGc6IDEyODAsXG4gICAgeGw6IDE5MjBcbiAgfSA6IF9icmVha3BvaW50cyR2YWx1ZXMsXG4gICAgICBfYnJlYWtwb2ludHMkdW5pdCA9IGJyZWFrcG9pbnRzLnVuaXQsXG4gICAgICB1bml0ID0gX2JyZWFrcG9pbnRzJHVuaXQgPT09IHZvaWQgMCA/ICdweCcgOiBfYnJlYWtwb2ludHMkdW5pdCxcbiAgICAgIF9icmVha3BvaW50cyRzdGVwID0gYnJlYWtwb2ludHMuc3RlcCxcbiAgICAgIHN0ZXAgPSBfYnJlYWtwb2ludHMkc3RlcCA9PT0gdm9pZCAwID8gNSA6IF9icmVha3BvaW50cyRzdGVwLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoYnJlYWtwb2ludHMsIFtcInZhbHVlc1wiLCBcInVuaXRcIiwgXCJzdGVwXCJdKTtcblxuICBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZG93bihrZXkpIHtcbiAgICB2YXIgZW5kSW5kZXggPSBrZXlzLmluZGV4T2Yoa2V5KSArIDE7XG4gICAgdmFyIHVwcGVyYm91bmQgPSB2YWx1ZXNba2V5c1tlbmRJbmRleF1dO1xuXG4gICAgaWYgKGVuZEluZGV4ID09PSBrZXlzLmxlbmd0aCkge1xuICAgICAgLy8geGwgZG93biBhcHBsaWVzIHRvIGFsbCBzaXplc1xuICAgICAgcmV0dXJuIHVwKCd4cycpO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB1cHBlcmJvdW5kID09PSAnbnVtYmVyJyAmJiBlbmRJbmRleCA+IDAgPyB1cHBlcmJvdW5kIDoga2V5O1xuICAgIHJldHVybiBcIkBtZWRpYSAobWF4LXdpZHRoOlwiLmNvbmNhdCh2YWx1ZSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBiZXR3ZWVuKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgZW5kSW5kZXggPSBrZXlzLmluZGV4T2YoZW5kKSArIDE7XG5cbiAgICBpZiAoZW5kSW5kZXggPT09IGtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdXAoc3RhcnQpO1xuICAgIH1cblxuICAgIHJldHVybiBcIkBtZWRpYSAobWluLXdpZHRoOlwiLmNvbmNhdCh2YWx1ZXNbc3RhcnRdKS5jb25jYXQodW5pdCwgXCIpIGFuZCBcIikgKyBcIihtYXgtd2lkdGg6XCIuY29uY2F0KHZhbHVlc1trZXlzW2VuZEluZGV4XV0gLSBzdGVwIC8gMTAwKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25seShrZXkpIHtcbiAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiB3aWR0aChrZXkpIHtcbiAgICByZXR1cm4gdmFsdWVzW2tleV07XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIGtleXM6IGtleXMsXG4gICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgdXA6IHVwLFxuICAgIGRvd246IGRvd24sXG4gICAgYmV0d2VlbjogYmV0d2VlbixcbiAgICBvbmx5OiBvbmx5LFxuICAgIHdpZHRoOiB3aWR0aFxuICB9LCBvdGhlcik7XG59IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTWl4aW5zKGJyZWFrcG9pbnRzLCBzcGFjaW5nLCBtaXhpbnMpIHtcbiAgdmFyIF90b29sYmFyO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZ3V0dGVyczogZnVuY3Rpb24gZ3V0dGVycygpIHtcbiAgICAgIHZhciBzdHlsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgLy8gVG8gZGVwcmVjYXRlIGluIHY0LjFcbiAgICAgIC8vICAgICAgIHdhcm5pbmcoXG4gICAgICAvLyAgICAgICAgIGZhbHNlLFxuICAgICAgLy8gICAgICAgICBbXG4gICAgICAvLyAgICAgICAgICAgJ01hdGVyaWFsLVVJOiB0aGVtZS5taXhpbnMuZ3V0dGVycygpIGlzIGRlcHJlY2F0ZWQuJyxcbiAgICAgIC8vICAgICAgICAgICAnWW91IGNhbiB1c2UgdGhlIHNvdXJjZSBvZiB0aGUgbWl4aW4gZGlyZWN0bHk6JyxcbiAgICAgIC8vICAgICAgICAgICBgXG4gICAgICAvLyBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIC8vIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIC8vIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcbiAgICAgIC8vICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICAvLyAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIC8vIH0sXG4gICAgICAvLyBgLFxuICAgICAgLy8gICAgICAgICBdLmpvaW4oJ1xcbicpLFxuICAgICAgLy8gICAgICAgKTtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nKDIpLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcoMilcbiAgICAgIH0sIHN0eWxlcywgX2RlZmluZVByb3BlcnR5KHt9LCBicmVha3BvaW50cy51cCgnc20nKSwgX2V4dGVuZHMoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZygzKSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nKDMpXG4gICAgICB9LCBzdHlsZXNbYnJlYWtwb2ludHMudXAoJ3NtJyldKSkpO1xuICAgIH0sXG4gICAgdG9vbGJhcjogKF90b29sYmFyID0ge1xuICAgICAgbWluSGVpZ2h0OiA1NlxuICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfdG9vbGJhciwgXCJcIi5jb25jYXQoYnJlYWtwb2ludHMudXAoJ3hzJyksIFwiIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSlcIiksIHtcbiAgICAgIG1pbkhlaWdodDogNDhcbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF90b29sYmFyLCBicmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWluSGVpZ2h0OiA2NFxuICAgIH0pLCBfdG9vbGJhcilcbiAgfSwgbWl4aW5zKTtcbn0iLCJ2YXIgaW5kaWdvID0ge1xuICA1MDogJyNlOGVhZjYnLFxuICAxMDA6ICcjYzVjYWU5JyxcbiAgMjAwOiAnIzlmYThkYScsXG4gIDMwMDogJyM3OTg2Y2InLFxuICA0MDA6ICcjNWM2YmMwJyxcbiAgNTAwOiAnIzNmNTFiNScsXG4gIDYwMDogJyMzOTQ5YWInLFxuICA3MDA6ICcjMzAzZjlmJyxcbiAgODAwOiAnIzI4MzU5MycsXG4gIDkwMDogJyMxYTIzN2UnLFxuICBBMTAwOiAnIzhjOWVmZicsXG4gIEEyMDA6ICcjNTM2ZGZlJyxcbiAgQTQwMDogJyMzZDVhZmUnLFxuICBBNzAwOiAnIzMwNGZmZSdcbn07XG5leHBvcnQgZGVmYXVsdCBpbmRpZ287IiwidmFyIHBpbmsgPSB7XG4gIDUwOiAnI2ZjZTRlYycsXG4gIDEwMDogJyNmOGJiZDAnLFxuICAyMDA6ICcjZjQ4ZmIxJyxcbiAgMzAwOiAnI2YwNjI5MicsXG4gIDQwMDogJyNlYzQwN2EnLFxuICA1MDA6ICcjZTkxZTYzJyxcbiAgNjAwOiAnI2Q4MWI2MCcsXG4gIDcwMDogJyNjMjE4NWInLFxuICA4MDA6ICcjYWQxNDU3JyxcbiAgOTAwOiAnIzg4MGU0ZicsXG4gIEExMDA6ICcjZmY4MGFiJyxcbiAgQTIwMDogJyNmZjQwODEnLFxuICBBNDAwOiAnI2Y1MDA1NycsXG4gIEE3MDA6ICcjYzUxMTYyJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHBpbms7IiwidmFyIGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZDVkNWQ1JyxcbiAgQTIwMDogJyNhYWFhYWEnLFxuICBBNDAwOiAnIzMwMzAzMCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZXk7IiwidmFyIHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgcmVkOyIsInZhciBjb21tb24gPSB7XG4gIGJsYWNrOiAnIzAwMCcsXG4gIHdoaXRlOiAnI2ZmZidcbn07XG5leHBvcnQgZGVmYXVsdCBjb21tb247IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnOyAvLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxuXG5pbXBvcnQgaW5kaWdvIGZyb20gJy4uL2NvbG9ycy9pbmRpZ28nO1xuaW1wb3J0IHBpbmsgZnJvbSAnLi4vY29sb3JzL3BpbmsnO1xuaW1wb3J0IGdyZXkgZnJvbSAnLi4vY29sb3JzL2dyZXknO1xuaW1wb3J0IHJlZCBmcm9tICcuLi9jb2xvcnMvcmVkJztcbmltcG9ydCBjb21tb24gZnJvbSAnLi4vY29sb3JzL2NvbW1vbic7XG5pbXBvcnQgeyBnZXRDb250cmFzdFJhdGlvLCBkYXJrZW4sIGxpZ2h0ZW4gfSBmcm9tICcuL2NvbG9yTWFuaXB1bGF0b3InO1xuZXhwb3J0IHZhciBsaWdodCA9IHtcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSB0ZXh0LlxuICB0ZXh0OiB7XG4gICAgLy8gVGhlIG1vc3QgaW1wb3J0YW50IHRleHQuXG4gICAgcHJpbWFyeTogJ3JnYmEoMCwgMCwgMCwgMC44NyknLFxuICAgIC8vIFNlY29uZGFyeSB0ZXh0LlxuICAgIHNlY29uZGFyeTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIERpc2FibGVkIHRleHQgaGF2ZSBldmVuIGxvd2VyIHZpc3VhbCBwcm9taW5lbmNlLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjM4KScsXG4gICAgLy8gVGV4dCBoaW50cy5cbiAgICBoaW50OiAncmdiYSgwLCAwLCAwLCAwLjM4KSdcbiAgfSxcbiAgLy8gVGhlIGNvbG9yIHVzZWQgdG8gZGl2aWRlIGRpZmZlcmVudCBlbGVtZW50cy5cbiAgZGl2aWRlcjogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgc3VyZmFjZXMuXG4gIC8vIENvbnNpc3RlbmN5IGJldHdlZW4gdGhlc2UgdmFsdWVzIGlzIGltcG9ydGFudC5cbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBjb21tb24ud2hpdGUsXG4gICAgZGVmYXVsdDogZ3JleVs1MF1cbiAgfSxcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBhY3Rpb24gZWxlbWVudHMuXG4gIGFjdGlvbjoge1xuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBhY3RpdmUgYWN0aW9uIGxpa2UgYW4gaWNvbiBidXR0b24uXG4gICAgYWN0aXZlOiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGhvdmVyZWQgYWN0aW9uLlxuICAgIGhvdmVyOiAncmdiYSgwLCAwLCAwLCAwLjA4KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA4LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIHNlbGVjdGVkIGFjdGlvbi5cbiAgICBzZWxlY3RlZDogJ3JnYmEoMCwgMCwgMCwgMC4xNCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxuICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4xMiknXG4gIH1cbn07XG5leHBvcnQgdmFyIGRhcmsgPSB7XG4gIHRleHQ6IHtcbiAgICBwcmltYXJ5OiBjb21tb24ud2hpdGUsXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJyxcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaGludDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaWNvbjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSdcbiAgfSxcbiAgZGl2aWRlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGdyZXlbODAwXSxcbiAgICBkZWZhdWx0OiAnIzMwMzAzMCdcbiAgfSxcbiAgYWN0aW9uOiB7XG4gICAgYWN0aXZlOiBjb21tb24ud2hpdGUsXG4gICAgaG92ZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4xLFxuICAgIHNlbGVjdGVkOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpJyxcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKSdcbiAgfVxufTtcblxuZnVuY3Rpb24gYWRkTGlnaHRPckRhcmsoaW50ZW50LCBkaXJlY3Rpb24sIHNoYWRlLCB0b25hbE9mZnNldCkge1xuICBpZiAoIWludGVudFtkaXJlY3Rpb25dKSB7XG4gICAgaWYgKGludGVudC5oYXNPd25Qcm9wZXJ0eShzaGFkZSkpIHtcbiAgICAgIGludGVudFtkaXJlY3Rpb25dID0gaW50ZW50W3NoYWRlXTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2xpZ2h0Jykge1xuICAgICAgaW50ZW50LmxpZ2h0ID0gbGlnaHRlbihpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXQpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGFyaycpIHtcbiAgICAgIGludGVudC5kYXJrID0gZGFya2VuKGludGVudC5tYWluLCB0b25hbE9mZnNldCAqIDEuNSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICB2YXIgX3BhbGV0dGUkcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSxcbiAgICAgIHByaW1hcnkgPSBfcGFsZXR0ZSRwcmltYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IGluZGlnb1szMDBdLFxuICAgIG1haW46IGluZGlnb1s1MDBdLFxuICAgIGRhcms6IGluZGlnb1s3MDBdXG4gIH0gOiBfcGFsZXR0ZSRwcmltYXJ5LFxuICAgICAgX3BhbGV0dGUkc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnksXG4gICAgICBzZWNvbmRhcnkgPSBfcGFsZXR0ZSRzZWNvbmRhcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogcGluay5BMjAwLFxuICAgIG1haW46IHBpbmsuQTQwMCxcbiAgICBkYXJrOiBwaW5rLkE3MDBcbiAgfSA6IF9wYWxldHRlJHNlY29uZGFyeSxcbiAgICAgIF9wYWxldHRlJGVycm9yID0gcGFsZXR0ZS5lcnJvcixcbiAgICAgIGVycm9yID0gX3BhbGV0dGUkZXJyb3IgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgbWFpbjogcmVkWzUwMF0sXG4gICAgZGFyazogcmVkWzcwMF1cbiAgfSA6IF9wYWxldHRlJGVycm9yLFxuICAgICAgX3BhbGV0dGUkdHlwZSA9IHBhbGV0dGUudHlwZSxcbiAgICAgIHR5cGUgPSBfcGFsZXR0ZSR0eXBlID09PSB2b2lkIDAgPyAnbGlnaHQnIDogX3BhbGV0dGUkdHlwZSxcbiAgICAgIF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9IHBhbGV0dGUuY29udHJhc3RUaHJlc2hvbGQsXG4gICAgICBjb250cmFzdFRocmVzaG9sZCA9IF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9PT0gdm9pZCAwID8gMyA6IF9wYWxldHRlJGNvbnRyYXN0VGhyZSxcbiAgICAgIF9wYWxldHRlJHRvbmFsT2Zmc2V0ID0gcGFsZXR0ZS50b25hbE9mZnNldCxcbiAgICAgIHRvbmFsT2Zmc2V0ID0gX3BhbGV0dGUkdG9uYWxPZmZzZXQgPT09IHZvaWQgMCA/IDAuMiA6IF9wYWxldHRlJHRvbmFsT2Zmc2V0LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocGFsZXR0ZSwgW1wicHJpbWFyeVwiLCBcInNlY29uZGFyeVwiLCBcImVycm9yXCIsIFwidHlwZVwiLCBcImNvbnRyYXN0VGhyZXNob2xkXCIsIFwidG9uYWxPZmZzZXRcIl0pOyAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgLy8gQm9vdHN0cmFwOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8xZDZlMzcxMGRkNDQ3ZGUxYTIwMGYyOWU4ZmE1MjFmOGEwOTA4ZjcwL3Njc3MvX2Z1bmN0aW9ucy5zY3NzI0w1OVxuICAvLyBhbmQgbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9hYzQ2Yjg4NjNjNGRhYjlmYzIyYzRjNjYyZGM2YmQxYjY1ZGQ2NTJmL3BhY2thZ2VzL21kYy10aGVtZS9fZnVuY3Rpb25zLnNjc3MjTDU0XG5cblxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIWJhY2tncm91bmQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBtaXNzaW5nIGJhY2tncm91bmQgYXJndW1lbnQgaW4gZ2V0Q29udHJhc3RUZXh0KFwiLmNvbmNhdChiYWNrZ3JvdW5kLCBcIikuXCIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBkYXJrLnRleHQucHJpbWFyeSkgPj0gY29udHJhc3RUaHJlc2hvbGQgPyBkYXJrLnRleHQucHJpbWFyeSA6IGxpZ2h0LnRleHQucHJpbWFyeTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgY29udHJhc3QgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChjb250cmFzdCA8IDMpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiB0aGUgY29udHJhc3QgcmF0aW8gb2YgXCIuY29uY2F0KGNvbnRyYXN0LCBcIjoxIGZvciBcIikuY29uY2F0KGNvbnRyYXN0VGV4dCwgXCIgb24gXCIpLmNvbmNhdChiYWNrZ3JvdW5kKSwgJ2ZhbGxzIGJlbG93IHRoZSBXQUNHIHJlY29tbWVuZGVkIGFic29sdXRlIG1pbmltdW0gY29udHJhc3QgcmF0aW8gb2YgMzoxLicsICdodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyN2aXN1YWwtYXVkaW8tY29udHJhc3QtY29udHJhc3QnXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG5cbiAgZnVuY3Rpb24gYXVnbWVudENvbG9yKGNvbG9yKSB7XG4gICAgdmFyIG1haW5TaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNTAwO1xuICAgIHZhciBsaWdodFNoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAzMDA7XG4gICAgdmFyIGRhcmtTaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogNzAwO1xuICAgIGNvbG9yID0gX2V4dGVuZHMoe30sIGNvbG9yKTtcblxuICAgIGlmICghY29sb3IubWFpbiAmJiBjb2xvclttYWluU2hhZGVdKSB7XG4gICAgICBjb2xvci5tYWluID0gY29sb3JbbWFpblNoYWRlXTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFjb2xvci5tYWluKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihbJ01hdGVyaWFsLVVJOiB0aGUgY29sb3IgcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLicsIFwiVGhlIGNvbG9yIG9iamVjdCBuZWVkcyB0byBoYXZlIGEgYG1haW5gIHByb3BlcnR5IG9yIGEgYFwiLmNvbmNhdChtYWluU2hhZGUsIFwiYCBwcm9wZXJ0eS5cIildLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuXG4gICAgaWYgKCFjb2xvci5jb250cmFzdFRleHQpIHtcbiAgICAgIGNvbG9yLmNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0VGV4dChjb2xvci5tYWluKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICB2YXIgdHlwZXMgPSB7XG4gICAgZGFyazogZGFyayxcbiAgICBsaWdodDogbGlnaHRcbiAgfTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghdHlwZXNbdHlwZV0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJNYXRlcmlhbC1VSTogdGhlIHBhbGV0dGUgdHlwZSBgXCIuY29uY2F0KHR5cGUsIFwiYCBpcyBub3Qgc3VwcG9ydGVkLlwiKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBhbGV0dGVPdXRwdXQgPSBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIC8vIEEgY29sbGVjdGlvbiBvZiBjb21tb24gY29sb3JzLlxuICAgIGNvbW1vbjogY29tbW9uLFxuICAgIC8vIFRoZSBwYWxldHRlIHR5cGUsIGNhbiBiZSBsaWdodCBvciBkYXJrLlxuICAgIHR5cGU6IHR5cGUsXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwcmltYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHByaW1hcnk6IGF1Z21lbnRDb2xvcihwcmltYXJ5KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IGF1Z21lbnRDb2xvcihzZWNvbmRhcnksICdBNDAwJywgJ0EyMDAnLCAnQTcwMCcpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgaW50ZXJmYWNlIGVsZW1lbnRzIHRoYXQgdGhlIHVzZXIgc2hvdWxkIGJlIG1hZGUgYXdhcmUgb2YuXG4gICAgZXJyb3I6IGF1Z21lbnRDb2xvcihlcnJvciksXG4gICAgLy8gVGhlIGdyZXkgY29sb3JzLlxuICAgIGdyZXk6IGdyZXksXG4gICAgLy8gVXNlZCBieSBgZ2V0Q29udHJhc3RUZXh0KClgIHRvIG1heGltaXplIHRoZSBjb250cmFzdCBiZXR3ZWVuIHRoZSBiYWNrZ3JvdW5kIGFuZFxuICAgIC8vIHRoZSB0ZXh0LlxuICAgIGNvbnRyYXN0VGhyZXNob2xkOiBjb250cmFzdFRocmVzaG9sZCxcbiAgICAvLyBUYWtlIGEgYmFja2dyb3VuZCBjb2xvciBhbmQgcmV0dXJuIHRoZSBjb2xvciBvZiB0aGUgdGV4dCB0byBtYXhpbWl6ZSB0aGUgY29udHJhc3QuXG4gICAgZ2V0Q29udHJhc3RUZXh0OiBnZXRDb250cmFzdFRleHQsXG4gICAgLy8gR2VuZXJhdGUgYSByaWNoIGNvbG9yIG9iamVjdC5cbiAgICBhdWdtZW50Q29sb3I6IGF1Z21lbnRDb2xvcixcbiAgICAvLyBVc2VkIGJ5IHRoZSBmdW5jdGlvbnMgYmVsb3cgdG8gc2hpZnQgYSBjb2xvcidzIGx1bWluYW5jZSBieSBhcHByb3hpbWF0ZWx5XG4gICAgLy8gdHdvIGluZGV4ZXMgd2l0aGluIGl0cyB0b25hbCBwYWxldHRlLlxuICAgIC8vIEUuZy4sIHNoaWZ0IGZyb20gUmVkIDUwMCB0byBSZWQgMzAwIG9yIFJlZCA3MDAuXG4gICAgdG9uYWxPZmZzZXQ6IHRvbmFsT2Zmc2V0XG4gIH0sIHR5cGVzW3R5cGVdKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG5cbiAgfSk7XG4gIHJldHVybiBwYWxldHRlT3V0cHV0O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJzsgLy8gPCAxa2IgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9tZXJnZSBpcyA+IDNrYi5cblxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG52YXIgY2FzZUFsbENhcHMgPSB7XG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59O1xudmFyIGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgdmFyIF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgICAgX3JlZiRmb250RmFtaWx5ID0gX3JlZi5mb250RmFtaWx5LFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYkZm9udEZhbWlseSA9PT0gdm9pZCAwID8gZGVmYXVsdEZvbnRGYW1pbHkgOiBfcmVmJGZvbnRGYW1pbHksXG4gICAgICBfcmVmJGZvbnRTaXplID0gX3JlZi5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3JlZiRmb250U2l6ZSA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGZvbnRTaXplLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TGlnaHQgPSBfcmVmLmZvbnRXZWlnaHRMaWdodCxcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IF9yZWYkZm9udFdlaWdodExpZ2h0ID09PSB2b2lkIDAgPyAzMDAgOiBfcmVmJGZvbnRXZWlnaHRMaWdodCxcbiAgICAgIF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9IF9yZWYuZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9PT0gdm9pZCAwID8gNDAwIDogX3JlZiRmb250V2VpZ2h0UmVndWxhLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TWVkaXVtID0gX3JlZi5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IF9yZWYkZm9udFdlaWdodE1lZGl1bSA9PT0gdm9pZCAwID8gNTAwIDogX3JlZiRmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgX3JlZiRmb250V2VpZ2h0Qm9sZCA9IF9yZWYuZm9udFdlaWdodEJvbGQsXG4gICAgICBmb250V2VpZ2h0Qm9sZCA9IF9yZWYkZm9udFdlaWdodEJvbGQgPT09IHZvaWQgMCA/IDcwMCA6IF9yZWYkZm9udFdlaWdodEJvbGQsXG4gICAgICBfcmVmJGh0bWxGb250U2l6ZSA9IF9yZWYuaHRtbEZvbnRTaXplLFxuICAgICAgaHRtbEZvbnRTaXplID0gX3JlZiRodG1sRm9udFNpemUgPT09IHZvaWQgMCA/IDE2IDogX3JlZiRodG1sRm9udFNpemUsXG4gICAgICBhbGxWYXJpYW50cyA9IF9yZWYuYWxsVmFyaWFudHMsXG4gICAgICBweFRvUmVtMiA9IF9yZWYucHhUb1JlbSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImZvbnRXZWlnaHRCb2xkXCIsIFwiaHRtbEZvbnRTaXplXCIsIFwiYWxsVmFyaWFudHNcIiwgXCJweFRvUmVtXCJdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6ICdmb250U2l6ZScgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaHRtbEZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiAnaHRtbEZvbnRTaXplJyBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci5cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvZWYgPSBmb250U2l6ZSAvIDE0O1xuXG4gIHZhciBweFRvUmVtID0gcHhUb1JlbTIgfHwgZnVuY3Rpb24gKHNpemUpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoc2l6ZSAvIGh0bWxGb250U2l6ZSAqIGNvZWYsIFwicmVtXCIpO1xuICB9O1xuXG4gIHZhciBidWlsZFZhcmlhbnQgPSBmdW5jdGlvbiBidWlsZFZhcmlhbnQoZm9udFdlaWdodCwgc2l6ZSwgbGluZUhlaWdodCwgbGV0dGVyU3BhY2luZywgY2FzaW5nKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0LFxuICAgICAgZm9udFNpemU6IHB4VG9SZW0oc2l6ZSksXG4gICAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHRcbiAgICB9LCBmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICAgIGxldHRlclNwYWNpbmc6IFwiXCIuY29uY2F0KHJvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKSwgXCJlbVwiKVxuICAgIH0gOiB7fSwge30sIGNhc2luZywge30sIGFsbFZhcmlhbnRzKTtcbiAgfTtcblxuICB2YXIgdmFyaWFudHMgPSB7XG4gICAgaDE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDk2LCAxLCAtMS41KSxcbiAgICBoMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgNjAsIDEsIC0wLjUpLFxuICAgIGgzOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDQ4LCAxLjA0LCAwKSxcbiAgICBoNDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAzNCwgMS4xNywgMC4yNSksXG4gICAgaDU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMjQsIDEuMzMsIDApLFxuICAgIGg2OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMjAsIDEuNiwgMC4xNSksXG4gICAgc3VidGl0bGUxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjc1LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS41NywgMC4xKSxcbiAgICBib2R5MTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS41LCAwLjE1KSxcbiAgICBib2R5MjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNCwgMS40MywgMC4xNSksXG4gICAgYnV0dG9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNzUsIDAuNCwgY2FzZUFsbENhcHMpLFxuICAgIGNhcHRpb246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDEuNjYsIDAuNCksXG4gICAgb3ZlcmxpbmU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDIuNjYsIDEsIGNhc2VBbGxDYXBzKVxuICB9O1xuICByZXR1cm4gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICBodG1sRm9udFNpemU6IGh0bWxGb250U2l6ZSxcbiAgICBweFRvUmVtOiBweFRvUmVtLFxuICAgIHJvdW5kOiByb3VuZCxcbiAgICAvLyBUT0RPIFRvIHJlbW92ZSBpbiB2NT9cbiAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplOiBmb250U2l6ZSxcbiAgICBmb250V2VpZ2h0TGlnaHQ6IGZvbnRXZWlnaHRMaWdodCxcbiAgICBmb250V2VpZ2h0UmVndWxhcjogZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgZm9udFdlaWdodE1lZGl1bTogZm9udFdlaWdodE1lZGl1bSxcbiAgICBmb250V2VpZ2h0Qm9sZDogZm9udFdlaWdodEJvbGRcbiAgfSwgdmFyaWFudHMpLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbn0iLCJ2YXIgc2hhZG93S2V5VW1icmFPcGFjaXR5ID0gMC4yO1xudmFyIHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG52YXIgc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHkgPSAwLjEyO1xuXG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coKSB7XG4gIHJldHVybiBbXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAzID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzNdLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dLZXlVbWJyYU9wYWNpdHksIFwiKVwiKSwgXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA0ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzRdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA1ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzVdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA2ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzZdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA3ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzddLCBcInB4IHJnYmEoMCwwLDAsXCIpLmNvbmNhdChzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHksIFwiKVwiKSwgXCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA4ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzhdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSA5ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzldLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxMF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDExID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzExXSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93QW1iaWVudFNoYWRvd09wYWNpdHksIFwiKVwiKV0uam9pbignLCcpO1xufSAvLyBWYWx1ZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2JlODc0N2Y5NDU3NDY2OWNiNWU3YWRkMWE3YzU0ZmE0MWE4OWNlYzcvcGFja2FnZXMvbWRjLWVsZXZhdGlvbi9fdmFyaWFibGVzLnNjc3NcblxuXG52YXIgc2hhZG93cyA9IFsnbm9uZScsIGNyZWF0ZVNoYWRvdygwLCAyLCAxLCAtMSwgMCwgMSwgMSwgMCwgMCwgMSwgMywgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCAxLCAtMiwgMCwgMiwgMiwgMCwgMCwgMSwgNSwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCAzLCAtMiwgMCwgMywgNCwgMCwgMCwgMSwgOCwgMCksIGNyZWF0ZVNoYWRvdygwLCAyLCA0LCAtMSwgMCwgNCwgNSwgMCwgMCwgMSwgMTAsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDUsIDgsIDAsIDAsIDEsIDE0LCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA2LCAxMCwgMCwgMCwgMSwgMTgsIDApLCBjcmVhdGVTaGFkb3coMCwgNCwgNSwgLTIsIDAsIDcsIDEwLCAxLCAwLCAyLCAxNiwgMSksIGNyZWF0ZVNoYWRvdygwLCA1LCA1LCAtMywgMCwgOCwgMTAsIDEsIDAsIDMsIDE0LCAyKSwgY3JlYXRlU2hhZG93KDAsIDUsIDYsIC0zLCAwLCA5LCAxMiwgMSwgMCwgMywgMTYsIDIpLCBjcmVhdGVTaGFkb3coMCwgNiwgNiwgLTMsIDAsIDEwLCAxNCwgMSwgMCwgNCwgMTgsIDMpLCBjcmVhdGVTaGFkb3coMCwgNiwgNywgLTQsIDAsIDExLCAxNSwgMSwgMCwgNCwgMjAsIDMpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEyLCAxNywgMiwgMCwgNSwgMjIsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOCwgLTQsIDAsIDEzLCAxOSwgMiwgMCwgNSwgMjQsIDQpLCBjcmVhdGVTaGFkb3coMCwgNywgOSwgLTQsIDAsIDE0LCAyMSwgMiwgMCwgNSwgMjYsIDQpLCBjcmVhdGVTaGFkb3coMCwgOCwgOSwgLTUsIDAsIDE1LCAyMiwgMiwgMCwgNiwgMjgsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTAsIC01LCAwLCAxNiwgMjQsIDIsIDAsIDYsIDMwLCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDExLCAtNSwgMCwgMTcsIDI2LCAyLCAwLCA2LCAzMiwgNSksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMSwgLTUsIDAsIDE4LCAyOCwgMiwgMCwgNywgMzQsIDYpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTIsIC02LCAwLCAxOSwgMjksIDIsIDAsIDcsIDM2LCA2KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIwLCAzMSwgMywgMCwgOCwgMzgsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjEsIDMzLCAzLCAwLCA4LCA0MCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTQsIC02LCAwLCAyMiwgMzUsIDMsIDAsIDgsIDQyLCA3KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNCwgLTcsIDAsIDIzLCAzNiwgMywgMCwgOSwgNDQsIDgpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE1LCAtNywgMCwgMjQsIDM4LCAzLCAwLCA5LCA0NiwgOCldO1xuZXhwb3J0IGRlZmF1bHQgc2hhZG93czsiLCJ2YXIgc2hhcGUgPSB7XG4gIGJvcmRlclJhZGl1czogNFxufTtcbmV4cG9ydCBkZWZhdWx0IHNoYXBlOyIsIi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxudmFyIHpJbmRleCA9IHtcbiAgbW9iaWxlU3RlcHBlcjogMTAwMCxcbiAgc3BlZWREaWFsOiAxMDUwLFxuICBhcHBCYXI6IDExMDAsXG4gIGRyYXdlcjogMTIwMCxcbiAgbW9kYWw6IDEzMDAsXG4gIHNuYWNrYmFyOiAxNDAwLFxuICB0b29sdGlwOiAxNTAwXG59O1xuZXhwb3J0IGRlZmF1bHQgekluZGV4OyIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZSc7IC8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvbWVyZ2UgaXMgPiAza2IuXG5cbmltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJ2lzLXBsYWluLW9iamVjdCc7XG5pbXBvcnQgY3JlYXRlQnJlYWtwb2ludHMgZnJvbSAnLi9jcmVhdGVCcmVha3BvaW50cyc7XG5pbXBvcnQgY3JlYXRlTWl4aW5zIGZyb20gJy4vY3JlYXRlTWl4aW5zJztcbmltcG9ydCBjcmVhdGVQYWxldHRlIGZyb20gJy4vY3JlYXRlUGFsZXR0ZSc7XG5pbXBvcnQgY3JlYXRlVHlwb2dyYXBoeSBmcm9tICcuL2NyZWF0ZVR5cG9ncmFwaHknO1xuaW1wb3J0IHNoYWRvd3MgZnJvbSAnLi9zaGFkb3dzJztcbmltcG9ydCBzaGFwZSBmcm9tICcuL3NoYXBlJztcbmltcG9ydCBjcmVhdGVTcGFjaW5nIGZyb20gJy4vY3JlYXRlU3BhY2luZyc7XG5pbXBvcnQgdHJhbnNpdGlvbnMgZnJvbSAnLi90cmFuc2l0aW9ucyc7XG5pbXBvcnQgekluZGV4IGZyb20gJy4vekluZGV4JztcblxuZnVuY3Rpb24gY3JlYXRlTXVpVGhlbWUoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICB2YXIgX29wdGlvbnMkYnJlYWtwb2ludHMgPSBvcHRpb25zLmJyZWFrcG9pbnRzLFxuICAgICAgYnJlYWtwb2ludHNJbnB1dCA9IF9vcHRpb25zJGJyZWFrcG9pbnRzID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJGJyZWFrcG9pbnRzLFxuICAgICAgX29wdGlvbnMkbWl4aW5zID0gb3B0aW9ucy5taXhpbnMsXG4gICAgICBtaXhpbnNJbnB1dCA9IF9vcHRpb25zJG1peGlucyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRtaXhpbnMsXG4gICAgICBfb3B0aW9ucyRwYWxldHRlID0gb3B0aW9ucy5wYWxldHRlLFxuICAgICAgcGFsZXR0ZUlucHV0ID0gX29wdGlvbnMkcGFsZXR0ZSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRwYWxldHRlLFxuICAgICAgc2hhZG93c0lucHV0ID0gb3B0aW9ucy5zaGFkb3dzLFxuICAgICAgc3BhY2luZ0lucHV0ID0gb3B0aW9ucy5zcGFjaW5nLFxuICAgICAgX29wdGlvbnMkdHlwb2dyYXBoeSA9IG9wdGlvbnMudHlwb2dyYXBoeSxcbiAgICAgIHR5cG9ncmFwaHlJbnB1dCA9IF9vcHRpb25zJHR5cG9ncmFwaHkgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkdHlwb2dyYXBoeSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIFtcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwicGFsZXR0ZVwiLCBcInNoYWRvd3NcIiwgXCJzcGFjaW5nXCIsIFwidHlwb2dyYXBoeVwiXSk7XG5cbiAgdmFyIHBhbGV0dGUgPSBjcmVhdGVQYWxldHRlKHBhbGV0dGVJbnB1dCk7XG4gIHZhciBicmVha3BvaW50cyA9IGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzSW5wdXQpO1xuICB2YXIgc3BhY2luZyA9IGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0KTtcblxuICB2YXIgbXVpVGhlbWUgPSBfZXh0ZW5kcyh7XG4gICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgbWl4aW5zOiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIHNwYWNpbmcsIG1peGluc0lucHV0KSxcbiAgICBvdmVycmlkZXM6IHt9LFxuICAgIC8vIEluamVjdCBjdXN0b20gc3R5bGVzXG4gICAgcGFsZXR0ZTogcGFsZXR0ZSxcbiAgICBwcm9wczoge30sXG4gICAgLy8gSW5qZWN0IGN1c3RvbSBwcm9wc1xuICAgIHNoYWRvd3M6IHNoYWRvd3NJbnB1dCB8fCBzaGFkb3dzLFxuICAgIHR5cG9ncmFwaHk6IGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeUlucHV0KSxcbiAgICBzcGFjaW5nOiBzcGFjaW5nXG4gIH0sIGRlZXBtZXJnZSh7XG4gICAgc2hhcGU6IHNoYXBlLFxuICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9ucyxcbiAgICB6SW5kZXg6IHpJbmRleFxuICB9LCBvdGhlciwge1xuICAgIGlzTWVyZ2VhYmxlT2JqZWN0OiBpc1BsYWluT2JqZWN0XG4gIH0pKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBwc2V1ZG9DbGFzc2VzID0gWydjaGVja2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ2V4cGFuZGVkJywgJ3NlbGVjdGVkJ107XG5cbiAgICB2YXIgdHJhdmVyc2UgPSBmdW5jdGlvbiB0cmF2ZXJzZShub2RlLCBwYXJlbnRLZXkpIHtcbiAgICAgIHZhciBkZXB0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgICAgIHZhciBrZXk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbm9kZVtrZXldO1xuXG4gICAgICAgIGlmIChkZXB0aCA9PT0gMSkge1xuICAgICAgICAgIGlmIChrZXkuaW5kZXhPZignTXVpJykgPT09IDAgJiYgY2hpbGQpIHtcbiAgICAgICAgICAgIHRyYXZlcnNlKGNoaWxkLCBrZXksIGRlcHRoICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBzZXVkb0NsYXNzZXMuaW5kZXhPZihrZXkpICE9PSAtMSAmJiBPYmplY3Qua2V5cyhjaGlsZCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiB0aGUgYFwiLmNvbmNhdChwYXJlbnRLZXksIFwiYCBjb21wb25lbnQgaW5jcmVhc2VzIFwiKSArIFwidGhlIENTUyBzcGVjaWZpY2l0eSBvZiB0aGUgYFwiLmNvbmNhdChrZXksIFwiYCBpbnRlcm5hbCBzdGF0ZS5cIiksICdZb3UgY2FuIG5vdCBvdmVycmlkZSBpdCBsaWtlIHRoaXM6ICcsIEpTT04uc3RyaW5naWZ5KG5vZGUsIG51bGwsIDIpLCAnJywgJ0luc3RlYWQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgJHJ1bGVOYW1lIHN5bnRheDonLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHJvb3Q6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCImJFwiLmNvbmNhdChrZXkpLCBjaGlsZClcbiAgICAgICAgICAgIH0sIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL3IvcHNldWRvLWNsYXNzZXMtZ3VpZGUnXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfSAvLyBSZW1vdmUgdGhlIHN0eWxlIHRvIHByZXZlbnQgZ2xvYmFsIGNvbmZsaWN0cy5cblxuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdHJhdmVyc2UobXVpVGhlbWUub3ZlcnJpZGVzKTtcbiAgfVxuXG4gIHJldHVybiBtdWlUaGVtZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTXVpVGhlbWU7IiwiaW1wb3J0IGNyZWF0ZU11aVRoZW1lIGZyb20gJy4vY3JlYXRlTXVpVGhlbWUnO1xudmFyIGRlZmF1bHRUaGVtZSA9IGNyZWF0ZU11aVRoZW1lKCk7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWU7IiwidmFyIHdhcm5PbmNlO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3BhY2luZygpIHtcbiAgdmFyIHNwYWNpbmdJbnB1dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogODtcblxuICAvLyBBbHJlYWR5IHRyYW5zZm9ybWVkLlxuICBpZiAoc3BhY2luZ0lucHV0Lm11aSkge1xuICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gIH0gLy8gQWxsIGNvbXBvbmVudHMgYWxpZ24gdG8gYW4gOGRwIHNxdWFyZSBiYXNlbGluZSBncmlkIGZvciBtb2JpbGUsIHRhYmxldCwgYW5kIGRlc2t0b3AuXG4gIC8vIGh0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL2xheW91dC91bmRlcnN0YW5kaW5nLWxheW91dC5odG1sI3BpeGVsLWRlbnNpdHlcblxuXG4gIHZhciB0cmFuc2Zvcm07XG5cbiAgaWYgKHR5cGVvZiBzcGFjaW5nSW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0cmFuc2Zvcm0gPSBzcGFjaW5nSW5wdXQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2Ygc3BhY2luZ0lucHV0ICE9PSAnbnVtYmVyJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiB0aGUgYHRoZW1lLnNwYWNpbmdgIHZhbHVlIChcIi5jb25jYXQoc3BhY2luZ0lucHV0LCBcIikgaXMgaW52YWxpZC5cIiksICdJdCBzaG91bGQgYmUgYSBudW1iZXIgb3IgYSBmdW5jdGlvbi4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtKGZhY3Rvcikge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmYWN0b3IgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIkV4cGVjdGVkIHNwYWNpbmcgYXJndW1lbnQgdG8gYmUgYSBudW1iZXIsIGdvdCBcIi5jb25jYXQoZmFjdG9yKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNwYWNpbmdJbnB1dCAqIGZhY3RvcjtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHNwYWNpbmcgPSBmdW5jdGlvbiBzcGFjaW5nKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCEoYXJncy5sZW5ndGggPD0gNCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBUb28gbWFueSBhcmd1bWVudHMgcHJvdmlkZWQsIGV4cGVjdGVkIGJldHdlZW4gMCBhbmQgNCwgZ290IFwiLmNvbmNhdChhcmdzLmxlbmd0aCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybSgxKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm0oYXJnc1swXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZ3MubWFwKGZ1bmN0aW9uIChmYWN0b3IpIHtcbiAgICAgIHZhciBvdXRwdXQgPSB0cmFuc2Zvcm0oZmFjdG9yKTtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3V0cHV0ID09PSAnbnVtYmVyJyA/IFwiXCIuY29uY2F0KG91dHB1dCwgXCJweFwiKSA6IG91dHB1dDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH07IC8vIEJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRvIHJlbW92ZSBpbiB2NS5cblxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzcGFjaW5nLCAndW5pdCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghd2Fybk9uY2UgfHwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogdGhlbWUuc3BhY2luZy51bml0IHVzYWdlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuJywgJ0l0IHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4nLCAnWW91IGNhbiByZXBsYWNlIGB0aGVtZS5zcGFjaW5nLnVuaXQgKiB5YCB3aXRoIGB0aGVtZS5zcGFjaW5nKHkpYC4nLCAnJywgJ1lvdSBjYW4gdXNlIHRoZSBgaHR0cHM6Ly9naXRodWIuY29tL211aS1vcmcvbWF0ZXJpYWwtdWkvdHJlZS9tYXN0ZXIvcGFja2FnZXMvbWF0ZXJpYWwtdWktY29kZW1vZC9SRUFETUUubWQjdGhlbWUtc3BhY2luZy1hcGlgIG1pZ3JhdGlvbiBoZWxwZXIgdG8gbWFrZSB0aGUgcHJvY2VzcyBzbW9vdGhlci4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cblxuICAgICAgICB3YXJuT25jZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzcGFjaW5nSW5wdXQ7XG4gICAgfVxuICB9KTtcbiAgc3BhY2luZy5tdWkgPSB0cnVlO1xuICByZXR1cm4gc3BhY2luZztcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufSIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBidWlsdGluRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcblxuIC8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmICh0eXBlb2YgZXhlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG4gIH1cbiAgcmV0dXJuIGJ1aWx0aW5FeGVjLmNhbGwoUiwgUyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmV4ZWMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcblxudmFyIFNQRUNJRVMgPSB3a3MoJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDIgJiYgcmVzdWx0WzBdID09PSAnYScgJiYgcmVzdWx0WzFdID09PSAnYic7XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCA/ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgIH1cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pIDogdW5kZWZpbmVkO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxuICApIHtcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XG4gICAgdmFyIGZucyA9IGV4ZWMoXG4gICAgICBkZWZpbmVkLFxuICAgICAgU1lNQk9MLFxuICAgICAgJydbS0VZXSxcbiAgICAgIGZ1bmN0aW9uIG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcbiAgICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAgIC8vIFRoZSBuYXRpdmUgU3RyaW5nIG1ldGhvZCBhbHJlYWR5IGRlbGVnYXRlcyB0byBAQG1ldGhvZCAodGhpc1xuICAgICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVSZWdFeHBNZXRob2QuY2FsbChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XG4gICAgICB9XG4gICAgKTtcbiAgICB2YXIgc3RyZm4gPSBmbnNbMF07XG4gICAgdmFyIHJ4Zm4gPSBmbnNbMV07XG5cbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBLID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGxcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIGRlbGV0ZSByZXF1aXJlKCcuL19nbG9iYWwnKVtLXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIEEgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIEFbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IGZyb206IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwRm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwRm4gPSBhcmd1bWVudHNbMV07XG4gICAgdmFyIG1hcHBpbmcsIEEsIG4sIGNiO1xuICAgIGFGdW5jdGlvbih0aGlzKTtcbiAgICBtYXBwaW5nID0gbWFwRm4gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAobWFwcGluZykgYUZ1bmN0aW9uKG1hcEZuKTtcbiAgICBpZiAoc291cmNlID09IHVuZGVmaW5lZCkgcmV0dXJuIG5ldyB0aGlzKCk7XG4gICAgQSA9IFtdO1xuICAgIGlmIChtYXBwaW5nKSB7XG4gICAgICBuID0gMDtcbiAgICAgIGNiID0gY3R4KG1hcEZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XG4gICAgICAgIEEucHVzaChjYihuZXh0SXRlbSwgbisrKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgQS5wdXNoLCBBKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xuICB9IH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiaW1wb3J0IGFycmF5V2l0aG91dEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aG91dEhvbGVzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheVwiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn0iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImh0bWwsIGJvZHl7XFxyXFxuICAgIG1hcmdpbjogMHB4O1xcclxcbiAgICBwYWRkaW5nOjBweDtcXHJcXG59XFxyXFxuXFxyXFxuI3Jvb3Quc2VsZWN0ZWQgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2Om50aC1jaGlsZCgyKSA+IGRpdixcXHJcXG4jcm9vdC5zZWxlY3RlZCA+IGRpdjpudGgtY2hpbGQoMikgPiBkaXY6bnRoLWNoaWxkKDEpIHtcXHJcXG4gICAgZGlzcGxheTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuI3Jvb3QgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2Om50aC1jaGlsZCgyKSA+IGRpdi5mdWxsc2NyZWVuIHtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxufVxcclxcblxcclxcblxcclxcbiNyb290ID4gZGl2Om50aC1jaGlsZCgyKSA+IGRpdjpudGgtY2hpbGQoMikgPiBkaXY6bnRoLWNoaWxkKG4rMikgPiBkaXYge1xcclxcbiAgICB6LWluZGV4OiA5OTk7XFxyXFxuICAgIG9wYWNpdHk6IDE7XFxyXFxuICAgIHRyYW5zaXRpb246IG9wYWNpdHkgMS41cztcXHJcXG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDEuNXM7XFxyXFxuXFxyXFxuICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMS41cztcXHJcXG4gICAgLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IDEuNXM7XFxyXFxufVxcclxcblxcclxcbkBrZXlmcmFtZXMgc25hY2tiYXIge1xcclxcbiAgICBmcm9tIHtiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTt9XFxyXFxuICAgIHRvIHtiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoODQsIDE1OSwgMTkxKTt9XFxyXFxufVxcclxcbkAtd2Via2l0LWtleWZyYW1lcyBzbmFja2JhciB7XFxyXFxuICAgIGZyb20ge2JhY2tncm91bmQtY29sb3I6IHdoaXRlO31cXHJcXG4gICAgdG8ge2JhY2tncm91bmQtY29sb3I6IHJnYig4NCwgMTU5LCAxOTEpO31cXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuI3Jvb3QgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2Om50aC1jaGlsZCgyKSA+IGRpdjpmaXJzdC1jaGlsZCB7XFxyXFxuICAgIHBhZGRpbmc6IDAuNWVtIDFlbTtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB6LWluZGV4OiA5OTk5O1xcclxcbiAgICB0b3A6IDBweDtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IC0xNnB4O1xcclxcbn1cXHJcXG4jcm9vdCA+IGRpdjpudGgtY2hpbGQoMikgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2OmZpcnN0LWNoaWxkID4gZGl2OmZpcnN0LWNoaWxkIHtcXHJcXG4gICAgaGVpZ2h0OiA0NXB4O1xcclxcbn1cXHJcXG4jcm9vdCA+IGRpdjpudGgtY2hpbGQoMikgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2OmZpcnN0LWNoaWxkIGlucHV0IHtcXHJcXG4gICAgaGVpZ2h0OiAzM3B4O1xcclxcbn1cIiwgXCJcIl0pO1xuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlwiLCBcIlwiXSk7XG5cbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0c0xvb3NlOyIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xuICB2YXIgJGFicyA9IE1hdGguYWJzKHgpO1xuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnJlcXVpcmUoJy4vX2V4cG9ydCcpKHtcbiAgdGFyZ2V0OiAnUmVnRXhwJyxcbiAgcHJvdG86IHRydWUsXG4gIGZvcmNlZDogcmVnZXhwRXhlYyAhPT0gLy4vLmV4ZWNcbn0sIHtcbiAgZXhlYzogcmVnZXhwRXhlY1xufSk7XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0laRSA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICB2YXIgZW50cnk7XG4gIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgIGlmIChlbnRyeS5rID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wKSBlbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubjtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYgKHRoYXQuX2YgPT0gZW50cnkpIHRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICB2YXIgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDLCBOQU1FLCBJU19NQVApIHtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGtpbmQgPSB0aGF0Ll9rO1xuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBlYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKTtcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgSVNfSUUxMSA9ICFnbG9iYWwuQWN0aXZlWE9iamVjdCAmJiAnQWN0aXZlWE9iamVjdCcgaW4gZ2xvYmFsO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGdldFdlYWsgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhaztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbnZhciAkaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG52YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAodGhhdCkge1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ09QTi5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBpc0VudW0uY2FsbChPLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgaWYgKGNsYXNzb2YodGhpcykgIT0gTkFNRSkgdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcbiAgICByZXR1cm4gZnJvbSh0aGlzKTtcbiAgfTtcbn07XG4iLCJ2YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlciwgSVRFUkFUT1IpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IHggIT0geFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dExvdyAhPSBvdXRMb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxuICApIHJldHVybiBOYU47XG4gIGlmICh4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkpIHJldHVybiB4O1xuICByZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93O1xufTtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgLy8gT25seSBOb2RlLkpTIGhhcyBhIHByb2Nlc3MgdmFyaWFibGUgdGhhdCBpcyBvZiBbW0NsYXNzXV0gcHJvY2Vzc1xuICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdXRpbHMuZm9yRWFjaChbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXSwgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXSwgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdtYXhDb250ZW50TGVuZ3RoJyxcbiAgICAndmFsaWRhdGVTdGF0dXMnLCAnbWF4UmVkaXJlY3RzJywgJ2h0dHBBZ2VudCcsICdodHRwc0FnZW50JywgJ2NhbmNlbFRva2VuJyxcbiAgICAnc29ja2V0UGF0aCdcbiAgXSwgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiAnQG1lZGlhICcgKyBpdGVtWzJdICsgJ3snICsgY29udGVudCArICd9JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBtb2R1bGVzW2ldOyAvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG4gICAgICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuICAgICAgLy8gd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuICAgICAgLy8gSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXG4gICAgICBpZiAoaXRlbVswXSA9PSBudWxsIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSAnKCcgKyBpdGVtWzJdICsgJykgYW5kICgnICsgbWVkaWFRdWVyeSArICcpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJztcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcbiAgcmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucykge1xuICB2YXIgc3R5bGVzID0gW107XG4gIHZhciBuZXdTdHlsZXMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNzcyA9IGl0ZW1bMV07XG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXTtcbiAgICB2YXIgc291cmNlTWFwID0gaXRlbVszXTtcbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGNzczogY3NzLFxuICAgICAgbWVkaWE6IG1lZGlhLFxuICAgICAgc291cmNlTWFwOiBzb3VyY2VNYXBcbiAgICB9O1xuXG4gICAgaWYgKCFuZXdTdHlsZXNbaWRdKSB7XG4gICAgICBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIHBhcnRzOiBbcGFydF1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV07XG4gICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG4gICAgdmFyIGogPSAwO1xuXG4gICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICBkb21TdHlsZS5yZWZzKys7XG5cbiAgICAgIGZvciAoOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnRzID0gW107XG5cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7XG4gICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICByZWZzOiAxLFxuICAgICAgICBwYXJ0czogcGFydHNcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgb3B0aW9ucy5hdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMob3B0aW9ucy5hdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBvcHRpb25zLmF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5hdHRyaWJ1dGVzID0gdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ29iamVjdCcgPyBvcHRpb25zLmF0dHJpYnV0ZXMgOiB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICB2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuICBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICB2YXIgbWF5UmVtb3ZlID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV07XG4gICAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuICAgICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICAgIGRvbVN0eWxlLnJlZnMtLTtcbiAgICAgICAgbWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdMaXN0KSB7XG4gICAgICB2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgICAgYWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbWF5UmVtb3ZlLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9kb21TdHlsZSA9IG1heVJlbW92ZVtfaV07XG5cbiAgICAgIGlmIChfZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IF9kb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIF9kb21TdHlsZS5wYXJ0c1tqXSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW19kb21TdHlsZS5pZF07XG4gICAgICB9XG4gICAgfVxuICB9O1xufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/dChleHBvcnRzKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV4cG9ydHNcIl0sdCk6dChlLnJlZHV4TG9nZ2VyPWUucmVkdXhMb2dnZXJ8fHt9KX0odGhpcyxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUsdCl7ZS5zdXBlcl89dCxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSxlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KX1mdW5jdGlvbiByKGUsdCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJraW5kXCIse3ZhbHVlOmUsZW51bWVyYWJsZTohMH0pLHQmJnQubGVuZ3RoJiZPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBhdGhcIix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwfSl9ZnVuY3Rpb24gbihlLHQscil7bi5zdXBlcl8uY2FsbCh0aGlzLFwiRVwiLGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibGhzXCIse3ZhbHVlOnQsZW51bWVyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicmhzXCIse3ZhbHVlOnIsZW51bWVyYWJsZTohMH0pfWZ1bmN0aW9uIG8oZSx0KXtvLnN1cGVyXy5jYWxsKHRoaXMsXCJOXCIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJyaHNcIix7dmFsdWU6dCxlbnVtZXJhYmxlOiEwfSl9ZnVuY3Rpb24gaShlLHQpe2kuc3VwZXJfLmNhbGwodGhpcyxcIkRcIixlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImxoc1wiLHt2YWx1ZTp0LGVudW1lcmFibGU6ITB9KX1mdW5jdGlvbiBhKGUsdCxyKXthLnN1cGVyXy5jYWxsKHRoaXMsXCJBXCIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJpbmRleFwiLHt2YWx1ZTp0LGVudW1lcmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIml0ZW1cIix7dmFsdWU6cixlbnVtZXJhYmxlOiEwfSl9ZnVuY3Rpb24gZihlLHQscil7dmFyIG49ZS5zbGljZSgocnx8dCkrMXx8ZS5sZW5ndGgpO3JldHVybiBlLmxlbmd0aD10PDA/ZS5sZW5ndGgrdDp0LGUucHVzaC5hcHBseShlLG4pLGV9ZnVuY3Rpb24gdShlKXt2YXIgdD1cInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOk4oZSk7cmV0dXJuXCJvYmplY3RcIiE9PXQ/dDplPT09TWF0aD9cIm1hdGhcIjpudWxsPT09ZT9cIm51bGxcIjpBcnJheS5pc0FycmF5KGUpP1wiYXJyYXlcIjpcIltvYmplY3QgRGF0ZV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKT9cImRhdGVcIjpcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnRvU3RyaW5nJiYvXlxcLy4qXFwvLy50ZXN0KGUudG9TdHJpbmcoKSk/XCJyZWdleHBcIjpcIm9iamVjdFwifWZ1bmN0aW9uIGwoZSx0LHIsYyxzLGQscCl7cz1zfHxbXSxwPXB8fFtdO3ZhciBnPXMuc2xpY2UoMCk7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGQpe2lmKGMpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGMmJmMoZyxkKSlyZXR1cm47aWYoXCJvYmplY3RcIj09PShcInVuZGVmaW5lZFwiPT10eXBlb2YgYz9cInVuZGVmaW5lZFwiOk4oYykpKXtpZihjLnByZWZpbHRlciYmYy5wcmVmaWx0ZXIoZyxkKSlyZXR1cm47aWYoYy5ub3JtYWxpemUpe3ZhciBoPWMubm9ybWFsaXplKGcsZCxlLHQpO2gmJihlPWhbMF0sdD1oWzFdKX19fWcucHVzaChkKX1cInJlZ2V4cFwiPT09dShlKSYmXCJyZWdleHBcIj09PXUodCkmJihlPWUudG9TdHJpbmcoKSx0PXQudG9TdHJpbmcoKSk7dmFyIHk9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpOKGUpLHY9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHQ/XCJ1bmRlZmluZWRcIjpOKHQpLGI9XCJ1bmRlZmluZWRcIiE9PXl8fHAmJnBbcC5sZW5ndGgtMV0ubGhzJiZwW3AubGVuZ3RoLTFdLmxocy5oYXNPd25Qcm9wZXJ0eShkKSxtPVwidW5kZWZpbmVkXCIhPT12fHxwJiZwW3AubGVuZ3RoLTFdLnJocyYmcFtwLmxlbmd0aC0xXS5yaHMuaGFzT3duUHJvcGVydHkoZCk7aWYoIWImJm0pcihuZXcgbyhnLHQpKTtlbHNlIGlmKCFtJiZiKXIobmV3IGkoZyxlKSk7ZWxzZSBpZih1KGUpIT09dSh0KSlyKG5ldyBuKGcsZSx0KSk7ZWxzZSBpZihcImRhdGVcIj09PXUoZSkmJmUtdCE9PTApcihuZXcgbihnLGUsdCkpO2Vsc2UgaWYoXCJvYmplY3RcIj09PXkmJm51bGwhPT1lJiZudWxsIT09dClpZihwLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdC5saHM9PT1lfSkubGVuZ3RoKWUhPT10JiZyKG5ldyBuKGcsZSx0KSk7ZWxzZXtpZihwLnB1c2goe2xoczplLHJoczp0fSksQXJyYXkuaXNBcnJheShlKSl7dmFyIHc7ZS5sZW5ndGg7Zm9yKHc9MDt3PGUubGVuZ3RoO3crKyl3Pj10Lmxlbmd0aD9yKG5ldyBhKGcsdyxuZXcgaSh2b2lkIDAsZVt3XSkpKTpsKGVbd10sdFt3XSxyLGMsZyx3LHApO2Zvcig7dzx0Lmxlbmd0aDspcihuZXcgYShnLHcsbmV3IG8odm9pZCAwLHRbdysrXSkpKX1lbHNle3ZhciB4PU9iamVjdC5rZXlzKGUpLFM9T2JqZWN0LmtleXModCk7eC5mb3JFYWNoKGZ1bmN0aW9uKG4sbyl7dmFyIGk9Uy5pbmRleE9mKG4pO2k+PTA/KGwoZVtuXSx0W25dLHIsYyxnLG4scCksUz1mKFMsaSkpOmwoZVtuXSx2b2lkIDAscixjLGcsbixwKX0pLFMuZm9yRWFjaChmdW5jdGlvbihlKXtsKHZvaWQgMCx0W2VdLHIsYyxnLGUscCl9KX1wLmxlbmd0aD1wLmxlbmd0aC0xfWVsc2UgZSE9PXQmJihcIm51bWJlclwiPT09eSYmaXNOYU4oZSkmJmlzTmFOKHQpfHxyKG5ldyBuKGcsZSx0KSkpfWZ1bmN0aW9uIGMoZSx0LHIsbil7cmV0dXJuIG49bnx8W10sbChlLHQsZnVuY3Rpb24oZSl7ZSYmbi5wdXNoKGUpfSxyKSxuLmxlbmd0aD9uOnZvaWQgMH1mdW5jdGlvbiBzKGUsdCxyKXtpZihyLnBhdGgmJnIucGF0aC5sZW5ndGgpe3ZhciBuLG89ZVt0XSxpPXIucGF0aC5sZW5ndGgtMTtmb3Iobj0wO248aTtuKyspbz1vW3IucGF0aFtuXV07c3dpdGNoKHIua2luZCl7Y2FzZVwiQVwiOnMob1tyLnBhdGhbbl1dLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6ZGVsZXRlIG9bci5wYXRoW25dXTticmVhaztjYXNlXCJFXCI6Y2FzZVwiTlwiOm9bci5wYXRoW25dXT1yLnJoc319ZWxzZSBzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cyhlW3RdLHIuaW5kZXgsci5pdGVtKTticmVhaztjYXNlXCJEXCI6ZT1mKGUsdCk7YnJlYWs7Y2FzZVwiRVwiOmNhc2VcIk5cIjplW3RdPXIucmhzfXJldHVybiBlfWZ1bmN0aW9uIGQoZSx0LHIpe2lmKGUmJnQmJnImJnIua2luZCl7Zm9yKHZhciBuPWUsbz0tMSxpPXIucGF0aD9yLnBhdGgubGVuZ3RoLTE6MDsrK288aTspXCJ1bmRlZmluZWRcIj09dHlwZW9mIG5bci5wYXRoW29dXSYmKG5bci5wYXRoW29dXT1cIm51bWJlclwiPT10eXBlb2Ygci5wYXRoW29dP1tdOnt9KSxuPW5bci5wYXRoW29dXTtzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cyhyLnBhdGg/bltyLnBhdGhbb11dOm4sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjpkZWxldGUgbltyLnBhdGhbb11dO2JyZWFrO2Nhc2VcIkVcIjpjYXNlXCJOXCI6bltyLnBhdGhbb11dPXIucmhzfX19ZnVuY3Rpb24gcChlLHQscil7aWYoci5wYXRoJiZyLnBhdGgubGVuZ3RoKXt2YXIgbixvPWVbdF0saT1yLnBhdGgubGVuZ3RoLTE7Zm9yKG49MDtuPGk7bisrKW89b1tyLnBhdGhbbl1dO3N3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpwKG9bci5wYXRoW25dXSxyLmluZGV4LHIuaXRlbSk7YnJlYWs7Y2FzZVwiRFwiOm9bci5wYXRoW25dXT1yLmxoczticmVhaztjYXNlXCJFXCI6b1tyLnBhdGhbbl1dPXIubGhzO2JyZWFrO2Nhc2VcIk5cIjpkZWxldGUgb1tyLnBhdGhbbl1dfX1lbHNlIHN3aXRjaChyLmtpbmQpe2Nhc2VcIkFcIjpwKGVbdF0sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjplW3RdPXIubGhzO2JyZWFrO2Nhc2VcIkVcIjplW3RdPXIubGhzO2JyZWFrO2Nhc2VcIk5cIjplPWYoZSx0KX1yZXR1cm4gZX1mdW5jdGlvbiBnKGUsdCxyKXtpZihlJiZ0JiZyJiZyLmtpbmQpe3ZhciBuLG8saT1lO2ZvcihvPXIucGF0aC5sZW5ndGgtMSxuPTA7bjxvO24rKylcInVuZGVmaW5lZFwiPT10eXBlb2YgaVtyLnBhdGhbbl1dJiYoaVtyLnBhdGhbbl1dPXt9KSxpPWlbci5wYXRoW25dXTtzd2l0Y2goci5raW5kKXtjYXNlXCJBXCI6cChpW3IucGF0aFtuXV0sci5pbmRleCxyLml0ZW0pO2JyZWFrO2Nhc2VcIkRcIjppW3IucGF0aFtuXV09ci5saHM7YnJlYWs7Y2FzZVwiRVwiOmlbci5wYXRoW25dXT1yLmxoczticmVhaztjYXNlXCJOXCI6ZGVsZXRlIGlbci5wYXRoW25dXX19fWZ1bmN0aW9uIGgoZSx0LHIpe2lmKGUmJnQpe3ZhciBuPWZ1bmN0aW9uKG4pe3ImJiFyKGUsdCxuKXx8ZChlLHQsbil9O2woZSx0LG4pfX1mdW5jdGlvbiB5KGUpe3JldHVyblwiY29sb3I6IFwiK0ZbZV0uY29sb3IrXCI7IGZvbnQtd2VpZ2h0OiBib2xkXCJ9ZnVuY3Rpb24gdihlKXt2YXIgdD1lLmtpbmQscj1lLnBhdGgsbj1lLmxocyxvPWUucmhzLGk9ZS5pbmRleCxhPWUuaXRlbTtzd2l0Y2godCl7Y2FzZVwiRVwiOnJldHVybltyLmpvaW4oXCIuXCIpLG4sXCLihpJcIixvXTtjYXNlXCJOXCI6cmV0dXJuW3Iuam9pbihcIi5cIiksb107Y2FzZVwiRFwiOnJldHVybltyLmpvaW4oXCIuXCIpXTtjYXNlXCJBXCI6cmV0dXJuW3Iuam9pbihcIi5cIikrXCJbXCIraStcIl1cIixhXTtkZWZhdWx0OnJldHVybltdfX1mdW5jdGlvbiBiKGUsdCxyLG4pe3ZhciBvPWMoZSx0KTt0cnl7bj9yLmdyb3VwQ29sbGFwc2VkKFwiZGlmZlwiKTpyLmdyb3VwKFwiZGlmZlwiKX1jYXRjaChlKXtyLmxvZyhcImRpZmZcIil9bz9vLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9ZS5raW5kLG49dihlKTtyLmxvZy5hcHBseShyLFtcIiVjIFwiK0ZbdF0udGV4dCx5KHQpXS5jb25jYXQoUChuKSkpfSk6ci5sb2coXCLigJTigJQgbm8gZGlmZiDigJTigJRcIik7dHJ5e3IuZ3JvdXBFbmQoKX1jYXRjaChlKXtyLmxvZyhcIuKAlOKAlCBkaWZmIGVuZCDigJTigJQgXCIpfX1mdW5jdGlvbiBtKGUsdCxyLG4pe3N3aXRjaChcInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOk4oZSkpe2Nhc2VcIm9iamVjdFwiOnJldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGVbbl0/ZVtuXS5hcHBseShlLFAocikpOmVbbl07Y2FzZVwiZnVuY3Rpb25cIjpyZXR1cm4gZSh0KTtkZWZhdWx0OnJldHVybiBlfX1mdW5jdGlvbiB3KGUpe3ZhciB0PWUudGltZXN0YW1wLHI9ZS5kdXJhdGlvbjtyZXR1cm4gZnVuY3Rpb24oZSxuLG8pe3ZhciBpPVtcImFjdGlvblwiXTtyZXR1cm4gaS5wdXNoKFwiJWNcIitTdHJpbmcoZS50eXBlKSksdCYmaS5wdXNoKFwiJWNAIFwiK24pLHImJmkucHVzaChcIiVjKGluIFwiK28udG9GaXhlZCgyKStcIiBtcylcIiksaS5qb2luKFwiIFwiKX19ZnVuY3Rpb24geChlLHQpe3ZhciByPXQubG9nZ2VyLG49dC5hY3Rpb25UcmFuc2Zvcm1lcixvPXQudGl0bGVGb3JtYXR0ZXIsaT12b2lkIDA9PT1vP3codCk6byxhPXQuY29sbGFwc2VkLGY9dC5jb2xvcnMsdT10LmxldmVsLGw9dC5kaWZmLGM9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHQudGl0bGVGb3JtYXR0ZXI7ZS5mb3JFYWNoKGZ1bmN0aW9uKG8scyl7dmFyIGQ9by5zdGFydGVkLHA9by5zdGFydGVkVGltZSxnPW8uYWN0aW9uLGg9by5wcmV2U3RhdGUseT1vLmVycm9yLHY9by50b29rLHc9by5uZXh0U3RhdGUseD1lW3MrMV07eCYmKHc9eC5wcmV2U3RhdGUsdj14LnN0YXJ0ZWQtZCk7dmFyIFM9bihnKSxrPVwiZnVuY3Rpb25cIj09dHlwZW9mIGE/YShmdW5jdGlvbigpe3JldHVybiB3fSxnLG8pOmEsaj1EKHApLEU9Zi50aXRsZT9cImNvbG9yOiBcIitmLnRpdGxlKFMpK1wiO1wiOlwiXCIsQT1bXCJjb2xvcjogZ3JheTsgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XCJdO0EucHVzaChFKSx0LnRpbWVzdGFtcCYmQS5wdXNoKFwiY29sb3I6IGdyYXk7IGZvbnQtd2VpZ2h0OiBsaWdodGVyO1wiKSx0LmR1cmF0aW9uJiZBLnB1c2goXCJjb2xvcjogZ3JheTsgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XCIpO3ZhciBPPWkoUyxqLHYpO3RyeXtrP2YudGl0bGUmJmM/ci5ncm91cENvbGxhcHNlZC5hcHBseShyLFtcIiVjIFwiK09dLmNvbmNhdChBKSk6ci5ncm91cENvbGxhcHNlZChPKTpmLnRpdGxlJiZjP3IuZ3JvdXAuYXBwbHkocixbXCIlYyBcIitPXS5jb25jYXQoQSkpOnIuZ3JvdXAoTyl9Y2F0Y2goZSl7ci5sb2coTyl9dmFyIE49bSh1LFMsW2hdLFwicHJldlN0YXRlXCIpLFA9bSh1LFMsW1NdLFwiYWN0aW9uXCIpLEM9bSh1LFMsW3ksaF0sXCJlcnJvclwiKSxGPW0odSxTLFt3XSxcIm5leHRTdGF0ZVwiKTtpZihOKWlmKGYucHJldlN0YXRlKXt2YXIgTD1cImNvbG9yOiBcIitmLnByZXZTdGF0ZShoKStcIjsgZm9udC13ZWlnaHQ6IGJvbGRcIjtyW05dKFwiJWMgcHJldiBzdGF0ZVwiLEwsaCl9ZWxzZSByW05dKFwicHJldiBzdGF0ZVwiLGgpO2lmKFApaWYoZi5hY3Rpb24pe3ZhciBUPVwiY29sb3I6IFwiK2YuYWN0aW9uKFMpK1wiOyBmb250LXdlaWdodDogYm9sZFwiO3JbUF0oXCIlYyBhY3Rpb24gICAgXCIsVCxTKX1lbHNlIHJbUF0oXCJhY3Rpb24gICAgXCIsUyk7aWYoeSYmQylpZihmLmVycm9yKXt2YXIgTT1cImNvbG9yOiBcIitmLmVycm9yKHksaCkrXCI7IGZvbnQtd2VpZ2h0OiBib2xkO1wiO3JbQ10oXCIlYyBlcnJvciAgICAgXCIsTSx5KX1lbHNlIHJbQ10oXCJlcnJvciAgICAgXCIseSk7aWYoRilpZihmLm5leHRTdGF0ZSl7dmFyIF89XCJjb2xvcjogXCIrZi5uZXh0U3RhdGUodykrXCI7IGZvbnQtd2VpZ2h0OiBib2xkXCI7cltGXShcIiVjIG5leHQgc3RhdGVcIixfLHcpfWVsc2UgcltGXShcIm5leHQgc3RhdGVcIix3KTtsJiZiKGgsdyxyLGspO3RyeXtyLmdyb3VwRW5kKCl9Y2F0Y2goZSl7ci5sb2coXCLigJTigJQgbG9nIGVuZCDigJTigJRcIil9fSl9ZnVuY3Rpb24gUygpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSx0PU9iamVjdC5hc3NpZ24oe30sTCxlKSxyPXQubG9nZ2VyLG49dC5zdGF0ZVRyYW5zZm9ybWVyLG89dC5lcnJvclRyYW5zZm9ybWVyLGk9dC5wcmVkaWNhdGUsYT10LmxvZ0Vycm9ycyxmPXQuZGlmZlByZWRpY2F0ZTtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgcilyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlKHQpfX19O2lmKGUuZ2V0U3RhdGUmJmUuZGlzcGF0Y2gpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJbcmVkdXgtbG9nZ2VyXSByZWR1eC1sb2dnZXIgbm90IGluc3RhbGxlZC4gTWFrZSBzdXJlIHRvIHBhc3MgbG9nZ2VyIGluc3RhbmNlIGFzIG1pZGRsZXdhcmU6XFxuLy8gTG9nZ2VyIHdpdGggZGVmYXVsdCBvcHRpb25zXFxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAncmVkdXgtbG9nZ2VyJ1xcbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXFxuICByZWR1Y2VyLFxcbiAgYXBwbHlNaWRkbGV3YXJlKGxvZ2dlcilcXG4pXFxuLy8gT3IgeW91IGNhbiBjcmVhdGUgeW91ciBvd24gbG9nZ2VyIHdpdGggY3VzdG9tIG9wdGlvbnMgaHR0cDovL2JpdC5seS9yZWR1eC1sb2dnZXItb3B0aW9uc1xcbmltcG9ydCBjcmVhdGVMb2dnZXIgZnJvbSAncmVkdXgtbG9nZ2VyJ1xcbmNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcih7XFxuICAvLyAuLi5vcHRpb25zXFxufSk7XFxuY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcXG4gIHJlZHVjZXIsXFxuICBhcHBseU1pZGRsZXdhcmUobG9nZ2VyKVxcbilcXG5cIiksZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBlKHQpfX19O3ZhciB1PVtdO3JldHVybiBmdW5jdGlvbihlKXt2YXIgcj1lLmdldFN0YXRlO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24obCl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgaSYmIWkocixsKSlyZXR1cm4gZShsKTt2YXIgYz17fTt1LnB1c2goYyksYy5zdGFydGVkPU8ubm93KCksYy5zdGFydGVkVGltZT1uZXcgRGF0ZSxjLnByZXZTdGF0ZT1uKHIoKSksYy5hY3Rpb249bDt2YXIgcz12b2lkIDA7aWYoYSl0cnl7cz1lKGwpfWNhdGNoKGUpe2MuZXJyb3I9byhlKX1lbHNlIHM9ZShsKTtjLnRvb2s9Ty5ub3coKS1jLnN0YXJ0ZWQsYy5uZXh0U3RhdGU9bihyKCkpO3ZhciBkPXQuZGlmZiYmXCJmdW5jdGlvblwiPT10eXBlb2YgZj9mKHIsbCk6dC5kaWZmO2lmKHgodSxPYmplY3QuYXNzaWduKHt9LHQse2RpZmY6ZH0pKSx1Lmxlbmd0aD0wLGMuZXJyb3IpdGhyb3cgYy5lcnJvcjtyZXR1cm4gc319fX12YXIgayxqLEU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IEFycmF5KHQrMSkuam9pbihlKX0sQT1mdW5jdGlvbihlLHQpe3JldHVybiBFKFwiMFwiLHQtZS50b1N0cmluZygpLmxlbmd0aCkrZX0sRD1mdW5jdGlvbihlKXtyZXR1cm4gQShlLmdldEhvdXJzKCksMikrXCI6XCIrQShlLmdldE1pbnV0ZXMoKSwyKStcIjpcIitBKGUuZ2V0U2Vjb25kcygpLDIpK1wiLlwiK0EoZS5nZXRNaWxsaXNlY29uZHMoKSwzKX0sTz1cInVuZGVmaW5lZFwiIT10eXBlb2YgcGVyZm9ybWFuY2UmJm51bGwhPT1wZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgcGVyZm9ybWFuY2Uubm93P3BlcmZvcm1hbmNlOkRhdGUsTj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxQPWZ1bmN0aW9uKGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgdD0wLHI9QXJyYXkoZS5sZW5ndGgpO3Q8ZS5sZW5ndGg7dCsrKXJbdF09ZVt0XTtyZXR1cm4gcn1yZXR1cm4gQXJyYXkuZnJvbShlKX0sQz1bXTtrPVwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGdsb2JhbD9cInVuZGVmaW5lZFwiOk4oZ2xvYmFsKSkmJmdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30saj1rLkRlZXBEaWZmLGomJkMucHVzaChmdW5jdGlvbigpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBqJiZrLkRlZXBEaWZmPT09YyYmKGsuRGVlcERpZmY9aixqPXZvaWQgMCl9KSx0KG4sciksdChvLHIpLHQoaSxyKSx0KGEsciksT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoYyx7ZGlmZjp7dmFsdWU6YyxlbnVtZXJhYmxlOiEwfSxvYnNlcnZhYmxlRGlmZjp7dmFsdWU6bCxlbnVtZXJhYmxlOiEwfSxhcHBseURpZmY6e3ZhbHVlOmgsZW51bWVyYWJsZTohMH0sYXBwbHlDaGFuZ2U6e3ZhbHVlOmQsZW51bWVyYWJsZTohMH0scmV2ZXJ0Q2hhbmdlOnt2YWx1ZTpnLGVudW1lcmFibGU6ITB9LGlzQ29uZmxpY3Q6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGp9LGVudW1lcmFibGU6ITB9LG5vQ29uZmxpY3Q6e3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIEMmJihDLmZvckVhY2goZnVuY3Rpb24oZSl7ZSgpfSksQz1udWxsKSxjfSxlbnVtZXJhYmxlOiEwfX0pO3ZhciBGPXtFOntjb2xvcjpcIiMyMTk2RjNcIix0ZXh0OlwiQ0hBTkdFRDpcIn0sTjp7Y29sb3I6XCIjNENBRjUwXCIsdGV4dDpcIkFEREVEOlwifSxEOntjb2xvcjpcIiNGNDQzMzZcIix0ZXh0OlwiREVMRVRFRDpcIn0sQTp7Y29sb3I6XCIjMjE5NkYzXCIsdGV4dDpcIkFSUkFZOlwifX0sTD17bGV2ZWw6XCJsb2dcIixsb2dnZXI6Y29uc29sZSxsb2dFcnJvcnM6ITAsY29sbGFwc2VkOnZvaWQgMCxwcmVkaWNhdGU6dm9pZCAwLGR1cmF0aW9uOiExLHRpbWVzdGFtcDohMCxzdGF0ZVRyYW5zZm9ybWVyOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxhY3Rpb25UcmFuc2Zvcm1lcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sZXJyb3JUcmFuc2Zvcm1lcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sY29sb3JzOnt0aXRsZTpmdW5jdGlvbigpe3JldHVyblwiaW5oZXJpdFwifSxwcmV2U3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm5cIiM5RTlFOUVcIn0sYWN0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuXCIjMDNBOUY0XCJ9LG5leHRTdGF0ZTpmdW5jdGlvbigpe3JldHVyblwiIzRDQUY1MFwifSxlcnJvcjpmdW5jdGlvbigpe3JldHVyblwiI0YyMDQwNFwifX0sZGlmZjohMSxkaWZmUHJlZGljYXRlOnZvaWQgMCx0cmFuc2Zvcm1lcjp2b2lkIDB9LFQ9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30sdD1lLmRpc3BhdGNoLHI9ZS5nZXRTdGF0ZTtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiB0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiByP1MoKSh7ZGlzcGF0Y2g6dCxnZXRTdGF0ZTpyfSk6dm9pZCBjb25zb2xlLmVycm9yKFwiXFxuW3JlZHV4LWxvZ2dlciB2M10gQlJFQUtJTkcgQ0hBTkdFXFxuW3JlZHV4LWxvZ2dlciB2M10gU2luY2UgMy4wLjAgcmVkdXgtbG9nZ2VyIGV4cG9ydHMgYnkgZGVmYXVsdCBsb2dnZXIgd2l0aCBkZWZhdWx0IHNldHRpbmdzLlxcbltyZWR1eC1sb2dnZXIgdjNdIENoYW5nZVxcbltyZWR1eC1sb2dnZXIgdjNdIGltcG9ydCBjcmVhdGVMb2dnZXIgZnJvbSAncmVkdXgtbG9nZ2VyJ1xcbltyZWR1eC1sb2dnZXIgdjNdIHRvXFxuW3JlZHV4LWxvZ2dlciB2M10gaW1wb3J0IHsgY3JlYXRlTG9nZ2VyIH0gZnJvbSAncmVkdXgtbG9nZ2VyJ1xcblwiKX07ZS5kZWZhdWx0cz1MLGUuY3JlYXRlTG9nZ2VyPVMsZS5sb2dnZXI9VCxlLmRlZmF1bHQ9VCxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0pO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufSIsIi8qKiFcbiAqIEBmaWxlT3ZlcnZpZXcgS2lja2FzcyBsaWJyYXJ5IHRvIGNyZWF0ZSBhbmQgcGxhY2UgcG9wcGVycyBuZWFyIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50cy5cbiAqIEB2ZXJzaW9uIDEuMTYuMFxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBGZWRlcmljbyBaaXZvbG8gYW5kIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgdGltZW91dER1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbG9uZ2VyVGltZW91dEJyb3dzZXJzID0gWydFZGdlJywgJ1RyaWRlbnQnLCAnRmlyZWZveCddO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChpc0Jyb3dzZXIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKGxvbmdlclRpbWVvdXRCcm93c2Vyc1tpXSkgPj0gMCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufSgpO1xuXG5mdW5jdGlvbiBtaWNyb3Rhc2tEZWJvdW5jZShmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5Qcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgZm4oKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNjaGVkdWxlZCkge1xuICAgICAgc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XG4gICAgfVxuICB9O1xufVxuXG52YXIgc3VwcG9ydHNNaWNyb1Rhc2tzID0gaXNCcm93c2VyICYmIHdpbmRvdy5Qcm9taXNlO1xuXG4vKipcbiogQ3JlYXRlIGEgZGVib3VuY2VkIHZlcnNpb24gb2YgYSBtZXRob2QsIHRoYXQncyBhc3luY2hyb25vdXNseSBkZWZlcnJlZFxuKiBidXQgY2FsbGVkIGluIHRoZSBtaW5pbXVtIHRpbWUgcG9zc2libGUuXG4qXG4qIEBtZXRob2RcbiogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuKiBAYXJndW1lbnQge0Z1bmN0aW9ufSBmblxuKiBAcmV0dXJucyB7RnVuY3Rpb259XG4qL1xudmFyIGRlYm91bmNlID0gc3VwcG9ydHNNaWNyb1Rhc2tzID8gbWljcm90YXNrRGVib3VuY2UgOiB0YXNrRGVib3VuY2U7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgdmFyIGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBHZXQgQ1NTIGNvbXB1dGVkIHByb3BlcnR5IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCBwcm9wZXJ0eSkge1xuICBpZiAoZWxlbWVudC5ub2RlVHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgY3NzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gIHJldHVybiBwcm9wZXJ0eSA/IGNzc1twcm9wZXJ0eV0gOiBjc3M7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFyZW50Tm9kZSBvciB0aGUgaG9zdCBvZiB0aGUgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50Lmhvc3Q7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc2Nyb2xsaW5nIHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gc2Nyb2xsIHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBSZXR1cm4gYm9keSwgYGdldFNjcm9sbGAgd2lsbCB0YWtlIGNhcmUgdG8gZ2V0IHRoZSBjb3JyZWN0IGBzY3JvbGxUb3BgIGZyb20gaXRcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBzd2l0Y2ggKGVsZW1lbnQubm9kZU5hbWUpIHtcbiAgICBjYXNlICdIVE1MJzpcbiAgICBjYXNlICdCT0RZJzpcbiAgICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgcmV0dXJuIGVsZW1lbnQuYm9keTtcbiAgfVxuXG4gIC8vIEZpcmVmb3ggd2FudCB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuXG4gIHZhciBfZ2V0U3R5bGVDb21wdXRlZFByb3AgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dZO1xuXG4gIGlmICgvKGF1dG98c2Nyb2xsfG92ZXJsYXkpLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByZWZlcmVuY2Ugbm9kZSBvZiB0aGUgcmVmZXJlbmNlIG9iamVjdCwgb3IgdGhlIHJlZmVyZW5jZSBvYmplY3QgaXRzZWxmLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlTm9kZShyZWZlcmVuY2UpIHtcbiAgcmV0dXJuIHJlZmVyZW5jZSAmJiByZWZlcmVuY2UucmVmZXJlbmNlTm9kZSA/IHJlZmVyZW5jZS5yZWZlcmVuY2VOb2RlIDogcmVmZXJlbmNlO1xufVxuXG52YXIgaXNJRTExID0gaXNCcm93c2VyICYmICEhKHdpbmRvdy5NU0lucHV0TWV0aG9kQ29udGV4dCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGlzSUUxMCA9IGlzQnJvd3NlciAmJiAvTVNJRSAxMC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGlzSUVcbiAqL1xuZnVuY3Rpb24gaXNJRSh2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSAxMSkge1xuICAgIHJldHVybiBpc0lFMTE7XG4gIH1cbiAgaWYgKHZlcnNpb24gPT09IDEwKSB7XG4gICAgcmV0dXJuIGlzSUUxMDtcbiAgfVxuICByZXR1cm4gaXNJRTExIHx8IGlzSUUxMDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvZmZzZXQgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICB2YXIgbm9PZmZzZXRQYXJlbnQgPSBpc0lFKDEwKSA/IGRvY3VtZW50LmJvZHkgOiBudWxsO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudCB8fCBudWxsO1xuICAvLyBTa2lwIGhpZGRlbiBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGFuIG9mZnNldFBhcmVudFxuICB3aGlsZSAob2Zmc2V0UGFyZW50ID09PSBub09mZnNldFBhcmVudCAmJiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykge1xuICAgIG9mZnNldFBhcmVudCA9IChlbGVtZW50ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpLm9mZnNldFBhcmVudDtcbiAgfVxuXG4gIHZhciBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFRILCBURCBvciBUQUJMRSBpbiBjYXNlXG4gIC8vIG5vIG9mZnNldFBhcmVudCBpcyBwcmVzZW50LCBJIGhhdGUgdGhpcyBqb2IuLi5cbiAgaWYgKFsnVEgnLCAnVEQnLCAnVEFCTEUnXS5pbmRleE9mKG9mZnNldFBhcmVudC5ub2RlTmFtZSkgIT09IC0xICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQ7XG59XG5cbmZ1bmN0aW9uIGlzT2Zmc2V0Q29udGFpbmVyKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbm9kZU5hbWUgPT09ICdIVE1MJyB8fCBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkgPT09IGVsZW1lbnQ7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIHJvb3Qgbm9kZSAoZG9jdW1lbnQsIHNoYWRvd0RPTSByb290KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcm9vdCBub2RlXG4gKi9cbmZ1bmN0aW9uIGdldFJvb3Qobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGdldFJvb3Qobm9kZS5wYXJlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBvZmZzZXQgcGFyZW50IGNvbW1vbiB0byB0aGUgdHdvIHByb3ZpZGVkIG5vZGVzXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQxXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQyXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gY29tbW9uIG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZWxlbWVudDIpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudDEgfHwgIWVsZW1lbnQxLm5vZGVUeXBlIHx8ICFlbGVtZW50MiB8fCAhZWxlbWVudDIubm9kZVR5cGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gSGVyZSB3ZSBtYWtlIHN1cmUgdG8gZ2l2ZSBhcyBcInN0YXJ0XCIgdGhlIGVsZW1lbnQgdGhhdCBjb21lcyBmaXJzdCBpbiB0aGUgRE9NXG4gIHZhciBvcmRlciA9IGVsZW1lbnQxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGVsZW1lbnQyKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HO1xuICB2YXIgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7XG4gIHZhciBlbmQgPSBvcmRlciA/IGVsZW1lbnQyIDogZWxlbWVudDE7XG5cbiAgLy8gR2V0IGNvbW1vbiBhbmNlc3RvciBjb250YWluZXJcbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnQsIDApO1xuICByYW5nZS5zZXRFbmQoZW5kLCAwKTtcbiAgdmFyIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG5cbiAgLy8gQm90aCBub2RlcyBhcmUgaW5zaWRlICNkb2N1bWVudFxuXG4gIGlmIChlbGVtZW50MSAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgJiYgZWxlbWVudDIgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIHx8IHN0YXJ0LmNvbnRhaW5zKGVuZCkpIHtcbiAgICBpZiAoaXNPZmZzZXRDb250YWluZXIoY29tbW9uQW5jZXN0b3JDb250YWluZXIpKSB7XG4gICAgICByZXR1cm4gY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChjb21tb25BbmNlc3RvckNvbnRhaW5lcik7XG4gIH1cblxuICAvLyBvbmUgb2YgdGhlIG5vZGVzIGlzIGluc2lkZSBzaGFkb3dET00sIGZpbmQgd2hpY2ggb25lXG4gIHZhciBlbGVtZW50MXJvb3QgPSBnZXRSb290KGVsZW1lbnQxKTtcbiAgaWYgKGVsZW1lbnQxcm9vdC5ob3N0KSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDFyb290Lmhvc3QsIGVsZW1lbnQyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZ2V0Um9vdChlbGVtZW50MikuaG9zdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQgaW4gdGhlIGdpdmVuIHNpZGUgKHRvcCBhbmQgbGVmdClcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHNpZGUgYHRvcGAgb3IgYGxlZnRgXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbW91bnQgb2Ygc2Nyb2xsZWQgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbChlbGVtZW50KSB7XG4gIHZhciBzaWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAndG9wJztcblxuICB2YXIgdXBwZXJTaWRlID0gc2lkZSA9PT0gJ3RvcCcgPyAnc2Nyb2xsVG9wJyA6ICdzY3JvbGxMZWZ0JztcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciBzY3JvbGxpbmdFbGVtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgaHRtbDtcbiAgICByZXR1cm4gc2Nyb2xsaW5nRWxlbWVudFt1cHBlclNpZGVdO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRbdXBwZXJTaWRlXTtcbn1cblxuLypcbiAqIFN1bSBvciBzdWJ0cmFjdCB0aGUgZWxlbWVudCBzY3JvbGwgdmFsdWVzIChsZWZ0IGFuZCB0b3ApIGZyb20gYSBnaXZlbiByZWN0IG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHJlY3QgLSBSZWN0IG9iamVjdCB5b3Ugd2FudCB0byBjaGFuZ2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCBmcm9tIHRoZSBmdW5jdGlvbiByZWFkcyB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHBhcmFtIHtCb29sZWFufSBzdWJ0cmFjdCAtIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIHN1YnRyYWN0IHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY3QgLSBUaGUgbW9kaWZpZXIgcmVjdCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gaW5jbHVkZVNjcm9sbChyZWN0LCBlbGVtZW50KSB7XG4gIHZhciBzdWJ0cmFjdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gIHZhciBtb2RpZmllciA9IHN1YnRyYWN0ID8gLTEgOiAxO1xuICByZWN0LnRvcCArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZXR1cm4gcmVjdDtcbn1cblxuLypcbiAqIEhlbHBlciB0byBkZXRlY3QgYm9yZGVycyBvZiBhIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXG4gKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBheGlzIC0gYHhgIG9yIGB5YFxuICogQHJldHVybiB7bnVtYmVyfSBib3JkZXJzIC0gVGhlIGJvcmRlcnMgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXhpc1xuICovXG5cbmZ1bmN0aW9uIGdldEJvcmRlcnNTaXplKHN0eWxlcywgYXhpcykge1xuICB2YXIgc2lkZUEgPSBheGlzID09PSAneCcgPyAnTGVmdCcgOiAnVG9wJztcbiAgdmFyIHNpZGVCID0gc2lkZUEgPT09ICdMZWZ0JyA/ICdSaWdodCcgOiAnQm90dG9tJztcblxuICByZXR1cm4gcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQSArICdXaWR0aCddLCAxMCkgKyBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVCICsgJ1dpZHRoJ10sIDEwKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2l6ZShheGlzLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSB7XG4gIHJldHVybiBNYXRoLm1heChib2R5WydvZmZzZXQnICsgYXhpc10sIGJvZHlbJ3Njcm9sbCcgKyBheGlzXSwgaHRtbFsnY2xpZW50JyArIGF4aXNdLCBodG1sWydvZmZzZXQnICsgYXhpc10sIGh0bWxbJ3Njcm9sbCcgKyBheGlzXSwgaXNJRSgxMCkgPyBwYXJzZUludChodG1sWydvZmZzZXQnICsgYXhpc10pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdUb3AnIDogJ0xlZnQnKV0pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdCb3R0b20nIDogJ1JpZ2h0JyldKSA6IDApO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTaXplcyhkb2N1bWVudCkge1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGlzSUUoMTApICYmIGdldENvbXB1dGVkU3R5bGUoaHRtbCk7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IGdldFNpemUoJ0hlaWdodCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpLFxuICAgIHdpZHRoOiBnZXRTaXplKCdXaWR0aCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpXG4gIH07XG59XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG5cblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBHaXZlbiBlbGVtZW50IG9mZnNldHMsIGdlbmVyYXRlIGFuIG91dHB1dCBzaW1pbGFyIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IG9mZnNldHNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENsaWVudFJlY3QgbGlrZSBvdXRwdXRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdChvZmZzZXRzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb2Zmc2V0cywge1xuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxuICAgIGJvdHRvbTogb2Zmc2V0cy50b3AgKyBvZmZzZXRzLmhlaWdodFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgYm91bmRpbmcgY2xpZW50IHJlY3Qgb2YgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7T2JqZWN0fSBjbGllbnQgcmVjdFxuICovXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IHt9O1xuXG4gIC8vIElFMTAgMTAgRklYOiBQbGVhc2UsIGRvbid0IGFzaywgdGhlIGVsZW1lbnQgaXNuJ3RcbiAgLy8gY29uc2lkZXJlZCBpbiBET00gaW4gc29tZSBjaXJjdW1zdGFuY2VzLi4uXG4gIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTFcbiAgdHJ5IHtcbiAgICBpZiAoaXNJRSgxMCkpIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQ7XG4gICAgICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxuICB9O1xuXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcbiAgdmFyIHNpemVzID0gZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnID8gZ2V0V2luZG93U2l6ZXMoZWxlbWVudC5vd25lckRvY3VtZW50KSA6IHt9O1xuICB2YXIgd2lkdGggPSBzaXplcy53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoIHx8IHJlc3VsdC53aWR0aDtcbiAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuaGVpZ2h0O1xuXG4gIHZhciBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgdmFyIHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcbiAgICB2ZXJ0U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3knKTtcblxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcbiAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7XG4gIH1cblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIGlzSUUxMCA9IGlzSUUoMTApO1xuICB2YXIgaXNIVE1MID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCc7XG4gIHZhciBjaGlsZHJlblJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoY2hpbGRyZW4pO1xuICB2YXIgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGNoaWxkcmVuKTtcblxuICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KHBhcmVudCk7XG4gIHZhciBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlclRvcFdpZHRoLCAxMCk7XG4gIHZhciBib3JkZXJMZWZ0V2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgsIDEwKTtcblxuICAvLyBJbiBjYXNlcyB3aGVyZSB0aGUgcGFyZW50IGlzIGZpeGVkLCB3ZSBtdXN0IGlnbm9yZSBuZWdhdGl2ZSBzY3JvbGwgaW4gb2Zmc2V0IGNhbGNcbiAgaWYgKGZpeGVkUG9zaXRpb24gJiYgaXNIVE1MKSB7XG4gICAgcGFyZW50UmVjdC50b3AgPSBNYXRoLm1heChwYXJlbnRSZWN0LnRvcCwgMCk7XG4gICAgcGFyZW50UmVjdC5sZWZ0ID0gTWF0aC5tYXgocGFyZW50UmVjdC5sZWZ0LCAwKTtcbiAgfVxuICB2YXIgb2Zmc2V0cyA9IGdldENsaWVudFJlY3Qoe1xuICAgIHRvcDogY2hpbGRyZW5SZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wIC0gYm9yZGVyVG9wV2lkdGgsXG4gICAgbGVmdDogY2hpbGRyZW5SZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQgLSBib3JkZXJMZWZ0V2lkdGgsXG4gICAgd2lkdGg6IGNoaWxkcmVuUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IGNoaWxkcmVuUmVjdC5oZWlnaHRcbiAgfSk7XG4gIG9mZnNldHMubWFyZ2luVG9wID0gMDtcbiAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gMDtcblxuICAvLyBTdWJ0cmFjdCBtYXJnaW5zIG9mIGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGl0J3MgYmVpbmcgdXNlZCBhcyBwYXJlbnRcbiAgLy8gd2UgZG8gdGhpcyBvbmx5IG9uIEhUTUwgYmVjYXVzZSBpdCdzIHRoZSBvbmx5IGVsZW1lbnQgdGhhdCBiZWhhdmVzXG4gIC8vIGRpZmZlcmVudGx5IHdoZW4gbWFyZ2lucyBhcmUgYXBwbGllZCB0byBpdC4gVGhlIG1hcmdpbnMgYXJlIGluY2x1ZGVkIGluXG4gIC8vIHRoZSBib3ggb2YgdGhlIGRvY3VtZW50RWxlbWVudCwgaW4gdGhlIG90aGVyIGNhc2VzIG5vdC5cbiAgaWYgKCFpc0lFMTAgJiYgaXNIVE1MKSB7XG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCwgMTApO1xuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCwgMTApO1xuXG4gICAgb2Zmc2V0cy50b3AgLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5ib3R0b20gLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5sZWZ0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG4gICAgb2Zmc2V0cy5yaWdodCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuXG4gICAgLy8gQXR0YWNoIG1hcmdpblRvcCBhbmQgbWFyZ2luTGVmdCBiZWNhdXNlIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyB3ZSBtYXkgbmVlZCB0aGVtXG4gICAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gbWFyZ2luTGVmdDtcbiAgfVxuXG4gIGlmIChpc0lFMTAgJiYgIWZpeGVkUG9zaXRpb24gPyBwYXJlbnQuY29udGFpbnMoc2Nyb2xsUGFyZW50KSA6IHBhcmVudCA9PT0gc2Nyb2xsUGFyZW50ICYmIHNjcm9sbFBhcmVudC5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XG4gICAgb2Zmc2V0cyA9IGluY2x1ZGVTY3JvbGwob2Zmc2V0cywgcGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG5mdW5jdGlvbiBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUoZWxlbWVudCkge1xuICB2YXIgZXhjbHVkZVNjcm9sbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoZWxlbWVudCwgaHRtbCk7XG4gIHZhciB3aWR0aCA9IE1hdGgubWF4KGh0bWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgoaHRtbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcblxuICB2YXIgc2Nyb2xsVG9wID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCkgOiAwO1xuICB2YXIgc2Nyb2xsTGVmdCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwsICdsZWZ0JykgOiAwO1xuXG4gIHZhciBvZmZzZXQgPSB7XG4gICAgdG9wOiBzY3JvbGxUb3AgLSByZWxhdGl2ZU9mZnNldC50b3AgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5Ub3AsXG4gICAgbGVmdDogc2Nyb2xsTGVmdCAtIHJlbGF0aXZlT2Zmc2V0LmxlZnQgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5MZWZ0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KG9mZnNldCk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgZml4ZWQgb3IgaXMgaW5zaWRlIGEgZml4ZWQgcGFyZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gY3VzdG9tQ29udGFpbmVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvIFwiaXNGaXhlZD9cIlxuICovXG5mdW5jdGlvbiBpc0ZpeGVkKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIHBhcmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGlzRml4ZWQocGFyZW50Tm9kZSk7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IHBhcmVudCBvZiBhbiBlbGVtZW50IHRoYXQgaGFzIGEgdHJhbnNmb3JtZWQgcHJvcGVydHkgZGVmaW5lZFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gZmlyc3QgdHJhbnNmb3JtZWQgcGFyZW50IG9yIGRvY3VtZW50RWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LnBhcmVudEVsZW1lbnQgfHwgaXNJRSgpKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICB2YXIgZWwgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIHdoaWxlIChlbCAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWwsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnKSB7XG4gICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBlbCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59XG5cbi8qKlxuICogQ29tcHV0ZWQgdGhlIGJvdW5kYXJpZXMgbGltaXRzIGFuZCByZXR1cm4gdGhlbVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudCAtIEVsZW1lbnQgdXNlZCB0byBkZWZpbmUgdGhlIGJvdW5kYXJpZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZml4ZWRQb3NpdGlvbiAtIElzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGFyaWVzXG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuXG4gIHZhciBib3VuZGFyaWVzID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgZ2V0UmVmZXJlbmNlTm9kZShyZWZlcmVuY2UpKTtcblxuICAvLyBIYW5kbGUgdmlld3BvcnQgY2FzZVxuICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd2aWV3cG9ydCcpIHtcbiAgICBib3VuZGFyaWVzID0gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gSGFuZGxlIG90aGVyIGNhc2VzIGJhc2VkIG9uIERPTSBlbGVtZW50IHVzZWQgYXMgYm91bmRhcmllc1xuICAgIHZhciBib3VuZGFyaWVzTm9kZSA9IHZvaWQgMDtcbiAgICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICdzY3JvbGxQYXJlbnQnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKHJlZmVyZW5jZSkpO1xuICAgICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGJvdW5kYXJpZXNFbGVtZW50O1xuICAgIH1cblxuICAgIHZhciBvZmZzZXRzID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGJvdW5kYXJpZXNOb2RlLCBvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuXG4gICAgLy8gSW4gY2FzZSBvZiBIVE1MLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGNvbXB1dGF0aW9uXG4gICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnSFRNTCcgJiYgIWlzRml4ZWQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgdmFyIF9nZXRXaW5kb3dTaXplcyA9IGdldFdpbmRvd1NpemVzKHBvcHBlci5vd25lckRvY3VtZW50KSxcbiAgICAgICAgICBoZWlnaHQgPSBfZ2V0V2luZG93U2l6ZXMuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoID0gX2dldFdpbmRvd1NpemVzLndpZHRoO1xuXG4gICAgICBib3VuZGFyaWVzLnRvcCArPSBvZmZzZXRzLnRvcCAtIG9mZnNldHMubWFyZ2luVG9wO1xuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcbiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7XG4gICAgICBib3VuZGFyaWVzLnJpZ2h0ID0gd2lkdGggKyBvZmZzZXRzLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZFxuICAgICAgYm91bmRhcmllcyA9IG9mZnNldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmdzXG4gIHBhZGRpbmcgPSBwYWRkaW5nIHx8IDA7XG4gIHZhciBpc1BhZGRpbmdOdW1iZXIgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ251bWJlcic7XG4gIGJvdW5kYXJpZXMubGVmdCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5sZWZ0IHx8IDA7XG4gIGJvdW5kYXJpZXMudG9wICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnRvcCB8fCAwO1xuICBib3VuZGFyaWVzLnJpZ2h0IC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnJpZ2h0IHx8IDA7XG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmJvdHRvbSB8fCAwO1xuXG4gIHJldHVybiBib3VuZGFyaWVzO1xufVxuXG5mdW5jdGlvbiBnZXRBcmVhKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuXG4gIHJldHVybiB3aWR0aCAqIGhlaWdodDtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IHVzZWQgdG8gdHJhbnNmb3JtIHRoZSBgYXV0b2AgcGxhY2VtZW50IHRvIHRoZSBwbGFjZW1lbnQgd2l0aCBtb3JlXG4gKiBhdmFpbGFibGUgc3BhY2UuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChwbGFjZW1lbnQsIHJlZlJlY3QsIHBvcHBlciwgcmVmZXJlbmNlLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgcGFkZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMDtcblxuICBpZiAocGxhY2VtZW50LmluZGV4T2YoJ2F1dG8nKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCk7XG5cbiAgdmFyIHJlY3RzID0ge1xuICAgIHRvcDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlZlJlY3QudG9wIC0gYm91bmRhcmllcy50b3BcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy5yaWdodCAtIHJlZlJlY3QucmlnaHQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmJvdHRvbSAtIHJlZlJlY3QuYm90dG9tXG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICB3aWR0aDogcmVmUmVjdC5sZWZ0IC0gYm91bmRhcmllcy5sZWZ0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH1cbiAgfTtcblxuICB2YXIgc29ydGVkQXJlYXMgPSBPYmplY3Qua2V5cyhyZWN0cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAga2V5OiBrZXlcbiAgICB9LCByZWN0c1trZXldLCB7XG4gICAgICBhcmVhOiBnZXRBcmVhKHJlY3RzW2tleV0pXG4gICAgfSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi5hcmVhIC0gYS5hcmVhO1xuICB9KTtcblxuICB2YXIgZmlsdGVyZWRBcmVhcyA9IHNvcnRlZEFyZWFzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgd2lkdGggPSBfcmVmMi53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gX3JlZjIuaGVpZ2h0O1xuICAgIHJldHVybiB3aWR0aCA+PSBwb3BwZXIuY2xpZW50V2lkdGggJiYgaGVpZ2h0ID49IHBvcHBlci5jbGllbnRIZWlnaHQ7XG4gIH0pO1xuXG4gIHZhciBjb21wdXRlZFBsYWNlbWVudCA9IGZpbHRlcmVkQXJlYXMubGVuZ3RoID4gMCA/IGZpbHRlcmVkQXJlYXNbMF0ua2V5IDogc29ydGVkQXJlYXNbMF0ua2V5O1xuXG4gIHZhciB2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICByZXR1cm4gY29tcHV0ZWRQbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtFbGVtZW50fSBmaXhlZFBvc2l0aW9uIC0gaXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG5cbiAgdmFyIGNvbW1vbk9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgZ2V0UmVmZXJlbmNlTm9kZShyZWZlcmVuY2UpKTtcbiAgcmV0dXJuIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShyZWZlcmVuY2UsIGNvbW1vbk9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvdXRlciBzaXplcyBvZiB0aGUgZ2l2ZW4gZWxlbWVudCAob2Zmc2V0IHNpemUgKyBtYXJnaW5zKVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyB3aWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJTaXplcyhlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Cb3R0b20gfHwgMCk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblJpZ2h0IHx8IDApO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgeFxuICB9O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICB2YXIgaGFzaCA9IHsgbGVmdDogJ3JpZ2h0JywgcmlnaHQ6ICdsZWZ0JywgYm90dG9tOiAndG9wJywgdG9wOiAnYm90dG9tJyB9O1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb24gLSBDU1MgcG9zaXRpb24gdGhlIFBvcHBlciB3aWxsIGdldCBhcHBsaWVkXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzIC0gdGhlIHJlZmVyZW5jZSBvZmZzZXRzICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7U3RyaW5nfSBwbGFjZW1lbnQgLSBvbmUgb2YgdGhlIHZhbGlkIHBsYWNlbWVudCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UG9wcGVyT2Zmc2V0cyhwb3BwZXIsIHJlZmVyZW5jZU9mZnNldHMsIHBsYWNlbWVudCkge1xuICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICAvLyBHZXQgcG9wcGVyIG5vZGUgc2l6ZXNcbiAgdmFyIHBvcHBlclJlY3QgPSBnZXRPdXRlclNpemVzKHBvcHBlcik7XG5cbiAgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdFxuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHtcbiAgICB3aWR0aDogcG9wcGVyUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHBvcHBlclJlY3QuaGVpZ2h0XG4gIH07XG5cbiAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseVxuICB2YXIgaXNIb3JpeiA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBtYWluU2lkZSA9IGlzSG9yaXogPyAndG9wJyA6ICdsZWZ0JztcbiAgdmFyIHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzZWNvbmRhcnlNZWFzdXJlbWVudCA9ICFpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIHBvcHBlck9mZnNldHNbbWFpblNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gKyByZWZlcmVuY2VPZmZzZXRzW21lYXN1cmVtZW50XSAvIDIgLSBwb3BwZXJSZWN0W21lYXN1cmVtZW50XSAvIDI7XG4gIGlmIChwbGFjZW1lbnQgPT09IHNlY29uZGFyeVNpZGUpIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSAtIHBvcHBlclJlY3Rbc2Vjb25kYXJ5TWVhc3VyZW1lbnRdO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTtcbiAgfVxuXG4gIHJldHVybiBwb3BwZXJPZmZzZXRzO1xufVxuXG4vKipcbiAqIE1pbWljcyB0aGUgYGZpbmRgIG1ldGhvZCBvZiBBcnJheVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kKGFyciwgY2hlY2spIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICByZXR1cm4gYXJyLmZpbmQoY2hlY2spO1xuICB9XG5cbiAgLy8gdXNlIGBmaWx0ZXJgIHRvIG9idGFpbiB0aGUgc2FtZSBiZWhhdmlvciBvZiBgZmluZGBcbiAgcmV0dXJuIGFyci5maWx0ZXIoY2hlY2spWzBdO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIGZpbmRJbmRleCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChmdW5jdGlvbiAoY3VyKSB7XG4gICAgICByZXR1cm4gY3VyW3Byb3BdID09PSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHVzZSBgZmluZGAgKyBgaW5kZXhPZmAgaWYgYGZpbmRJbmRleGAgaXNuJ3Qgc3VwcG9ydGVkXG4gIHZhciBtYXRjaCA9IGZpbmQoYXJyLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9ialtwcm9wXSA9PT0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gYXJyLmluZGV4T2YobWF0Y2gpO1xufVxuXG4vKipcbiAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsXG4gKiBlYWNoIG9mIHRoZW0gd2lsbCB0aGVuIGVkaXQgdGhlIGRhdGEgb2JqZWN0LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXJcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fVxuICovXG5mdW5jdGlvbiBydW5Nb2RpZmllcnMobW9kaWZpZXJzLCBkYXRhLCBlbmRzKSB7XG4gIHZhciBtb2RpZmllcnNUb1J1biA9IGVuZHMgPT09IHVuZGVmaW5lZCA/IG1vZGlmaWVycyA6IG1vZGlmaWVycy5zbGljZSgwLCBmaW5kSW5kZXgobW9kaWZpZXJzLCAnbmFtZScsIGVuZHMpKTtcblxuICBtb2RpZmllcnNUb1J1bi5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmIChtb2RpZmllclsnZnVuY3Rpb24nXSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgIGNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTtcbiAgICB9XG4gICAgdmFyIGZuID0gbW9kaWZpZXJbJ2Z1bmN0aW9uJ10gfHwgbW9kaWZpZXIuZm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgaWYgKG1vZGlmaWVyLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihmbikpIHtcbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvIG9mZnNldHMgdG8gbWFrZSB0aGVtIGEgY29tcGxldGUgY2xpZW50UmVjdCBvYmplY3RcbiAgICAgIC8vIHdlIGRvIHRoaXMgYmVmb3JlIGVhY2ggbW9kaWZpZXIgdG8gbWFrZSBzdXJlIHRoZSBwcmV2aW91cyBvbmUgZG9lc24ndFxuICAgICAgLy8gbWVzcyB3aXRoIHRoZXNlIHZhbHVlc1xuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG4gICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucmVmZXJlbmNlKTtcblxuICAgICAgZGF0YSA9IGZuKGRhdGEsIG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIsIGNvbXB1dGluZyB0aGUgbmV3IG9mZnNldHMgYW5kIGFwcGx5aW5nXG4gKiB0aGUgbmV3IHN0eWxlLjxiciAvPlxuICogUHJlZmVyIGBzY2hlZHVsZVVwZGF0ZWAgb3ZlciBgdXBkYXRlYCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgLy8gaWYgcG9wcGVyIGlzIGRlc3Ryb3llZCwgZG9uJ3QgcGVyZm9ybSBhbnkgZnVydGhlciB1cGRhdGVcbiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGF0YSA9IHtcbiAgICBpbnN0YW5jZTogdGhpcyxcbiAgICBzdHlsZXM6IHt9LFxuICAgIGFycm93U3R5bGVzOiB7fSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBmbGlwcGVkOiBmYWxzZSxcbiAgICBvZmZzZXRzOiB7fVxuICB9O1xuXG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyh0aGlzLnN0YXRlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgZGF0YS5wbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudCh0aGlzLm9wdGlvbnMucGxhY2VtZW50LCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIC8vIHN0b3JlIHRoZSBjb21wdXRlZCBwbGFjZW1lbnQgaW5zaWRlIGBvcmlnaW5hbFBsYWNlbWVudGBcbiAgZGF0YS5vcmlnaW5hbFBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuXG4gIGRhdGEucG9zaXRpb25GaXhlZCA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkO1xuXG4gIC8vIGNvbXB1dGUgdGhlIHBvcHBlciBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRQb3BwZXJPZmZzZXRzKHRoaXMucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZSc7XG5cbiAgLy8gcnVuIHRoZSBtb2RpZmllcnNcbiAgZGF0YSA9IHJ1bk1vZGlmaWVycyh0aGlzLm1vZGlmaWVycywgZGF0YSk7XG5cbiAgLy8gdGhlIGZpcnN0IGB1cGRhdGVgIHdpbGwgY2FsbCBgb25DcmVhdGVgIGNhbGxiYWNrXG4gIC8vIHRoZSBvdGhlciBvbmVzIHdpbGwgY2FsbCBgb25VcGRhdGVgIGNhbGxiYWNrXG4gIGlmICghdGhpcy5zdGF0ZS5pc0NyZWF0ZWQpIHtcbiAgICB0aGlzLnN0YXRlLmlzQ3JlYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zLm9uQ3JlYXRlKGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3B0aW9ucy5vblVwZGF0ZShkYXRhKTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgIGVuYWJsZWQgPSBfcmVmLmVuYWJsZWQ7XG4gICAgcmV0dXJuIGVuYWJsZWQgJiYgbmFtZSA9PT0gbW9kaWZpZXJOYW1lO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByZWZpeGVkIHN1cHBvcnRlZCBwcm9wZXJ0eSBuYW1lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHkgKGNhbWVsQ2FzZSlcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHByZWZpeGVkIHByb3BlcnR5IChjYW1lbENhc2Ugb3IgUGFzY2FsQ2FzZSwgZGVwZW5kaW5nIG9uIHRoZSB2ZW5kb3IgcHJlZml4KVxuICovXG5mdW5jdGlvbiBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUocHJvcGVydHkpIHtcbiAgdmFyIHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XG4gIHZhciB1cHBlclByb3AgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgdmFyIHRvQ2hlY2sgPSBwcmVmaXggPyAnJyArIHByZWZpeCArIHVwcGVyUHJvcCA6IHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVt0b0NoZWNrXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0b0NoZWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgcG9wcGVyLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHtcbiAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucmlnaHQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5ib3R0b20gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS53aWxsQ2hhbmdlID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVtb3ZlIHRoZSBwb3BwZXIgaWYgdXNlciBleHBsaWNpdGx5IGFza2VkIGZvciB0aGUgZGVsZXRpb24gb24gZGVzdHJveVxuICAvLyBkbyBub3QgdXNlIGByZW1vdmVgIGJlY2F1c2UgSUUxMSBkb2Vzbid0IHN1cHBvcnQgaXRcbiAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kpIHtcbiAgICB0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHdpbmRvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge1dpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KGVsZW1lbnQpIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn1cblxuZnVuY3Rpb24gYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbFBhcmVudCwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKSB7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQubm9kZU5hbWUgPT09ICdCT0RZJztcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IHNjcm9sbFBhcmVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogc2Nyb2xsUGFyZW50O1xuICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2ssIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICBpZiAoIWlzQm9keSkge1xuICAgIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhnZXRTY3JvbGxQYXJlbnQodGFyZ2V0LnBhcmVudE5vZGUpLCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpO1xuICB9XG4gIHNjcm9sbFBhcmVudHMucHVzaCh0YXJnZXQpO1xufVxuXG4vKipcbiAqIFNldHVwIG5lZWRlZCBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2V0dXBFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIG9wdGlvbnMsIHN0YXRlLCB1cGRhdGVCb3VuZCkge1xuICAvLyBSZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gdXBkYXRlQm91bmQ7XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgLy8gU2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHZhciBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KHJlZmVyZW5jZSk7XG4gIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxFbGVtZW50LCAnc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQsIHN0YXRlLnNjcm9sbFBhcmVudHMpO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gc2Nyb2xsRWxlbWVudDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IHRydWU7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgYWRkIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCBzdGFydCByZWNhbGN1bGF0aW5nXG4gKiBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIXRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIHRoaXMuc3RhdGUgPSBzZXR1cEV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMsIHRoaXMuc3RhdGUsIHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycyhyZWZlcmVuY2UsIHN0YXRlKSB7XG4gIC8vIFJlbW92ZSByZXNpemUgZXZlbnQgbGlzdGVuZXIgb24gd2luZG93XG4gIGdldFdpbmRvdyhyZWZlcmVuY2UpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcblxuICAvLyBSZW1vdmUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIG9uIHNjcm9sbCBwYXJlbnRzXG4gIHN0YXRlLnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kKTtcbiAgfSk7XG5cbiAgLy8gUmVzZXQgc3RhdGVcbiAgc3RhdGUudXBkYXRlQm91bmQgPSBudWxsO1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0gW107XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBudWxsO1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gZmFsc2U7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIHJlbW92ZSByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgd29uJ3QgcmVjYWxjdWxhdGUgcG9wcGVyIHBvc2l0aW9uXG4gKiB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC4gSXQgYWxzbyB3b24ndCB0cmlnZ2VyIGBvblVwZGF0ZWAgY2FsbGJhY2sgYW55bW9yZSxcbiAqIHVubGVzcyB5b3UgY2FsbCBgdXBkYXRlYCBtZXRob2QgbWFudWFsbHkuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCkge1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuc2NoZWR1bGVVcGRhdGUpO1xuICAgIHRoaXMuc3RhdGUgPSByZW1vdmVFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5zdGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBUZWxscyBpZiBhIGdpdmVuIGlucHV0IGlzIGEgbnVtYmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0geyp9IGlucHV0IHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc051bWVyaWMobikge1xuICByZXR1cm4gbiAhPT0gJycgJiYgIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgc3R5bGUgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgc3R5bGUgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbGVtZW50LCBzdHlsZXMpIHtcbiAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHVuaXQgPSAnJztcbiAgICAvLyBhZGQgdW5pdCBpZiB0aGUgdmFsdWUgaXMgbnVtZXJpYyBhbmQgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmdcbiAgICBpZiAoWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10uaW5kZXhPZihwcm9wKSAhPT0gLTEgJiYgaXNOdW1lcmljKHN0eWxlc1twcm9wXSkpIHtcbiAgICAgIHVuaXQgPSAncHgnO1xuICAgIH1cbiAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gc3R5bGVzW3Byb3BdICsgdW5pdDtcbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IHRoZSBhdHRyaWJ1dGVzIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIGF0dHJpYnV0ZXMgdG9cbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBzdHlsZXNcbiAqIE9iamVjdCB3aXRoIGEgbGlzdCBvZiBwcm9wZXJ0aWVzIGFuZCB2YWx1ZXMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlcykge1xuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICBpZiAodmFsdWUgIT09IGZhbHNlKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLnN0eWxlcyAtIExpc3Qgb2Ygc3R5bGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuYXR0cmlidXRlcyAtIExpc3Qgb2YgYXR0cmlidXRlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBzYW1lIGRhdGEgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGUoZGF0YSkge1xuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5zdHlsZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyBpbiB0aGlzIHdheSB3ZSBjYW4gbWFrZSB0aGUgM3JkIHBhcnR5IG1vZGlmaWVycyBhZGQgY3VzdG9tIHN0eWxlcyB0byBpdFxuICAvLyBCZSBhd2FyZSwgbW9kaWZpZXJzIGNvdWxkIG92ZXJyaWRlIHRoZSBwcm9wZXJ0aWVzIGRlZmluZWQgaW4gdGhlIHByZXZpb3VzXG4gIC8vIGxpbmVzIG9mIHRoaXMgbW9kaWZpZXIhXG4gIHNldFN0eWxlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5zdHlsZXMpO1xuXG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLmF0dHJpYnV0ZXNgIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLFxuICAvLyB0aGV5IHdpbGwgYmUgc2V0IGFzIEhUTUwgYXR0cmlidXRlcyBvZiB0aGUgZWxlbWVudFxuICBzZXRBdHRyaWJ1dGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmF0dHJpYnV0ZXMpO1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBkZWZpbmVkIGFuZCBhcnJvd1N0eWxlcyBoYXMgc29tZSBwcm9wZXJ0aWVzXG4gIGlmIChkYXRhLmFycm93RWxlbWVudCAmJiBPYmplY3Qua2V5cyhkYXRhLmFycm93U3R5bGVzKS5sZW5ndGgpIHtcbiAgICBzZXRTdHlsZXMoZGF0YS5hcnJvd0VsZW1lbnQsIGRhdGEuYXJyb3dTdHlsZXMpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogU2V0IHRoZSB4LXBsYWNlbWVudCBhdHRyaWJ1dGUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSBiZWNhdXNlIGl0IGNvdWxkIGJlIHVzZWRcbiAqIHRvIGFkZCBtYXJnaW5zIHRvIHRoZSBwb3BwZXIgbWFyZ2lucyBuZWVkcyB0byBiZSBjYWxjdWxhdGVkIHRvIGdldCB0aGVcbiAqIGNvcnJlY3QgcG9wcGVyIG9mZnNldHMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLm1vZGlmaWVyc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgZWxlbWVudCB1c2VkIGFzIHBvcHBlclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBQb3BwZXIuanMgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlT25Mb2FkKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zLCBtb2RpZmllck9wdGlvbnMsIHN0YXRlKSB7XG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICB2YXIgcmVmZXJlbmNlT2Zmc2V0cyA9IGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICB2YXIgcGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQob3B0aW9ucy5wbGFjZW1lbnQsIHJlZmVyZW5jZU9mZnNldHMsIHBvcHBlciwgcmVmZXJlbmNlLCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCBvcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JywgcGxhY2VtZW50KTtcblxuICAvLyBBcHBseSBgcG9zaXRpb25gIHRvIHBvcHBlciBiZWZvcmUgYW55dGhpbmcgZWxzZSBiZWNhdXNlXG4gIC8vIHdpdGhvdXQgdGhlIHBvc2l0aW9uIGFwcGxpZWQgd2UgY2FuJ3QgZ3VhcmFudGVlIGNvcnJlY3QgY29tcHV0YXRpb25zXG4gIHNldFN0eWxlcyhwb3BwZXIsIHsgcG9zaXRpb246IG9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnIH0pO1xuXG4gIHJldHVybiBvcHRpb25zO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtCb29sZWFufSBzaG91bGRSb3VuZCAtIElmIHRoZSBvZmZzZXRzIHNob3VsZCBiZSByb3VuZGVkIGF0IGFsbFxuICogQHJldHVybnMge09iamVjdH0gVGhlIHBvcHBlcidzIHBvc2l0aW9uIG9mZnNldHMgcm91bmRlZFxuICpcbiAqIFRoZSB0YWxlIG9mIHBpeGVsLXBlcmZlY3QgcG9zaXRpb25pbmcuIEl0J3Mgc3RpbGwgbm90IDEwMCUgcGVyZmVjdCwgYnV0IGFzXG4gKiBnb29kIGFzIGl0IGNhbiBiZSB3aXRoaW4gcmVhc29uLlxuICogRGlzY3Vzc2lvbiBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9wdWxsLzcxNVxuICpcbiAqIExvdyBEUEkgc2NyZWVucyBjYXVzZSBhIHBvcHBlciB0byBiZSBibHVycnkgaWYgbm90IHVzaW5nIGZ1bGwgcGl4ZWxzIChTYWZhcmlcbiAqIGFzIHdlbGwgb24gSGlnaCBEUEkgc2NyZWVucykuXG4gKlxuICogRmlyZWZveCBwcmVmZXJzIG5vIHJvdW5kaW5nIGZvciBwb3NpdGlvbmluZyBhbmQgZG9lcyBub3QgaGF2ZSBibHVycmluZXNzIG9uXG4gKiBoaWdoIERQSSBzY3JlZW5zLlxuICpcbiAqIE9ubHkgaG9yaXpvbnRhbCBwbGFjZW1lbnQgYW5kIGxlZnQvcmlnaHQgdmFsdWVzIG5lZWQgdG8gYmUgY29uc2lkZXJlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgc2hvdWxkUm91bmQpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuICB2YXIgcm91bmQgPSBNYXRoLnJvdW5kLFxuICAgICAgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4gIHZhciBub1JvdW5kID0gZnVuY3Rpb24gbm9Sb3VuZCh2KSB7XG4gICAgcmV0dXJuIHY7XG4gIH07XG5cbiAgdmFyIHJlZmVyZW5jZVdpZHRoID0gcm91bmQocmVmZXJlbmNlLndpZHRoKTtcbiAgdmFyIHBvcHBlcldpZHRoID0gcm91bmQocG9wcGVyLndpZHRoKTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoZGF0YS5wbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIGlzVmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuaW5kZXhPZignLScpICE9PSAtMTtcbiAgdmFyIHNhbWVXaWR0aFBhcml0eSA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gcG9wcGVyV2lkdGggJSAyO1xuICB2YXIgYm90aE9kZFdpZHRoID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSAxICYmIHBvcHBlcldpZHRoICUgMiA9PT0gMTtcblxuICB2YXIgaG9yaXpvbnRhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiBpc1ZlcnRpY2FsIHx8IGlzVmFyaWF0aW9uIHx8IHNhbWVXaWR0aFBhcml0eSA/IHJvdW5kIDogZmxvb3I7XG4gIHZhciB2ZXJ0aWNhbFRvSW50ZWdlciA9ICFzaG91bGRSb3VuZCA/IG5vUm91bmQgOiByb3VuZDtcblxuICByZXR1cm4ge1xuICAgIGxlZnQ6IGhvcml6b250YWxUb0ludGVnZXIoYm90aE9kZFdpZHRoICYmICFpc1ZhcmlhdGlvbiAmJiBzaG91bGRSb3VuZCA/IHBvcHBlci5sZWZ0IC0gMSA6IHBvcHBlci5sZWZ0KSxcbiAgICB0b3A6IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci50b3ApLFxuICAgIGJvdHRvbTogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLmJvdHRvbSksXG4gICAgcmlnaHQ6IGhvcml6b250YWxUb0ludGVnZXIocG9wcGVyLnJpZ2h0KVxuICB9O1xufVxuXG52YXIgaXNGaXJlZm94ID0gaXNCcm93c2VyICYmIC9GaXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVN0eWxlKGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIHggPSBvcHRpb25zLngsXG4gICAgICB5ID0gb3B0aW9ucy55O1xuICB2YXIgcG9wcGVyID0gZGF0YS5vZmZzZXRzLnBvcHBlcjtcblxuICAvLyBSZW1vdmUgdGhpcyBsZWdhY3kgc3VwcG9ydCBpbiBQb3BwZXIuanMgdjJcblxuICB2YXIgbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdhcHBseVN0eWxlJztcbiAgfSkuZ3B1QWNjZWxlcmF0aW9uO1xuICBpZiAobGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhJyk7XG4gIH1cbiAgdmFyIGdwdUFjY2VsZXJhdGlvbiA9IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkID8gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIDogb3B0aW9ucy5ncHVBY2NlbGVyYXRpb247XG5cbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBvZmZzZXRQYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCk7XG5cbiAgLy8gU3R5bGVzXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcG9zaXRpb246IHBvcHBlci5wb3NpdGlvblxuICB9O1xuXG4gIHZhciBvZmZzZXRzID0gZ2V0Um91bmRlZE9mZnNldHMoZGF0YSwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gPCAyIHx8ICFpc0ZpcmVmb3gpO1xuXG4gIHZhciBzaWRlQSA9IHggPT09ICdib3R0b20nID8gJ3RvcCcgOiAnYm90dG9tJztcbiAgdmFyIHNpZGVCID0geSA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cbiAgLy8gaWYgZ3B1QWNjZWxlcmF0aW9uIGlzIHNldCB0byBgdHJ1ZWAgYW5kIHRyYW5zZm9ybSBpcyBzdXBwb3J0ZWQsXG4gIC8vICB3ZSB1c2UgYHRyYW5zbGF0ZTNkYCB0byBhcHBseSB0aGUgcG9zaXRpb24gdG8gdGhlIHBvcHBlciB3ZVxuICAvLyBhdXRvbWF0aWNhbGx5IHVzZSB0aGUgc3VwcG9ydGVkIHByZWZpeGVkIHZlcnNpb24gaWYgbmVlZGVkXG4gIHZhciBwcmVmaXhlZFByb3BlcnR5ID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcblxuICAvLyBub3csIGxldCdzIG1ha2UgYSBzdGVwIGJhY2sgYW5kIGxvb2sgYXQgdGhpcyBjb2RlIGNsb3NlbHkgKHd0Zj8pXG4gIC8vIElmIHRoZSBjb250ZW50IG9mIHRoZSBwb3BwZXIgZ3Jvd3Mgb25jZSBpdCdzIGJlZW4gcG9zaXRpb25lZCwgaXRcbiAgLy8gbWF5IGhhcHBlbiB0aGF0IHRoZSBwb3BwZXIgZ2V0cyBtaXNwbGFjZWQgYmVjYXVzZSBvZiB0aGUgbmV3IGNvbnRlbnRcbiAgLy8gb3ZlcmZsb3dpbmcgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgcHJvdmlkZSB0d28gb3B0aW9ucyAoeCBhbmQgeSksIHdoaWNoIGFsbG93XG4gIC8vIHRoZSBjb25zdW1lciB0byBkZWZpbmUgdGhlIG9mZnNldCBvcmlnaW4uXG4gIC8vIElmIHdlIHBvc2l0aW9uIGEgcG9wcGVyIG9uIHRvcCBvZiBhIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSBjYW4gc2V0XG4gIC8vIGB4YCB0byBgdG9wYCB0byBtYWtlIHRoZSBwb3BwZXIgZ3JvdyB0b3dhcmRzIGl0cyB0b3AgaW5zdGVhZCBvZlxuICAvLyBpdHMgYm90dG9tLlxuICB2YXIgbGVmdCA9IHZvaWQgMCxcbiAgICAgIHRvcCA9IHZvaWQgMDtcbiAgaWYgKHNpZGVBID09PSAnYm90dG9tJykge1xuICAgIC8vIHdoZW4gb2Zmc2V0UGFyZW50IGlzIDxodG1sPiB0aGUgcG9zaXRpb25pbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGJvdHRvbSBvZiB0aGUgc2NyZWVuIChleGNsdWRpbmcgdGhlIHNjcm9sbGJhcilcbiAgICAvLyBhbmQgbm90IHRoZSBib3R0b20gb2YgdGhlIGh0bWwgZWxlbWVudFxuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9wID0gLW9mZnNldFBhcmVudFJlY3QuaGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRvcCA9IG9mZnNldHMudG9wO1xuICB9XG4gIGlmIChzaWRlQiA9PT0gJ3JpZ2h0Jykge1xuICAgIGlmIChvZmZzZXRQYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudFJlY3Qud2lkdGggKyBvZmZzZXRzLnJpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZWZ0ID0gb2Zmc2V0cy5sZWZ0O1xuICB9XG4gIGlmIChncHVBY2NlbGVyYXRpb24gJiYgcHJlZml4ZWRQcm9wZXJ0eSkge1xuICAgIHN0eWxlc1twcmVmaXhlZFByb3BlcnR5XSA9ICd0cmFuc2xhdGUzZCgnICsgbGVmdCArICdweCwgJyArIHRvcCArICdweCwgMCknO1xuICAgIHN0eWxlc1tzaWRlQV0gPSAwO1xuICAgIHN0eWxlc1tzaWRlQl0gPSAwO1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gJ3RyYW5zZm9ybSc7XG4gIH0gZWxzZSB7XG4gICAgLy8gb3Rod2VyaXNlLCB3ZSB1c2UgdGhlIHN0YW5kYXJkIGB0b3BgLCBgbGVmdGAsIGBib3R0b21gIGFuZCBgcmlnaHRgIHByb3BlcnRpZXNcbiAgICB2YXIgaW52ZXJ0VG9wID0gc2lkZUEgPT09ICdib3R0b20nID8gLTEgOiAxO1xuICAgIHZhciBpbnZlcnRMZWZ0ID0gc2lkZUIgPT09ICdyaWdodCcgPyAtMSA6IDE7XG4gICAgc3R5bGVzW3NpZGVBXSA9IHRvcCAqIGludmVydFRvcDtcbiAgICBzdHlsZXNbc2lkZUJdID0gbGVmdCAqIGludmVydExlZnQ7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSBzaWRlQSArICcsICcgKyBzaWRlQjtcbiAgfVxuXG4gIC8vIEF0dHJpYnV0ZXNcbiAgdmFyIGF0dHJpYnV0ZXMgPSB7XG4gICAgJ3gtcGxhY2VtZW50JzogZGF0YS5wbGFjZW1lbnRcbiAgfTtcblxuICAvLyBVcGRhdGUgYGRhdGFgIGF0dHJpYnV0ZXMsIHN0eWxlcyBhbmQgYXJyb3dTdHlsZXNcbiAgZGF0YS5hdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIGRhdGEuYXR0cmlidXRlcyk7XG4gIGRhdGEuc3R5bGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcywgZGF0YS5zdHlsZXMpO1xuICBkYXRhLmFycm93U3R5bGVzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cy5hcnJvdywgZGF0YS5hcnJvd1N0eWxlcyk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgZGVwZW5kcyBmcm9tIGFub3RoZXIgb25lLjxiciAvPlxuICogSXQgY2hlY2tzIGlmIHRoZSBuZWVkZWQgbW9kaWZpZXIgaXMgbGlzdGVkIGFuZCBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzIC0gbGlzdCBvZiBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0aW5nTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGluZyBtb2RpZmllclxuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RlZE5hbWUgLSBuYW1lIG9mIHJlcXVlc3RlZCBtb2RpZmllclxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJSZXF1aXJlZChtb2RpZmllcnMsIHJlcXVlc3RpbmdOYW1lLCByZXF1ZXN0ZWROYW1lKSB7XG4gIHZhciByZXF1ZXN0aW5nID0gZmluZChtb2RpZmllcnMsIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09IHJlcXVlc3RpbmdOYW1lO1xuICB9KTtcblxuICB2YXIgaXNSZXF1aXJlZCA9ICEhcmVxdWVzdGluZyAmJiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gcmVxdWVzdGVkTmFtZSAmJiBtb2RpZmllci5lbmFibGVkICYmIG1vZGlmaWVyLm9yZGVyIDwgcmVxdWVzdGluZy5vcmRlcjtcbiAgfSk7XG5cbiAgaWYgKCFpc1JlcXVpcmVkKSB7XG4gICAgdmFyIF9yZXF1ZXN0aW5nID0gJ2AnICsgcmVxdWVzdGluZ05hbWUgKyAnYCc7XG4gICAgdmFyIHJlcXVlc3RlZCA9ICdgJyArIHJlcXVlc3RlZE5hbWUgKyAnYCc7XG4gICAgY29uc29sZS53YXJuKHJlcXVlc3RlZCArICcgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJyArIF9yZXF1ZXN0aW5nICsgJyBtb2RpZmllciBpbiBvcmRlciB0byB3b3JrLCBiZSBzdXJlIHRvIGluY2x1ZGUgaXQgYmVmb3JlICcgKyBfcmVxdWVzdGluZyArICchJyk7XG4gIH1cbiAgcmV0dXJuIGlzUmVxdWlyZWQ7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBhcnJvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzJGFycm93O1xuXG4gIC8vIGFycm93IGRlcGVuZHMgb24ga2VlcFRvZ2V0aGVyIGluIG9yZGVyIHRvIHdvcmtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdhcnJvdycsICdrZWVwVG9nZXRoZXInKSkge1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGFycm93RWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudDtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgYSBzdHJpbmcsIHN1cHBvc2UgaXQncyBhIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgbm90IGZvdW5kLCBkb24ndCBydW4gdGhlIG1vZGlmaWVyXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB0aGUgYXJyb3dFbGVtZW50IGlzbid0IGEgcXVlcnkgc2VsZWN0b3Igd2UgbXVzdCBjaGVjayB0aGF0IHRoZVxuICAgIC8vIHByb3ZpZGVkIERPTSBub2RlIGlzIGNoaWxkIG9mIGl0cyBwb3BwZXIgbm9kZVxuICAgIGlmICghZGF0YS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgYXJyb3cuZWxlbWVudGAgbXVzdCBiZSBjaGlsZCBvZiBpdHMgcG9wcGVyIGVsZW1lbnQhJyk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNpZGVDYXBpdGFsaXplZCA9IGlzVmVydGljYWwgPyAnVG9wJyA6ICdMZWZ0JztcbiAgdmFyIHNpZGUgPSBzaWRlQ2FwaXRhbGl6ZWQudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGFsdFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2JvdHRvbScgOiAncmlnaHQnO1xuICB2YXIgYXJyb3dFbGVtZW50U2l6ZSA9IGdldE91dGVyU2l6ZXMoYXJyb3dFbGVtZW50KVtsZW5dO1xuXG4gIC8vXG4gIC8vIGV4dGVuZHMga2VlcFRvZ2V0aGVyIGJlaGF2aW9yIG1ha2luZyBzdXJlIHRoZSBwb3BwZXIgYW5kIGl0c1xuICAvLyByZWZlcmVuY2UgaGF2ZSBlbm91Z2ggcGl4ZWxzIGluIGNvbmp1bmN0aW9uXG4gIC8vXG5cbiAgLy8gdG9wL2xlZnQgc2lkZVxuICBpZiAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplIDwgcG9wcGVyW3NpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtPSBwb3BwZXJbc2lkZV0gLSAocmVmZXJlbmNlW29wU2lkZV0gLSBhcnJvd0VsZW1lbnRTaXplKTtcbiAgfVxuICAvLyBib3R0b20vcmlnaHQgc2lkZVxuICBpZiAocmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSA+IHBvcHBlcltvcFNpZGVdKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSArPSByZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplIC0gcG9wcGVyW29wU2lkZV07XG4gIH1cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG5cbiAgLy8gY29tcHV0ZSBjZW50ZXIgb2YgdGhlIHBvcHBlclxuICB2YXIgY2VudGVyID0gcmVmZXJlbmNlW3NpZGVdICsgcmVmZXJlbmNlW2xlbl0gLyAyIC0gYXJyb3dFbGVtZW50U2l6ZSAvIDI7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgc2lkZVZhbHVlIHVzaW5nIHRoZSB1cGRhdGVkIHBvcHBlciBvZmZzZXRzXG4gIC8vIHRha2UgcG9wcGVyIG1hcmdpbiBpbiBhY2NvdW50IGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSB0aGlzIGluZm8gYXZhaWxhYmxlXG4gIHZhciBjc3MgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgcG9wcGVyTWFyZ2luU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydtYXJnaW4nICsgc2lkZUNhcGl0YWxpemVkXSwgMTApO1xuICB2YXIgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydib3JkZXInICsgc2lkZUNhcGl0YWxpemVkICsgJ1dpZHRoJ10sIDEwKTtcbiAgdmFyIHNpZGVWYWx1ZSA9IGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0gKF9kYXRhJG9mZnNldHMkYXJyb3cgPSB7fSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgc2lkZSwgTWF0aC5yb3VuZChzaWRlVmFsdWUpKSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgYWx0U2lkZSwgJycpLCBfZGF0YSRvZmZzZXRzJGFycm93KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGFjY2VwdGVkIHBsYWNlbWVudHMgdG8gdXNlIGFzIHZhbHVlcyBvZiB0aGUgYHBsYWNlbWVudGAgb3B0aW9uLjxiciAvPlxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XG4gKiAtIGBhdXRvYFxuICogLSBgdG9wYFxuICogLSBgcmlnaHRgXG4gKiAtIGBib3R0b21gXG4gKiAtIGBsZWZ0YFxuICpcbiAqIEVhY2ggcGxhY2VtZW50IGNhbiBoYXZlIGEgdmFyaWF0aW9uIGZyb20gdGhpcyBsaXN0OlxuICogLSBgLXN0YXJ0YFxuICogLSBgLWVuZGBcbiAqXG4gKiBWYXJpYXRpb25zIGFyZSBpbnRlcnByZXRlZCBlYXNpbHkgaWYgeW91IHRoaW5rIG9mIHRoZW0gYXMgdGhlIGxlZnQgdG8gcmlnaHRcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcbiAqIGlzIHJpZ2h0LjxiciAvPlxuICogVmVydGljYWxseSAoYGxlZnRgIGFuZCBgcmlnaHRgKSwgYHN0YXJ0YCBpcyB0b3AgYW5kIGBlbmRgIGlzIGJvdHRvbS5cbiAqXG4gKiBTb21lIHZhbGlkIGV4YW1wbGVzIGFyZTpcbiAqIC0gYHRvcC1lbmRgIChvbiB0b3Agb2YgcmVmZXJlbmNlLCByaWdodCBhbGlnbmVkKVxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxuICogLSBgYm90dG9tYCAob24gYm90dG9tLCBjZW50ZXJlZClcbiAqIC0gYGF1dG8tZW5kYCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICAgIC8vIGZsaXBzIHZhcmlhdGlvbiBpZiByZWZlcmVuY2UgZWxlbWVudCBvdmVyZmxvd3MgYm91bmRhcmllc1xuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uQnlSZWYgPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnMgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0xlZnQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1JpZ2h0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NUb3AgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NCb3R0b20pO1xuXG4gICAgLy8gZmxpcHMgdmFyaWF0aW9uIGlmIHBvcHBlciBjb250ZW50IG92ZXJmbG93cyBib3VuZGFyaWVzXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQgPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NMZWZ0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NCb3R0b20gfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NUb3ApO1xuXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb24gPSBmbGlwcGVkVmFyaWF0aW9uQnlSZWYgfHwgZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudDtcblxuICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzIHx8IGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgIC8vIHRoaXMgYm9vbGVhbiB0byBkZXRlY3QgYW55IGZsaXAgbG9vcFxuICAgICAgZGF0YS5mbGlwcGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gZmxpcE9yZGVyW2luZGV4ICsgMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAgIHZhcmlhdGlvbiA9IGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGRhdGEucGxhY2VtZW50ID0gcGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcblxuICAgICAgLy8gdGhpcyBvYmplY3QgY29udGFpbnMgYHBvc2l0aW9uYCwgd2Ugd2FudCB0byBwcmVzZXJ2ZSBpdCBhbG9uZyB3aXRoXG4gICAgICAvLyBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0eSB3ZSBtYXkgYWRkIGluIHRoZSBmdXR1cmVcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLnBvcHBlciwgZ2V0UG9wcGVyT2Zmc2V0cyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpKTtcblxuICAgICAgZGF0YSA9IHJ1bk1vZGlmaWVycyhkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZGF0YSwgJ2ZsaXAnKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGtlZXBUb2dldGhlcihkYXRhKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAncmlnaHQnIDogJ2JvdHRvbSc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgaWYgKHBvcHBlcltzaWRlXSA8IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSAtIHBvcHBlclttZWFzdXJlbWVudF07XG4gIH1cbiAgaWYgKHBvcHBlcltvcFNpZGVdID4gZmxvb3IocmVmZXJlbmNlW3NpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtzaWRlXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBjb250YWluaW5nIHZhbHVlICsgdW5pdCBpbnRvIGEgcHggdmFsdWUgbnVtYmVyXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gc3RyIC0gVmFsdWUgKyB1bml0IHN0cmluZ1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IG1lYXN1cmVtZW50IC0gYGhlaWdodGAgb3IgYHdpZHRoYFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAcmV0dXJucyB7TnVtYmVyfFN0cmluZ31cbiAqIFZhbHVlIGluIHBpeGVscywgb3Igb3JpZ2luYWwgc3RyaW5nIGlmIG5vIHZhbHVlcyB3ZXJlIGV4dHJhY3RlZFxuICovXG5mdW5jdGlvbiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpIHtcbiAgLy8gc2VwYXJhdGUgdmFsdWUgZnJvbSB1bml0XG4gIHZhciBzcGxpdCA9IHN0ci5tYXRjaCgvKCg/OlxcLXxcXCspP1xcZCpcXC4/XFxkKikoLiopLyk7XG4gIHZhciB2YWx1ZSA9ICtzcGxpdFsxXTtcbiAgdmFyIHVuaXQgPSBzcGxpdFsyXTtcblxuICAvLyBJZiBpdCdzIG5vdCBhIG51bWJlciBpdCdzIGFuIG9wZXJhdG9yLCBJIGd1ZXNzXG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgaWYgKHVuaXQuaW5kZXhPZignJScpID09PSAwKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB2b2lkIDA7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICclcCc6XG4gICAgICAgIGVsZW1lbnQgPSBwb3BwZXJPZmZzZXRzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyUnOlxuICAgICAgY2FzZSAnJXInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZWxlbWVudCA9IHJlZmVyZW5jZU9mZnNldHM7XG4gICAgfVxuXG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0KGVsZW1lbnQpO1xuICAgIHJldHVybiByZWN0W21lYXN1cmVtZW50XSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2UgaWYgKHVuaXQgPT09ICd2aCcgfHwgdW5pdCA9PT0gJ3Z3Jykge1xuICAgIC8vIGlmIGlzIGEgdmggb3IgdncsIHdlIGNhbGN1bGF0ZSB0aGUgc2l6ZSBiYXNlZCBvbiB0aGUgdmlld3BvcnRcbiAgICB2YXIgc2l6ZSA9IHZvaWQgMDtcbiAgICBpZiAodW5pdCA9PT0gJ3ZoJykge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gICAgfVxuICAgIHJldHVybiBzaXplIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgaXMgYW4gZXhwbGljaXQgcGl4ZWwgdW5pdCwgd2UgZ2V0IHJpZCBvZiB0aGUgdW5pdCBhbmQga2VlcCB0aGUgdmFsdWVcbiAgICAvLyBpZiBpcyBhbiBpbXBsaWNpdCB1bml0LCBpdCdzIHB4LCBhbmQgd2UgcmV0dXJuIGp1c3QgdGhlIHZhbHVlXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYW4gYG9mZnNldGAgc3RyaW5nIHRvIGV4dHJhcG9sYXRlIGB4YCBhbmQgYHlgIG51bWVyaWMgb2Zmc2V0cy5cbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBvZmZzZXRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IGJhc2VQbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtBcnJheX0gYSB0d28gY2VsbHMgYXJyYXkgd2l0aCB4IGFuZCB5IG9mZnNldHMgaW4gbnVtYmVyc1xuICovXG5mdW5jdGlvbiBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMsIGJhc2VQbGFjZW1lbnQpIHtcbiAgdmFyIG9mZnNldHMgPSBbMCwgMF07XG5cbiAgLy8gVXNlIGhlaWdodCBpZiBwbGFjZW1lbnQgaXMgbGVmdCBvciByaWdodCBhbmQgaW5kZXggaXMgMCBvdGhlcndpc2UgdXNlIHdpZHRoXG4gIC8vIGluIHRoaXMgd2F5IHRoZSBmaXJzdCBvZmZzZXQgd2lsbCB1c2UgYW4gYXhpcyBhbmQgdGhlIHNlY29uZCBvbmVcbiAgLy8gd2lsbCB1c2UgdGhlIG90aGVyIG9uZVxuICB2YXIgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgLy8gU3BsaXQgdGhlIG9mZnNldCBzdHJpbmcgdG8gb2J0YWluIGEgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzXG4gIC8vIFRoZSByZWdleCBhZGRyZXNzZXMgdmFsdWVzIHdpdGggdGhlIHBsdXMgb3IgbWludXMgc2lnbiBpbiBmcm9udCAoKzEwLCAtMjAsIGV0YylcbiAgdmFyIGZyYWdtZW50cyA9IG9mZnNldC5zcGxpdCgvKFxcK3xcXC0pLykubWFwKGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcudHJpbSgpO1xuICB9KTtcblxuICAvLyBEZXRlY3QgaWYgdGhlIG9mZnNldCBzdHJpbmcgY29udGFpbnMgYSBwYWlyIG9mIHZhbHVlcyBvciBhIHNpbmdsZSBvbmVcbiAgLy8gdGhleSBjb3VsZCBiZSBzZXBhcmF0ZWQgYnkgY29tbWEgb3Igc3BhY2VcbiAgdmFyIGRpdmlkZXIgPSBmcmFnbWVudHMuaW5kZXhPZihmaW5kKGZyYWdtZW50cywgZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy5zZWFyY2goLyx8XFxzLykgIT09IC0xO1xuICB9KSk7XG5cbiAgaWYgKGZyYWdtZW50c1tkaXZpZGVyXSAmJiBmcmFnbWVudHNbZGl2aWRlcl0uaW5kZXhPZignLCcpID09PSAtMSkge1xuICAgIGNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpO1xuICB9XG5cbiAgLy8gSWYgZGl2aWRlciBpcyBmb3VuZCwgd2UgZGl2aWRlIHRoZSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMgdG8gZGl2aWRlXG4gIC8vIHRoZW0gYnkgb2ZzZXQgWCBhbmQgWS5cbiAgdmFyIHNwbGl0UmVnZXggPSAvXFxzKixcXHMqfFxccysvO1xuICB2YXIgb3BzID0gZGl2aWRlciAhPT0gLTEgPyBbZnJhZ21lbnRzLnNsaWNlKDAsIGRpdmlkZXIpLmNvbmNhdChbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzBdXSksIFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMV1dLmNvbmNhdChmcmFnbWVudHMuc2xpY2UoZGl2aWRlciArIDEpKV0gOiBbZnJhZ21lbnRzXTtcblxuICAvLyBDb252ZXJ0IHRoZSB2YWx1ZXMgd2l0aCB1bml0cyB0byBhYnNvbHV0ZSBwaXhlbHMgdG8gYWxsb3cgb3VyIGNvbXB1dGF0aW9uc1xuICBvcHMgPSBvcHMubWFwKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICAvLyBNb3N0IG9mIHRoZSB1bml0cyByZWx5IG9uIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgcG9wcGVyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gKGluZGV4ID09PSAxID8gIXVzZUhlaWdodCA6IHVzZUhlaWdodCkgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgcmV0dXJuIG9wXG4gICAgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnNcbiAgICAvLyBlLmcuOiAxMCArICs1ID0+IFsxMCwgKywgKzVdXG4gICAgLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IHRydWU7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIGlmIChtZXJnZVdpdGhQcmV2aW91cykge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gKz0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gICAgICB9XG4gICAgfSwgW10pXG4gICAgLy8gSGVyZSB3ZSBjb252ZXJ0IHRoZSBzdHJpbmcgdmFsdWVzIGludG8gbnVtYmVyIHZhbHVlcyAoaW4gcHgpXG4gICAgLm1hcChmdW5jdGlvbiAoc3RyKSB7XG4gICAgICByZXR1cm4gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gTG9vcCB0cm91Z2ggdGhlIG9mZnNldHMgYXJyYXlzIGFuZCBleGVjdXRlIHRoZSBvcGVyYXRpb25zXG4gIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICBvcC5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnLCBpbmRleDIpIHtcbiAgICAgIGlmIChpc051bWVyaWMoZnJhZykpIHtcbiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MFxuICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIG9mZnNldChkYXRhLCBfcmVmKSB7XG4gIHZhciBvZmZzZXQgPSBfcmVmLm9mZnNldDtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LFxuICAgICAgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICB2YXIgb2Zmc2V0cyA9IHZvaWQgMDtcbiAgaWYgKGlzTnVtZXJpYygrb2Zmc2V0KSkge1xuICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0cyA9IHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyLCByZWZlcmVuY2UsIGJhc2VQbGFjZW1lbnQpO1xuICB9XG5cbiAgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMV07XG4gIH1cblxuICBkYXRhLnBvcHBlciA9IHBvcHBlcjtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBib3VuZGFyaWVzRWxlbWVudCA9IG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQgfHwgZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcblxuICAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0b1xuICAvLyBnbyBvbmUgc3RlcCB1cCBhbmQgdXNlIHRoZSBuZXh0IG9mZnNldFBhcmVudCBhcyByZWZlcmVuY2UgdG9cbiAgLy8gYXZvaWQgdG8gbWFrZSB0aGlzIG1vZGlmaWVyIGNvbXBsZXRlbHkgdXNlbGVzcyBhbmQgbG9vayBsaWtlIGJyb2tlblxuICBpZiAoZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UgPT09IGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gICAgYm91bmRhcmllc0VsZW1lbnQgPSBnZXRPZmZzZXRQYXJlbnQoYm91bmRhcmllc0VsZW1lbnQpO1xuICB9XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc2V0cyB0aGUgcG9wcGVyJ3MgcG9zaXRpb24gc28gdGhhdCB0aGUgZG9jdW1lbnQgc2l6ZSBjYW4gYmUgY2FsY3VsYXRlZCBleGNsdWRpbmdcbiAgLy8gdGhlIHNpemUgb2YgdGhlIHBvcHBlciBlbGVtZW50IGl0c2VsZlxuICB2YXIgdHJhbnNmb3JtUHJvcCA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG4gIHZhciBwb3BwZXJTdHlsZXMgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5zdHlsZTsgLy8gYXNzaWdubWVudCB0byBoZWxwIG1pbmlmaWNhdGlvblxuICB2YXIgdG9wID0gcG9wcGVyU3R5bGVzLnRvcCxcbiAgICAgIGxlZnQgPSBwb3BwZXJTdHlsZXMubGVmdCxcbiAgICAgIHRyYW5zZm9ybSA9IHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXTtcblxuICBwb3BwZXJTdHlsZXMudG9wID0gJyc7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gJyc7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9ICcnO1xuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBzdHlsZSBwcm9wZXJ0aWVzIGFmdGVyIHRoZSBvZmZzZXRzIGhhdmUgYmVlbiBjb21wdXRlZFxuICBwb3BwZXJTdHlsZXMudG9wID0gdG9wO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9IGxlZnQ7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybTtcblxuICBvcHRpb25zLmJvdW5kYXJpZXMgPSBib3VuZGFyaWVzO1xuXG4gIHZhciBvcmRlciA9IG9wdGlvbnMucHJpb3JpdHk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIHZhciBjaGVjayA9IHtcbiAgICBwcmltYXJ5OiBmdW5jdGlvbiBwcmltYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW3BsYWNlbWVudF07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPCBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWF4KHBvcHBlcltwbGFjZW1lbnRdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBwbGFjZW1lbnQsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNlY29uZGFyeTogZnVuY3Rpb24gc2Vjb25kYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIG1haW5TaWRlID0gcGxhY2VtZW50ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbbWFpblNpZGVdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdID4gYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1pbihwb3BwZXJbbWFpblNpZGVdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0gLSAocGxhY2VtZW50ID09PSAncmlnaHQnID8gcG9wcGVyLndpZHRoIDogcG9wcGVyLmhlaWdodCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBtYWluU2lkZSwgdmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICB2YXIgc2lkZSA9IFsnbGVmdCcsICd0b3AnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xID8gJ3ByaW1hcnknIDogJ3NlY29uZGFyeSc7XG4gICAgcG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgY2hlY2tbc2lkZV0ocGxhY2VtZW50KSk7XG4gIH0pO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBwb3BwZXI7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHNoaWZ0KGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgc2hpZnR2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICAvLyBpZiBzaGlmdCBzaGlmdHZhcmlhdGlvbiBpcyBzcGVjaWZpZWQsIHJ1biB0aGUgbW9kaWZpZXJcbiAgaWYgKHNoaWZ0dmFyaWF0aW9uKSB7XG4gICAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcjtcblxuICAgIHZhciBpc1ZlcnRpY2FsID0gWydib3R0b20nLCAndG9wJ10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICAgIHZhciBzaGlmdE9mZnNldHMgPSB7XG4gICAgICBzdGFydDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSksXG4gICAgICBlbmQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbWVhc3VyZW1lbnRdIC0gcG9wcGVyW21lYXN1cmVtZW50XSlcbiAgICB9O1xuXG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIHNoaWZ0T2Zmc2V0c1tzaGlmdHZhcmlhdGlvbl0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBoaWRlKGRhdGEpIHtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdoaWRlJywgJ3ByZXZlbnRPdmVyZmxvdycpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciBib3VuZCA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAncHJldmVudE92ZXJmbG93JztcbiAgfSkuYm91bmRhcmllcztcblxuICBpZiAocmVmUmVjdC5ib3R0b20gPCBib3VuZC50b3AgfHwgcmVmUmVjdC5sZWZ0ID4gYm91bmQucmlnaHQgfHwgcmVmUmVjdC50b3AgPiBib3VuZC5ib3R0b20gfHwgcmVmUmVjdC5yaWdodCA8IGJvdW5kLmxlZnQpIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSB0cnVlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IGZhbHNlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaW5uZXIoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNIb3JpeiA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBzdWJ0cmFjdExlbmd0aCA9IFsndG9wJywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID09PSAtMTtcblxuICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9IHJlZmVyZW5jZVtiYXNlUGxhY2VtZW50XSAtIChzdWJ0cmFjdExlbmd0aCA/IHBvcHBlcltpc0hvcml6ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDApO1xuXG4gIGRhdGEucGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QocG9wcGVyKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBNb2RpZmllciBmdW5jdGlvbiwgZWFjaCBtb2RpZmllciBjYW4gaGF2ZSBhIGZ1bmN0aW9uIG9mIHRoaXMgdHlwZSBhc3NpZ25lZFxuICogdG8gaXRzIGBmbmAgcHJvcGVydHkuPGJyIC8+XG4gKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBiZSBjYWxsZWQgb24gZWFjaCB1cGRhdGUsIHRoaXMgbWVhbnMgdGhhdCB5b3UgbXVzdFxuICogbWFrZSBzdXJlIHRoZXkgYXJlIHBlcmZvcm1hbnQgZW5vdWdoIHRvIGF2b2lkIHBlcmZvcm1hbmNlIGJvdHRsZW5lY2tzLlxuICpcbiAqIEBmdW5jdGlvbiBNb2RpZmllckZuXG4gKiBAYXJndW1lbnQge2RhdGFPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge2RhdGFPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuXG4vKipcbiAqIE1vZGlmaWVycyBhcmUgcGx1Z2lucyB1c2VkIHRvIGFsdGVyIHRoZSBiZWhhdmlvciBvZiB5b3VyIHBvcHBlcnMuPGJyIC8+XG4gKiBQb3BwZXIuanMgdXNlcyBhIHNldCBvZiA5IG1vZGlmaWVycyB0byBwcm92aWRlIGFsbCB0aGUgYmFzaWMgZnVuY3Rpb25hbGl0aWVzXG4gKiBuZWVkZWQgYnkgdGhlIGxpYnJhcnkuXG4gKlxuICogVXN1YWxseSB5b3UgZG9uJ3Qgd2FudCB0byBvdmVycmlkZSB0aGUgYG9yZGVyYCwgYGZuYCBhbmQgYG9uTG9hZGAgcHJvcHMuXG4gKiBBbGwgdGhlIG90aGVyIHByb3BlcnRpZXMgYXJlIGNvbmZpZ3VyYXRpb25zIHRoYXQgY291bGQgYmUgdHdlYWtlZC5cbiAqIEBuYW1lc3BhY2UgbW9kaWZpZXJzXG4gKi9cbnZhciBtb2RpZmllcnMgPSB7XG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHNoaWZ0IHRoZSBwb3BwZXIgb24gdGhlIHN0YXJ0IG9yIGVuZCBvZiBpdHMgcmVmZXJlbmNlXG4gICAqIGVsZW1lbnQuPGJyIC8+XG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgdmFyaWF0aW9uIG9mIHRoZSBgcGxhY2VtZW50YCBwcm9wZXJ0eS48YnIgLz5cbiAgICogSXQgY2FuIGJlIG9uZSBlaXRoZXIgYC1lbmRgIG9yIGAtc3RhcnRgLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgc2hpZnQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAxMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBzaGlmdFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgYG9mZnNldGAgbW9kaWZpZXIgY2FuIHNoaWZ0IHlvdXIgcG9wcGVyIG9uIGJvdGggaXRzIGF4aXMuXG4gICAqXG4gICAqIEl0IGFjY2VwdHMgdGhlIGZvbGxvd2luZyB1bml0czpcbiAgICogLSBgcHhgIG9yIHVuaXQtbGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXG4gICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICogLSBgJXBgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXRcbiAgICpcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cbiAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGVcbiAgICogYHdpZHRoYC4gSW4gY2FzZSBvZiBgbGVmdGAgb3IgYHJpZ2h0YCwgaXQgd2lsbCBiZSB0aGUgYGhlaWdodGAuXG4gICAqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhIHNpbmdsZSB2YWx1ZSAoYXMgYE51bWJlcmAgb3IgYFN0cmluZ2ApLCBvciBhIHBhaXIgb2YgdmFsdWVzXG4gICAqIGFzIGBTdHJpbmdgIGRpdmlkZWQgYnkgYSBjb21tYSBvciBvbmUgKG9yIG1vcmUpIHdoaXRlIHNwYWNlcy48YnIgLz5cbiAgICogVGhlIGxhdHRlciBpcyBhIGRlcHJlY2F0ZWQgbWV0aG9kIGJlY2F1c2UgaXQgbGVhZHMgdG8gY29uZnVzaW9uIGFuZCB3aWxsIGJlXG4gICAqIHJlbW92ZWQgaW4gdjIuPGJyIC8+XG4gICAqIEFkZGl0aW9uYWxseSwgaXQgYWNjZXB0cyBhZGRpdGlvbnMgYW5kIHN1YnRyYWN0aW9ucyBiZXR3ZWVuIGRpZmZlcmVudCB1bml0cy5cbiAgICogTm90ZSB0aGF0IG11bHRpcGxpY2F0aW9ucyBhbmQgZGl2aXNpb25zIGFyZW4ndCBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIFZhbGlkIGV4YW1wbGVzIGFyZTpcbiAgICogYGBgXG4gICAqIDEwXG4gICAqICcxMCUnXG4gICAqICcxMCwgMTAnXG4gICAqICcxMCUsIDEwJ1xuICAgKiAnMTAgKyAxMCUnXG4gICAqICcxMCAtIDV2aCArIDMlJ1xuICAgKiAnLTEwcHggKyA1dmgsIDVweCAtIDYlJ1xuICAgKiBgYGBcbiAgICogPiAqKk5CKio6IElmIHlvdSBkZXNpcmUgdG8gYXBwbHkgb2Zmc2V0cyB0byB5b3VyIHBvcHBlcnMgaW4gYSB3YXkgdGhhdCBtYXkgbWFrZSB0aGVtIG92ZXJsYXBcbiAgICogPiB3aXRoIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50LCB1bmZvcnR1bmF0ZWx5LCB5b3Ugd2lsbCBoYXZlIHRvIGRpc2FibGUgdGhlIGBmbGlwYCBtb2RpZmllci5cbiAgICogPiBZb3UgY2FuIHJlYWQgbW9yZSBvbiB0aGlzIGF0IHRoaXMgW2lzc3VlXShodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9pc3N1ZXMvMzczKS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIG9mZnNldDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0yMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDIwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IG9mZnNldCxcbiAgICAvKiogQHByb3Age051bWJlcnxTdHJpbmd9IG9mZnNldD0wXG4gICAgICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgb2Zmc2V0OiAwXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS5cbiAgICpcbiAgICogQSBzY2VuYXJpbyBleGlzdHMgd2hlcmUgdGhlIHJlZmVyZW5jZSBpdHNlbGYgaXMgbm90IHdpdGhpbiB0aGUgYm91bmRhcmllcy48YnIgLz5cbiAgICogV2UgY2FuIHNheSBpdCBoYXMgXCJlc2NhcGVkIHRoZSBib3VuZGFyaWVzXCIg4oCUIG9yIGp1c3QgXCJlc2NhcGVkXCIuPGJyIC8+XG4gICAqIEluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBwb3BwZXIgc2hvdWxkIGVpdGhlcjpcbiAgICpcbiAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gXCJ0cmFwcGVkXCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yXG4gICAqIC0gaWYgaXQgc2hvdWxkIGlnbm9yZSB0aGUgYm91bmRhcnkgYW5kIFwiZXNjYXBlIHdpdGggaXRzIHJlZmVyZW5jZVwiXG4gICAqXG4gICAqIFdoZW4gYGVzY2FwZVdpdGhSZWZlcmVuY2VgIGlzIHNldCB0b2B0cnVlYCBhbmQgcmVmZXJlbmNlIGlzIGNvbXBsZXRlbHlcbiAgICogb3V0c2lkZSBpdHMgYm91bmRhcmllcywgdGhlIHBvcHBlciB3aWxsIG92ZXJmbG93IChvciBjb21wbGV0ZWx5IGxlYXZlKVxuICAgKiB0aGUgYm91bmRhcmllcyBpbiBvcmRlciB0byByZW1haW4gYXR0YWNoZWQgdG8gdGhlIGVkZ2Ugb2YgdGhlIHJlZmVyZW5jZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHByZXZlbnRPdmVyZmxvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0zMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDMwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7QXJyYXl9IFtwcmlvcml0eT1bJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddXVxuICAgICAqIFBvcHBlciB3aWxsIHRyeSB0byBwcmV2ZW50IG92ZXJmbG93IGZvbGxvd2luZyB0aGVzZSBwcmlvcml0aWVzIGJ5IGRlZmF1bHQsXG4gICAgICogdGhlbiwgaXQgY291bGQgb3ZlcmZsb3cgb24gdGhlIGxlZnQgYW5kIG9uIHRvcCBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHByaW9yaXR5OiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIEFtb3VudCBvZiBwaXhlbCB1c2VkIHRvIGRlZmluZSBhIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgYm91bmRhcmllc1xuICAgICAqIGFuZCB0aGUgcG9wcGVyLiBUaGlzIG1ha2VzIHN1cmUgdGhlIHBvcHBlciBhbHdheXMgaGFzIGEgbGl0dGxlIHBhZGRpbmdcbiAgICAgKiBiZXR3ZWVuIHRoZSBlZGdlcyBvZiBpdHMgY29udGFpbmVyXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0nc2Nyb2xsUGFyZW50J1xuICAgICAqIEJvdW5kYXJpZXMgdXNlZCBieSB0aGUgbW9kaWZpZXIuIENhbiBiZSBgc2Nyb2xsUGFyZW50YCwgYHdpbmRvd2AsXG4gICAgICogYHZpZXdwb3J0YCBvciBhbnkgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICdzY3JvbGxQYXJlbnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSByZWZlcmVuY2UgYW5kIGl0cyBwb3BwZXIgc3RheSBuZWFyIGVhY2ggb3RoZXJcbiAgICogd2l0aG91dCBsZWF2aW5nIGFueSBnYXAgYmV0d2VlbiB0aGUgdHdvLiBFc3BlY2lhbGx5IHVzZWZ1bCB3aGVuIHRoZSBhcnJvdyBpc1xuICAgKiBlbmFibGVkIGFuZCB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCBpdCBwb2ludHMgdG8gaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBJdCBjYXJlcyBvbmx5IGFib3V0IHRoZSBmaXJzdCBheGlzLiBZb3UgY2FuIHN0aWxsIGhhdmUgcG9wcGVycyB3aXRoIG1hcmdpblxuICAgKiBiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGtlZXBUb2dldGhlcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj00MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDQwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGtlZXBUb2dldGhlclxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGlzIG1vZGlmaWVyIGlzIHVzZWQgdG8gbW92ZSB0aGUgYGFycm93RWxlbWVudGAgb2YgdGhlIHBvcHBlciB0byBtYWtlXG4gICAqIHN1cmUgaXQgaXMgcG9zaXRpb25lZCBiZXR3ZWVuIHRoZSByZWZlcmVuY2UgZWxlbWVudCBhbmQgaXRzIHBvcHBlciBlbGVtZW50LlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIG91dGVyIHNpemUgb2YgdGhlIGBhcnJvd0VsZW1lbnRgIG5vZGUgdG8gZGV0ZWN0IGhvdyBtYW55XG4gICAqIHBpeGVscyBvZiBjb25qdW5jdGlvbiBhcmUgbmVlZGVkLlxuICAgKlxuICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXJyb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA1MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcnJvdyxcbiAgICAvKiogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gZWxlbWVudD0nW3gtYXJyb3ddJyAtIFNlbGVjdG9yIG9yIG5vZGUgdXNlZCBhcyBhcnJvdyAqL1xuICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpXG4gICAgICovXG4gICAgYmVoYXZpb3I6ICdmbGlwJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgZmxpcCBpZiBpdCBoaXRzIHRoZSBlZGdlcyBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3ZpZXdwb3J0J1xuICAgICAqIFRoZSBlbGVtZW50IHdoaWNoIHdpbGwgZGVmaW5lIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwb3BwZXIgcG9zaXRpb24uXG4gICAgICogVGhlIHBvcHBlciB3aWxsIG5ldmVyIGJlIHBsYWNlZCBvdXRzaWRlIG9mIHRoZSBkZWZpbmVkIGJvdW5kYXJpZXNcbiAgICAgKiAoZXhjZXB0IGlmIGBrZWVwVG9nZXRoZXJgIGlzIGVuYWJsZWQpXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICd2aWV3cG9ydCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGZsaXBWYXJpYXRpb25zPWZhbHNlXG4gICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuXG4gICAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJsYXBzIGl0cyBib3VuZGFyaWVzLlxuICAgICAqXG4gICAgICogVGhlIG9yaWdpbmFsIHBsYWNlbWVudCBzaG91bGQgaGF2ZSBhIHNldCB2YXJpYXRpb24uXG4gICAgICovXG4gICAgZmxpcFZhcmlhdGlvbnM6IGZhbHNlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBmbGlwVmFyaWF0aW9uc0J5Q29udGVudD1mYWxzZVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBzd2l0Y2ggcGxhY2VtZW50IHZhcmlhdGlvbiBiZXR3ZWVuIGAtc3RhcnRgIGFuZCBgLWVuZGAgd2hlblxuICAgICAqIHRoZSBwb3BwZXIgZWxlbWVudCBvdmVybGFwcyBpdHMgcmVmZXJlbmNlIGJvdW5kYXJpZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3JpZ2luYWwgcGxhY2VtZW50IHNob3VsZCBoYXZlIGEgc2V0IHZhcmlhdGlvbi5cbiAgICAgKi9cbiAgICBmbGlwVmFyaWF0aW9uc0J5Q29udGVudDogZmFsc2VcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHRoZSBwb3BwZXIgZmxvdyB0b3dhcmQgdGhlIGlubmVyIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgd2hlbiB0aGlzIG1vZGlmaWVyIGlzIGRpc2FibGVkLCB0aGUgcG9wcGVyIHdpbGwgYmUgcGxhY2VkIG91dHNpZGVcbiAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaW5uZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA3MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGlubmVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gaGlkZSB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dHNpZGUgb2YgdGhlXG4gICAqIHBvcHBlciBib3VuZGFyaWVzLiBJdCB3aWxsIHNldCBhIGB4LW91dC1vZi1ib3VuZGFyaWVzYCBhdHRyaWJ1dGUgd2hpY2ggY2FuXG4gICAqIGJlIHVzZWQgdG8gaGlkZSB3aXRoIGEgQ1NTIHNlbGVjdG9yIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGlzXG4gICAqIG91dCBvZiBib3VuZGFyaWVzLlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBoaWRlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTgwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaGlkZVxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IHRvIGdldHNcbiAgICogcHJvcGVybHkgcG9zaXRpb25lZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgd2lsbCBub3QgdG91Y2ggdGhlIERPTSwgaXQganVzdCBwcmVwYXJlcyB0aGUgc3R5bGVzXG4gICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bFxuICAgKiBpbiBjYXNlIHlvdSBuZWVkIHRvIHJlcGxhY2UgYGFwcGx5U3R5bGVgIHdpdGggYSBjdXN0b20gaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgKiB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIFBvcHBlci5qcy4gRXhwZWN0IHRoZSBtb2RpZmllcnMgb3JkZXJpbmcgbWV0aG9kXG4gICAqIHRvIGNoYW5nZSBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBjb21wdXRlU3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODUwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4NTAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBjb21wdXRlU3R5bGUsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LlxuICAgKlxuICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VcbiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3VcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxuICAgKlxuICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdXIgb3duIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXBwbHlTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj05MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDkwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFwcGx5U3R5bGUsXG4gICAgLyoqIEBwcm9wIHtGdW5jdGlvbn0gKi9cbiAgICBvbkxvYWQ6IGFwcGx5U3R5bGVPbkxvYWQsXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjEwLjAsIHRoZSBwcm9wZXJ0eSBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllclxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkXG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9uIHVzZWQgYnkgUG9wcGVyLmpzLlxuICogVGhpcyBvYmplY3QgaXMgcGFzc2VkIHRvIG1vZGlmaWVycyBhbmQgdG8gdGhlIGBvbkNyZWF0ZWAgYW5kIGBvblVwZGF0ZWAgY2FsbGJhY2tzLlxuICogQG5hbWUgZGF0YU9iamVjdFxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuaW5zdGFuY2UgVGhlIFBvcHBlci5qcyBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEucGxhY2VtZW50IFBsYWNlbWVudCBhcHBsaWVkIHRvIHBvcHBlclxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgUGxhY2VtZW50IG9yaWdpbmFsbHkgZGVmaW5lZCBvbiBpbml0XG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuZmxpcHBlZCBUcnVlIGlmIHBvcHBlciBoYXMgYmVlbiBmbGlwcGVkIGJ5IGZsaXAgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5oaWRlIFRydWUgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dCBvZiBib3VuZGFyaWVzLCB1c2VmdWwgdG8ga25vdyB3aGVuIHRvIGhpZGUgdGhlIHBvcHBlclxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZGF0YS5hcnJvd0VsZW1lbnQgTm9kZSB1c2VkIGFzIGFycm93IGJ5IGFycm93IG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5zdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5hcnJvd1N0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBhcnJvdy4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmJvdW5kYXJpZXMgT2Zmc2V0cyBvZiB0aGUgcG9wcGVyIGJvdW5kYXJpZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMgVGhlIG1lYXN1cmVtZW50cyBvZiBwb3BwZXIsIHJlZmVyZW5jZSBhbmQgYXJyb3cgZWxlbWVudHNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRkZW4gdXNpbmcgdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZiBQb3BwZXIuanMuPGJyIC8+XG4gKiBUbyBvdmVycmlkZSBhbiBvcHRpb24sIHNpbXBseSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhlIGBvcHRpb25zYCBvYmplY3QsIGFzIHRoZSAzcmQgYXJndW1lbnQuIEZvciBleGFtcGxlOlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZiwgcG9wLCB7XG4gKiAgIG1vZGlmaWVyczoge1xuICogICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiBmYWxzZSB9XG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBEZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFBvcHBlcidzIHBsYWNlbWVudC5cbiAgICogQHByb3Age1BvcHBlci5wbGFjZW1lbnRzfSBwbGFjZW1lbnQ9J2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IHdhbnQgcG9wcGVyIHRvIHBvc2l0aW9uIGl0IHNlbGYgaW4gJ2ZpeGVkJyBtb2RlXG4gICAqIEBwcm9wIHtCb29sZWFufSBwb3NpdGlvbkZpeGVkPWZhbHNlXG4gICAqL1xuICBwb3NpdGlvbkZpeGVkOiBmYWxzZSxcblxuICAvKipcbiAgICogV2hldGhlciBldmVudHMgKHJlc2l6ZSwgc2Nyb2xsKSBhcmUgaW5pdGlhbGx5IGVuYWJsZWQuXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQuIFRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qcy5cbiAgICogQHByb3Age21vZGlmaWVyc31cbiAgICovXG4gIG1vZGlmaWVyczogbW9kaWZpZXJzXG59O1xuXG4vKipcbiAqIEBjYWxsYmFjayBvbkNyZWF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgb25VcGRhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8vIFV0aWxzXG4vLyBNZXRob2RzXG52YXIgUG9wcGVyID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBQb3BwZXIuanMgaW5zdGFuY2UuXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtFbGVtZW50fHJlZmVyZW5jZU9iamVjdH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIC8gWE1MIGVsZW1lbnQgdXNlZCBhcyB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wcGVyKTtcblxuICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF90aGlzLnVwZGF0ZSk7XG4gICAgfTtcblxuICAgIC8vIG1ha2UgdXBkYXRlKCkgZGVib3VuY2VkLCBzbyB0aGF0IGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UtcGVyLXRpY2tcbiAgICB0aGlzLnVwZGF0ZSA9IGRlYm91bmNlKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuXG4gICAgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXVxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycylcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyICYmIHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLCBvcHRpb25zLm1vZGlmaWVycykpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30sIG9wdGlvbnMubW9kaWZpZXJzID8gb3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gOiB7fSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcbiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pO1xuICAgIH0pXG4gICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICB9KTtcblxuICAgIC8vIG1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgd2hlbiBQb3BwZXIuanMgZ2V0IGluaXRlZFxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcbiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAvLyBCRSBBV0FSRTogZG9uJ3QgYWRkIG9wdGlvbnMgdG8gYG9wdGlvbnMubW9kaWZpZXJzLm5hbWVgIGJ1dCB0byBgbW9kaWZpZXJPcHRpb25zYCFcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoX3RoaXMucmVmZXJlbmNlLCBfdGhpcy5wb3BwZXIsIF90aGlzLm9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgX3RoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgdGhpcy51cGRhdGUoKTtcblxuICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuXG5cbiAgY3JlYXRlQ2xhc3MoUG9wcGVyLCBbe1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSQkMSgpIHtcbiAgICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSQkMSgpIHtcbiAgICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBlbmFibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgYW4gdXBkYXRlLiBJdCB3aWxsIHJ1biBvbiB0aGUgbmV4dCBVSSB1cGRhdGUgYXZhaWxhYmxlLlxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cbiAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICAgKlxuICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XG4gICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAgICogQG1lbWJlciBVdGlsc1xuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuICB9XSk7XG4gIHJldHVybiBQb3BwZXI7XG59KCk7XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAuXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cblxuXG5Qb3BwZXIuVXRpbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpLlBvcHBlclV0aWxzO1xuUG9wcGVyLnBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNMTUuNSAxNGgtLjc5bC0uMjgtLjI3QzE1LjQxIDEyLjU5IDE2IDExLjExIDE2IDkuNSAxNiA1LjkxIDEzLjA5IDMgOS41IDNTMyA1LjkxIDMgOS41IDUuOTEgMTYgOS41IDE2YzEuNjEgMCAzLjA5LS41OSA0LjIzLTEuNTdsLjI3LjI4di43OWw1IDQuOTlMMjAuNDkgMTlsLTQuOTktNXptLTYgMEM3LjAxIDE0IDUgMTEuOTkgNSA5LjVTNy4wMSA1IDkuNSA1IDE0IDcuMDEgMTQgOS41IDExLjk5IDE0IDkuNSAxNHpcIlxufSksICdTZWFyY2gnKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwibW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICAnTU9ERSc6IFwiZGV2ZWxvcG1lbnRcIixcclxuICAgICdERVYnOiB0cnVlLFxyXG4gICAgJ1BPUlQnOiAzMDAwLFxyXG4gICAgJ0hPU1QnOiBcImxvY2FsaG9zdFwiLFxyXG4gICAgJ0JBU0VfVVJMJzogJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMy9hcGkvJ1xyXG59OyIsIi8vIEBmbG93XG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXkgPSAnX19nbG9iYWxfdW5pcXVlX2lkX18nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZ2xvYmFsW2tleV0gPSAoZ2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwicmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaWFkZGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pc3ViaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmltdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UudHJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFzYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgISEkR09QUy5mO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcbiIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcbiIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCkge1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCkge1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgTlVNQkVSID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59O1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUgKGFMZW4gPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBpZiAoaHRtbCkgYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpO1xuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZiAoa2xhc3MgPT0gJ0FycmF5JykgcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xuICAgIHZhciBzaXplID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KTtcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IEBbKi0xXSAqLykge1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPID0gdG9JT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRtYXRjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkcmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICBmdW5jdGlvbiBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRzZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgJFNQTElUID0gJ3NwbGl0JztcbnZhciBMRU5HVEggPSAnbGVuZ3RoJztcbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG52YXIgTUFYX1VJTlQzMiA9IDB4ZmZmZmZmZmY7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgneCcsICd5JykgLT4gL3gveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7IFJlZ0V4cChNQVhfVUlOVDMyLCAneScpOyB9KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gJHNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogJHNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gJHNwbGl0O1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09ICRzcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9ICRtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfU0VUKSwgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xudmFyICRpc1ZpZXcgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlldztcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3UyA9IG5ldyAkRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gaXRlcmF0ZWQpIGtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIHZhciBrZXlzID0gdGhhdC5faztcbiAgdmFyIGtleTtcbiAgZG8ge1xuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4geyB2YWx1ZToga2V5LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuIiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XG4iLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4sIEE7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXRNYXAnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0dGVuJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgV0VCS0lUX0JVRyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbiAocmVnZXhwLCBzdHJpbmcpIHtcbiAgdGhpcy5fciA9IHJlZ2V4cDtcbiAgdGhpcy5fcyA9IHN0cmluZztcbn07XG5cbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbCB9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZiAoIWlzUmVnRXhwKHJlZ2V4cCkpIHRocm93IFR5cGVFcnJvcihyZWdleHAgKyAnIGlzIG5vdCBhIHJlZ2V4cCEnKTtcbiAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICB2YXIgZmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cFByb3RvID8gU3RyaW5nKHJlZ2V4cC5mbGFncykgOiBnZXRGbGFncy5jYWxsKHJlZ2V4cCk7XG4gICAgdmFyIHJ4ID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikge1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuZ2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgICB2YXIgRDtcbiAgICBkbyB7XG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuc2V0O1xuICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ01hcCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrTWFwJyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1NldCcpO1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtNYXAnKTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrU2V0Jyk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCkge1xuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2xhbXA6IGZ1bmN0aW9uIGNsYW1wKHgsIGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIHgpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNjYWxlID0gcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZnNjYWxlOiBmdW5jdGlvbiBmc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gICAgcmV0dXJuIGZyb3VuZChzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpKTtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XG4gICAgdmFyICR4MSA9IHgxID4+PiAwO1xuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdikge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyICR1ID0gK3U7XG4gICAgdmFyICR2ID0gK3Y7XG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XG4gICAgdmFyIHUxID0gJHUgPj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogREVHX1BFUl9SQUQ7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzY2FsZTogcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpIH0pO1xuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciAkdSA9ICt1O1xuICAgIHZhciAkdiA9ICt2O1xuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+Pj4gMTY7XG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7XG4iLCIvLyBodHRwOi8vamZiYXN0aWVuLmdpdGh1Yi5pby9wYXBlcnMvTWF0aC5zaWduYml0Lmh0bWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbmJpdDogZnVuY3Rpb24gc2lnbmJpdCh4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpICE9IHggPyB4IDogeCA9PSAwID8gMSAvIHggPT0gSW5maW5pdHkgOiB4ID4gMDtcbn0gfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1Byb21pc2UnLCB7ICd0cnknOiBmdW5jdGlvbiAoY2FsbGJhY2tmbikge1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gcGVyZm9ybShjYWxsYmFja2ZuKTtcbiAgKHJlc3VsdC5lID8gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0IDogcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkocmVzdWx0LnYpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufSB9KTtcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcDtcbnZhciBzdG9yZSA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoeyBkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICB2YXIgdGFyZ2V0S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKTtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgaWYgKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpIHJldHVybiBmYWxzZTtcbiAgaWYgKG1ldGFkYXRhTWFwLnNpemUpIHJldHVybiB0cnVlO1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG59IH0pO1xuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufSB9KTtcbiIsInZhciBTZXQgPSByZXF1aXJlKCcuL2VzNi5zZXQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xudmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uIChPLCBQKSB7XG4gIHZhciBvS2V5cyA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIGlmIChwYXJlbnQgPT09IG51bGwpIHJldHVybiBvS2V5cztcbiAgdmFyIHBLZXlzID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7IGhhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG4iLCJ2YXIgJG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b01ldGFLZXkgPSAkbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSAkbWV0YWRhdGEuc2V0O1xuXG4kbWV0YWRhdGEuZXhwKHsgbWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn0gfSk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcztcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgT0JTRVJWQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdvYnNlcnZhYmxlJyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgUkVUVVJOID0gZm9yT2YuUkVUVVJOO1xuXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcbn07XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYztcbiAgaWYgKGNsZWFudXApIHtcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cCgpO1xuICB9XG59O1xuXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG59O1xuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKG9ic2VydmVyLCBzdWJzY3JpYmVyKSB7XG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fbyA9IG9ic2VydmVyO1xuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpO1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmIChjbGVhbnVwICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykgY2xlYW51cCA9IGZ1bmN0aW9uICgpIHsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgIHJldHVybjtcbiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gIHRoaXMuX3MgPSBzdWJzY3JpcHRpb247XG59O1xuXG5TdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIubmV4dCk7XG4gICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHRocm93IHZhbHVlO1xuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgIGlmICghbSkgdGhyb3cgdmFsdWU7XG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcbn07XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGFGdW5jdGlvbihmbik7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCkge1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYgKG1ldGhvZCkge1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW5cbiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpblxuICogdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZ2xvYmFsLnByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgZ2xvYmFsLnByb2Nlc3MuZG9tYWluKSB7XG4gICAgICBpbnZva2UgPSBnbG9iYWwucHJvY2Vzcy5kb21haW4uYmluZChpbnZva2UpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gQW1vbmcgdGhlIHZhcmlvdXMgdHJpY2tzIGZvciBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbFxuICAvLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3RcbiAgLy8gdXNlIGluZGlyZWN0IGV2YWwgKHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KS5cbiAgdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6XG4gIHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgPyB3aW5kb3cgOlxuICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0aGlzXG4pO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlJlZ0V4cC5lc2NhcGU7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZSA9IHJlcXVpcmUoJy4vX3JlcGxhY2VyJykoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywgeyBlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCkgeyByZXR1cm4gJHJlKGl0KTsgfSB9KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlZ0V4cCwgcmVwbGFjZSkge1xuICB2YXIgcmVwbGFjZXIgPSByZXBsYWNlID09PSBPYmplY3QocmVwbGFjZSkgPyBmdW5jdGlvbiAocGFydCkge1xuICAgIHJldHVybiByZXBsYWNlW3BhcnRdO1xuICB9IDogcmVwbGFjZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBTdHJpbmcoaXQpLnJlcGxhY2UocmVnRXhwLCByZXBsYWNlcik7XG4gIH07XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMS4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgaD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMztuJiZTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtcbnZhciB6PW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsYWE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNjtuJiZTeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik7biYmU3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTtuJiZTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7dmFyIEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24gQihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgQz17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRD17fTtcbmZ1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9Y3x8Q31FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihCKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9Y3x8Q312YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztoKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9e2N1cnJlbnQ6bnVsbH0sSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsbD1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihsPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaz1BcnJheShmKSxtPTA7bTxmO20rKylrW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49a31pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjpsLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBiYShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBPPS9cXC8rL2csUD1bXTtmdW5jdGlvbiBRKGEsYixjLGUpe2lmKFAubGVuZ3RoKXt2YXIgZD1QLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9YztkLmNvbnRleHQ9ZTtkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6Yyxjb250ZXh0OmUsY291bnQ6MH19XG5mdW5jdGlvbiBSKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+UC5sZW5ndGgmJlAucHVzaChhKX1cbmZ1bmN0aW9uIFMoYSxiLGMsZSl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGMoZSxhLFwiXCI9PT1iP1wiLlwiK1QoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGw9MDtsPGEubGVuZ3RoO2wrKyl7ZD1hW2xdO3ZhciBmPWIrVChkLGwpO2crPVMoZCxmLGMsZSl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1BJiZhW0FdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGw9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitUKGQsbCsrKSxnKz1TKGQsZixjLGUpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWQpdGhyb3cgYz1cIlwiK2EsRXJyb3IoQigzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpjLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBVKGEsYixjKXtyZXR1cm4gbnVsbD09YT8wOlMoYSxcIlwiLGIsYyl9ZnVuY3Rpb24gVChhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gY2EoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gZGEoYSxiLGMpe3ZhciBlPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/VihhLGUsYyxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihOKGEpJiYoYT1iYShhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE8sXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFYoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoTyxcIiQmL1wiKStcIi9cIik7Yj1RKGIsZyxlLGQpO1UoYSxkYSxiKTtSKGIpfWZ1bmN0aW9uIFcoKXt2YXIgYT1JLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQigzMjEpKTtyZXR1cm4gYX1cbnZhciBYPXtDaGlsZHJlbjp7bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1YoYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVEobnVsbCxudWxsLGIsYyk7VShhLGNhLGIpO1IoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBVKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VihhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFOKGEpKXRocm93IEVycm9yKEIoMTQzKSk7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkUsUHVyZUNvbXBvbmVudDpHLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLFxuX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9LGZvcndhcmRSZWY6ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fSxsYXp5OmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjphYSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX0sbWVtbzpmdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp6LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX0sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNhbGxiYWNrKGEsYil9LHVzZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUNvbnRleHQoYSxiKX0sdXNlRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VFZmZlY3QoYSxiKX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLFxuYixjKXtyZXR1cm4gVygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfSx1c2VEZWJ1Z1ZhbHVlOmZ1bmN0aW9uKCl7fSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVygpLnVzZUxheW91dEVmZmVjdChhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFcoKS51c2VNZW1vKGEsYil9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBXKCkudXNlUmVkdWNlcihhLGIsYyl9LHVzZVJlZjpmdW5jdGlvbihhKXtyZXR1cm4gVygpLnVzZVJlZihhKX0sdXNlU3RhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIFcoKS51c2VTdGF0ZShhKX0sRnJhZ21lbnQ6cixQcm9maWxlcjp1LFN0cmljdE1vZGU6dCxTdXNwZW5zZTp5LGNyZWF0ZUVsZW1lbnQ6TSxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEIoMjY3LGEpKTt2YXIgZT1oKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixsPWEuX293bmVyO1xuaWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGw9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGsgaW4gYilLLmNhbGwoYixrKSYmIUwuaGFzT3duUHJvcGVydHkoaykmJihlW2tdPXZvaWQgMD09PWJba10mJnZvaWQgMCE9PWY/ZltrXTpiW2tdKX12YXIgaz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWspZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxrKXtmPUFycmF5KGspO2Zvcih2YXIgbT0wO208azttKyspZlttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6bH19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok4sdmVyc2lvbjpcIjE2LjExLjBcIixcbl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnREaXNwYXRjaGVyOkksUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3N1c3BlbnNlOm51bGx9LFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpofX0sWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMS4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7dmFyIGJhPW51bGwsY2E9e307XG5mdW5jdGlvbiBkYSgpe2lmKGJhKWZvcih2YXIgYSBpbiBjYSl7dmFyIGI9Y2FbYV0sYz1iYS5pbmRleE9mKGEpO2lmKCEoLTE8YykpdGhyb3cgRXJyb3IodSg5NixhKSk7aWYoIWVhW2NdKXtpZighYi5leHRyYWN0RXZlbnRzKXRocm93IEVycm9yKHUoOTcsYSkpO2VhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7aWYoZmEuaGFzT3duUHJvcGVydHkoaCkpdGhyb3cgRXJyb3IodSg5OSxoKSk7ZmFbaF09Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmaGEoa1tlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KGhhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7aWYoIWUpdGhyb3cgRXJyb3IodSg5OCxkLGEpKTt9fX19XG5mdW5jdGlvbiBoYShhLGIsYyl7aWYoaWFbYV0pdGhyb3cgRXJyb3IodSgxMDAsYSkpO2lhW2FdPWI7amFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgZWE9W10sZmE9e30saWE9e30samE9e307ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIGxhPSExLG1hPW51bGwsbmE9ITEsb2E9bnVsbCxwYT17b25FcnJvcjpmdW5jdGlvbihhKXtsYT0hMDttYT1hfX07ZnVuY3Rpb24gcWEoYSxiLGMsZCxlLGYsZyxoLGspe2xhPSExO21hPW51bGw7a2EuYXBwbHkocGEsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIHJhKGEsYixjLGQsZSxmLGcsaCxrKXtxYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYobGEpe2lmKGxhKXt2YXIgbD1tYTtsYT0hMTttYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtuYXx8KG5hPSEwLG9hPWwpfX12YXIgc2E9bnVsbCx1YT1udWxsLHZhPW51bGw7ZnVuY3Rpb24gd2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PXZhKGMpO3JhKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9ZnVuY3Rpb24geGEoYSxiKXtpZihudWxsPT1iKXRocm93IEVycm9yKHUoMzApKTtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19XG5mdW5jdGlvbiB5YShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgemE9bnVsbDtmdW5jdGlvbiBBYShhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspd2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmd2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIEJhKGEpe251bGwhPT1hJiYoemE9eGEoemEsYSkpO2E9emE7emE9bnVsbDtpZihhKXt5YShhLEFhKTtpZih6YSl0aHJvdyBFcnJvcih1KDk1KSk7aWYobmEpdGhyb3cgYT1vYSxuYT0hMSxvYT1udWxsLGE7fX1cbnZhciBDYT17aW5qZWN0RXZlbnRQbHVnaW5PcmRlcjpmdW5jdGlvbihhKXtpZihiYSl0aHJvdyBFcnJvcih1KDEwMSkpO2JhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpO2RhKCl9LGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTpmdW5jdGlvbihhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighY2EuaGFzT3duUHJvcGVydHkoYyl8fGNhW2NdIT09ZCl7aWYoY2FbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO2NhW2NdPWQ7Yj0hMH19YiYmZGEoKX19O1xuZnVuY3Rpb24gRGEoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1zYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyBFcnJvcih1KDIzMSxiLHR5cGVvZiBjKSk7XG5yZXR1cm4gY312YXIgRWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7RWEuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoRWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7RWEuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZ1wiKXx8KEVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnPXtzdXNwZW5zZTpudWxsfSk7XG52YXIgRmE9L14oLiopW1xcXFxcXC9dLyx3PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsR2E9dz9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxIYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsSWE9dz9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsSmE9dz9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsS2E9dz9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsTGE9dz9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksTWE9dz9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxOYT13P1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsT2E9dz9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsUGE9dz9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsUWE9dz9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLFJhPXc/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsU2E9dz9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNjt3JiZTeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik7dyYmU3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTt3JiZTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7dmFyIFRhPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBVYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9VGEmJmFbVGFdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBWYShhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIFdhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgSWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgSGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIEthOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIEphOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgUGE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgUWE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgTWE6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBMYTpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIE9hOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBSYTpyZXR1cm4gV2EoYS50eXBlKTtjYXNlIFNhOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gV2EoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGEoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPVdhKGEudHlwZSk7Yz1udWxsO2QmJihjPVdhKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoRmEsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBZYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksWmE9bnVsbCwkYT1udWxsLGFiPW51bGw7ZnVuY3Rpb24gYmIoYSl7aWYoYT11YShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIFphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9c2EoYS5zdGF0ZU5vZGUpO1phKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gY2IoYSl7JGE/YWI/YWIucHVzaChhKTphYj1bYV06JGE9YX1mdW5jdGlvbiBkYigpe2lmKCRhKXt2YXIgYT0kYSxiPWFiO2FiPSRhPW51bGw7YmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJiKGJbYV0pfX1mdW5jdGlvbiBlYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIGZiKGEsYixjLGQpe3JldHVybiBhKGIsYyxkKX1mdW5jdGlvbiBnYigpe31cbnZhciBoYj1lYixpYj0hMSxqYj0hMTtmdW5jdGlvbiBrYigpe2lmKG51bGwhPT0kYXx8bnVsbCE9PWFiKWdiKCksZGIoKX1uZXcgTWFwO3ZhciBsYj0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbWI9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxuYj17fSxvYj17fTtcbmZ1bmN0aW9uIHBiKGEpe2lmKG1iLmNhbGwob2IsYSkpcmV0dXJuITA7aWYobWIuY2FsbChuYixhKSlyZXR1cm4hMTtpZihsYi50ZXN0KGEpKXJldHVybiBvYlthXT0hMDtuYlthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBxYihhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHJiKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHFiKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQihhLGIsYyxkLGUsZil7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWZ9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwwLCExLGEsbnVsbCwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQihiLDEsITEsYVsxXSxudWxsLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEsbnVsbCwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDYsITEsYSxudWxsLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7dmFyIHNiPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gdGIoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uoc2IsXG50Yik7RFtiXT1uZXcgQihiLDEsITEsYSxudWxsLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHNiLHRiKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHNiLHRiKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5ELnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITApO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITApfSk7ZnVuY3Rpb24gdWIoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gdmIoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwocmIoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP3BiKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiB3YihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24geGIoYSl7dmFyIGI9d2IoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIHliKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj14YihhKSl9ZnVuY3Rpb24gemIoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXdiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gQWIoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQmIoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9dWIobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBDYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnZiKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBFYihhLGIpe0NiKGEsYik7dmFyIGM9dWIoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRmIoYSxiLnR5cGUsdWIoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBHYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBGYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gSGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gSWIoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1IYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBKYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrdWIoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEtiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih1KDkxKSk7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gTGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5kZWZhdWx0VmFsdWU7Yj1iLmNoaWxkcmVuO2lmKG51bGwhPWIpe2lmKG51bGwhPWMpdGhyb3cgRXJyb3IodSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYikpe2lmKCEoMT49Yi5sZW5ndGgpKXRocm93IEVycm9yKHUoOTMpKTtiPWJbMF19Yz1ifW51bGw9PWMmJihjPVwiXCIpfWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnViKGMpfX1cbmZ1bmN0aW9uIE1iKGEsYil7dmFyIGM9dWIoYi52YWx1ZSksZD11YihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIE5iKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE9iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIFBiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gUWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1BiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFJiLFNiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU9iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1JiPVJifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1JiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVJiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFRiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gVWIoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVmI9e2FuaW1hdGlvbmVuZDpVYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpVYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlViKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlViKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sV2I9e30sWGI9e307XG5ZYSYmKFhiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFZiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFZiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFZiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFZiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWWIoYSl7aWYoV2JbYV0pcmV0dXJuIFdiW2FdO2lmKCFWYlthXSlyZXR1cm4gYTt2YXIgYj1WYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBYYilyZXR1cm4gV2JbYV09YltjXTtyZXR1cm4gYX12YXIgWmI9WWIoXCJhbmltYXRpb25lbmRcIiksJGI9WWIoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYWM9WWIoXCJhbmltYXRpb25zdGFydFwiKSxiYz1ZYihcInRyYW5zaXRpb25lbmRcIiksZGM9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZWMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZmMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBnYyhhKXtpZihlYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBoYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1lYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBnYyhlKSxhO2lmKGY9PT1kKXJldHVybiBnYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGljKGEpe2E9aGMoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG52YXIgamMsa2MsbGMsbWM9ITEsbmM9W10sb2M9bnVsbCxwYz1udWxsLHFjPW51bGwscmM9bmV3IE1hcCxzYz1uZXcgTWFwLHRjPVtdLHVjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY2xvc2UgY2FuY2VsIGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIiksdmM9XCJmb2N1cyBibHVyIGRyYWdlbnRlciBkcmFnbGVhdmUgbW91c2VvdmVyIG1vdXNlb3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJvdXQgZ290cG9pbnRlcmNhcHR1cmUgbG9zdHBvaW50ZXJjYXB0dXJlXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gd2MoYSl7dmFyIGI9eGMoYSk7dWMuZm9yRWFjaChmdW5jdGlvbihjKXt5YyhjLGEsYil9KTt2Yy5mb3JFYWNoKGZ1bmN0aW9uKGMpe3ljKGMsYSxiKX0pfWZ1bmN0aW9uIHpjKGEsYixjLGQpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZH19ZnVuY3Rpb24gQWMoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpvYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6cGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6cWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOnJjLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOnNjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gQmMoYSxiLGMsZCxlKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWUpcmV0dXJuIGE9emMoYixjLGQsZSksbnVsbCE9PWImJihiPUNjKGIpLG51bGwhPT1iJiZrYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7cmV0dXJuIGF9ZnVuY3Rpb24gRGMoYSxiLGMsZCl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c1wiOnJldHVybiBvYz1CYyhvYyxhLGIsYyxkKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIHBjPUJjKHBjLGEsYixjLGQpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gcWM9QmMocWMsYSxiLGMsZCksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGU9ZC5wb2ludGVySWQ7cmMuc2V0KGUsQmMocmMuZ2V0KGUpfHxudWxsLGEsYixjLGQpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZT1kLnBvaW50ZXJJZCxzYy5zZXQoZSxCYyhzYy5nZXQoZSl8fG51bGwsYSxiLGMsZCkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gRWMoYSl7dmFyIGI9RmMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1lYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1mYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtxLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7bGMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIEdjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1IYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPUNjKGIpO251bGwhPT1jJiZrYyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gSWMoYSxiLGMpe0djKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBKYygpe2ZvcihtYz0hMTswPG5jLmxlbmd0aDspe3ZhciBhPW5jWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmpjKGEpO2JyZWFrfXZhciBiPUhjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOm5jLnNoaWZ0KCl9bnVsbCE9PW9jJiZHYyhvYykmJihvYz1udWxsKTtudWxsIT09cGMmJkdjKHBjKSYmKHBjPW51bGwpO251bGwhPT1xYyYmR2MocWMpJiYocWM9bnVsbCk7cmMuZm9yRWFjaChJYyk7c2MuZm9yRWFjaChJYyl9ZnVuY3Rpb24gS2MoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLG1jfHwobWM9ITAscS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHEudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksSmMpKSl9XG5mdW5jdGlvbiBMYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBLYyhiLGEpfWlmKDA8bmMubGVuZ3RoKXtLYyhuY1swXSxhKTtmb3IodmFyIGM9MTtjPG5jLmxlbmd0aDtjKyspe3ZhciBkPW5jW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09b2MmJktjKG9jLGEpO251bGwhPT1wYyYmS2MocGMsYSk7bnVsbCE9PXFjJiZLYyhxYyxhKTtyYy5mb3JFYWNoKGIpO3NjLmZvckVhY2goYik7Zm9yKGM9MDtjPHRjLmxlbmd0aDtjKyspZD10Y1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8dGMubGVuZ3RoJiYoYz10Y1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylFYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJnRjLnNoaWZ0KCl9XG5mdW5jdGlvbiBNYyhhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gTmMoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBPYyhhLGIsYyl7aWYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPXhhKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPXhhKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfVxuZnVuY3Rpb24gUGMoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1OYyhiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspT2MoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylPYyhjW2JdLFwiYnViYmxlZFwiLGEpfX1mdW5jdGlvbiBRYyhhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1EYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eGEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eGEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFJjKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmUWMoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfVxuZnVuY3Rpb24gU2MoYSl7eWEoYSxQYyl9ZnVuY3Rpb24gVGMoKXtyZXR1cm4hMH1mdW5jdGlvbiBVYygpe3JldHVybiExfWZ1bmN0aW9uIEUoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP1RjOlVjO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9VWM7cmV0dXJuIHRoaXN9XG5uKEUucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9VGMpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9VGMpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9VGN9LGlzUGVyc2lzdGVudDpVYyxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1VYzt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0UuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRS5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtWYyhjKTtyZXR1cm4gY307VmMoRSk7ZnVuY3Rpb24gV2MoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBYYyhhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBWYyhhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1XYzthLnJlbGVhc2U9WGN9dmFyIFljPUUuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxaYz1FLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLCRjPUUuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxhZD0kYy5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gYmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgY2Q9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LGVkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxmZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gZ2QoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1mZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIGhkKCl7cmV0dXJuIGdkfVxudmFyIGlkPSRjLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1jZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1iZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/ZWRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOmhkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9iZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP2JkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksamQ9MCxrZD0wLGxkPSExLG1kPSExLG5kPSRjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpoZCxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1qZDtqZD1hLnNjcmVlblg7cmV0dXJuIGxkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLVxuYjowOihsZD0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTt2YXIgYj1rZDtrZD1hLnNjcmVlblk7cmV0dXJuIG1kP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDoobWQ9ITAsMCl9fSksb2Q9bmQuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLHBkPW5kLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxxZD0kYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpoZH0pLHJkPUUuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxcbmVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksc2Q9bmQuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHRkPVtbXCJibHVyXCIsXCJibHVyXCIsMF0sW1wiY2FuY2VsXCIsXCJjYW5jZWxcIiwwXSxbXCJjbGlja1wiLFwiY2xpY2tcIiwwXSxbXCJjbG9zZVwiLFwiY2xvc2VcIiwwXSxbXCJjb250ZXh0bWVudVwiLFwiY29udGV4dE1lbnVcIiwwXSxbXCJjb3B5XCIsXCJjb3B5XCIsMF0sW1wiY3V0XCIsXCJjdXRcIiwwXSxbXCJhdXhjbGlja1wiLFwiYXV4Q2xpY2tcIiwwXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIiwwXSxbXCJkcmFnZW5kXCIsXCJkcmFnRW5kXCIsXG4wXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiLDBdLFtcImRyb3BcIixcImRyb3BcIiwwXSxbXCJmb2N1c1wiLFwiZm9jdXNcIiwwXSxbXCJpbnB1dFwiLFwiaW5wdXRcIiwwXSxbXCJpbnZhbGlkXCIsXCJpbnZhbGlkXCIsMF0sW1wia2V5ZG93blwiLFwia2V5RG93blwiLDBdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiLDBdLFtcImtleXVwXCIsXCJrZXlVcFwiLDBdLFtcIm1vdXNlZG93blwiLFwibW91c2VEb3duXCIsMF0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiLDBdLFtcInBhc3RlXCIsXCJwYXN0ZVwiLDBdLFtcInBhdXNlXCIsXCJwYXVzZVwiLDBdLFtcInBsYXlcIixcInBsYXlcIiwwXSxbXCJwb2ludGVyY2FuY2VsXCIsXCJwb2ludGVyQ2FuY2VsXCIsMF0sW1wicG9pbnRlcmRvd25cIixcInBvaW50ZXJEb3duXCIsMF0sW1wicG9pbnRlcnVwXCIsXCJwb2ludGVyVXBcIiwwXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCIsMF0sW1wicmVzZXRcIixcInJlc2V0XCIsMF0sW1wic2Vla2VkXCIsXCJzZWVrZWRcIiwwXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiLDBdLFtcInRvdWNoY2FuY2VsXCIsXCJ0b3VjaENhbmNlbFwiLFxuMF0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCIsMF0sW1widG91Y2hzdGFydFwiLFwidG91Y2hTdGFydFwiLDBdLFtcInZvbHVtZWNoYW5nZVwiLFwidm9sdW1lQ2hhbmdlXCIsMF0sW1wiZHJhZ1wiLFwiZHJhZ1wiLDFdLFtcImRyYWdlbnRlclwiLFwiZHJhZ0VudGVyXCIsMV0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCIsMV0sW1wiZHJhZ2xlYXZlXCIsXCJkcmFnTGVhdmVcIiwxXSxbXCJkcmFnb3ZlclwiLFwiZHJhZ092ZXJcIiwxXSxbXCJtb3VzZW1vdmVcIixcIm1vdXNlTW92ZVwiLDFdLFtcIm1vdXNlb3V0XCIsXCJtb3VzZU91dFwiLDFdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCIsMV0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCIsMV0sW1wicG9pbnRlcm91dFwiLFwicG9pbnRlck91dFwiLDFdLFtcInBvaW50ZXJvdmVyXCIsXCJwb2ludGVyT3ZlclwiLDFdLFtcInNjcm9sbFwiLFwic2Nyb2xsXCIsMV0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIiwxXSxbXCJ0b3VjaG1vdmVcIixcInRvdWNoTW92ZVwiLDFdLFtcIndoZWVsXCIsXCJ3aGVlbFwiLDFdLFtcImFib3J0XCIsXCJhYm9ydFwiLFxuMl0sW1piLFwiYW5pbWF0aW9uRW5kXCIsMl0sWyRiLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsMl0sW2FjLFwiYW5pbWF0aW9uU3RhcnRcIiwyXSxbXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsMl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsMl0sW1wiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsMl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiLDJdLFtcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsMl0sW1wiZW5kZWRcIixcImVuZGVkXCIsMl0sW1wiZXJyb3JcIixcImVycm9yXCIsMl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsMl0sW1wibG9hZFwiLFwibG9hZFwiLDJdLFtcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIiwyXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIiwyXSxbXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLDJdLFtcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsMl0sW1wicGxheWluZ1wiLFwicGxheWluZ1wiLDJdLFtcInByb2dyZXNzXCIsXG5cInByb2dyZXNzXCIsMl0sW1wic2Vla2luZ1wiLFwic2Vla2luZ1wiLDJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIiwyXSxbXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsMl0sW1widGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLDJdLFtiYyxcInRyYW5zaXRpb25FbmRcIiwyXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCIsMl1dLHVkPXt9LHZkPXt9LHhkPTA7Zm9yKDt4ZDx0ZC5sZW5ndGg7eGQrKyl7dmFyIHlkPXRkW3hkXSx6ZD15ZFswXSxBZD15ZFsxXSxCZD15ZFsyXSxDZD1cIm9uXCIrKEFkWzBdLnRvVXBwZXJDYXNlKCkrQWQuc2xpY2UoMSkpLERkPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpDZCxjYXB0dXJlZDpDZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlt6ZF0sZXZlbnRQcmlvcml0eTpCZH07dWRbQWRdPURkO3ZkW3pkXT1EZH1cbnZhciBFZD17ZXZlbnRUeXBlczp1ZCxnZXRFdmVudFByaW9yaXR5OmZ1bmN0aW9uKGEpe2E9dmRbYV07cmV0dXJuIHZvaWQgMCE9PWE/YS5ldmVudFByaW9yaXR5OjJ9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dmRbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1iZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9aWQ7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPWFkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9bmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1cbnBkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9cWQ7YnJlYWs7Y2FzZSBaYjpjYXNlICRiOmNhc2UgYWM6YT1ZYzticmVhaztjYXNlIGJjOmE9cmQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9JGM7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT1zZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPVpjO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9b2Q7YnJlYWs7ZGVmYXVsdDphPUV9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtTYyhiKTtyZXR1cm4gYn19LEZkPXEudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksXG5HZD1xLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxIZD1FZC5nZXRFdmVudFByaW9yaXR5LElkPTEwLEpkPVtdO1xuZnVuY3Rpb24gS2QoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZD1jO2lmKDM9PT1kLnRhZylkPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZWxzZXtmb3IoO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb31pZighZClicmVhaztiPWMudGFnOzUhPT1iJiY2IT09Ynx8YS5hbmNlc3RvcnMucHVzaChjKTtjPUZjKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPU1jKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7Zm9yKHZhciBmPWEubmF0aXZlRXZlbnQsZz1hLmV2ZW50U3lzdGVtRmxhZ3MsaD1udWxsLGs9MDtrPGVhLmxlbmd0aDtrKyspe3ZhciBsPWVhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9eGEoaCxsKSl9QmEoaCl9fVxudmFyIExkPSEwO2Z1bmN0aW9uIEYoYSxiKXtNZChiLGEsITEpfWZ1bmN0aW9uIE1kKGEsYixjKXtzd2l0Y2goSGQoYikpe2Nhc2UgMDp2YXIgZD1OZC5iaW5kKG51bGwsYiwxKTticmVhaztjYXNlIDE6ZD1PZC5iaW5kKG51bGwsYiwxKTticmVhaztkZWZhdWx0OmQ9UGQuYmluZChudWxsLGIsMSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBOZChhLGIsYyl7aWJ8fGdiKCk7dmFyIGQ9UGQsZT1pYjtpYj0hMDt0cnl7ZmIoZCxhLGIsYyl9ZmluYWxseXsoaWI9ZSl8fGtiKCl9fWZ1bmN0aW9uIE9kKGEsYixjKXtHZChGZCxQZC5iaW5kKG51bGwsYSxiLGMpKX1cbmZ1bmN0aW9uIFFkKGEsYixjLGQpe2lmKEpkLmxlbmd0aCl7dmFyIGU9SmQucG9wKCk7ZS50b3BMZXZlbFR5cGU9YTtlLmV2ZW50U3lzdGVtRmxhZ3M9YjtlLm5hdGl2ZUV2ZW50PWM7ZS50YXJnZXRJbnN0PWQ7YT1lfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpiLG5hdGl2ZUV2ZW50OmMsdGFyZ2V0SW5zdDpkLGFuY2VzdG9yczpbXX07dHJ5e2lmKGI9S2QsYz1hLGpiKWIoYyx2b2lkIDApO2Vsc2V7amI9ITA7dHJ5e2hiKGIsYyx2b2lkIDApfWZpbmFsbHl7amI9ITEsa2IoKX19fWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsSmQubGVuZ3RoPElkJiZKZC5wdXNoKGEpfX1cbmZ1bmN0aW9uIFBkKGEsYixjKXtpZihMZClpZigwPG5jLmxlbmd0aCYmLTE8dWMuaW5kZXhPZihhKSlhPXpjKG51bGwsYSxiLGMpLG5jLnB1c2goYSk7ZWxzZXt2YXIgZD1IYyhhLGIsYyk7bnVsbD09PWQ/QWMoYSxjKTotMTx1Yy5pbmRleE9mKGEpPyhhPXpjKGQsYSxiLGMpLG5jLnB1c2goYSkpOkRjKGQsYSxiLGMpfHwoQWMoYSxjKSxRZChhLGIsYyxudWxsKSl9fWZ1bmN0aW9uIEhjKGEsYixjKXt2YXIgZD1NYyhjKTtkPUZjKGQpO2lmKG51bGwhPT1kKXt2YXIgZT1lYyhkKTtpZihudWxsPT09ZSlkPW51bGw7ZWxzZXt2YXIgZj1lLnRhZztpZigxMz09PWYpe2Q9ZmMoZSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7ZD1udWxsfWVsc2UgaWYoMz09PWYpe2lmKGUuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1lLnRhZz9lLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7ZD1udWxsfWVsc2UgZSE9PWQmJihkPW51bGwpfX1RZChhLGIsYyxkKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJkKGEpe2lmKCFZYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgU2Q9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24geGMoYSl7dmFyIGI9U2QuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBTZXQsU2Quc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24geWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjpNZChiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6TWQoYixcImZvY3VzXCIsITApO01kKGIsXCJibHVyXCIsITApO2MuYWRkKFwiYmx1clwiKTtjLmFkZChcImZvY3VzXCIpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpSZChhKSYmTWQoYixhLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09ZGMuaW5kZXhPZihhKSYmRihhLGIpfWMuYWRkKGEpfX1cbnZhciBUZD17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxVZD1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoVGQpLmZvckVhY2goZnVuY3Rpb24oYSl7VWQuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtUZFtiXT1UZFthXX0pfSk7ZnVuY3Rpb24gVmQoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fFRkLmhhc093blByb3BlcnR5KGEpJiZUZFthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBXZChhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1WZChjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBYZD1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gWWQoYSxiKXtpZihiKXtpZihYZFthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoMTM3LGEsXCJcIikpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IodSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IodSg2MixcIlwiKSk7fX1cbmZ1bmN0aW9uIFpkKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1mdW5jdGlvbiAkZChhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz14YyhhKTtiPWphW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXljKGJbZF0sYSxjKX1mdW5jdGlvbiBhZSgpe31cbmZ1bmN0aW9uIGJlKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiBjZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9ZnVuY3Rpb24gZGUoYSxiKXt2YXIgYz1jZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1jZShjKX19XG5mdW5jdGlvbiBlZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP2VlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1mdW5jdGlvbiBmZSgpe2Zvcih2YXIgYT13aW5kb3csYj1iZSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1iZShhLmRvY3VtZW50KX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGdlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9dmFyIGhlPVwiJFwiLGllPVwiLyRcIixqZT1cIiQ/XCIsa2U9XCIkIVwiLGxlPW51bGwsbWU9bnVsbDtmdW5jdGlvbiBuZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBvZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIHBlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHFlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiByZShhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1cbmZ1bmN0aW9uIHNlKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PWhlfHxjPT09a2V8fGM9PT1qZSl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2UgYz09PWllJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgdGU9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksdWU9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIit0ZSx2ZT1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK3RlLHdlPVwiX19yZWFjdENvbnRhaW5lcmUkXCIrdGU7XG5mdW5jdGlvbiBGYyhhKXt2YXIgYj1hW3VlXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t3ZV18fGNbdWVdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2UoYSk7bnVsbCE9PWE7KXtpZihjPWFbdWVdKXJldHVybiBjO2E9c2UoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENjKGEpe2E9YVt1ZV18fGFbd2VdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB4ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IodSgzMykpO31mdW5jdGlvbiB5ZShhKXtyZXR1cm4gYVt2ZV18fG51bGx9dmFyIHplPW51bGwsQWU9bnVsbCxCZT1udWxsO1xuZnVuY3Rpb24gQ2UoKXtpZihCZSlyZXR1cm4gQmU7dmFyIGEsYj1BZSxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiB6ZT96ZS52YWx1ZTp6ZS50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBCZT1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfXZhciBEZT1FLmV4dGVuZCh7ZGF0YTpudWxsfSksRWU9RS5leHRlbmQoe2RhdGE6bnVsbH0pLEZlPVs5LDEzLDI3LDMyXSxHZT1ZYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csSGU9bnVsbDtZYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoSGU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBJZT1ZYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIUhlLEplPVlhJiYoIUdlfHxIZSYmODxIZSYmMTE+PUhlKSxLZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxMZT17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxNZT0hMTtcbmZ1bmN0aW9uIE5lKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09RmUuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBPZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBQZT0hMTtmdW5jdGlvbiBRZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gT2UoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO01lPSEwO3JldHVybiBLZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1LZSYmTWU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gUmUoYSxiKXtpZihQZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhR2UmJk5lKGEsYik/KGE9Q2UoKSxCZT1BZT16ZT1udWxsLFBlPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBKZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgU2U9e2V2ZW50VHlwZXM6TGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZTtpZihHZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgZj1MZS5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Zj1MZS5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmY9TGUuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1mPXZvaWQgMH1lbHNlIFBlP05lKGEsYykmJihmPUxlLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGY9TGUuY29tcG9zaXRpb25TdGFydCk7Zj8oSmUmJlwia29cIiE9PWMubG9jYWxlJiYoUGV8fGYhPT1MZS5jb21wb3NpdGlvblN0YXJ0P2Y9PT1MZS5jb21wb3NpdGlvbkVuZCYmUGUmJihlPUNlKCkpOih6ZT1kLEFlPVwidmFsdWVcImluIHplP3plLnZhbHVlOnplLnRleHRDb250ZW50LFBlPSEwKSksZj1EZS5nZXRQb29sZWQoZixcbmIsYyxkKSxlP2YuZGF0YT1lOihlPU9lKGMpLG51bGwhPT1lJiYoZi5kYXRhPWUpKSxTYyhmKSxlPWYpOmU9bnVsbDsoYT1JZT9RZShhLGMpOlJlKGEsYykpPyhiPUVlLmdldFBvb2xlZChMZS5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsU2MoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWU/YjpudWxsPT09Yj9lOltlLGJdfX0sVGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gVWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFUZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG52YXIgVmU9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gV2UoYSxiLGMpe2E9RS5nZXRQb29sZWQoVmUuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtjYihjKTtTYyhhKTtyZXR1cm4gYX12YXIgWGU9bnVsbCxZZT1udWxsO2Z1bmN0aW9uIFplKGEpe0JhKGEpfWZ1bmN0aW9uICRlKGEpe3ZhciBiPXhlKGEpO2lmKHpiKGIpKXJldHVybiBhfWZ1bmN0aW9uIGFmKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIGJmPSExO1lhJiYoYmY9UmQoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7XG5mdW5jdGlvbiBjZigpe1hlJiYoWGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsZGYpLFllPVhlPW51bGwpfWZ1bmN0aW9uIGRmKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiYkZShZZSkpaWYoYT1XZShZZSxhLE1jKGEpKSxpYilCYShhKTtlbHNle2liPSEwO3RyeXtlYihaZSxhKX1maW5hbGx5e2liPSExLGtiKCl9fX1mdW5jdGlvbiBlZihhLGIsYyl7XCJmb2N1c1wiPT09YT8oY2YoKSxYZT1iLFllPWMsWGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsZGYpKTpcImJsdXJcIj09PWEmJmNmKCl9ZnVuY3Rpb24gZmYoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gJGUoWWUpfWZ1bmN0aW9uIGdmKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gJGUoYil9ZnVuY3Rpb24gaGYoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gJGUoYil9XG52YXIgamY9e2V2ZW50VHlwZXM6VmUsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpiZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/eGUoYik6d2luZG93LGY9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1mfHxcImlucHV0XCI9PT1mJiZcImZpbGVcIj09PWUudHlwZSl2YXIgZz1hZjtlbHNlIGlmKFVlKGUpKWlmKGJmKWc9aGY7ZWxzZXtnPWZmO3ZhciBoPWVmfWVsc2UoZj1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zi50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZz1nZik7aWYoZyYmKGc9ZyhhLGIpKSlyZXR1cm4gV2UoZyxjLGQpO2gmJmgoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZGYihlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxrZj17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLFxuZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sbGYsbWY9e2V2ZW50VHlwZXM6a2YsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGc9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGYmJjA9PT0oZSYzMikmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZyYmIWYpcmV0dXJuIG51bGw7XG5lPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP0ZjKGIpOm51bGwsbnVsbCE9PWImJihmPWVjKGIpLGIhPT1mfHw1IT09Yi50YWcmJjYhPT1iLnRhZykpYj1udWxsfWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKXt2YXIgaD1uZDt2YXIgaz1rZi5tb3VzZUxlYXZlO3ZhciBsPWtmLm1vdXNlRW50ZXI7dmFyIG09XCJtb3VzZVwifWVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWg9b2Qsaz1rZi5wb2ludGVyTGVhdmUsbD1rZi5wb2ludGVyRW50ZXIsbT1cInBvaW50ZXJcIjthPW51bGw9PWc/ZTp4ZShnKTtlPW51bGw9PWI/ZTp4ZShiKTtrPWguZ2V0UG9vbGVkKGssZyxjLGQpO2sudHlwZT1tK1wibGVhdmVcIjtrLnRhcmdldD1cbmE7ay5yZWxhdGVkVGFyZ2V0PWU7ZD1oLmdldFBvb2xlZChsLGIsYyxkKTtkLnR5cGU9bStcImVudGVyXCI7ZC50YXJnZXQ9ZTtkLnJlbGF0ZWRUYXJnZXQ9YTtoPWc7bT1iO2lmKGgmJm0pYTp7bD1oO2E9bTtnPTA7Zm9yKGI9bDtiO2I9TmMoYikpZysrO2I9MDtmb3IoZT1hO2U7ZT1OYyhlKSliKys7Zm9yKDswPGctYjspbD1OYyhsKSxnLS07Zm9yKDswPGItZzspYT1OYyhhKSxiLS07Zm9yKDtnLS07KXtpZihsPT09YXx8bD09PWEuYWx0ZXJuYXRlKWJyZWFrIGE7bD1OYyhsKTthPU5jKGEpfWw9bnVsbH1lbHNlIGw9bnVsbDthPWw7Zm9yKGw9W107aCYmaCE9PWE7KXtnPWguYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09YSlicmVhaztsLnB1c2goaCk7aD1OYyhoKX1mb3IoaD1bXTttJiZtIT09YTspe2c9bS5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1hKWJyZWFrO2gucHVzaChtKTttPU5jKG0pfWZvcihtPTA7bTxsLmxlbmd0aDttKyspUWMobFttXSxcImJ1YmJsZWRcIixrKTtmb3IobT1cbmgubGVuZ3RoOzA8bS0tOylRYyhoW21dLFwiY2FwdHVyZWRcIixkKTtpZihjPT09bGYpcmV0dXJuIGxmPW51bGwsW2tdO2xmPWM7cmV0dXJuW2ssZF19fTtmdW5jdGlvbiBuZihhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIG9mPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOm5mLHBmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gcWYoYSxiKXtpZihvZihhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIXBmLmNhbGwoYixjW2RdKXx8IW9mKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9XG52YXIgcmY9WWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxzZj17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sdGY9bnVsbCx1Zj1udWxsLHZmPW51bGwsd2Y9ITE7XG5mdW5jdGlvbiB4ZihhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKHdmfHxudWxsPT10Znx8dGYhPT1iZShjKSlyZXR1cm4gbnVsbDtjPXRmO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJmdlKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIHZmJiZxZih2ZixjKT9udWxsOih2Zj1jLGE9RS5nZXRQb29sZWQoc2Yuc2VsZWN0LHVmLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9dGYsU2MoYSksYSl9XG52YXIgeWY9e2V2ZW50VHlwZXM6c2YsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9eGMoZSk7Zj1qYS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKylpZighZS5oYXMoZltnXSkpe2U9ITE7YnJlYWsgYX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/eGUoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihVZShlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSl0Zj1lLHVmPWIsdmY9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOnZmPXVmPXRmPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOndmPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gd2Y9ITEseGYoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYocmYpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiB4ZihjLGQpfXJldHVybiBudWxsfX07Q2EuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt2YXIgemY9Q2M7c2E9eWU7dWE9emY7dmE9eGU7Q2EuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpFZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46bWYsQ2hhbmdlRXZlbnRQbHVnaW46amYsU2VsZWN0RXZlbnRQbHVnaW46eWYsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpTZX0pO25ldyBTZXQ7dmFyIEFmPVtdLEJmPS0xO2Z1bmN0aW9uIEcoYSl7MD5CZnx8KGEuY3VycmVudD1BZltCZl0sQWZbQmZdPW51bGwsQmYtLSl9XG5mdW5jdGlvbiBJKGEsYil7QmYrKztBZltCZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxKPXtjdXJyZW50OkNmfSxLPXtjdXJyZW50OiExfSxEZj1DZjtmdW5jdGlvbiBFZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIENmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIEZmKGEpe0coSyxhKTtHKEosYSl9ZnVuY3Rpb24gR2YoYSl7RyhLLGEpO0coSixhKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoSi5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IodSgxNjgpKTtJKEosYixhKTtJKEssYyxhKX1mdW5jdGlvbiBJZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHUoMTA4LFdhKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG4oe30sYyx7fSxkKX1mdW5jdGlvbiBKZihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPUouY3VycmVudDtJKEosYixhKTtJKEssSy5jdXJyZW50LGEpO3JldHVybiEwfVxuZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHUoMTY5KSk7Yz8oYj1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YixHKEssYSksRyhKLGEpLEkoSixiLGEpKTpHKEssYSk7SShLLGMsYSl9XG52YXIgTGY9cS51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksTWY9cS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLE5mPXEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssT2Y9cS51bnN0YWJsZV9zaG91bGRZaWVsZCxQZj1xLnVuc3RhYmxlX3JlcXVlc3RQYWludCxRZj1xLnVuc3RhYmxlX25vdyxSZj1xLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFNmPXEudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVGY9cS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxVZj1xLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFZmPXEudW5zdGFibGVfTG93UHJpb3JpdHksV2Y9cS51bnN0YWJsZV9JZGxlUHJpb3JpdHksWGY9e30sWWY9dm9pZCAwIT09UGY/UGY6ZnVuY3Rpb24oKXt9LFpmPW51bGwsJGY9bnVsbCxhZz0hMSxiZz1RZigpLGNnPTFFND5iZz9RZjpmdW5jdGlvbigpe3JldHVybiBRZigpLWJnfTtcbmZ1bmN0aW9uIGRnKCl7c3dpdGNoKFJmKCkpe2Nhc2UgU2Y6cmV0dXJuIDk5O2Nhc2UgVGY6cmV0dXJuIDk4O2Nhc2UgVWY6cmV0dXJuIDk3O2Nhc2UgVmY6cmV0dXJuIDk2O2Nhc2UgV2Y6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGVnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBTZjtjYXNlIDk4OnJldHVybiBUZjtjYXNlIDk3OnJldHVybiBVZjtjYXNlIDk2OnJldHVybiBWZjtjYXNlIDk1OnJldHVybiBXZjtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBmZyhhLGIpe2E9ZWcoYSk7cmV0dXJuIExmKGEsYil9ZnVuY3Rpb24gZ2coYSxiLGMpe2E9ZWcoYSk7cmV0dXJuIE1mKGEsYixjKX1mdW5jdGlvbiBoZyhhKXtudWxsPT09WmY/KFpmPVthXSwkZj1NZihTZixpZykpOlpmLnB1c2goYSk7cmV0dXJuIFhmfWZ1bmN0aW9uIGpnKCl7aWYobnVsbCE9PSRmKXt2YXIgYT0kZjskZj1udWxsO05mKGEpfWlnKCl9XG5mdW5jdGlvbiBpZygpe2lmKCFhZyYmbnVsbCE9PVpmKXthZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1aZjtmZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7WmY9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09WmYmJihaZj1aZi5zbGljZShhKzEpKSxNZihTZixqZyksYzt9ZmluYWxseXthZz0hMX19fXZhciBrZz0zO2Z1bmN0aW9uIGxnKGEsYixjKXtjLz0xMDtyZXR1cm4gMTA3Mzc0MTgyMS0oKCgxMDczNzQxODIxLWErYi8xMCkvY3wwKSsxKSpjfWZ1bmN0aW9uIG1nKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifXZhciBuZz17Y3VycmVudDpudWxsfSxvZz1udWxsLHBnPW51bGwscWc9bnVsbDtmdW5jdGlvbiByZygpe3FnPXBnPW9nPW51bGx9XG5mdW5jdGlvbiBzZyhhLGIpe3ZhciBjPWEudHlwZS5fY29udGV4dDtJKG5nLGMuX2N1cnJlbnRWYWx1ZSxhKTtjLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiB0ZyhhKXt2YXIgYj1uZy5jdXJyZW50O0cobmcsYSk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiB1ZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZihhLmNoaWxkRXhwaXJhdGlvblRpbWU8YilhLmNoaWxkRXhwaXJhdGlvblRpbWU9YixudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7ZWxzZSBpZihudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYy5jaGlsZEV4cGlyYXRpb25UaW1lPWI7ZWxzZSBicmVhazthPWEucmV0dXJufX1cbmZ1bmN0aW9uIHZnKGEsYil7b2c9YTtxZz1wZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJih3Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9ZnVuY3Rpb24geGcoYSxiKXtpZihxZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PXBnKXtpZihudWxsPT09b2cpdGhyb3cgRXJyb3IodSgzMDgpKTtwZz1iO29nLmRlcGVuZGVuY2llcz17ZXhwaXJhdGlvblRpbWU6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2UgcGc9cGcubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHlnPSExO1xuZnVuY3Rpb24gemcoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLGZpcnN0VXBkYXRlOm51bGwsbGFzdFVwZGF0ZTpudWxsLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fWZ1bmN0aW9uIEFnKGEpe3JldHVybntiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RVcGRhdGU6YS5maXJzdFVwZGF0ZSxsYXN0VXBkYXRlOmEubGFzdFVwZGF0ZSxmaXJzdENhcHR1cmVkVXBkYXRlOm51bGwsbGFzdENhcHR1cmVkVXBkYXRlOm51bGwsZmlyc3RFZmZlY3Q6bnVsbCxsYXN0RWZmZWN0Om51bGwsZmlyc3RDYXB0dXJlZEVmZmVjdDpudWxsLGxhc3RDYXB0dXJlZEVmZmVjdDpudWxsfX1cbmZ1bmN0aW9uIEJnKGEsYil7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGwsbmV4dEVmZmVjdDpudWxsfX1mdW5jdGlvbiBDZyhhLGIpe251bGw9PT1hLmxhc3RVcGRhdGU/YS5maXJzdFVwZGF0ZT1hLmxhc3RVcGRhdGU9YjooYS5sYXN0VXBkYXRlLm5leHQ9YixhLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBEZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKG51bGw9PT1jKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO3ZhciBlPW51bGw7bnVsbD09PWQmJihkPWEudXBkYXRlUXVldWU9emcoYS5tZW1vaXplZFN0YXRlKSl9ZWxzZSBkPWEudXBkYXRlUXVldWUsZT1jLnVwZGF0ZVF1ZXVlLG51bGw9PT1kP251bGw9PT1lPyhkPWEudXBkYXRlUXVldWU9emcoYS5tZW1vaXplZFN0YXRlKSxlPWMudXBkYXRlUXVldWU9emcoYy5tZW1vaXplZFN0YXRlKSk6ZD1hLnVwZGF0ZVF1ZXVlPUFnKGUpOm51bGw9PT1lJiYoZT1jLnVwZGF0ZVF1ZXVlPUFnKGQpKTtudWxsPT09ZXx8ZD09PWU/Q2coZCxiKTpudWxsPT09ZC5sYXN0VXBkYXRlfHxudWxsPT09ZS5sYXN0VXBkYXRlPyhDZyhkLGIpLENnKGUsYikpOihDZyhkLGIpLGUubGFzdFVwZGF0ZT1iKX1cbmZ1bmN0aW9uIEVnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtjPW51bGw9PT1jP2EudXBkYXRlUXVldWU9emcoYS5tZW1vaXplZFN0YXRlKTpGZyhhLGMpO251bGw9PT1jLmxhc3RDYXB0dXJlZFVwZGF0ZT9jLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yy5sYXN0Q2FwdHVyZWRVcGRhdGU9YjooYy5sYXN0Q2FwdHVyZWRVcGRhdGUubmV4dD1iLGMubGFzdENhcHR1cmVkVXBkYXRlPWIpfWZ1bmN0aW9uIEZnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmI9PT1jLnVwZGF0ZVF1ZXVlJiYoYj1hLnVwZGF0ZVF1ZXVlPUFnKGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEdnKGEsYixjLGQsZSxmKXtzd2l0Y2goYy50YWcpe2Nhc2UgMTpyZXR1cm4gYT1jLnBheWxvYWQsXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2Nhc2UgMzphLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtNDA5N3w2NDtjYXNlIDA6YT1jLnBheWxvYWQ7ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoZixkLGUpOmE7aWYobnVsbD09PWV8fHZvaWQgMD09PWUpYnJlYWs7cmV0dXJuIG4oe30sZCxlKTtjYXNlIDI6eWc9ITB9cmV0dXJuIGR9XG5mdW5jdGlvbiBIZyhhLGIsYyxkLGUpe3lnPSExO2I9RmcoYSxiKTtmb3IodmFyIGY9Yi5iYXNlU3RhdGUsZz1udWxsLGg9MCxrPWIuZmlyc3RVcGRhdGUsbD1mO251bGwhPT1rOyl7dmFyIG09ay5leHBpcmF0aW9uVGltZTttPGU/KG51bGw9PT1nJiYoZz1rLGY9bCksaDxtJiYoaD1tKSk6KElnKG0say5zdXNwZW5zZUNvbmZpZyksbD1HZyhhLGIsayxsLGMsZCksbnVsbCE9PWsuY2FsbGJhY2smJihhLmVmZmVjdFRhZ3w9MzIsay5uZXh0RWZmZWN0PW51bGwsbnVsbD09PWIubGFzdEVmZmVjdD9iLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1rOihiLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdEVmZmVjdD1rKSkpO2s9ay5uZXh0fW09bnVsbDtmb3Ioaz1iLmZpcnN0Q2FwdHVyZWRVcGRhdGU7bnVsbCE9PWs7KXt2YXIgQz1rLmV4cGlyYXRpb25UaW1lO0M8ZT8obnVsbD09PW0mJihtPWssbnVsbD09PWcmJihmPWwpKSxoPEMmJihoPUMpKToobD1HZyhhLGIsayxsLGMsZCksbnVsbCE9PVxuay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q/Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PWs6KGIubGFzdENhcHR1cmVkRWZmZWN0Lm5leHRFZmZlY3Q9ayxiLmxhc3RDYXB0dXJlZEVmZmVjdD1rKSkpO2s9ay5uZXh0fW51bGw9PT1nJiYoYi5sYXN0VXBkYXRlPW51bGwpO251bGw9PT1tP2IubGFzdENhcHR1cmVkVXBkYXRlPW51bGw6YS5lZmZlY3RUYWd8PTMyO251bGw9PT1nJiZudWxsPT09bSYmKGY9bCk7Yi5iYXNlU3RhdGU9ZjtiLmZpcnN0VXBkYXRlPWc7Yi5maXJzdENhcHR1cmVkVXBkYXRlPW07SmcoaCk7YS5leHBpcmF0aW9uVGltZT1oO2EubWVtb2l6ZWRTdGF0ZT1sfVxuZnVuY3Rpb24gS2coYSxiLGMpe251bGwhPT1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUmJihudWxsIT09Yi5sYXN0VXBkYXRlJiYoYi5sYXN0VXBkYXRlLm5leHQ9Yi5maXJzdENhcHR1cmVkVXBkYXRlLGIubGFzdFVwZGF0ZT1iLmxhc3RDYXB0dXJlZFVwZGF0ZSksYi5maXJzdENhcHR1cmVkVXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlPW51bGwpO0xnKGIuZmlyc3RFZmZlY3QsYyk7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtMZyhiLmZpcnN0Q2FwdHVyZWRFZmZlY3QsYyk7Yi5maXJzdENhcHR1cmVkRWZmZWN0PWIubGFzdENhcHR1cmVkRWZmZWN0PW51bGx9ZnVuY3Rpb24gTGcoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5jYWxsYmFjaztpZihudWxsIT09Yyl7YS5jYWxsYmFjaz1udWxsO3ZhciBkPWI7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgRXJyb3IodSgxOTEsYykpO2MuY2FsbChkKX1hPWEubmV4dEVmZmVjdH19XG52YXIgTWc9RWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsTmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24gT2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YztkPWEudXBkYXRlUXVldWU7bnVsbCE9PWQmJjA9PT1hLmV4cGlyYXRpb25UaW1lJiYoZC5iYXNlU3RhdGU9Yyl9XG52YXIgU2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2VjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1QZygpLGU9TWcuc3VzcGVuc2U7ZD1RZyhkLGEsZSk7ZT1CZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtEZyhhLGUpO1JnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPVBnKCksZT1NZy5zdXNwZW5zZTtkPVFnKGQsYSxlKTtlPUJnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7RGcoYSxlKTtSZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1QZygpLGQ9TWcuc3VzcGVuc2U7XG5jPVFnKGMsYSxkKTtkPUJnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7RGcoYSxkKTtSZyhhLGMpfX07ZnVuY3Rpb24gVGcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hcWYoYyxkKXx8IXFmKGUsZik6ITB9XG5mdW5jdGlvbiBVZyhhLGIsYyl7dmFyIGQ9ITEsZT1DZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj14ZyhmKTooZT1MKGIpP0RmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1TZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBWZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmU2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBXZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPU5nO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9eGcoZik6KGY9TChiKT9EZjpKLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO2Y9YS51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKEhnKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihPZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZTZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxmPWEudXBkYXRlUXVldWUsbnVsbCE9PWYmJihIZyhhLGYsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIFhnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBZZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09TmcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFpnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiAkZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPWFoKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9YmgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPVlnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1jaChjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1ZZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPWRoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPWVoKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMsZCk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBDKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1iaChcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBHYTpyZXR1cm4gYz1jaChiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1ZZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgSGE6cmV0dXJuIGI9ZGgoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFhnKGIpfHxcblVhKGIpKXJldHVybiBiPWVoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1pnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBHYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PUlhP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihYZyhjKXx8VWEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1pnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSChhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIEdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1JYT9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSBIYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihYZyhkKXx8VWEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1pnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwscj1nLHg9Zz0wLEE9bnVsbDtudWxsIT09ciYmeDxoLmxlbmd0aDt4Kyspe3IuaW5kZXg+eD8oQT1yLHI9bnVsbCk6QT1yLnNpYmxpbmc7dmFyIHA9eShlLHIsaFt4XSxrKTtpZihudWxsPT09cCl7bnVsbD09PXImJihyPUEpO2JyZWFrfWEmJlxuciYmbnVsbD09PXAuYWx0ZXJuYXRlJiZiKGUscik7Zz1mKHAsZyx4KTtudWxsPT09bT9sPXA6bS5zaWJsaW5nPXA7bT1wO3I9QX1pZih4PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxyKSxsO2lmKG51bGw9PT1yKXtmb3IoO3g8aC5sZW5ndGg7eCsrKXI9QyhlLGhbeF0sayksbnVsbCE9PXImJihnPWYocixnLHgpLG51bGw9PT1tP2w9cjptLnNpYmxpbmc9cixtPXIpO3JldHVybiBsfWZvcihyPWQoZSxyKTt4PGgubGVuZ3RoO3grKylBPUgocixlLHgsaFt4XSxrKSxudWxsIT09QSYmKGEmJm51bGwhPT1BLmFsdGVybmF0ZSYmci5kZWxldGUobnVsbD09PUEua2V5P3g6QS5rZXkpLGc9ZihBLGcseCksbnVsbD09PW0/bD1BOm0uc2libGluZz1BLG09QSk7YSYmci5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB0YShlLGcsaCxrKXt2YXIgbD1VYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcih1KDE1MCkpO2g9bC5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1sPW51bGwscj1nLHg9Zz0wLEE9bnVsbCxwPWgubmV4dCgpO251bGwhPT1yJiYhcC5kb25lO3grKyxwPWgubmV4dCgpKXtyLmluZGV4Png/KEE9cixyPW51bGwpOkE9ci5zaWJsaW5nO3ZhciB6PXkoZSxyLHAudmFsdWUsayk7aWYobnVsbD09PXope251bGw9PT1yJiYocj1BKTticmVha31hJiZyJiZudWxsPT09ei5hbHRlcm5hdGUmJmIoZSxyKTtnPWYoeixnLHgpO251bGw9PT1tP2w9ejptLnNpYmxpbmc9ejttPXo7cj1BfWlmKHAuZG9uZSlyZXR1cm4gYyhlLHIpLGw7aWYobnVsbD09PXIpe2Zvcig7IXAuZG9uZTt4KysscD1oLm5leHQoKSlwPUMoZSxwLnZhbHVlLGspLG51bGwhPT1wJiYoZz1mKHAsZyx4KSxudWxsPT09bT9sPXA6bS5zaWJsaW5nPXAsbT1wKTtyZXR1cm4gbH1mb3Iocj1kKGUscik7IXAuZG9uZTt4KysscD1oLm5leHQoKSlwPUgocixlLHgscC52YWx1ZSxrKSxudWxsIT09cCYmKGEmJm51bGwhPT1cbnAuYWx0ZXJuYXRlJiZyLmRlbGV0ZShudWxsPT09cC5rZXk/eDpwLmtleSksZz1mKHAsZyx4KSxudWxsPT09bT9sPXA6bS5zaWJsaW5nPXAsbT1wKTthJiZyLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1JYSYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBHYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpaWYoNz09PWsudGFnP2YudHlwZT09PUlhOmsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYudHlwZT09PUlhP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxoKTtkLnJlZj1ZZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxcbmspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PUlhPyhkPWVoKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1jaChmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1ZZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgSGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGgpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1kaChmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09XG50eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmLGgpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9YmgoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoWGcoZikpcmV0dXJuIHooYSxkLGYsaCk7aWYoVWEoZikpcmV0dXJuIHRhKGEsZCxmLGgpO2wmJlpnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6dGhyb3cgYT1hLnR5cGUsRXJyb3IodSgxNTIsYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBmaD0kZyghMCksZ2g9JGcoITEpLGhoPXt9LGloPXtjdXJyZW50OmhofSxqaD17Y3VycmVudDpoaH0sa2g9e2N1cnJlbnQ6aGh9O2Z1bmN0aW9uIGxoKGEpe2lmKGE9PT1oaCl0aHJvdyBFcnJvcih1KDE3NCkpO3JldHVybiBhfVxuZnVuY3Rpb24gbWgoYSxiKXtJKGtoLGIsYSk7SShqaCxhLGEpO0koaWgsaGgsYSk7dmFyIGM9Yi5ub2RlVHlwZTtzd2l0Y2goYyl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6UWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmM9OD09PWM/Yi5wYXJlbnROb2RlOmIsYj1jLm5hbWVzcGFjZVVSSXx8bnVsbCxjPWMudGFnTmFtZSxiPVFiKGIsYyl9RyhpaCxhKTtJKGloLGIsYSl9ZnVuY3Rpb24gbmgoYSl7RyhpaCxhKTtHKGpoLGEpO0coa2gsYSl9ZnVuY3Rpb24gb2goYSl7bGgoa2guY3VycmVudCk7dmFyIGI9bGgoaWguY3VycmVudCk7dmFyIGM9UWIoYixhLnR5cGUpO2IhPT1jJiYoSShqaCxhLGEpLEkoaWgsYyxhKSl9ZnVuY3Rpb24gcGgoYSl7amguY3VycmVudD09PWEmJihHKGloLGEpLEcoamgsYSkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gcWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09amV8fGMuZGF0YT09PWtlKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIHJoKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIHNoPUVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsTj1FYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyx0aD0wLHVoPW51bGwsTz1udWxsLHZoPW51bGwsd2g9bnVsbCxQPW51bGwseGg9bnVsbCx5aD0wLHpoPW51bGwsQWg9MCxCaD0hMSxDaD1udWxsLEdoPTA7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHUoMzIxKSk7fWZ1bmN0aW9uIEhoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIW9mKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBJaChhLGIsYyxkLGUsZil7dGg9Zjt1aD1iO3ZoPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO3NoLmN1cnJlbnQ9bnVsbD09PXZoP0poOktoO2I9YyhkLGUpO2lmKEJoKXtkbyBCaD0hMSxHaCs9MSx2aD1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbCx4aD13aCx6aD1QPU89bnVsbCxzaC5jdXJyZW50PUtoLGI9YyhkLGUpO3doaWxlKEJoKTtDaD1udWxsO0doPTB9c2guY3VycmVudD1MaDthPXVoO2EubWVtb2l6ZWRTdGF0ZT13aDthLmV4cGlyYXRpb25UaW1lPXloO2EudXBkYXRlUXVldWU9emg7YS5lZmZlY3RUYWd8PUFoO2E9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7dGg9MDt4aD1QPXdoPXZoPU89dWg9bnVsbDt5aD0wO3poPW51bGw7QWg9MDtpZihhKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNaCgpe3NoLmN1cnJlbnQ9TGg7dGg9MDt4aD1QPXdoPXZoPU89dWg9bnVsbDt5aD0wO3poPW51bGw7QWg9MDtCaD0hMTtDaD1udWxsO0doPTB9ZnVuY3Rpb24gTmgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLHF1ZXVlOm51bGwsYmFzZVVwZGF0ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/d2g9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gT2goKXtpZihudWxsIT09eGgpUD14aCx4aD1QLm5leHQsTz12aCx2aD1udWxsIT09Tz9PLm5leHQ6bnVsbDtlbHNle2lmKG51bGw9PT12aCl0aHJvdyBFcnJvcih1KDMxMCkpO089dmg7dmFyIGE9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxxdWV1ZTpPLnF1ZXVlLGJhc2VVcGRhdGU6Ty5iYXNlVXBkYXRlLG5leHQ6bnVsbH07UD1udWxsPT09UD93aD1hOlAubmV4dD1hO3ZoPU8ubmV4dH1yZXR1cm4gUH1cbmZ1bmN0aW9uIFBoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gUWgoYSl7dmFyIGI9T2goKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTtpZigwPEdoKXt2YXIgZD1jLmRpc3BhdGNoO2lmKG51bGwhPT1DaCl7dmFyIGU9Q2guZ2V0KGMpO2lmKHZvaWQgMCE9PWUpe0NoLmRlbGV0ZShjKTt2YXIgZj1iLm1lbW9pemVkU3RhdGU7ZG8gZj1hKGYsZS5hY3Rpb24pLGU9ZS5uZXh0O3doaWxlKG51bGwhPT1lKTtvZihmLGIubWVtb2l6ZWRTdGF0ZSl8fCh3Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5iYXNlVXBkYXRlPT09Yy5sYXN0JiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mO3JldHVybltmLGRdfX1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGRdfWQ9Yy5sYXN0O3ZhciBnPWIuYmFzZVVwZGF0ZTtmPWIuYmFzZVN0YXRlO251bGwhPT1nPyhudWxsIT09ZCYmKGQubmV4dD1udWxsKSxkPWcubmV4dCk6ZD1udWxsIT09ZD9kLm5leHQ6bnVsbDtpZihudWxsIT09XG5kKXt2YXIgaD1lPW51bGwsaz1kLGw9ITE7ZG97dmFyIG09ay5leHBpcmF0aW9uVGltZTttPHRoPyhsfHwobD0hMCxoPWcsZT1mKSxtPnloJiYoeWg9bSxKZyh5aCkpKTooSWcobSxrLnN1c3BlbnNlQ29uZmlnKSxmPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShmLGsuYWN0aW9uKSk7Zz1rO2s9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZCk7bHx8KGg9ZyxlPWYpO29mKGYsYi5tZW1vaXplZFN0YXRlKXx8KHdnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtiLmJhc2VVcGRhdGU9aDtiLmJhc2VTdGF0ZT1lO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gUmgoYSl7dmFyIGI9TmgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6UGgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPVNoLmJpbmQobnVsbCx1aCxhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfWZ1bmN0aW9uIFRoKGEpe3JldHVybiBRaChQaCxhKX1mdW5jdGlvbiBVaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07bnVsbD09PXpoPyh6aD17bGFzdEVmZmVjdDpudWxsfSx6aC5sYXN0RWZmZWN0PWEubmV4dD1hKTooYj16aC5sYXN0RWZmZWN0LG51bGw9PT1iP3poLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGM9Yi5uZXh0LGIubmV4dD1hLGEubmV4dD1jLHpoLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9TmgoKTtBaHw9YTtlLm1lbW9pemVkU3RhdGU9VWgoYixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gV2goYSxiLGMsZCl7dmFyIGU9T2goKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZIaChkLGcuZGVwcykpe1VoKDAsYyxmLGQpO3JldHVybn19QWh8PWE7ZS5tZW1vaXplZFN0YXRlPVVoKGIsYyxmLGQpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiwxOTIsYSxiKX1mdW5jdGlvbiBZaChhLGIpe3JldHVybiBXaCg1MTYsMTkyLGEsYil9XG5mdW5jdGlvbiBaaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uICRoKCl7fWZ1bmN0aW9uIGFpKGEsYil7TmgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX1mdW5jdGlvbiBiaShhLGIpe3ZhciBjPU9oKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZIaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFNoKGEsYixjKXtpZighKDI1PkdoKSl0aHJvdyBFcnJvcih1KDMwMSkpO3ZhciBkPWEuYWx0ZXJuYXRlO2lmKGE9PT11aHx8bnVsbCE9PWQmJmQ9PT11aClpZihCaD0hMCxhPXtleHBpcmF0aW9uVGltZTp0aCxzdXNwZW5zZUNvbmZpZzpudWxsLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LG51bGw9PT1DaCYmKENoPW5ldyBNYXApLGM9Q2guZ2V0KGIpLHZvaWQgMD09PWMpQ2guc2V0KGIsYSk7ZWxzZXtmb3IoYj1jO251bGwhPT1iLm5leHQ7KWI9Yi5uZXh0O2IubmV4dD1hfWVsc2V7dmFyIGU9UGcoKSxmPU1nLnN1c3BlbnNlO2U9UWcoZSxhLGYpO2Y9e2V4cGlyYXRpb25UaW1lOmUsc3VzcGVuc2VDb25maWc6ZixhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTt2YXIgZz1iLmxhc3Q7aWYobnVsbD09PWcpZi5uZXh0PWY7ZWxzZXt2YXIgaD1nLm5leHQ7bnVsbCE9PWgmJlxuKGYubmV4dD1oKTtnLm5leHQ9Zn1iLmxhc3Q9ZjtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1kfHwwPT09ZC5leHBpcmF0aW9uVGltZSkmJihkPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZCkpdHJ5e3ZhciBrPWIubGFzdFJlbmRlcmVkU3RhdGUsbD1kKGssYyk7Zi5lYWdlclJlZHVjZXI9ZDtmLmVhZ2VyU3RhdGU9bDtpZihvZihsLGspKXJldHVybn1jYXRjaChtKXt9ZmluYWxseXt9UmcoYSxlKX19XG52YXIgTGg9e3JlYWRDb250ZXh0OnhnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LEpoPXtyZWFkQ29udGV4dDp4Zyx1c2VDYWxsYmFjazphaSx1c2VDb250ZXh0OnhnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwzNixaaC5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFZoKDQsMzYsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPU5oKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9XG5bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TmgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD1TaC5iaW5kKG51bGwsdWgsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPU5oKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOlJoLHVzZURlYnVnVmFsdWU6JGgsdXNlUmVzcG9uZGVyOnJoLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz1SaChhKSxkPWNbMF0sZT1jWzFdO1hoKGZ1bmN0aW9uKCl7cS51bnN0YWJsZV9uZXh0KGZ1bmN0aW9uKCl7dmFyIGM9Ti5zdXNwZW5zZTtOLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7Ti5zdXNwZW5zZT1cbmN9fSl9LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj1SaCghMSksYz1iWzBdLGQ9YlsxXTtyZXR1cm5bYWkoZnVuY3Rpb24oYil7ZCghMCk7cS51bnN0YWJsZV9uZXh0KGZ1bmN0aW9uKCl7dmFyIGM9Ti5zdXNwZW5zZTtOLnN1c3BlbnNlPXZvaWQgMD09PWE/bnVsbDphO3RyeXtkKCExKSxiKCl9ZmluYWxseXtOLnN1c3BlbnNlPWN9fSl9LFthLGNdKSxjXX19LEtoPXtyZWFkQ29udGV4dDp4Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnhnLHVzZUVmZmVjdDpZaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gV2goNCwzNixaaC5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFdoKDQsMzYsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPU9oKCk7Yj12b2lkIDA9PT1iP1xubnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkhoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOlFoLHVzZVJlZjpmdW5jdGlvbigpe3JldHVybiBPaCgpLm1lbW9pemVkU3RhdGV9LHVzZVN0YXRlOlRoLHVzZURlYnVnVmFsdWU6JGgsdXNlUmVzcG9uZGVyOnJoLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz1UaChhKSxkPWNbMF0sZT1jWzFdO1loKGZ1bmN0aW9uKCl7cS51bnN0YWJsZV9uZXh0KGZ1bmN0aW9uKCl7dmFyIGM9Ti5zdXNwZW5zZTtOLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7Ti5zdXNwZW5zZT1jfX0pfSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9VGgoITEpLGM9YlswXSxkPWJbMV07cmV0dXJuW2JpKGZ1bmN0aW9uKGIpe2QoITApO3EudW5zdGFibGVfbmV4dChmdW5jdGlvbigpe3ZhciBjPVxuTi5zdXNwZW5zZTtOLnN1c3BlbnNlPXZvaWQgMD09PWE/bnVsbDphO3RyeXtkKCExKSxiKCl9ZmluYWxseXtOLnN1c3BlbnNlPWN9fSl9LFthLGNdKSxjXX19LGNpPW51bGwsZGk9bnVsbCxlaT0hMTtmdW5jdGlvbiBmaShhLGIpe3ZhciBjPWdpKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBoaShhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gaWkoYSl7aWYoZWkpe3ZhciBiPWRpO2lmKGIpe3ZhciBjPWI7aWYoIWhpKGEsYikpe2I9cmUoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFoaShhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO2VpPSExO2NpPWE7cmV0dXJufWZpKGNpLGMpfWNpPWE7ZGk9cmUoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsZWk9ITEsY2k9YX19ZnVuY3Rpb24gamkoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO2NpPWF9XG5mdW5jdGlvbiBraShhKXtpZihhIT09Y2kpcmV0dXJuITE7aWYoIWVpKXJldHVybiBqaShhKSxlaT0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIW9lKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1kaTtiOylmaShhLGIpLGI9cmUoYi5uZXh0U2libGluZyk7amkoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1pZSl7aWYoMD09PWIpe2RpPXJlKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PWhlJiZjIT09a2UmJmMhPT1qZXx8YisrfWE9YS5uZXh0U2libGluZ31kaT1udWxsfX1lbHNlIGRpPWNpP3JlKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gbGkoKXtkaT1jaT1udWxsO2VpPSExfXZhciBtaT1FYS5SZWFjdEN1cnJlbnRPd25lcix3Zz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/Z2goYixudWxsLGMsZCk6ZmgoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gbmkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3ZnKGIsZSk7ZD1JaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF3ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLG9pKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFxaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxyaShhLGIsZyxkLGUsZik7YT1jaChjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOnFmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIG9pKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPWFoKGcsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiByaShhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZxZihhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJih3Zz0hMSxlPGYpP29pKGEsYixmKTpzaShhLGIsYyxkLGYpfWZ1bmN0aW9uIHRpKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gc2koYSxiLGMsZCxlKXt2YXIgZj1MKGMpP0RmOkouY3VycmVudDtmPUVmKGIsZik7dmcoYixlKTtjPUloKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXdnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksb2koYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB1aShhLGIsYyxkLGUpe2lmKEwoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt2ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksVWcoYixjLGQsZSksV2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9eGcobCk6KGw9TChjKT9EZjpKLmN1cnJlbnQsbD1FZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxDPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtDfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmVmcoYixnLGQsbCk7eWc9ITE7dmFyIHk9Yi5tZW1vaXplZFN0YXRlO2s9Zy5zdGF0ZT15O3ZhciBIPWIudXBkYXRlUXVldWU7bnVsbCE9PUgmJihIZyhiLEgsZCxnLGUpLGs9Yi5tZW1vaXplZFN0YXRlKTtoIT09ZHx8eSE9PWt8fEsuY3VycmVudHx8eWc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoT2coYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXlnfHxUZyhiLGMsaCxkLHksayxsKSk/KEN8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDptZyhiLnR5cGUsaCksaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD14ZyhsKToobD1MKGMpP0RmOkouY3VycmVudCxsPUVmKGIsbCkpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKEM9XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJlZnKGIsZyxkLGwpLHlnPSExLGs9Yi5tZW1vaXplZFN0YXRlLHk9Zy5zdGF0ZT1rLEg9Yi51cGRhdGVRdWV1ZSxudWxsIT09SCYmKEhnKGIsSCxkLGcsZSkseT1iLm1lbW9pemVkU3RhdGUpLGghPT1kfHxrIT09eXx8Sy5jdXJyZW50fHx5Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihPZyhiLGMsbSxkKSx5PWIubWVtb2l6ZWRTdGF0ZSksKG09eWd8fFRnKGIsYyxoLGQsayx5LGwpKT8oQ3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fFxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLHksbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx5LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1cbmQsYi5tZW1vaXplZFN0YXRlPXkpLGcucHJvcHM9ZCxnLnN0YXRlPXksZy5jb250ZXh0PWwsZD1tKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIHZpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHZpKGEsYixjLGQsZSxmKXt0aShhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxvaShhLGIsZik7ZD1iLnN0YXRlTm9kZTttaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1maChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPWZoKGIsbnVsbCxoLGYpKTpSKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gd2koYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7bWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHhpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlUaW1lOjB9O1xuZnVuY3Rpb24geWkoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9TS5jdXJyZW50LGc9ITEsaDsoaD0wIT09KGIuZWZmZWN0VGFnJjY0KSl8fChoPTAhPT0oZiYyKSYmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKSk7aD8oZz0hMCxiLmVmZmVjdFRhZyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZS5mYWxsYmFja3x8ITA9PT1lLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZnw9MSk7SShNLGYmMSxiKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmaWkoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9ZWgobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1laChnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPXhpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9Z2goYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPWFoKGEsYS5wZW5kaW5nUHJvcHMsMCk7Yy5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSYmKGc9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWEuY2hpbGQpKWZvcihjLmNoaWxkPWc7bnVsbCE9PWc7KWcucmV0dXJuPWMsZz1nLnNpYmxpbmc7ZD1haChkLGUsZC5leHBpcmF0aW9uVGltZSk7ZC5yZXR1cm49YjtjLnNpYmxpbmc9ZDtjLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9eGk7Yi5jaGlsZD1jO3JldHVybiBkfWM9ZmgoYixhLmNoaWxkLGUuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPVxubnVsbDtyZXR1cm4gYi5jaGlsZD1jfWE9YS5jaGlsZDtpZihnKXtnPWUuZmFsbGJhY2s7ZT1laChudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2UuY2hpbGQ9YTtudWxsIT09YSYmKGEucmV0dXJuPWUpO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPWVoKGcsZCxjLG51bGwpO2MucmV0dXJuPWI7ZS5zaWJsaW5nPWM7Yy5lZmZlY3RUYWd8PTI7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPXhpO2IuY2hpbGQ9ZTtyZXR1cm4gY31iLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1maChiLGEsZS5jaGlsZHJlbixjKX1cbmZ1bmN0aW9uIHppKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt1ZyhhLnJldHVybixiKX1mdW5jdGlvbiBBaShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxsYXN0OmQsdGFpbDpjLHRhaWxFeHBpcmF0aW9uOjAsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxFeHBpcmF0aW9uPTAsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIEJpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7UihhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmVmZmVjdFRhZ3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ6aShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZyl6aShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKE0sZCxiKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09cWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTtBaShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1xaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9QWkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOkFpKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTswIT09ZCYmSmcoZCk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHUoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPWFoKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPWFoKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBDaShhKXthLmVmZmVjdFRhZ3w9NH12YXIgSGksSWksSmksS2k7XG5IaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07SWk9ZnVuY3Rpb24oKXt9O1xuSmk9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO2xoKGloLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj1BYihnLGYpO2Q9QWIoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUliKGcsZik7ZD1JYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPUtiKGcsZik7ZD1LYihnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPWFlKX1ZZChjLGQpO3ZhciBoLGs7Yz1udWxsO2ZvcihoIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoaCkmJmYuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWZbaF0paWYoXCJzdHlsZVwiPT09XG5oKWZvcihrIGluIGc9ZltoXSxnKWcuaGFzT3duUHJvcGVydHkoaykmJihjfHwoYz17fSksY1trXT1cIlwiKTtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09aCYmXCJjaGlsZHJlblwiIT09aCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKGlhLmhhc093blByb3BlcnR5KGgpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChoLG51bGwpKTtmb3IoaCBpbiBkKXt2YXIgbD1kW2hdO2c9bnVsbCE9Zj9mW2hdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGgpJiZsIT09ZyYmKG51bGwhPWx8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWgpaWYoZyl7Zm9yKGsgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShrKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShrKXx8KGN8fChjPXt9KSxjW2tdPVwiXCIpO2ZvcihrIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShrKSYmZ1trXSE9PWxba10mJihjfHwoYz17fSksXG5jW2tdPWxba10pfWVsc2UgY3x8KGF8fChhPVtdKSxhLnB1c2goaCxjKSksYz1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmZyE9PWwmJihhPWF8fFtdKS5wdXNoKGgsXCJcIitsKSk6XCJjaGlsZHJlblwiPT09aD9nPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGgsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJihpYS5oYXNPd25Qcm9wZXJ0eShoKT8obnVsbCE9bCYmJGQoZSxoKSxhfHxnPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChoLGwpKX1jJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsYyk7ZT1hOyhiLnVwZGF0ZVF1ZXVlPWUpJiZDaShiKX19O0tpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZDaShiKX07XG5mdW5jdGlvbiBMaShhLGIpe3N3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBNaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpMKGEudHlwZSkmJkZmKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6bmgoYSk7R2YoYSk7Yj1hLmVmZmVjdFRhZztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHUoMjg1KSk7YS5lZmZlY3RUYWc9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIHBoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gRyhNLGEpLGI9YS5lZmZlY3RUYWcsYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRyhNLGEpLG51bGw7Y2FzZSA0OnJldHVybiBuaChhKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHRnKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gTmkoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpYYShiKX19XG52YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gUGkoYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1YYShjKSk7bnVsbCE9PWMmJldhKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJldhKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIFFpKGEsYil7dHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtSaShhLGMpfX1mdW5jdGlvbiBTaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtSaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBUaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVaSgyLDAsYik7YnJlYWs7Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6bWcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1icmVhaztjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYzKSk7fX1cbmZ1bmN0aW9uIFVpKGEsYixjKXtjPWMudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG97aWYoMCE9PShkLnRhZyZhKSl7dmFyIGU9ZC5kZXN0cm95O2QuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZSYmZSgpfTAhPT0oZC50YWcmYikmJihlPWQuY3JlYXRlLGQuZGVzdHJveT1lKCkpO2Q9ZC5uZXh0fXdoaWxlKGQhPT1jKX19XG5mdW5jdGlvbiBWaShhLGIsYyl7XCJmdW5jdGlvblwiPT09dHlwZW9mIFdpJiZXaShiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtmZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7UmkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOlNpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJlFpKGIsYyk7YnJlYWs7Y2FzZSA1OlNpKGIpO2JyZWFrO2Nhc2UgNDpYaShhLGIsYyl9fVxuZnVuY3Rpb24gWWkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDtudWxsIT09YiYmWWkoYil9ZnVuY3Rpb24gWmkoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiAkaShhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihaaShiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59dGhyb3cgRXJyb3IodSgxNjApKTt9Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYxKSk7fWMuZWZmZWN0VGFnJjE2JiYoVGIoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fFppKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7dmFyIGY9NT09PWUudGFnfHw2PT09ZS50YWc7aWYoZil7dmFyIGc9Zj9lLnN0YXRlTm9kZTplLnN0YXRlTm9kZS5pbnN0YW5jZTtpZihjKWlmKGQpe2Y9Yjt2YXIgaD1nO2c9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGgsZyk6Zi5pbnNlcnRCZWZvcmUoaCxnKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGcsYyk7ZWxzZSBkPyhoPWIsOD09PWgubm9kZVR5cGU/KGY9aC5wYXJlbnROb2RlLGYuaW5zZXJ0QmVmb3JlKGcsaCkpOihmPWgsZi5hcHBlbmRDaGlsZChnKSksaD1oLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWgmJnZvaWQgMCE9PWh8fG51bGwhPT1mLm9uY2xpY2t8fChmLm9uY2xpY2s9YWUpKTpiLmFwcGVuZENoaWxkKGcpfWVsc2UgaWYoNCE9PVxuZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkLnJldHVybj1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZS5yZXR1cm58fGUucmV0dXJuPT09YSlyZXR1cm47ZT1lLnJldHVybn1lLnNpYmxpbmcucmV0dXJuPWUucmV0dXJuO2U9ZS5zaWJsaW5nfX1cbmZ1bmN0aW9uIFhpKGEsYixjKXtmb3IodmFyIGQ9YixlPSExLGYsZzs7KXtpZighZSl7ZT1kLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IodSgxNjApKTtmPWUuc3RhdGVOb2RlO3N3aXRjaChlLnRhZyl7Y2FzZSA1Omc9ITE7YnJlYWsgYTtjYXNlIDM6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhO2Nhc2UgNDpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGF9ZT1lLnJldHVybn1lPSEwfWlmKDU9PT1kLnRhZ3x8Nj09PWQudGFnKXthOmZvcih2YXIgaD1hLGs9ZCxsPWMsbT1rOzspaWYoVmkoaCxtLGwpLG51bGwhPT1tLmNoaWxkJiY0IT09bS50YWcpbS5jaGlsZC5yZXR1cm49bSxtPW0uY2hpbGQ7ZWxzZXtpZihtPT09aylicmVhaztmb3IoO251bGw9PT1tLnNpYmxpbmc7KXtpZihudWxsPT09bS5yZXR1cm58fG0ucmV0dXJuPT09aylicmVhayBhO209bS5yZXR1cm59bS5zaWJsaW5nLnJldHVybj1tLnJldHVybjttPW0uc2libGluZ31nPyhoPVxuZixrPWQuc3RhdGVOb2RlLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChrKTpoLnJlbW92ZUNoaWxkKGspKTpmLnJlbW92ZUNoaWxkKGQuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1kLnRhZyl7aWYobnVsbCE9PWQuY2hpbGQpe2Y9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztnPSEwO2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKFZpKGEsZCxjKSxudWxsIT09ZC5jaGlsZCl7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9aWYoZD09PWIpYnJlYWs7Zm9yKDtudWxsPT09ZC5zaWJsaW5nOyl7aWYobnVsbD09PWQucmV0dXJufHxkLnJldHVybj09PWIpcmV0dXJuO2Q9ZC5yZXR1cm47ND09PWQudGFnJiYoZT0hMSl9ZC5zaWJsaW5nLnJldHVybj1kLnJldHVybjtkPWQuc2libGluZ319XG5mdW5jdGlvbiBhaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlVpKDQsOCxiKTticmVhaztjYXNlIDE6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW3ZlXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZDYihjLGQpO1pkKGEsZSk7Yj1aZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/V2QoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1NiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9UYihjLGgpOnZiKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpFYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOk1iKGMsXG5kKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9KYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SmIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkpiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19YnJlYWs7Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7YnJlYWs7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGU7Yi5oeWRyYXRlJiYoYi5oeWRyYXRlPSExLExjKGIuY29udGFpbmVySW5mbykpO2JyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzpjPWI7bnVsbD09PWIubWVtb2l6ZWRTdGF0ZT9kPSExOihkPSEwLGM9Yi5jaGlsZCxiaj1jZygpKTtcbmlmKG51bGwhPT1jKWE6Zm9yKGE9Yzs7KXtpZig1PT09YS50YWcpZj1hLnN0YXRlTm9kZSxkPyhmPWYuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihmPWEuc3RhdGVOb2RlLGU9YS5tZW1vaXplZFByb3BzLnN0eWxlLGU9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsLGYuc3R5bGUuZGlzcGxheT1WZChcImRpc3BsYXlcIixlKSk7ZWxzZSBpZig2PT09YS50YWcpYS5zdGF0ZU5vZGUubm9kZVZhbHVlPWQ/XCJcIjphLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWEudGFnJiZudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsPT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2Y9YS5jaGlsZC5zaWJsaW5nO2YucmV0dXJuPWE7YT1mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPVxuYTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YylicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31jaihiKTticmVhaztjYXNlIDE5OmNqKGIpO2JyZWFrO2Nhc2UgMTc6YnJlYWs7Y2FzZSAyMDpicmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjMpKTt9fWZ1bmN0aW9uIGNqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IE9pKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9ZGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19dmFyIGVqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO1xuZnVuY3Rpb24gZmooYSxiLGMpe2M9QmcoYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtnanx8KGdqPSEwLGhqPWQpO1BpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gaWooYSxiLGMpe2M9QmcoYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7UGkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PWpqP2pqPW5ldyBTZXQoW3RoaXNdKTpqai5hZGQodGhpcyksUGkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIga2o9TWF0aC5jZWlsLGxqPUVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsbWo9RWEuUmVhY3RDdXJyZW50T3duZXIsUz0wLG5qPTgsb2o9MTYscGo9MzIscWo9MCxyaj0xLHNqPTIsdGo9Myx1aj00LHZqPTUsVD1TLFU9bnVsbCxWPW51bGwsVz0wLFg9cWosd2o9bnVsbCx4aj0xMDczNzQxODIzLHlqPTEwNzM3NDE4MjMsemo9bnVsbCxBaj0wLEJqPSExLGJqPTAsQ2o9NTAwLFk9bnVsbCxnaj0hMSxoaj1udWxsLGpqPW51bGwsRGo9ITEsRWo9bnVsbCxGaj05MCxHaj1udWxsLEhqPTAsSWo9bnVsbCxKaj0wO2Z1bmN0aW9uIFBnKCl7cmV0dXJuKFQmKG9qfHBqKSkhPT1TPzEwNzM3NDE4MjEtKGNnKCkvMTB8MCk6MCE9PUpqP0pqOkpqPTEwNzM3NDE4MjEtKGNnKCkvMTB8MCl9XG5mdW5jdGlvbiBRZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPWRnKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChUJm9qKSE9PVMpcmV0dXJuIFc7aWYobnVsbCE9PWMpYT1sZyhhLGMudGltZW91dE1zfDB8fDVFMywyNTApO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgOTk6YT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgOTg6YT1sZyhhLDE1MCwxMDApO2JyZWFrO2Nhc2UgOTc6Y2FzZSA5NjphPWxnKGEsNUUzLDI1MCk7YnJlYWs7Y2FzZSA5NTphPTI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyNikpO31udWxsIT09VSYmYT09PVcmJi0tYTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFJnKGEsYil7aWYoNTA8SGopdGhyb3cgSGo9MCxJaj1udWxsLEVycm9yKHUoMTg1KSk7YT1LaihhLGIpO2lmKG51bGwhPT1hKXt2YXIgYz1kZygpOzEwNzM3NDE4MjM9PT1iPyhUJm5qKSE9PVMmJihUJihvanxwaikpPT09Uz9MaihhKTooWihhKSxUPT09UyYmamcoKSk6WihhKTsoVCY0KT09PVN8fDk4IT09YyYmOTkhPT1jfHwobnVsbD09PUdqP0dqPW5ldyBNYXAoW1thLGJdXSk6KGM9R2ouZ2V0KGEpLCh2b2lkIDA9PT1jfHxjPmIpJiZHai5zZXQoYSxiKSkpfX1cbmZ1bmN0aW9uIEtqKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59bnVsbCE9PWUmJihVPT09ZSYmKEpnKGIpLFg9PT11aiYmTWooZSxXKSksTmooZSxiKSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBPaihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtpZigwIT09YilyZXR1cm4gYjtiPWEuZmlyc3RQZW5kaW5nVGltZTtpZighUGooYSxiKSlyZXR1cm4gYjtiPWEubGFzdFBpbmdlZFRpbWU7YT1hLm5leHRLbm93blBlbmRpbmdMZXZlbDtyZXR1cm4gYj5hP2I6YX1cbmZ1bmN0aW9uIFooYSl7aWYoMCE9PWEubGFzdEV4cGlyZWRUaW1lKWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0xMDczNzQxODIzLGEuY2FsbGJhY2tQcmlvcml0eT05OSxhLmNhbGxiYWNrTm9kZT1oZyhMai5iaW5kKG51bGwsYSkpO2Vsc2V7dmFyIGI9T2ooYSksYz1hLmNhbGxiYWNrTm9kZTtpZigwPT09YiludWxsIT09YyYmKGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTAsYS5jYWxsYmFja1ByaW9yaXR5PTkwKTtlbHNle3ZhciBkPVBnKCk7MTA3Mzc0MTgyMz09PWI/ZD05OToxPT09Ynx8Mj09PWI/ZD05NTooZD0xMCooMTA3Mzc0MTgyMS1iKS0xMCooMTA3Mzc0MTgyMS1kKSxkPTA+PWQ/OTk6MjUwPj1kPzk4OjUyNTA+PWQ/OTc6OTUpO2lmKG51bGwhPT1jKXt2YXIgZT1hLmNhbGxiYWNrUHJpb3JpdHk7aWYoYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPT09YiYmZT49ZClyZXR1cm47YyE9PVhmJiZOZihjKX1hLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9XG5iO2EuY2FsbGJhY2tQcmlvcml0eT1kO2I9MTA3Mzc0MTgyMz09PWI/aGcoTGouYmluZChudWxsLGEpKTpnZyhkLFFqLmJpbmQobnVsbCxhKSx7dGltZW91dDoxMCooMTA3Mzc0MTgyMS1iKS1jZygpfSk7YS5jYWxsYmFja05vZGU9Yn19fVxuZnVuY3Rpb24gUWooYSxiKXtKaj0wO2lmKGIpcmV0dXJuIGI9UGcoKSxSaihhLGIpLFooYSksbnVsbDt2YXIgYz1PaihhKTtpZigwIT09Yyl7Yj1hLmNhbGxiYWNrTm9kZTtpZigoVCYob2p8cGopKSE9PVMpdGhyb3cgRXJyb3IodSgzMjcpKTtTaigpO2E9PT1VJiZjPT09V3x8VGooYSxjKTtpZihudWxsIT09Vil7dmFyIGQ9VDtUfD1vajt2YXIgZT1VaihhKTtkbyB0cnl7VmooKTticmVha31jYXRjaChoKXtXaihhLGgpfXdoaWxlKDEpO3JnKCk7VD1kO2xqLmN1cnJlbnQ9ZTtpZihYPT09cmopdGhyb3cgYj13aixUaihhLGMpLE1qKGEsYyksWihhKSxiO2lmKG51bGw9PT1WKXN3aXRjaChlPWEuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGUsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWMsZD1YLFU9bnVsbCxkKXtjYXNlIHFqOmNhc2Ugcmo6dGhyb3cgRXJyb3IodSgzNDUpKTtjYXNlIHNqOlJqKGEsMjxjPzI6Yyk7YnJlYWs7Y2FzZSB0ajpNaihhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtcbmM9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9WGooZSkpO2lmKDEwNzM3NDE4MjM9PT14aiYmKGU9YmorQ2otY2coKSwxMDxlKSl7aWYoQmope3ZhciBmPWEubGFzdFBpbmdlZFRpbWU7aWYoMD09PWZ8fGY+PWMpe2EubGFzdFBpbmdlZFRpbWU9YztUaihhLGMpO2JyZWFrfX1mPU9qKGEpO2lmKDAhPT1mJiZmIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9ZDticmVha31hLnRpbWVvdXRIYW5kbGU9cGUoWWouYmluZChudWxsLGEpLGUpO2JyZWFrfVlqKGEpO2JyZWFrO2Nhc2UgdWo6TWooYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7Yz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1YaihlKSk7aWYoQmomJihlPWEubGFzdFBpbmdlZFRpbWUsMD09PWV8fGU+PWMpKXthLmxhc3RQaW5nZWRUaW1lPWM7VGooYSxjKTticmVha31lPU9qKGEpO2lmKDAhPT1lJiZlIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9XG5kO2JyZWFrfTEwNzM3NDE4MjMhPT15aj9kPTEwKigxMDczNzQxODIxLXlqKS1jZygpOjEwNzM3NDE4MjM9PT14aj9kPTA6KGQ9MTAqKDEwNzM3NDE4MjEteGopLTVFMyxlPWNnKCksYz0xMCooMTA3Mzc0MTgyMS1jKS1lLGQ9ZS1kLDA+ZCYmKGQ9MCksZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpraihkLzE5NjApKS1kLGM8ZCYmKGQ9YykpO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1wZShZai5iaW5kKG51bGwsYSksZCk7YnJlYWt9WWooYSk7YnJlYWs7Y2FzZSB2ajppZigxMDczNzQxODIzIT09eGomJm51bGwhPT16ail7Zj14ajt2YXIgZz16ajtkPWcuYnVzeU1pbkR1cmF0aW9uTXN8MDswPj1kP2Q9MDooZT1nLmJ1c3lEZWxheU1zfDAsZj1jZygpLSgxMCooMTA3Mzc0MTgyMS1mKS0oZy50aW1lb3V0TXN8MHx8NUUzKSksZD1mPD1lPzA6ZStkLWYpO2lmKDEwPGQpe01qKGEsYyk7YS50aW1lb3V0SGFuZGxlPVxucGUoWWouYmluZChudWxsLGEpLGQpO2JyZWFrfX1ZaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI5KSk7fVooYSk7aWYoYS5jYWxsYmFja05vZGU9PT1iKXJldHVybiBRai5iaW5kKG51bGwsYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gTGooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7Yj0wIT09Yj9iOjEwNzM3NDE4MjM7aWYoYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPT09YilZaihhKTtlbHNle2lmKChUJihvanxwaikpIT09Uyl0aHJvdyBFcnJvcih1KDMyNykpO1NqKCk7YT09PVUmJmI9PT1XfHxUaihhLGIpO2lmKG51bGwhPT1WKXt2YXIgYz1UO1R8PW9qO3ZhciBkPVVqKGEpO2RvIHRyeXtaaigpO2JyZWFrfWNhdGNoKGUpe1dqKGEsZSl9d2hpbGUoMSk7cmcoKTtUPWM7bGouY3VycmVudD1kO2lmKFg9PT1yail0aHJvdyBjPXdqLFRqKGEsYiksTWooYSxiKSxaKGEpLGM7aWYobnVsbCE9PVYpdGhyb3cgRXJyb3IodSgyNjEpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO1U9bnVsbDtZaihhKTtaKGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGFrKCl7aWYobnVsbCE9PUdqKXt2YXIgYT1HajtHaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhLGMpe1JqKGMsYSk7WihjKX0pO2pnKCl9fWZ1bmN0aW9uIGJrKGEsYil7dmFyIGM9VDtUfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1Q9YyxUPT09UyYmamcoKX19ZnVuY3Rpb24gY2soYSxiKXt2YXIgYz1UO1QmPS0yO1R8PW5qO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1Q9YyxUPT09UyYmamcoKX19XG5mdW5jdGlvbiBUaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxxZShjKSk7aWYobnVsbCE9PVYpZm9yKGM9Vi5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOnZhciBlPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZSYmdm9pZCAwIT09ZSYmRmYoZCk7YnJlYWs7Y2FzZSAzOm5oKGQpO0dmKGQpO2JyZWFrO2Nhc2UgNTpwaChkKTticmVhaztjYXNlIDQ6bmgoZCk7YnJlYWs7Y2FzZSAxMzpHKE0sZCk7YnJlYWs7Y2FzZSAxOTpHKE0sZCk7YnJlYWs7Y2FzZSAxMDp0ZyhkKX1jPWMucmV0dXJufVU9YTtWPWFoKGEuY3VycmVudCxudWxsLGIpO1c9YjtYPXFqO3dqPW51bGw7eWo9eGo9MTA3Mzc0MTgyMzt6aj1udWxsO0FqPTA7Qmo9ITF9XG5mdW5jdGlvbiBXaihhLGIpe2Rve3RyeXtyZygpO01oKCk7aWYobnVsbD09PVZ8fG51bGw9PT1WLnJldHVybilyZXR1cm4gWD1yaix3aj1iLG51bGw7YTp7dmFyIGM9YSxkPVYucmV0dXJuLGU9VixmPWI7Yj1XO2UuZWZmZWN0VGFnfD0yMDQ4O2UuZmlyc3RFZmZlY3Q9ZS5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWYmJlwib2JqZWN0XCI9PT10eXBlb2YgZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYudGhlbil7dmFyIGc9ZixoPTAhPT0oTS5jdXJyZW50JjEpLGs9ZDtkb3t2YXIgbDtpZihsPTEzPT09ay50YWcpe3ZhciBtPWsubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSlsPW51bGwhPT1tLmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgQz1rLm1lbW9pemVkUHJvcHM7bD12b2lkIDA9PT1DLmZhbGxiYWNrPyExOiEwIT09Qy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDpoPyExOiEwfX1pZihsKXt2YXIgeT1rLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT15KXt2YXIgSD1uZXcgU2V0O1xuSC5hZGQoZyk7ay51cGRhdGVRdWV1ZT1IfWVsc2UgeS5hZGQoZyk7aWYoMD09PShrLm1vZGUmMikpe2suZWZmZWN0VGFnfD02NDtlLmVmZmVjdFRhZyY9LTI5ODE7aWYoMT09PWUudGFnKWlmKG51bGw9PT1lLmFsdGVybmF0ZSllLnRhZz0xNztlbHNle3ZhciB6PUJnKDEwNzM3NDE4MjMsbnVsbCk7ei50YWc9MjtEZyhlLHopfWUuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMzticmVhayBhfWY9dm9pZCAwO2U9Yjt2YXIgdGE9Yy5waW5nQ2FjaGU7bnVsbD09PXRhPyh0YT1jLnBpbmdDYWNoZT1uZXcgZWosZj1uZXcgU2V0LHRhLnNldChnLGYpKTooZj10YS5nZXQoZyksdm9pZCAwPT09ZiYmKGY9bmV3IFNldCx0YS5zZXQoZyxmKSkpO2lmKCFmLmhhcyhlKSl7Zi5hZGQoZSk7dmFyIHI9ZGsuYmluZChudWxsLGMsZyxlKTtnLnRoZW4ocixyKX1rLmVmZmVjdFRhZ3w9NDA5NjtrLmV4cGlyYXRpb25UaW1lPWI7YnJlYWsgYX1rPWsucmV0dXJufXdoaWxlKG51bGwhPT1rKTtmPUVycm9yKChXYShlLnR5cGUpfHxcblwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitYYShlKSl9WCE9PXZqJiYoWD1zaik7Zj1OaShmLGUpO2s9ZDtkb3tzd2l0Y2goay50YWcpe2Nhc2UgMzpnPWY7ay5lZmZlY3RUYWd8PTQwOTY7ay5leHBpcmF0aW9uVGltZT1iO3ZhciB4PWZqKGssZyxiKTtFZyhrLHgpO2JyZWFrIGE7Y2FzZSAxOmc9Zjt2YXIgQT1rLnR5cGUscD1rLnN0YXRlTm9kZTtpZigwPT09KGsuZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBBLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXAmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwLmNvbXBvbmVudERpZENhdGNoJiZcbihudWxsPT09amp8fCFqai5oYXMocCkpKSl7ay5lZmZlY3RUYWd8PTQwOTY7ay5leHBpcmF0aW9uVGltZT1iO3ZhciB0PWlqKGssZyxiKTtFZyhrLHQpO2JyZWFrIGF9fWs9ay5yZXR1cm59d2hpbGUobnVsbCE9PWspfVY9ZWsoVil9Y2F0Y2godil7Yj12O2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIFVqKCl7dmFyIGE9bGouY3VycmVudDtsai5jdXJyZW50PUxoO3JldHVybiBudWxsPT09YT9MaDphfWZ1bmN0aW9uIElnKGEsYil7YTx4aiYmMjxhJiYoeGo9YSk7bnVsbCE9PWImJmE8eWomJjI8YSYmKHlqPWEsemo9Yil9ZnVuY3Rpb24gSmcoYSl7YT5BaiYmKEFqPWEpfWZ1bmN0aW9uIFpqKCl7Zm9yKDtudWxsIT09VjspVj1mayhWKX1mdW5jdGlvbiBWaigpe2Zvcig7bnVsbCE9PVYmJiFPZigpOylWPWZrKFYpfVxuZnVuY3Rpb24gZmsoYSl7dmFyIGI9Z2soYS5hbHRlcm5hdGUsYSxXKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPWVrKGEpKTttai5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBlayhhKXtWPWE7ZG97dmFyIGI9Vi5hbHRlcm5hdGU7YT1WLnJldHVybjtpZigwPT09KFYuZWZmZWN0VGFnJjIwNDgpKXthOnt2YXIgYz1iO2I9Vjt2YXIgZD1XO3ZhciBlPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmRmYoYik7YnJlYWs7Y2FzZSAzOm5oKGIpO0dmKGIpO2U9Yi5zdGF0ZU5vZGU7ZS5wZW5kaW5nQ29udGV4dCYmKGUuY29udGV4dD1lLnBlbmRpbmdDb250ZXh0LGUucGVuZGluZ0NvbnRleHQ9bnVsbCk7KG51bGw9PT1jfHxudWxsPT09Yy5jaGlsZCkmJmtpKGIpJiZDaShiKTtJaShiKTticmVhaztjYXNlIDU6cGgoYik7ZD1saChraC5jdXJyZW50KTt2YXIgZj1iLnR5cGU7aWYobnVsbCE9PWMmJm51bGwhPWIuc3RhdGVOb2RlKUppKGMsYixmLGUsZCksYy5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2UgaWYoZSl7dmFyIGc9XG5saChpaC5jdXJyZW50KTtpZihraShiKSl7ZT1iO3ZhciBoPWUuc3RhdGVOb2RlO2M9ZS50eXBlO3ZhciBrPWUubWVtb2l6ZWRQcm9wcyxsPWQ7aFt1ZV09ZTtoW3ZlXT1rO2Y9dm9pZCAwO2Q9aDtzd2l0Y2goYyl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxkYy5sZW5ndGg7aCsrKUYoZGNbaF0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGQpO0YoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixkKTtGKFwic3VibWl0XCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QmIoZCxrKTtGKFwiaW52YWxpZFwiLGQpOyRkKGwsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhay5tdWx0aXBsZX07RihcImludmFsaWRcIixkKTskZChsLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGIoZCxrKSxGKFwiaW52YWxpZFwiLGQpLCRkKGwsXCJvbkNoYW5nZVwiKX1ZZChjLGspO2g9bnVsbDtmb3IoZiBpbiBrKWsuaGFzT3duUHJvcGVydHkoZikmJihnPWtbZl0sXCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGc/ZC50ZXh0Q29udGVudCE9PWcmJihoPVtcImNoaWxkcmVuXCIsZ10pOlwibnVtYmVyXCI9PT10eXBlb2YgZyYmZC50ZXh0Q29udGVudCE9PVwiXCIrZyYmKGg9W1wiY2hpbGRyZW5cIixcIlwiK2ddKTppYS5oYXNPd25Qcm9wZXJ0eShmKSYmbnVsbCE9ZyYmJGQobCxmKSk7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOnliKGQpO0diKGQsaywhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eWIoZCk7TmIoZCxrKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGsub25DbGljayYmXG4oZC5vbmNsaWNrPWFlKX1mPWg7ZS51cGRhdGVRdWV1ZT1mO2U9bnVsbCE9PWY/ITA6ITE7ZSYmQ2koYil9ZWxzZXtjPWI7bD1mO2s9ZTtoPTk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50O2c9PT1PYi5odG1sJiYoZz1QYihsKSk7Zz09PU9iLmh0bWw/XCJzY3JpcHRcIj09PWw/KGs9aC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGsuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsaD1rLnJlbW92ZUNoaWxkKGsuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2Ygay5pcz9oPWguY3JlYXRlRWxlbWVudChsLHtpczprLmlzfSk6KGg9aC5jcmVhdGVFbGVtZW50KGwpLFwic2VsZWN0XCI9PT1sJiYobD1oLGsubXVsdGlwbGU/bC5tdWx0aXBsZT0hMDprLnNpemUmJihsLnNpemU9ay5zaXplKSkpOmg9aC5jcmVhdGVFbGVtZW50TlMoZyxsKTtrPWg7a1t1ZV09YztrW3ZlXT1lO0hpKGssYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9aztsPWY7Yz1lO3ZhciBtPWQsQz1aZChsLGMpO3N3aXRjaChsKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsXG5rKTtkPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGQ9MDtkPGRjLmxlbmd0aDtkKyspRihkY1tkXSxrKTtkPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGspO2Q9YzticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixrKTtGKFwibG9hZFwiLGspO2Q9YzticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGspO0YoXCJzdWJtaXRcIixrKTtkPWM7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsayk7ZD1jO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkJiKGssYyk7ZD1BYihrLGMpO0YoXCJpbnZhbGlkXCIsayk7JGQobSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpkPUliKGssYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmsuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFjLm11bHRpcGxlfTtkPW4oe30sYyx7dmFsdWU6dm9pZCAwfSk7RihcImludmFsaWRcIixrKTskZChtLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGIoayxcbmMpO2Q9S2IoayxjKTtGKFwiaW52YWxpZFwiLGspOyRkKG0sXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0OmQ9Y31ZZChsLGQpO2g9dm9pZCAwO2c9bDt2YXIgeT1rLEg9ZDtmb3IoaCBpbiBIKWlmKEguaGFzT3duUHJvcGVydHkoaCkpe3ZhciB6PUhbaF07XCJzdHlsZVwiPT09aD9XZCh5LHopOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KHo9ej96Ll9faHRtbDp2b2lkIDAsbnVsbCE9eiYmU2IoeSx6KSk6XCJjaGlsZHJlblwiPT09aD9cInN0cmluZ1wiPT09dHlwZW9mIHo/KFwidGV4dGFyZWFcIiE9PWd8fFwiXCIhPT16KSYmVGIoeSx6KTpcIm51bWJlclwiPT09dHlwZW9mIHomJlRiKHksXCJcIit6KTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYoaWEuaGFzT3duUHJvcGVydHkoaCk/bnVsbCE9eiYmJGQobSxoKTpudWxsIT16JiZ2Yih5LGgseixDKSl9c3dpdGNoKGwpe2Nhc2UgXCJpbnB1dFwiOnliKGspO1xuR2IoayxjLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp5YihrKTtOYihrLGMpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1jLnZhbHVlJiZrLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIit1YihjLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQ9aztkLm11bHRpcGxlPSEhYy5tdWx0aXBsZTtrPWMudmFsdWU7bnVsbCE9az9KYihkLCEhYy5tdWx0aXBsZSxrLCExKTpudWxsIT1jLmRlZmF1bHRWYWx1ZSYmSmIoZCwhIWMubXVsdGlwbGUsYy5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGsub25jbGljaz1hZSl9KGU9bmUoZixlKSkmJkNpKGIpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfWVsc2UgaWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7YnJlYWs7Y2FzZSA2OmlmKGMmJm51bGwhPWIuc3RhdGVOb2RlKUtpKGMsYixjLm1lbW9pemVkUHJvcHMsZSk7ZWxzZXtpZihcInN0cmluZ1wiIT09XG50eXBlb2YgZSYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7ZD1saChraC5jdXJyZW50KTtsaChpaC5jdXJyZW50KTtraShiKT8oZT1iLGY9ZS5zdGF0ZU5vZGUsZD1lLm1lbW9pemVkUHJvcHMsZlt1ZV09ZSwoZT1mLm5vZGVWYWx1ZSE9PWQpJiZDaShiKSk6KGY9YixlPSg5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZSksZVt1ZV09ZixiLnN0YXRlTm9kZT1lKX1icmVhaztjYXNlIDExOmJyZWFrO2Nhc2UgMTM6RyhNLGIpO2U9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXtiLmV4cGlyYXRpb25UaW1lPWQ7YnJlYWsgYX1lPW51bGwhPT1lO2Y9ITE7bnVsbD09PWM/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZraShiKTooZD1jLm1lbW9pemVkU3RhdGUsZj1udWxsIT09ZCxlfHxudWxsPT09ZHx8KGQ9Yy5jaGlsZC5zaWJsaW5nLG51bGwhPT1kJiYoaz1iLmZpcnN0RWZmZWN0LFxubnVsbCE9PWs/KGIuZmlyc3RFZmZlY3Q9ZCxkLm5leHRFZmZlY3Q9ayk6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWQsZC5uZXh0RWZmZWN0PW51bGwpLGQuZWZmZWN0VGFnPTgpKSk7aWYoZSYmIWYmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1jJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShNLmN1cnJlbnQmMSkpWD09PXFqJiYoWD10aik7ZWxzZXtpZihYPT09cWp8fFg9PT10ailYPXVqOzAhPT1BaiYmbnVsbCE9PVUmJihNaihVLFcpLE5qKFUsQWopKX1pZihlfHxmKWIuZWZmZWN0VGFnfD00O2JyZWFrO2Nhc2UgNzpicmVhaztjYXNlIDg6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDQ6bmgoYik7SWkoYik7YnJlYWs7Y2FzZSAxMDp0ZyhiKTticmVhaztjYXNlIDk6YnJlYWs7Y2FzZSAxNDpicmVhaztjYXNlIDE3OkwoYi50eXBlKSYmRmYoYik7YnJlYWs7Y2FzZSAxOTpHKE0sYik7ZT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PVxuZSlicmVhaztmPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2s9ZS5yZW5kZXJpbmc7aWYobnVsbD09PWspaWYoZilMaShlLCExKTtlbHNle2lmKFghPT1xanx8bnVsbCE9PWMmJjAhPT0oYy5lZmZlY3RUYWcmNjQpKWZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KXtrPXFoKGMpO2lmKG51bGwhPT1rKXtiLmVmZmVjdFRhZ3w9NjQ7TGkoZSwhMSk7Zj1rLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZS5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZS5sYXN0RWZmZWN0O2U9ZDtmb3IoZj1iLmNoaWxkO251bGwhPT1mOylkPWYsYz1lLGQuZWZmZWN0VGFnJj0yLGQubmV4dEVmZmVjdD1udWxsLGQuZmlyc3RFZmZlY3Q9bnVsbCxkLmxhc3RFZmZlY3Q9bnVsbCxrPWQuYWx0ZXJuYXRlLG51bGw9PT1rPyhkLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxkLmV4cGlyYXRpb25UaW1lPWMsZC5jaGlsZD1udWxsLFxuZC5tZW1vaXplZFByb3BzPW51bGwsZC5tZW1vaXplZFN0YXRlPW51bGwsZC51cGRhdGVRdWV1ZT1udWxsLGQuZGVwZW5kZW5jaWVzPW51bGwpOihkLmNoaWxkRXhwaXJhdGlvblRpbWU9ay5jaGlsZEV4cGlyYXRpb25UaW1lLGQuZXhwaXJhdGlvblRpbWU9ay5leHBpcmF0aW9uVGltZSxkLmNoaWxkPWsuY2hpbGQsZC5tZW1vaXplZFByb3BzPWsubWVtb2l6ZWRQcm9wcyxkLm1lbW9pemVkU3RhdGU9ay5tZW1vaXplZFN0YXRlLGQudXBkYXRlUXVldWU9ay51cGRhdGVRdWV1ZSxjPWsuZGVwZW5kZW5jaWVzLGQuZGVwZW5kZW5jaWVzPW51bGw9PT1jP251bGw6e2V4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3RDb250ZXh0OmMuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yy5yZXNwb25kZXJzfSksZj1mLnNpYmxpbmc7SShNLE0uY3VycmVudCYxfDIsYik7Yj1iLmNoaWxkO2JyZWFrIGF9Yz1jLnNpYmxpbmd9fWVsc2V7aWYoIWYpaWYoYz1xaChrKSxudWxsIT09Yyl7aWYoYi5lZmZlY3RUYWd8PVxuNjQsZj0hMCxkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihiLnVwZGF0ZVF1ZXVlPWQsYi5lZmZlY3RUYWd8PTQpLExpKGUsITApLG51bGw9PT1lLnRhaWwmJlwiaGlkZGVuXCI9PT1lLnRhaWxNb2RlKXtiPWIubGFzdEVmZmVjdD1lLmxhc3RFZmZlY3Q7bnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCk7YnJlYWt9fWVsc2UgY2coKT5lLnRhaWxFeHBpcmF0aW9uJiYxPGQmJihiLmVmZmVjdFRhZ3w9NjQsZj0hMCxMaShlLCExKSxiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT1kLTEpO2UuaXNCYWNrd2FyZHM/KGsuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9ayk6KGQ9ZS5sYXN0LG51bGwhPT1kP2Quc2libGluZz1rOmIuY2hpbGQ9ayxlLmxhc3Q9ayl9aWYobnVsbCE9PWUudGFpbCl7MD09PWUudGFpbEV4cGlyYXRpb24mJihlLnRhaWxFeHBpcmF0aW9uPWNnKCkrNTAwKTtkPWUudGFpbDtlLnJlbmRlcmluZz1kO2UudGFpbD1kLnNpYmxpbmc7ZS5sYXN0RWZmZWN0PVxuYi5sYXN0RWZmZWN0O2Quc2libGluZz1udWxsO2U9TS5jdXJyZW50O2U9Zj9lJjF8MjplJjE7SShNLGUsYik7Yj1kO2JyZWFrIGF9YnJlYWs7Y2FzZSAyMDpicmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNTYsYi50YWcpKTt9Yj1udWxsfWU9VjtpZigxPT09V3x8MSE9PWUuY2hpbGRFeHBpcmF0aW9uVGltZSl7Zj0wO2ZvcihkPWUuY2hpbGQ7bnVsbCE9PWQ7KWM9ZC5leHBpcmF0aW9uVGltZSxrPWQuY2hpbGRFeHBpcmF0aW9uVGltZSxjPmYmJihmPWMpLGs+ZiYmKGY9ayksZD1kLnNpYmxpbmc7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Vi5maXJzdEVmZmVjdCksbnVsbCE9PVYubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1WLmZpcnN0RWZmZWN0KSxcbmEubGFzdEVmZmVjdD1WLmxhc3RFZmZlY3QpLDE8Vi5lZmZlY3RUYWcmJihudWxsIT09YS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVY6YS5maXJzdEVmZmVjdD1WLGEubGFzdEVmZmVjdD1WKSl9ZWxzZXtiPU1pKFYsVyk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZWZmZWN0VGFnJj0yMDQ3LGI7bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZWZmZWN0VGFnfD0yMDQ4KX1iPVYuc2libGluZztpZihudWxsIT09YilyZXR1cm4gYjtWPWF9d2hpbGUobnVsbCE9PVYpO1g9PT1xaiYmKFg9dmopO3JldHVybiBudWxsfWZ1bmN0aW9uIFhqKGEpe3ZhciBiPWEuZXhwaXJhdGlvblRpbWU7YT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7cmV0dXJuIGI+YT9iOmF9ZnVuY3Rpb24gWWooYSl7dmFyIGI9ZGcoKTtmZyg5OSxpay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpayhhLGIpe1NqKCk7aWYoKFQmKG9qfHBqKSkhPT1TKXRocm93IEVycm9yKHUoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHUoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDthLmNhbGxiYWNrUHJpb3JpdHk9OTA7YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDt2YXIgZT1YaihjKTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtkPD1hLmxhc3RTdXNwZW5kZWRUaW1lP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpkPD1hLmZpcnN0U3VzcGVuZGVkVGltZSYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPWQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmXG4oYS5sYXN0UGluZ2VkVGltZT0wKTtkPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApO2E9PT1VJiYoVj1VPW51bGwsVz0wKTsxPGMuZWZmZWN0VGFnP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZT1jLmZpcnN0RWZmZWN0KTplPWM6ZT1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1lKXt2YXIgZj1UO1R8PXBqO21qLmN1cnJlbnQ9bnVsbDtsZT1MZDt2YXIgZz1mZSgpO2lmKGdlKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKXZhciBoPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgaz1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKTtpZihrJiYwIT09ay5yYW5nZUNvdW50KXtoPWsuYW5jaG9yTm9kZTt2YXIgbD1rLmFuY2hvck9mZnNldCxtPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDtcbnRyeXtoLm5vZGVUeXBlLG0ubm9kZVR5cGV9Y2F0Y2goRGIpe2g9bnVsbDticmVhayBhfXZhciBDPTAseT0tMSxIPS0xLHo9MCx0YT0wLHI9Zyx4PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgQTs7KXtyIT09aHx8MCE9PWwmJjMhPT1yLm5vZGVUeXBlfHwoeT1DK2wpO3IhPT1tfHwwIT09ayYmMyE9PXIubm9kZVR5cGV8fChIPUMrayk7Mz09PXIubm9kZVR5cGUmJihDKz1yLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQT1yLmZpcnN0Q2hpbGQpKWJyZWFrO3g9cjtyPUF9Zm9yKDs7KXtpZihyPT09ZylicmVhayBiO3g9PT1oJiYrK3o9PT1sJiYoeT1DKTt4PT09bSYmKyt0YT09PWsmJihIPUMpO2lmKG51bGwhPT0oQT1yLm5leHRTaWJsaW5nKSlicmVhaztyPXg7eD1yLnBhcmVudE5vZGV9cj1BfWg9LTE9PT15fHwtMT09PUg/bnVsbDp7c3RhcnQ6eSxlbmQ6SH19ZWxzZSBoPW51bGx9aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPW51bGw7bWU9e2ZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07XG5MZD0hMTtZPWU7ZG8gdHJ5e2prKCl9Y2F0Y2goRGIpe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7UmkoWSxEYik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9ZTtkbyB0cnl7Zm9yKGc9YSxoPWI7bnVsbCE9PVk7KXt2YXIgcD1ZLmVmZmVjdFRhZztwJjE2JiZUYihZLnN0YXRlTm9kZSxcIlwiKTtpZihwJjEyOCl7dmFyIHQ9WS5hbHRlcm5hdGU7aWYobnVsbCE9PXQpe3ZhciB2PXQucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChwJjEwMzgpe2Nhc2UgMjokaShZKTtZLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OiRpKFkpO1kuZWZmZWN0VGFnJj0tMzthaihZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDEwMjQ6WS5lZmZlY3RUYWcmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpZLmVmZmVjdFRhZyY9LTEwMjU7YWooWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0OmFqKFkuYWx0ZXJuYXRlLFxuWSk7YnJlYWs7Y2FzZSA4Omw9WSxYaShnLGwsaCksWWkobCl9WT1ZLm5leHRFZmZlY3R9fWNhdGNoKERiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO1JpKFksRGIpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTt2PW1lO3Q9ZmUoKTtwPXYuZm9jdXNlZEVsZW07aD12LnNlbGVjdGlvblJhbmdlO2lmKHQhPT1wJiZwJiZwLm93bmVyRG9jdW1lbnQmJmVlKHAub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscCkpe251bGwhPT1oJiZnZShwKSYmKHQ9aC5zdGFydCx2PWguZW5kLHZvaWQgMD09PXYmJih2PXQpLFwic2VsZWN0aW9uU3RhcnRcImluIHA/KHAuc2VsZWN0aW9uU3RhcnQ9dCxwLnNlbGVjdGlvbkVuZD1NYXRoLm1pbih2LHAudmFsdWUubGVuZ3RoKSk6KHY9KHQ9cC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJnQuZGVmYXVsdFZpZXd8fHdpbmRvdyx2LmdldFNlbGVjdGlvbiYmKHY9di5nZXRTZWxlY3Rpb24oKSxsPXAudGV4dENvbnRlbnQubGVuZ3RoLFxuZz1NYXRoLm1pbihoLnN0YXJ0LGwpLGg9dm9pZCAwPT09aC5lbmQ/ZzpNYXRoLm1pbihoLmVuZCxsKSwhdi5leHRlbmQmJmc+aCYmKGw9aCxoPWcsZz1sKSxsPWRlKHAsZyksbT1kZShwLGgpLGwmJm0mJigxIT09di5yYW5nZUNvdW50fHx2LmFuY2hvck5vZGUhPT1sLm5vZGV8fHYuYW5jaG9yT2Zmc2V0IT09bC5vZmZzZXR8fHYuZm9jdXNOb2RlIT09bS5ub2RlfHx2LmZvY3VzT2Zmc2V0IT09bS5vZmZzZXQpJiYodD10LmNyZWF0ZVJhbmdlKCksdC5zZXRTdGFydChsLm5vZGUsbC5vZmZzZXQpLHYucmVtb3ZlQWxsUmFuZ2VzKCksZz5oPyh2LmFkZFJhbmdlKHQpLHYuZXh0ZW5kKG0ubm9kZSxtLm9mZnNldCkpOih0LnNldEVuZChtLm5vZGUsbS5vZmZzZXQpLHYuYWRkUmFuZ2UodCkpKSkpKTt0PVtdO2Zvcih2PXA7dj12LnBhcmVudE5vZGU7KTE9PT12Lm5vZGVUeXBlJiZ0LnB1c2goe2VsZW1lbnQ6dixsZWZ0OnYuc2Nyb2xsTGVmdCx0b3A6di5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBwLmZvY3VzJiZwLmZvY3VzKCk7Zm9yKHA9MDtwPHQubGVuZ3RoO3ArKyl2PXRbcF0sdi5lbGVtZW50LnNjcm9sbExlZnQ9di5sZWZ0LHYuZWxlbWVudC5zY3JvbGxUb3A9di50b3B9bWU9bnVsbDtMZD0hIWxlO2xlPW51bGw7YS5jdXJyZW50PWM7WT1lO2RvIHRyeXtmb3IocD1kO251bGwhPT1ZOyl7dmFyIERoPVkuZWZmZWN0VGFnO2lmKERoJjM2KXt2YXIgY2M9WS5hbHRlcm5hdGU7dD1ZO3Y9cDtzd2l0Y2godC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VWkoMTYsMzIsdCk7YnJlYWs7Y2FzZSAxOnZhciBkZD10LnN0YXRlTm9kZTtpZih0LmVmZmVjdFRhZyY0KWlmKG51bGw9PT1jYylkZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGhrPXQuZWxlbWVudFR5cGU9PT10LnR5cGU/Y2MubWVtb2l6ZWRQcm9wczptZyh0LnR5cGUsY2MubWVtb2l6ZWRQcm9wcyk7ZGQuY29tcG9uZW50RGlkVXBkYXRlKGhrLGNjLm1lbW9pemVkU3RhdGUsZGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBFaD1cbnQudXBkYXRlUXVldWU7bnVsbCE9PUVoJiZLZyh0LEVoLGRkLHYpO2JyZWFrO2Nhc2UgMzp2YXIgRmg9dC51cGRhdGVRdWV1ZTtpZihudWxsIT09Rmgpe2c9bnVsbDtpZihudWxsIT09dC5jaGlsZClzd2l0Y2godC5jaGlsZC50YWcpe2Nhc2UgNTpnPXQuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpnPXQuY2hpbGQuc3RhdGVOb2RlfUtnKHQsRmgsZyx2KX1icmVhaztjYXNlIDU6dmFyIHhrPXQuc3RhdGVOb2RlO251bGw9PT1jYyYmdC5lZmZlY3RUYWcmNCYmbmUodC50eXBlLHQubWVtb2l6ZWRQcm9wcykmJnhrLmZvY3VzKCk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PXQubWVtb2l6ZWRTdGF0ZSl7dmFyIERpPXQuYWx0ZXJuYXRlO2lmKG51bGwhPT1EaSl7dmFyIEVpPURpLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PUVpKXt2YXIgRmk9RWkuZGVoeWRyYXRlZDtudWxsIT09RmkmJkxjKEZpKX19fWJyZWFrO1xuY2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYzKSk7fX1pZihEaCYxMjgpe3Q9dm9pZCAwO3ZhciB3ZD1ZLnJlZjtpZihudWxsIT09d2Qpe3ZhciBHaT1ZLnN0YXRlTm9kZTtzd2l0Y2goWS50YWcpe2Nhc2UgNTp0PUdpO2JyZWFrO2RlZmF1bHQ6dD1HaX1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygd2Q/d2QodCk6d2QuY3VycmVudD10fX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2goRGIpe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7UmkoWSxEYik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9bnVsbDtZZigpO1Q9Zn1lbHNlIGEuY3VycmVudD1jO2lmKERqKURqPSExLEVqPWEsRmo9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmKGpqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT1Jaj9IaisrOihIaj1cbjAsSWo9YSk6SGo9MDtcImZ1bmN0aW9uXCI9PT10eXBlb2Yga2smJmtrKGMuc3RhdGVOb2RlLGQpO1ooYSk7aWYoZ2opdGhyb3cgZ2o9ITEsYT1oaixoaj1udWxsLGE7aWYoKFQmbmopIT09UylyZXR1cm4gbnVsbDtqZygpO3JldHVybiBudWxsfWZ1bmN0aW9uIGprKCl7Zm9yKDtudWxsIT09WTspe3ZhciBhPVkuZWZmZWN0VGFnOzAhPT0oYSYyNTYpJiZUaShZLmFsdGVybmF0ZSxZKTswPT09KGEmNTEyKXx8RGp8fChEaj0hMCxnZyg5NyxmdW5jdGlvbigpe1NqKCk7cmV0dXJuIG51bGx9KSk7WT1ZLm5leHRFZmZlY3R9fWZ1bmN0aW9uIFNqKCl7aWYoOTAhPT1Gail7dmFyIGE9OTc8Rmo/OTc6Rmo7Rmo9OTA7cmV0dXJuIGZnKGEsbGspfX1cbmZ1bmN0aW9uIGxrKCl7aWYobnVsbD09PUVqKXJldHVybiExO3ZhciBhPUVqO0VqPW51bGw7aWYoKFQmKG9qfHBqKSkhPT1TKXRocm93IEVycm9yKHUoMzMxKSk7dmFyIGI9VDtUfD1wajtmb3IoYT1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWE7KXt0cnl7dmFyIGM9YTtpZigwIT09KGMuZWZmZWN0VGFnJjUxMikpc3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlVpKDEyOCwwLGMpLFVpKDAsNjQsYyl9fWNhdGNoKGQpe2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzMwKSk7UmkoYSxkKX1jPWEubmV4dEVmZmVjdDthLm5leHRFZmZlY3Q9bnVsbDthPWN9VD1iO2pnKCk7cmV0dXJuITB9ZnVuY3Rpb24gbWsoYSxiLGMpe2I9TmkoYyxiKTtiPWZqKGEsYiwxMDczNzQxODIzKTtEZyhhLGIpO2E9S2ooYSwxMDczNzQxODIzKTtudWxsIT09YSYmWihhKX1cbmZ1bmN0aW9uIFJpKGEsYil7aWYoMz09PWEudGFnKW1rKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7bWsoYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09amp8fCFqai5oYXMoZCkpKXthPU5pKGIsYSk7YT1paihjLGEsMTA3Mzc0MTgyMyk7RGcoYyxhKTtjPUtqKGMsMTA3Mzc0MTgyMyk7bnVsbCE9PWMmJlooYyk7YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gZGsoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtVPT09YSYmVz09PWM/WD09PXVqfHxYPT09dGomJjEwNzM3NDE4MjM9PT14aiYmY2coKS1iajxDaj9UaihhLFcpOkJqPSEwOlBqKGEsYykmJihiPWEubGFzdFBpbmdlZFRpbWUsMCE9PWImJmI8Y3x8KGEubGFzdFBpbmdlZFRpbWU9YyxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9PT1jJiYoYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTAsYS5maW5pc2hlZFdvcms9bnVsbCksWihhKSkpfWZ1bmN0aW9uIGRqKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9UGcoKSxiPVFnKGIsYSxudWxsKSk7YT1LaihhLGIpO251bGwhPT1hJiZaKGEpfXZhciBnaztcbmdrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKXt2YXIgZT1iLnBlbmRpbmdQcm9wcztpZihhLm1lbW9pemVkUHJvcHMhPT1lfHxLLmN1cnJlbnQpd2c9ITA7ZWxzZXtpZihkPGMpe3dnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOndpKGIpO2xpKCk7YnJlYWs7Y2FzZSA1Om9oKGIpO2lmKGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4pcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsbnVsbDticmVhaztjYXNlIDE6TChiLnR5cGUpJiZKZihiKTticmVhaztjYXNlIDQ6bWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnNnKGIsYi5tZW1vaXplZFByb3BzLnZhbHVlKTticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO2lmKDAhPT1kJiZkPj1jKXJldHVybiB5aShhLGIsYyk7SShNLE0uY3VycmVudCZcbjEsYik7Yj1vaShhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfUkoTSxNLmN1cnJlbnQmMSxiKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBCaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCxiKTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gb2koYSxiLGMpfXdnPSExfX1lbHNlIHdnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUVmKGIsSi5jdXJyZW50KTt2ZyhiLGMpO2U9SWgobnVsbCxiLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO01oKCk7aWYoTChkKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJk9nKGIsZCxnLGEpO2UudXBkYXRlcj1TZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO1dnKGIsZCxhLGMpO2I9dmkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7VmEoZSk7aWYoMSE9PWUuX3N0YXR1cyl0aHJvdyBlLl9yZXN1bHQ7XG5lPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPW5rKGUpO2E9bWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9c2kobnVsbCxiLGUsYSxjKTticmVhaztjYXNlIDE6Yj11aShudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTE6Yj1uaShudWxsLGIsZSxhLGMpO2JyZWFrO2Nhc2UgMTQ6Yj1waShudWxsLGIsZSxtZyhlLnR5cGUsYSksZCxjKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOm1nKGQsZSksc2koYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOm1nKGQsZSksdWkoYSxiLGQsZSxjKTtjYXNlIDM6d2koYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6XG5udWxsO0hnKGIsZCxiLnBlbmRpbmdQcm9wcyxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpbGkoKSxiPW9pKGEsYixjKTtlbHNle2lmKGU9Yi5zdGF0ZU5vZGUuaHlkcmF0ZSlkaT1yZShiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGNpPWIsZT1laT0hMDtpZihlKWZvcihjPWdoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmVmZmVjdFRhZz1jLmVmZmVjdFRhZyYtM3wxMDI0LGM9Yy5zaWJsaW5nO2Vsc2UgUihhLGIsZCxjKSxsaSgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIG9oKGIpLG51bGw9PT1hJiZpaShiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG9lKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZvZShkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSx0aShhLGIpLGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9XG5iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihSKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZpaShiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHlpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIG1oKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPWZoKGIsbnVsbCxkLGMpOlIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTptZyhkLGUpLG5pKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7XG5lPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTtzZyhiLGYpO2lmKG51bGwhPT1nKXt2YXIgaD1nLnZhbHVlO2Y9b2YoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwO2lmKDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj1vaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9QmcoYyxudWxsKSxsLnRhZz0yLERnKGgsbCkpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9XG5jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3VnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z319UihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbix2ZyhiLGMpLGU9eGcoZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFIoYSxiLGQsYyksYi5jaGlsZDtcbmNhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9bWcoZSxiLnBlbmRpbmdQcm9wcyksZj1tZyhlLnR5cGUsZikscGkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIHJpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTptZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEwoZCk/KGE9ITAsSmYoYikpOmE9ITEsdmcoYixjKSxVZyhiLGQsZSxjKSxXZyhiLGQsZSxjKSx2aShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEJpKGEsYixjKX10aHJvdyBFcnJvcih1KDE1NixiLnRhZykpO307dmFyIGtrPW51bGwsV2k9bnVsbDtcbmZ1bmN0aW9uIG9rKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO2trPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O1dpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gcGsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBnaShhLGIsYyxkKXtyZXR1cm4gbmV3IHBrKGEsYixjLGQpfVxuZnVuY3Rpb24gcWkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBuayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gcWkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PU9hKXJldHVybiAxMTtpZihhPT09UmEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gYWgoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1naShhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIGNoKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlxaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBJYTpyZXR1cm4gZWgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBOYTpnPTg7ZXw9NzticmVhaztjYXNlIEphOmc9ODtlfD0xO2JyZWFrO2Nhc2UgS2E6cmV0dXJuIGE9Z2koMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1LYSxhLnR5cGU9S2EsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBQYTpyZXR1cm4gYT1naSgxMyxjLGIsZSksYS50eXBlPVBhLGEuZWxlbWVudFR5cGU9UGEsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBRYTpyZXR1cm4gYT1naSgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1RYSxhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgTGE6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBNYTpnPTk7YnJlYWsgYTtjYXNlIE9hOmc9MTE7YnJlYWsgYTtjYXNlIFJhOmc9MTQ7YnJlYWsgYTtjYXNlIFNhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1naShnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIGVoKGEsYixjLGQpe2E9Z2koNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIGJoKGEsYixjKXthPWdpKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIGRoKGEsYixjKXtiPWdpKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gcWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIFBqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiBNaihhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24gTmooYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBSaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIHJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPVBnKCksZz1NZy5zdXNwZW5zZTtmPVFnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGVjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9SWYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9Q2Y7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1CZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO0RnKGUsYik7UmcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBzayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIHRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiB1ayhhLGIpe3RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZ0ayhhLGIpfVxuZnVuY3Rpb24gdmsoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjpIYSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1qYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1sZyhQZygpLDE1MCwxMDApO1JnKGEsYik7dWsoYSxiKX19O2tjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe1BnKCk7dmFyIGI9a2crKztSZyhhLGIpO3VrKGEsYil9fTtsYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1QZygpO2I9UWcoYixhLG51bGwpO1JnKGEsYik7dWsoYSxiKX19O1xuWmE9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpFYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9eWUoZCk7aWYoIWUpdGhyb3cgRXJyb3IodSg5MCkpO3piKGQpO0ViKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpNYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtcbmZ1bmN0aW9uIHdrKGEsYixjKXtjPW51bGwhPWMmJiEwPT09Yy5oeWRyYXRlO3ZhciBkPW5ldyBxayhhLGIsYyksZT1naSgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7ZC5jdXJyZW50PWU7ZS5zdGF0ZU5vZGU9ZDthW3dlXT1kLmN1cnJlbnQ7YyYmMCE9PWImJndjKDk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50KTt0aGlzLl9pbnRlcm5hbFJvb3Q9ZH13ay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faW50ZXJuYWxSb290O3JrKGEsYyxudWxsLHZvaWQgMD09PWI/bnVsbDpiKX07d2sucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O3JrKG51bGwsYixudWxsLHZvaWQgMD09PWE/bnVsbDphKX07XG5mdW5jdGlvbiB5ayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZWI9Yms7ZmI9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9VDtUfD00O3RyeXtyZXR1cm4gZmcoOTgsYS5iaW5kKG51bGwsYixjLGQpKX1maW5hbGx5e1Q9ZSxUPT09UyYmamcoKX19O2diPWZ1bmN0aW9uKCl7KFQmKDF8b2p8cGopKT09PVMmJihhaygpLFNqKCkpfTtoYj1mdW5jdGlvbihhLGIpe3ZhciBjPVQ7VHw9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtUPWMsVD09PVMmJmpnKCl9fTtcbmZ1bmN0aW9uIHprKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgd2soYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiBBayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPXNrKGcpO2guY2FsbChhKX19cmsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj16ayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1zayhnKTtrLmNhbGwoYSl9fWNrKGZ1bmN0aW9uKCl7cmsoYixnLGEsZSl9KX1yZXR1cm4gc2soZyl9ZnVuY3Rpb24gQmsoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZigheWsoYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gdmsoYSxiLG51bGwsYyl9XG52YXIgQ2s9e2NyZWF0ZVBvcnRhbDpCayxmaW5kRE9NTm9kZTpmdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IodSgxODgpKTt0aHJvdyBFcnJvcih1KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWljKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7aWYoIXlrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIEFrKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe2lmKCF5ayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBBayhudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXlrKGMpKXRocm93IEVycm9yKHUoMjAwKSk7XG5pZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgRXJyb3IodSgzOCkpO3JldHVybiBBayhhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXtpZigheWsoYSkpdGhyb3cgRXJyb3IodSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KGNrKGZ1bmN0aW9uKCl7QWsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gQmsuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOmJrLGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe2lmKChUJihvanxwaikpIT09Uyl0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVQ7VHw9MTt0cnl7cmV0dXJuIGZnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1Q9YyxqZygpfX0sX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50czpbQ2MsXG54ZSx5ZSxDYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUsZmEsU2MsZnVuY3Rpb24oYSl7eWEoYSxSYyl9LGNiLGRiLFBkLEJhLFNqLHtjdXJyZW50OiExfV19fTtcbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBvayhuKHt9LGEse292ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6RWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWljKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9LGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6RmMsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4xMS4wXCIsXG5yZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgRGs9e2RlZmF1bHQ6Q2t9LEVrPURrJiZDa3x8RGs7bW9kdWxlLmV4cG9ydHM9RWsuZGVmYXVsdHx8RWs7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjE3LjBcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZixnLGgsayxsO1xuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHA9bnVsbCxxPW51bGwsdD1mdW5jdGlvbigpe2lmKG51bGwhPT1wKXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3AoITAsYSk7cD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodCwwKSxiO319LHU9RGF0ZS5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpLXV9O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXA/c2V0VGltZW91dChmLDAsYSk6KHA9YSxzZXRUaW1lb3V0KHQsMCkpfTtnPWZ1bmN0aW9uKGEsYil7cT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocSl9O2s9ZnVuY3Rpb24oKXtyZXR1cm4hMX07bD1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB3PXdpbmRvdy5wZXJmb3JtYW5jZSx4PXdpbmRvdy5EYXRlLFxueT13aW5kb3cuc2V0VGltZW91dCx6PXdpbmRvdy5jbGVhclRpbWVvdXQsQT13aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLEI9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1widW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSYmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBCJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIikpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgdyYmXG5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQz14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQ319dmFyIEQ9ITEsRT1udWxsLEY9LTEsRz01LEg9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUh9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpHPTA8YT9NYXRoLmZsb29yKDFFMy9hKTozMy4zM307dmFyIEk9bmV3IE1lc3NhZ2VDaGFubmVsLEo9SS5wb3J0MjtJLnBvcnQxLm9ubWVzc2FnZT1cbmZ1bmN0aW9uKCl7aWYobnVsbCE9PUUpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7SD1hK0c7dHJ5e0UoITAsYSk/Si5wb3N0TWVzc2FnZShudWxsKTooRD0hMSxFPW51bGwpfWNhdGNoKGIpe3Rocm93IEoucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgRD0hMX07Zj1mdW5jdGlvbihhKXtFPWE7RHx8KEQ9ITAsSi5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtGPXkoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3ooRik7Rj0tMX19ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9TWF0aC5mbG9vcigoYy0xKS8yKSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxMKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBNKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBOKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkwobixjKSl2b2lkIDAhPT1yJiYwPkwocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkwocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEwoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIE89W10sUD1bXSxRPTEsUj1udWxsLFM9MyxUPSExLFU9ITEsVj0hMTtcbmZ1bmN0aW9uIFcoYSl7Zm9yKHZhciBiPU0oUCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylOKFApO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpTihQKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEsoTyxiKTtlbHNlIGJyZWFrO2I9TShQKX19ZnVuY3Rpb24gWChhKXtWPSExO1coYSk7aWYoIVUpaWYobnVsbCE9PU0oTykpVT0hMCxmKFkpO2Vsc2V7dmFyIGI9TShQKTtudWxsIT09YiYmZyhYLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFkoYSxiKXtVPSExO1YmJihWPSExLGgoKSk7VD0hMDt2YXIgYz1TO3RyeXtXKGIpO2ZvcihSPU0oTyk7bnVsbCE9PVImJighKFIuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFrKCkpOyl7dmFyIGQ9Ui5jYWxsYmFjaztpZihudWxsIT09ZCl7Ui5jYWxsYmFjaz1udWxsO1M9Ui5wcmlvcml0eUxldmVsO3ZhciBlPWQoUi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP1IuY2FsbGJhY2s9ZTpSPT09TShPKSYmTihPKTtXKGIpfWVsc2UgTihPKTtSPU0oTyl9aWYobnVsbCE9PVIpdmFyIG09ITA7ZWxzZXt2YXIgbj1NKFApO251bGwhPT1uJiZnKFgsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e1I9bnVsbCxTPWMsVD0hMX19XG5mdW5jdGlvbiBaKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319dmFyIGFhPWw7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1TO1M9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1M9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChTKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1TfXZhciBjPVM7Uz1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Uz1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGU9Yy5kZWxheTtlPVwibnVtYmVyXCI9PT10eXBlb2YgZSYmMDxlP2QrZTpkO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlooYSl9ZWxzZSBjPVooYSksZT1kO2M9ZStjO2E9e2lkOlErKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6ZSxleHBpcmF0aW9uVGltZTpjLHNvcnRJbmRleDotMX07ZT5kPyhhLnNvcnRJbmRleD1lLEsoUCxhKSxudWxsPT09TShPKSYmYT09PU0oUCkmJihWP2goKTpWPSEwLGcoWCxlLWQpKSk6KGEuc29ydEluZGV4PWMsSyhPLGEpLFV8fFR8fChVPSEwLGYoWSkpKTtyZXR1cm4gYX07ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UztyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1TO1M9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Uz1jfX19O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gU307ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VyhhKTt2YXIgYj1NKE8pO3JldHVybiBiIT09UiYmbnVsbCE9PVImJm51bGwhPT1iJiZudWxsIT09Yi5jYWxsYmFjayYmYi5zdGFydFRpbWU8PWEmJmIuZXhwaXJhdGlvblRpbWU8Ui5leHBpcmF0aW9uVGltZXx8aygpfTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1hYTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7VXx8VHx8KFU9ITAsZihZKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBNKE8pfTtleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTEuMFxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7XG52YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx3PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O2Z1bmN0aW9uIHkoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSB0OmNhc2UgcjpjYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiB6KGEpe3JldHVybiB5KGEpPT09bX1cbmV4cG9ydHMudHlwZU9mPXk7ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO2V4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09dnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14KX07ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKXx8eShhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT16O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09aH07XG5leHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PXR9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09cH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciAhPSBudWxsICYmXG4gICAgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QgPyBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCkgOiAnZ2V0JztcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIGVycm9yLmlzQXhpb3NFcnJvciA9IHRydWU7XG5cbiAgZXJyb3IudG9KU09OID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVN2Z0ljb247XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX1N2Z0ljb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvY29yZS9TdmdJY29uXCIpKTtcblxuZnVuY3Rpb24gY3JlYXRlU3ZnSWNvbihwYXRoLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgQ29tcG9uZW50ID0gX3JlYWN0LmRlZmF1bHQubWVtbyhfcmVhY3QuZGVmYXVsdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1N2Z0ljb24uZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSwgcGF0aCk7XG4gIH0pKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IFwiXCIuY29uY2F0KGRpc3BsYXlOYW1lLCBcIkljb25cIik7XG4gIH1cblxuICBDb21wb25lbnQubXVpTmFtZSA9IF9TdmdJY29uLmRlZmF1bHQubXVpTmFtZTtcbiAgcmV0dXJuIENvbXBvbmVudDtcbn0iLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHM7IiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG5cbmlmIChtb2R1bGUuaG90KSB7XG4gIGlmICghY29udGVudC5sb2NhbHMpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdChcbiAgICAgIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IFxuICAgIHVwZGF0ZSgpO1xuICB9KTtcbn0iLCJ2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG5cbmlmIChtb2R1bGUuaG90KSB7XG4gIGlmICghY29udGVudC5sb2NhbHMpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdChcbiAgICAgIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgICAgfVxuICAgIClcbiAgfVxuXG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgXG4gICAgdXBkYXRlKCk7XG4gIH0pO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyIsIi8vIERlZmF1bHQgdG8gYSBkdW1teSBcImJhdGNoXCIgaW1wbGVtZW50YXRpb24gdGhhdCBqdXN0IHJ1bnMgdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG59XG5cbnZhciBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7IC8vIEFsbG93IGluamVjdGluZyBhbm90aGVyIGJhdGNoaW5nIGZ1bmN0aW9uIGxhdGVyXG5cbmV4cG9ydCB2YXIgc2V0QmF0Y2ggPSBmdW5jdGlvbiBzZXRCYXRjaChuZXdCYXRjaCkge1xuICByZXR1cm4gYmF0Y2ggPSBuZXdCYXRjaDtcbn07IC8vIFN1cHBseSBhIGdldHRlciBqdXN0IHRvIHNraXAgZGVhbGluZyB3aXRoIEVTTSBiaW5kaW5nc1xuXG5leHBvcnQgdmFyIGdldEJhdGNoID0gZnVuY3Rpb24gZ2V0QmF0Y2goKSB7XG4gIHJldHVybiBiYXRjaDtcbn07IiwiaW1wb3J0IHsgZ2V0QmF0Y2ggfSBmcm9tICcuL2JhdGNoJzsgLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxudmFyIENMRUFSRUQgPSBudWxsO1xudmFyIG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge31cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpIHtcbiAgdmFyIGJhdGNoID0gZ2V0QmF0Y2goKTsgLy8gdGhlIGN1cnJlbnQvbmV4dCBwYXR0ZXJuIGlzIGNvcGllZCBmcm9tIHJlZHV4J3MgY3JlYXRlU3RvcmUgY29kZS5cbiAgLy8gVE9ETzogcmVmYWN0b3IrZXhwb3NlIHRoYXQgY29kZSB0byBiZSByZXVzYWJsZSBoZXJlP1xuXG4gIHZhciBjdXJyZW50ID0gW107XG4gIHZhciBuZXh0ID0gW107XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgbmV4dCA9IENMRUFSRUQ7XG4gICAgICBjdXJyZW50ID0gQ0xFQVJFRDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnQgPSBuZXh0O1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxpc3RlbmVyc1tpXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgIG5leHQucHVzaChsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGN1cnJlbnQgPT09IENMRUFSRUQpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIpIHtcbiAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgdGhpcy5wYXJlbnRTdWIgPSBwYXJlbnRTdWI7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlciA9IHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlci5iaW5kKHRoaXMpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN1YnNjcmlwdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZE5lc3RlZFN1YiA9IGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRoaXMudHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH07XG5cbiAgX3Byb3RvLm5vdGlmeU5lc3RlZFN1YnMgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlV3JhcHBlcigpIHtcbiAgICBpZiAodGhpcy5vblN0YXRlQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnVuc3Vic2NyaWJlKTtcbiAgfTtcblxuICBfcHJvdG8udHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcikgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcblxuZnVuY3Rpb24gUHJvdmlkZXIoX3JlZikge1xuICB2YXIgc3RvcmUgPSBfcmVmLnN0b3JlLFxuICAgICAgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzO1xuICAgIHJldHVybiB7XG4gICAgICBzdG9yZTogc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgIH07XG4gIH0sIFtzdG9yZV0pO1xuICB2YXIgcHJldmlvdXNTdGF0ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzdG9yZS5nZXRTdGF0ZSgpO1xuICB9LCBbc3RvcmVdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbjtcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSksXG4gIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG59O1xuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0LCB1c2VSZWYsIHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUsIGlzQ29udGV4dENvbnN1bWVyIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnOyAvLyBEZWZpbmUgc29tZSBjb25zdGFudCBhcnJheXMganVzdCB0byBhdm9pZCByZS1jcmVhdGluZyB0aGVzZVxuXG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcbnZhciBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07XG5cbnZhciBzdHJpbmdpZnlDb21wb25lbnQgPSBmdW5jdGlvbiBzdHJpbmdpZnlDb21wb25lbnQoQ29tcCkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShDb21wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgdmFyIHVwZGF0ZUNvdW50ID0gc3RhdGVbMV07XG4gIHJldHVybiBbYWN0aW9uLnBheWxvYWQsIHVwZGF0ZUNvdW50ICsgMV07XG59XG5cbnZhciBpbml0U3RhdGVVcGRhdGVzID0gZnVuY3Rpb24gaW5pdFN0YXRlVXBkYXRlcygpIHtcbiAgcmV0dXJuIFtudWxsLCAwXTtcbn07IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCBiZWNhdXNlIHdlIHdhbnRcbi8vIGBjb25uZWN0YCB0byBwZXJmb3JtIHN5bmMgdXBkYXRlcyB0byBhIHJlZiB0byBzYXZlIHRoZSBsYXRlc3QgcHJvcHMgYWZ0ZXJcbi8vIGEgcmVuZGVyIGlzIGFjdHVhbGx5IGNvbW1pdHRlZCB0byB0aGUgRE9NLlxuXG5cbnZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxuICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcbiAgICB9KSkoWW91ckNvbXBvbmVudClcbiAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXG4qL1xuc2VsZWN0b3JGYWN0b3J5LCAvLyBvcHRpb25zIG9iamVjdDpcbl9yZWYpIHtcbiAgaWYgKF9yZWYgPT09IHZvaWQgMCkge1xuICAgIF9yZWYgPSB7fTtcbiAgfVxuXG4gIHZhciBfcmVmMiA9IF9yZWYsXG4gICAgICBfcmVmMiRnZXREaXNwbGF5TmFtZSA9IF9yZWYyLmdldERpc3BsYXlOYW1lLFxuICAgICAgZ2V0RGlzcGxheU5hbWUgPSBfcmVmMiRnZXREaXNwbGF5TmFtZSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gXCJDb25uZWN0QWR2YW5jZWQoXCIgKyBuYW1lICsgXCIpXCI7XG4gIH0gOiBfcmVmMiRnZXREaXNwbGF5TmFtZSxcbiAgICAgIF9yZWYyJG1ldGhvZE5hbWUgPSBfcmVmMi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYyJG1ldGhvZE5hbWUgPT09IHZvaWQgMCA/ICdjb25uZWN0QWR2YW5jZWQnIDogX3JlZjIkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYyJHJlbmRlckNvdW50UHJvcCA9IF9yZWYyLnJlbmRlckNvdW50UHJvcCxcbiAgICAgIHJlbmRlckNvdW50UHJvcCA9IF9yZWYyJHJlbmRlckNvdW50UHJvcCA9PT0gdm9pZCAwID8gdW5kZWZpbmVkIDogX3JlZjIkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZjIkc2hvdWxkSGFuZGxlU3RhID0gX3JlZjIuc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gX3JlZjIkc2hvdWxkSGFuZGxlU3RhID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjIkc2hvdWxkSGFuZGxlU3RhLFxuICAgICAgX3JlZjIkc3RvcmVLZXkgPSBfcmVmMi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZjIkc3RvcmVLZXkgPT09IHZvaWQgMCA/ICdzdG9yZScgOiBfcmVmMiRzdG9yZUtleSxcbiAgICAgIF9yZWYyJHdpdGhSZWYgPSBfcmVmMi53aXRoUmVmLFxuICAgICAgd2l0aFJlZiA9IF9yZWYyJHdpdGhSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkd2l0aFJlZixcbiAgICAgIF9yZWYyJGZvcndhcmRSZWYgPSBfcmVmMi5mb3J3YXJkUmVmLFxuICAgICAgZm9yd2FyZFJlZiA9IF9yZWYyJGZvcndhcmRSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkZm9yd2FyZFJlZixcbiAgICAgIF9yZWYyJGNvbnRleHQgPSBfcmVmMi5jb250ZXh0LFxuICAgICAgY29udGV4dCA9IF9yZWYyJGNvbnRleHQgPT09IHZvaWQgMCA/IFJlYWN0UmVkdXhDb250ZXh0IDogX3JlZjIkY29udGV4dCxcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImdldERpc3BsYXlOYW1lXCIsIFwibWV0aG9kTmFtZVwiLCBcInJlbmRlckNvdW50UHJvcFwiLCBcInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlc1wiLCBcInN0b3JlS2V5XCIsIFwid2l0aFJlZlwiLCBcImZvcndhcmRSZWZcIiwgXCJjb250ZXh0XCJdKTtcblxuICBpbnZhcmlhbnQocmVuZGVyQ291bnRQcm9wID09PSB1bmRlZmluZWQsIFwicmVuZGVyQ291bnRQcm9wIGlzIHJlbW92ZWQuIHJlbmRlciBjb3VudGluZyBpcyBidWlsdCBpbnRvIHRoZSBsYXRlc3QgUmVhY3QgRGV2IFRvb2xzIHByb2ZpbGluZyBleHRlbnNpb25cIik7XG4gIGludmFyaWFudCghd2l0aFJlZiwgJ3dpdGhSZWYgaXMgcmVtb3ZlZC4gVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB1c2UgYSByZWYgb24gdGhlIGNvbm5lY3RlZCBjb21wb25lbnQnKTtcbiAgdmFyIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UgPSAnVG8gdXNlIGEgY3VzdG9tIFJlZHV4IHN0b3JlIGZvciBzcGVjaWZpYyBjb21wb25lbnRzLCBjcmVhdGUgYSBjdXN0b20gUmVhY3QgY29udGV4dCB3aXRoICcgKyBcIlJlYWN0LmNyZWF0ZUNvbnRleHQoKSwgYW5kIHBhc3MgdGhlIGNvbnRleHQgb2JqZWN0IHRvIFJlYWN0IFJlZHV4J3MgUHJvdmlkZXIgYW5kIHNwZWNpZmljIGNvbXBvbmVudHNcIiArICcgbGlrZTogPFByb3ZpZGVyIGNvbnRleHQ9e015Q29udGV4dH0+PENvbm5lY3RlZENvbXBvbmVudCBjb250ZXh0PXtNeUNvbnRleHR9IC8+PC9Qcm92aWRlcj4uICcgKyAnWW91IG1heSBhbHNvIHBhc3MgYSB7Y29udGV4dCA6IE15Q29udGV4dH0gb3B0aW9uIHRvIGNvbm5lY3QnO1xuICBpbnZhcmlhbnQoc3RvcmVLZXkgPT09ICdzdG9yZScsICdzdG9yZUtleSBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbnZhcmlhbnQoaXNWYWxpZEVsZW1lbnRUeXBlKFdyYXBwZWRDb21wb25lbnQpLCBcIllvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IFwiICsgKG1ldGhvZE5hbWUgKyBcIi4gSW5zdGVhZCByZWNlaXZlZCBcIiArIHN0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KSkpO1xuICAgIH1cblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHdyYXBwZWRDb21wb25lbnROYW1lKTtcblxuICAgIHZhciBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICBnZXREaXNwbGF5TmFtZTogZ2V0RGlzcGxheU5hbWUsXG4gICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgcmVuZGVyQ291bnRQcm9wOiByZW5kZXJDb3VudFByb3AsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBwdXJlID0gY29ubmVjdE9wdGlvbnMucHVyZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpIHtcbiAgICAgIHJldHVybiBzZWxlY3RvckZhY3Rvcnkoc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgIH0gLy8gSWYgd2UgYXJlbid0IHJ1bm5pbmcgaW4gXCJwdXJlXCIgbW9kZSwgd2UgZG9uJ3Qgd2FudCB0byBtZW1vaXplIHZhbHVlcy5cbiAgICAvLyBUbyBhdm9pZCBjb25kaXRpb25hbGx5IGNhbGxpbmcgaG9va3MsIHdlIGZhbGwgYmFjayB0byBhIHRpbnkgd3JhcHBlclxuICAgIC8vIHRoYXQganVzdCBleGVjdXRlcyB0aGUgZ2l2ZW4gY2FsbGJhY2sgaW1tZWRpYXRlbHkuXG5cblxuICAgIHZhciB1c2VQdXJlT25seU1lbW8gPSBwdXJlID8gdXNlTWVtbyA6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENvbm5lY3RGdW5jdGlvbihwcm9wcykge1xuICAgICAgdmFyIF91c2VNZW1vID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYWN0dWFsIFwiZGF0YVwiIHByb3BzIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhlIHdyYXBwZXIgY29tcG9uZW50LFxuICAgICAgICAvLyBhbmQgdmFsdWVzIG5lZWRlZCB0byBjb250cm9sIGJlaGF2aW9yIChmb3J3YXJkZWQgcmVmcywgYWx0ZXJuYXRlIGNvbnRleHQgaW5zdGFuY2VzKS5cbiAgICAgICAgLy8gVG8gbWFpbnRhaW4gdGhlIHdyYXBwZXJQcm9wcyBvYmplY3QgcmVmZXJlbmNlLCBtZW1vaXplIHRoaXMgZGVzdHJ1Y3R1cmluZy5cbiAgICAgICAgdmFyIGZvcndhcmRlZFJlZiA9IHByb3BzLmZvcndhcmRlZFJlZixcbiAgICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJmb3J3YXJkZWRSZWZcIl0pO1xuXG4gICAgICAgIHJldHVybiBbcHJvcHMuY29udGV4dCwgZm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdO1xuICAgICAgfSwgW3Byb3BzXSksXG4gICAgICAgICAgcHJvcHNDb250ZXh0ID0gX3VzZU1lbW9bMF0sXG4gICAgICAgICAgZm9yd2FyZGVkUmVmID0gX3VzZU1lbW9bMV0sXG4gICAgICAgICAgd3JhcHBlclByb3BzID0gX3VzZU1lbW9bMl07XG5cbiAgICAgIHZhciBDb250ZXh0VG9Vc2UgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVXNlcnMgbWF5IG9wdGlvbmFsbHkgcGFzcyBpbiBhIGN1c3RvbSBjb250ZXh0IGluc3RhbmNlIHRvIHVzZSBpbnN0ZWFkIG9mIG91ciBSZWFjdFJlZHV4Q29udGV4dC5cbiAgICAgICAgLy8gTWVtb2l6ZSB0aGUgY2hlY2sgdGhhdCBkZXRlcm1pbmVzIHdoaWNoIGNvbnRleHQgaW5zdGFuY2Ugd2Ugc2hvdWxkIHVzZS5cbiAgICAgICAgcmV0dXJuIHByb3BzQ29udGV4dCAmJiBwcm9wc0NvbnRleHQuQ29uc3VtZXIgJiYgaXNDb250ZXh0Q29uc3VtZXIoUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wc0NvbnRleHQuQ29uc3VtZXIsIG51bGwpKSA/IHByb3BzQ29udGV4dCA6IENvbnRleHQ7XG4gICAgICB9LCBbcHJvcHNDb250ZXh0LCBDb250ZXh0XSk7IC8vIFJldHJpZXZlIHRoZSBzdG9yZSBhbmQgYW5jZXN0b3Igc3Vic2NyaXB0aW9uIHZpYSBjb250ZXh0LCBpZiBhdmFpbGFibGVcblxuICAgICAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoQ29udGV4dFRvVXNlKTsgLy8gVGhlIHN0b3JlIF9tdXN0XyBleGlzdCBhcyBlaXRoZXIgYSBwcm9wIG9yIGluIGNvbnRleHRcblxuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA9IEJvb2xlYW4ocHJvcHMuc3RvcmUpO1xuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID0gQm9vbGVhbihjb250ZXh0VmFsdWUpICYmIEJvb2xlYW4oY29udGV4dFZhbHVlLnN0b3JlKTtcbiAgICAgIGludmFyaWFudChkaWRTdG9yZUNvbWVGcm9tUHJvcHMgfHwgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQsIFwiQ291bGQgbm90IGZpbmQgXFxcInN0b3JlXFxcIiBpbiB0aGUgY29udGV4dCBvZiBcIiArIChcIlxcXCJcIiArIGRpc3BsYXlOYW1lICsgXCJcXFwiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCBcIikgKyBcIm9yIHBhc3MgYSBjdXN0b20gUmVhY3QgY29udGV4dCBwcm92aWRlciB0byA8UHJvdmlkZXI+IGFuZCB0aGUgY29ycmVzcG9uZGluZyBcIiArIChcIlJlYWN0IGNvbnRleHQgY29uc3VtZXIgdG8gXCIgKyBkaXNwbGF5TmFtZSArIFwiIGluIGNvbm5lY3Qgb3B0aW9ucy5cIikpO1xuICAgICAgdmFyIHN0b3JlID0gcHJvcHMuc3RvcmUgfHwgY29udGV4dFZhbHVlLnN0b3JlO1xuICAgICAgdmFyIGNoaWxkUHJvcHNTZWxlY3RvciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGUgY2hpbGQgcHJvcHMgc2VsZWN0b3IgbmVlZHMgdGhlIHN0b3JlIHJlZmVyZW5jZSBhcyBhbiBpbnB1dC5cbiAgICAgICAgLy8gUmUtY3JlYXRlIHRoaXMgc2VsZWN0b3Igd2hlbmV2ZXIgdGhlIHN0b3JlIGNoYW5nZXMuXG4gICAgICAgIHJldHVybiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKTtcbiAgICAgIH0sIFtzdG9yZV0pO1xuXG4gICAgICB2YXIgX3VzZU1lbW8yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gTk9fU1VCU0NSSVBUSU9OX0FSUkFZOyAvLyBUaGlzIFN1YnNjcmlwdGlvbidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBudWxsIDogY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbik7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgdmFyIG5vdGlmeU5lc3RlZFN1YnMgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXTtcbiAgICAgIH0sIFtzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWVdKSxcbiAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdXNlTWVtbzJbMF0sXG4gICAgICAgICAgbm90aWZ5TmVzdGVkU3VicyA9IF91c2VNZW1vMlsxXTsgLy8gRGV0ZXJtaW5lIHdoYXQge3N0b3JlLCBzdWJzY3JpcHRpb259IHZhbHVlIHNob3VsZCBiZSBwdXQgaW50byBuZXN0ZWQgY29udGV4dCwgaWYgbmVjZXNzYXJ5LFxuICAgICAgLy8gYW5kIG1lbW9pemUgdGhhdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjb250ZXh0IHVwZGF0ZXMuXG5cblxuICAgICAgdmFyIG92ZXJyaWRkZW5Db250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRpZFN0b3JlQ29tZUZyb21Qcm9wcykge1xuICAgICAgICAgIC8vIFRoaXMgY29tcG9uZW50IGlzIGRpcmVjdGx5IHN1YnNjcmliZWQgdG8gYSBzdG9yZSBmcm9tIHByb3BzLlxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgZGVzY2VuZGFudHMgcmVhZGluZyBmcm9tIHRoaXMgc3RvcmUgLSBwYXNzIGRvd24gd2hhdGV2ZXJcbiAgICAgICAgICAvLyB0aGUgZXhpc3RpbmcgY29udGV4dCB2YWx1ZSBpcyBmcm9tIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvci5cbiAgICAgICAgICByZXR1cm4gY29udGV4dFZhbHVlO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcHV0IHRoaXMgY29tcG9uZW50J3Mgc3Vic2NyaXB0aW9uIGluc3RhbmNlIGludG8gY29udGV4dCwgc28gdGhhdFxuICAgICAgICAvLyBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd29uJ3QgdXBkYXRlIHVudGlsIGFmdGVyIHRoaXMgY29tcG9uZW50IGlzIGRvbmVcblxuXG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dFZhbHVlLCB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pOyAvLyBXZSBuZWVkIHRvIGZvcmNlIHRoaXMgd3JhcHBlciBjb21wb25lbnQgdG8gcmUtcmVuZGVyIHdoZW5ldmVyIGEgUmVkdXggc3RvcmUgdXBkYXRlXG4gICAgICAvLyBjYXVzZXMgYSBjaGFuZ2UgdG8gdGhlIGNhbGN1bGF0ZWQgY2hpbGQgY29tcG9uZW50IHByb3BzIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IgaW4gbWFwU3RhdGUpXG5cbiAgICAgIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyLCBFTVBUWV9BUlJBWSwgaW5pdFN0YXRlVXBkYXRlcyksXG4gICAgICAgICAgX3VzZVJlZHVjZXIkID0gX3VzZVJlZHVjZXJbMF0sXG4gICAgICAgICAgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCA9IF91c2VSZWR1Y2VyJFswXSxcbiAgICAgICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoID0gX3VzZVJlZHVjZXJbMV07IC8vIFByb3BhZ2F0ZSBhbnkgbWFwU3RhdGUvbWFwRGlzcGF0Y2ggZXJyb3JzIHVwd2FyZHNcblxuXG4gICAgICBpZiAocHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCAmJiBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yKSB7XG4gICAgICAgIHRocm93IHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3I7XG4gICAgICB9IC8vIFNldCB1cCByZWZzIHRvIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdGhlIHN1YnNjcmlwdGlvbiBlZmZlY3QgYW5kIHRoZSByZW5kZXIgbG9naWNcblxuXG4gICAgICB2YXIgbGFzdENoaWxkUHJvcHMgPSB1c2VSZWYoKTtcbiAgICAgIHZhciBsYXN0V3JhcHBlclByb3BzID0gdXNlUmVmKHdyYXBwZXJQcm9wcyk7XG4gICAgICB2YXIgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSA9IHVzZVJlZigpO1xuICAgICAgdmFyIHJlbmRlcklzU2NoZWR1bGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICAgIHZhciBhY3R1YWxDaGlsZFByb3BzID0gdXNlUHVyZU9ubHlNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVHJpY2t5IGxvZ2ljIGhlcmU6XG4gICAgICAgIC8vIC0gVGhpcyByZW5kZXIgbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWQgYnkgYSBSZWR1eCBzdG9yZSB1cGRhdGUgdGhhdCBwcm9kdWNlZCBuZXcgY2hpbGQgcHJvcHNcbiAgICAgICAgLy8gLSBIb3dldmVyLCB3ZSBtYXkgaGF2ZSBnb3R0ZW4gbmV3IHdyYXBwZXIgcHJvcHMgYWZ0ZXIgdGhhdFxuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5ldyBjaGlsZCBwcm9wcywgYW5kIHRoZSBzYW1lIHdyYXBwZXIgcHJvcHMsIHdlIGtub3cgd2Ugc2hvdWxkIHVzZSB0aGUgbmV3IGNoaWxkIHByb3BzIGFzLWlzLlxuICAgICAgICAvLyBCdXQsIGlmIHdlIGhhdmUgbmV3IHdyYXBwZXIgcHJvcHMsIHRob3NlIG1pZ2h0IGNoYW5nZSB0aGUgY2hpbGQgcHJvcHMsIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhpbmdzLlxuICAgICAgICAvLyBTbywgd2UnbGwgdXNlIHRoZSBjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZSBvbmx5IGlmIHRoZSB3cmFwcGVyIHByb3BzIGFyZSB0aGUgc2FtZSBhcyBsYXN0IHRpbWUuXG4gICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgJiYgd3JhcHBlclByb3BzID09PSBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50O1xuICAgICAgICB9IC8vIFRPRE8gV2UncmUgcmVhZGluZyB0aGUgc3RvcmUgZGlyZWN0bHkgaW4gcmVuZGVyKCkgaGVyZS4gQmFkIGlkZWE/XG4gICAgICAgIC8vIFRoaXMgd2lsbCBsaWtlbHkgY2F1c2UgQmFkIFRoaW5ncyAoVE0pIHRvIGhhcHBlbiBpbiBDb25jdXJyZW50IE1vZGUuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBkbyB0aGlzIGJlY2F1c2Ugb24gcmVuZGVycyBfbm90XyBjYXVzZWQgYnkgc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0aGUgbGF0ZXN0IHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmUuXG5cblxuICAgICAgICByZXR1cm4gY2hpbGRQcm9wc1NlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHdyYXBwZXJQcm9wcyk7XG4gICAgICB9LCBbc3RvcmUsIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQsIHdyYXBwZXJQcm9wc10pOyAvLyBXZSBuZWVkIHRoaXMgdG8gZXhlY3V0ZSBzeW5jaHJvbm91c2x5IGV2ZXJ5IHRpbWUgd2UgcmUtcmVuZGVyLiBIb3dldmVyLCBSZWFjdCB3YXJuc1xuICAgICAgLy8gYWJvdXQgdXNlTGF5b3V0RWZmZWN0IGluIFNTUiwgc28gd2UgdHJ5IHRvIGRldGVjdCBlbnZpcm9ubWVudCBhbmQgZmFsbCBiYWNrIHRvXG4gICAgICAvLyBqdXN0IHVzZUVmZmVjdCBpbnN0ZWFkIHRvIGF2b2lkIHRoZSB3YXJuaW5nLCBzaW5jZSBuZWl0aGVyIHdpbGwgcnVuIGFueXdheS5cblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFdlIHdhbnQgdG8gY2FwdHVyZSB0aGUgd3JhcHBlciBwcm9wcyBhbmQgY2hpbGQgcHJvcHMgd2UgdXNlZCBmb3IgbGF0ZXIgY29tcGFyaXNvbnNcbiAgICAgICAgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50ID0gd3JhcHBlclByb3BzO1xuICAgICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gYWN0dWFsQ2hpbGRQcm9wcztcbiAgICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IGZhbHNlOyAvLyBJZiB0aGUgcmVuZGVyIHdhcyBmcm9tIGEgc3RvcmUgdXBkYXRlLCBjbGVhciBvdXQgdGhhdCByZWZlcmVuY2UgYW5kIGNhc2NhZGUgdGhlIHN1YnNjcmliZXIgdXBkYXRlXG5cbiAgICAgICAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCkge1xuICAgICAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICB9XG4gICAgICB9KTsgLy8gT3VyIHJlLXN1YnNjcmliZSBsb2dpYyBvbmx5IHJ1bnMgd2hlbiB0aGUgc3RvcmUvc3Vic2NyaXB0aW9uIHNldHVwIGNoYW5nZXNcblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIElmIHdlJ3JlIG5vdCBzdWJzY3JpYmVkIHRvIHRoZSBzdG9yZSwgbm90aGluZyB0byBkbyBoZXJlXG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47IC8vIENhcHR1cmUgdmFsdWVzIGZvciBjaGVja2luZyBpZiBhbmQgd2hlbiB0aGlzIGNvbXBvbmVudCB1bm1vdW50c1xuXG4gICAgICAgIHZhciBkaWRVbnN1YnNjcmliZSA9IGZhbHNlO1xuICAgICAgICB2YXIgbGFzdFRocm93bkVycm9yID0gbnVsbDsgLy8gV2UnbGwgcnVuIHRoaXMgY2FsbGJhY2sgZXZlcnkgdGltZSBhIHN0b3JlIHN1YnNjcmlwdGlvbiB1cGRhdGUgcHJvcGFnYXRlcyB0byB0aGlzIGNvbXBvbmVudFxuXG4gICAgICAgIHZhciBjaGVja0ZvclVwZGF0ZXMgPSBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICAgICAgaWYgKGRpZFVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBydW4gc3RhbGUgbGlzdGVuZXJzLlxuICAgICAgICAgICAgLy8gUmVkdXggZG9lc24ndCBndWFyYW50ZWUgdW5zdWJzY3JpcHRpb25zIGhhcHBlbiB1bnRpbCBuZXh0IGRpc3BhdGNoLlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgICB2YXIgbmV3Q2hpbGRQcm9wcywgZXJyb3I7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQWN0dWFsbHkgcnVuIHRoZSBzZWxlY3RvciB3aXRoIHRoZSBtb3N0IHJlY2VudCBzdG9yZSBzdGF0ZSBhbmQgd3JhcHBlciBwcm9wc1xuICAgICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZVxuICAgICAgICAgICAgbmV3Q2hpbGRQcm9wcyA9IGNoaWxkUHJvcHNTZWxlY3RvcihsYXRlc3RTdG9yZVN0YXRlLCBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yID0gZTtcbiAgICAgICAgICAgIGxhc3RUaHJvd25FcnJvciA9IGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgbGFzdFRocm93bkVycm9yID0gbnVsbDtcbiAgICAgICAgICB9IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBoYXZlbid0IGNoYW5nZWQsIG5vdGhpbmcgdG8gZG8gaGVyZSAtIGNhc2NhZGUgdGhlIHN1YnNjcmlwdGlvbiB1cGRhdGVcblxuXG4gICAgICAgICAgaWYgKG5ld0NoaWxkUHJvcHMgPT09IGxhc3RDaGlsZFByb3BzLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGlmICghcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCkge1xuICAgICAgICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFNhdmUgcmVmZXJlbmNlcyB0byB0aGUgbmV3IGNoaWxkIHByb3BzLiAgTm90ZSB0aGF0IHdlIHRyYWNrIHRoZSBcImNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlXCJcbiAgICAgICAgICAgIC8vIGFzIGEgcmVmIGluc3RlYWQgb2YgYSB1c2VTdGF0ZS91c2VSZWR1Y2VyIGJlY2F1c2Ugd2UgbmVlZCBhIHdheSB0byBkZXRlcm1pbmUgaWYgdGhhdCB2YWx1ZSBoYXNcbiAgICAgICAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkLiAgSWYgdGhpcyB3ZW50IGludG8gdXNlU3RhdGUvdXNlUmVkdWNlciwgd2UgY291bGRuJ3QgY2xlYXIgb3V0IHRoZSB2YWx1ZSB3aXRob3V0XG4gICAgICAgICAgICAvLyBmb3JjaW5nIGFub3RoZXIgcmUtcmVuZGVyLCB3aGljaCB3ZSBkb24ndCB3YW50LlxuICAgICAgICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICAgICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IHRydWU7IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBfZGlkXyBjaGFuZ2UgKG9yIHdlIGNhdWdodCBhbiBlcnJvciksIHRoaXMgd3JhcHBlciBjb21wb25lbnQgbmVlZHMgdG8gcmUtcmVuZGVyXG5cbiAgICAgICAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2goe1xuICAgICAgICAgICAgICB0eXBlOiAnU1RPUkVfVVBEQVRFRCcsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICBsYXRlc3RTdG9yZVN0YXRlOiBsYXRlc3RTdG9yZVN0YXRlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07IC8vIEFjdHVhbGx5IHN1YnNjcmliZSB0byB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IgKG9yIHN0b3JlKVxuXG5cbiAgICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gICAgICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTsgLy8gUHVsbCBkYXRhIGZyb20gdGhlIHN0b3JlIGFmdGVyIGZpcnN0IHJlbmRlciBpbiBjYXNlIHRoZSBzdG9yZSBoYXNcbiAgICAgICAgLy8gY2hhbmdlZCBzaW5jZSB3ZSBiZWdhbi5cblxuICAgICAgICBjaGVja0ZvclVwZGF0ZXMoKTtcblxuICAgICAgICB2YXIgdW5zdWJzY3JpYmVXcmFwcGVyID0gZnVuY3Rpb24gdW5zdWJzY3JpYmVXcmFwcGVyKCkge1xuICAgICAgICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICAgICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG5cbiAgICAgICAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAgICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAgICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAgICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICAgICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG4gICAgICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yXSk7IC8vIE5vdyB0aGF0IGFsbCB0aGF0J3MgZG9uZSwgd2UgY2FuIGZpbmFsbHkgdHJ5IHRvIGFjdHVhbGx5IHJlbmRlciB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgLy8gV2UgbWVtb2l6ZSB0aGUgZWxlbWVudHMgZm9yIHRoZSByZW5kZXJlZCBjaGlsZCBjb21wb25lbnQgYXMgYW4gb3B0aW1pemF0aW9uLlxuXG4gICAgICB2YXIgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBhY3R1YWxDaGlsZFByb3BzLCB7XG4gICAgICAgICAgcmVmOiBmb3J3YXJkZWRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSwgW2ZvcndhcmRlZFJlZiwgV3JhcHBlZENvbXBvbmVudCwgYWN0dWFsQ2hpbGRQcm9wc10pOyAvLyBJZiBSZWFjdCBzZWVzIHRoZSBleGFjdCBzYW1lIGVsZW1lbnQgcmVmZXJlbmNlIGFzIGxhc3QgdGltZSwgaXQgYmFpbHMgb3V0IG9mIHJlLXJlbmRlcmluZ1xuICAgICAgLy8gdGhhdCBjaGlsZCwgc2FtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBSZWFjdC5tZW1vKCkgb3IgcmV0dXJuZWQgZmFsc2UgZnJvbSBzaG91bGRDb21wb25lbnRVcGRhdGUuXG5cbiAgICAgIHZhciByZW5kZXJlZENoaWxkID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCBpcyBzdWJzY3JpYmVkIHRvIHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdG8gcGFzcyBpdHMgb3duXG4gICAgICAgICAgLy8gc3Vic2NyaXB0aW9uIGluc3RhbmNlIGRvd24gdG8gb3VyIGRlc2NlbmRhbnRzLiBUaGF0IG1lYW5zIHJlbmRlcmluZyB0aGUgc2FtZVxuICAgICAgICAgIC8vIENvbnRleHQgaW5zdGFuY2UsIGFuZCBwdXR0aW5nIGEgZGlmZmVyZW50IHZhbHVlIGludG8gdGhlIGNvbnRleHQuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dFRvVXNlLlByb3ZpZGVyLCB7XG4gICAgICAgICAgICB2YWx1ZTogb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZVxuICAgICAgICAgIH0sIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgfSwgW0NvbnRleHRUb1VzZSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50LCBvdmVycmlkZGVuQ29udGV4dFZhbHVlXSk7XG4gICAgICByZXR1cm4gcmVuZGVyZWRDaGlsZDtcbiAgICB9IC8vIElmIHdlJ3JlIGluIFwicHVyZVwiIG1vZGUsIGVuc3VyZSBvdXIgd3JhcHBlciBjb21wb25lbnQgb25seSByZS1yZW5kZXJzIHdoZW4gaW5jb21pbmcgcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuXG5cbiAgICB2YXIgQ29ubmVjdCA9IHB1cmUgPyBSZWFjdC5tZW1vKENvbm5lY3RGdW5jdGlvbikgOiBDb25uZWN0RnVuY3Rpb247XG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG5cbiAgICBpZiAoZm9yd2FyZFJlZikge1xuICAgICAgdmFyIGZvcndhcmRlZCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gZm9yd2FyZENvbm5lY3RSZWYocHJvcHMsIHJlZikge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICBmb3J3YXJkZWRSZWY6IHJlZlxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGZvcndhcmRlZC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgZm9yd2FyZGVkLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhmb3J3YXJkZWQsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgZW5oYW5jZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhpcyBtYWtlcyBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50TGlzdGVuZXJzIHNvIHdlIGNhbiB1c2VcbiAgICogbmV4dExpc3RlbmVycyBhcyBhIHRlbXBvcmFyeSBsaXN0IHdoaWxlIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBUaGlzIHByZXZlbnRzIGFueSBidWdzIGFyb3VuZCBjb25zdW1lcnMgY2FsbGluZ1xuICAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLlxuICAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1RoZSByZWR1Y2VyIGhhcyBhbHJlYWR5IHJlY2VpdmVkIHRoZSBzdGF0ZSBhcyBhbiBhcmd1bWVudC4gJyArICdQYXNzIGl0IGRvd24gZnJvbSB0aGUgdG9wIHJlZHVjZXIgaW5zdGVhZCBvZiByZWFkaW5nIGl0IGZyb20gdGhlIHN0b3JlLicpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50U3RhdGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmUobGlzdGVuZXIpIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKGtleSwgYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICB2YXIgYWN0aW9uRGVzY3JpcHRpb24gPSBhY3Rpb25UeXBlICYmIFwiYWN0aW9uIFxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIHx8ICdhbiBhY3Rpb24nO1xuICByZXR1cm4gXCJHaXZlbiBcIiArIGFjdGlvbkRlc2NyaXB0aW9uICsgXCIsIHJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSBcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIiBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpOyAvLyBUaGlzIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHdhcm4gYWJvdXQgdGhlIHNhbWVcbiAgLy8ga2V5cyBtdWx0aXBsZSB0aW1lcy5cblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShfa2V5LCBhY3Rpb24pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCBcIiArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyBcIi4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkpO1xuICB9XG5cbiAgaWYgKGVudW1lcmFibGVPbmx5KSBrZXlzID0ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICB9KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG5cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59IC8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy9cbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSBudWxsICYmIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgOiBtYXBUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbn0gLy8gVXNlZCBieSB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiBhbmQgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sXG4vLyB0aGlzIGZ1bmN0aW9uIHdyYXBzIG1hcFRvUHJvcHMgaW4gYSBwcm94eSBmdW5jdGlvbiB3aGljaCBkb2VzIHNldmVyYWwgdGhpbmdzOlxuLy9cbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIHZlcmlmaWVzIHRoZSBmaXJzdCByZXN1bHQgaXMgYSBwbGFpbiBvYmplY3QsIGluIG9yZGVyIHRvIHdhcm5cbi8vICAgIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGVpciBtYXBUb1Byb3BzIGZ1bmN0aW9uIGlzIG5vdCByZXR1cm5pbmcgYSB2YWxpZCByZXN1bHQuXG4vL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07IC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG5cblxuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoXG4gICAgfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywge30sIHN0YXRlUHJvcHMsIHt9LCBkaXNwYXRjaFByb3BzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycyc7XG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcbiAgdmFyIGhhc1J1bkF0TGVhc3RPbmNlID0gZmFsc2U7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIG93blByb3BzO1xuICB2YXIgc3RhdGVQcm9wcztcbiAgdmFyIGRpc3BhdGNoUHJvcHM7XG4gIHZhciBtZXJnZWRQcm9wcztcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCkge1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICB2YXIgcHJvcHNDaGFuZ2VkID0gIWFyZU93blByb3BzRXF1YWwobmV4dE93blByb3BzLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFhcmVTdGF0ZXNFcXVhbChuZXh0U3RhdGUsIHN0YXRlKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufSAvLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJpbml0TWFwU3RhdGVUb1Byb3BzXCIsIFwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wc1wiLCBcImluaXRNZXJnZVByb3BzXCJdKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuLypcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcblxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xuICBcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXG5cbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXG5cbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBvZiB0eXBlIFwiICsgdHlwZW9mIGFyZyArIFwiIGZvciBcIiArIG5hbWUgKyBcIiBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50IFwiICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArIFwiLlwiKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn0gLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHZvaWQgMCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB2b2lkIDAgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdm9pZCAwID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBfcmVmMikge1xuICAgIGlmIChfcmVmMiA9PT0gdm9pZCAwKSB7XG4gICAgICBfcmVmMiA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfcmVmMyA9IF9yZWYyLFxuICAgICAgICBfcmVmMyRwdXJlID0gX3JlZjMucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYzJHB1cmUgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMyRwdXJlLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlc0VxdWFsID09PSB2b2lkIDAgPyBzdHJpY3RFcXVhbCA6IF9yZWYzJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMy5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjMkYXJlT3duUHJvcHNFcXVhID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYzLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVQcm9wc0VxID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYzLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjMsIFtcInB1cmVcIiwgXCJhcmVTdGF0ZXNFcXVhbFwiLCBcImFyZU93blByb3BzRXF1YWxcIiwgXCJhcmVTdGF0ZVByb3BzRXF1YWxcIiwgXCJhcmVNZXJnZWRQcm9wc0VxdWFsXCJdKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcbiAgICAgIC8vIHVzZWQgdG8gY29tcHV0ZSBDb25uZWN0J3MgZGlzcGxheU5hbWUgZnJvbSB0aGUgd3JhcHBlZCBjb21wb25lbnQncyBkaXNwbGF5TmFtZS5cbiAgICAgIGdldERpc3BsYXlOYW1lOiBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiBcIkNvbm5lY3QoXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgICB9LFxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG4gICAgICAvLyBwYXNzZWQgdGhyb3VnaCB0byBzZWxlY3RvckZhY3RvcnlcbiAgICAgIGluaXRNYXBTdGF0ZVRvUHJvcHM6IGluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzOiBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHM6IGluaXRNZXJnZVByb3BzLFxuICAgICAgcHVyZTogcHVyZSxcbiAgICAgIGFyZVN0YXRlc0VxdWFsOiBhcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWw6IGFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWw6IGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWw6IGFyZU1lcmdlZFByb3BzRXF1YWxcbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuLyoqXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSB2YWx1ZSBvZiB0aGUgYFJlYWN0UmVkdXhDb250ZXh0YC4gVGhpcyBpcyBhIGxvdy1sZXZlbFxuICogaG9vayB0aGF0IHlvdSBzaG91bGQgdXN1YWxseSBub3QgbmVlZCB0byBjYWxsIGRpcmVjdGx5LlxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSB2YWx1ZSBvZiB0aGUgYFJlYWN0UmVkdXhDb250ZXh0YFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG4gKlxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XG4gKiAgIGNvbnN0IHsgc3RvcmUgfSA9IHVzZVJlZHV4Q29udGV4dCgpXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxuICogfVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWR1eENvbnRleHQoKSB7XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KFJlYWN0UmVkdXhDb250ZXh0KTtcbiAgaW52YXJpYW50KGNvbnRleHRWYWx1ZSwgJ2NvdWxkIG5vdCBmaW5kIHJlYWN0LXJlZHV4IGNvbnRleHQgdmFsdWU7IHBsZWFzZSBlbnN1cmUgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluIGEgPFByb3ZpZGVyPicpO1xuICByZXR1cm4gY29udGV4dFZhbHVlO1xufSIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0Jztcbi8qKlxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTdG9yZSgpIHtcbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmU7XG5cbiAgICByZXR1cm4gc3RvcmU7XG4gIH07XG59XG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHthbnl9IHRoZSByZWR1eCBzdG9yZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgRXhhbXBsZUNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxuICogfVxuICovXG5cbmV4cG9ydCB2YXIgdXNlU3RvcmUgPSBjcmVhdGVTdG9yZUhvb2soKTsiLCJpbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VTdG9yZSBhcyB1c2VEZWZhdWx0U3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vdXNlU3RvcmUnO1xuLyoqXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwYXRjaEhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVN0b3JlID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0U3RvcmUgOiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VEaXNwYXRjaCgpIHtcbiAgICB2YXIgc3RvcmUgPSB1c2VTdG9yZSgpO1xuICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaDtcbiAgfTtcbn1cbi8qKlxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggYGRpc3BhdGNoYCBmdW5jdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7YW55fGZ1bmN0aW9ufSByZWR1eCBzdG9yZSdzIGBkaXNwYXRjaGAgZnVuY3Rpb25cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xuICogaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcbiAqXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcbiAqICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gKiAgIGNvbnN0IGluY3JlYXNlQ291bnRlciA9IHVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKHsgdHlwZTogJ2luY3JlYXNlLWNvdW50ZXInIH0pLCBbXSlcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPHNwYW4+e3ZhbHVlfTwvc3Bhbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17aW5jcmVhc2VDb3VudGVyfT5JbmNyZWFzZSBjb3VudGVyPC9idXR0b24+XG4gKiAgICAgPC9kaXY+XG4gKiAgIClcbiAqIH1cbiAqL1xuXG5leHBvcnQgdmFyIHVzZURpc3BhdGNoID0gY3JlYXRlRGlzcGF0Y2hIb29rKCk7IiwiaW1wb3J0IHsgdXNlUmVkdWNlciwgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZUxheW91dEVmZmVjdCwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnOyAvLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci4gV2UgbmVlZCB1c2VMYXlvdXRFZmZlY3QgdG8gZW5zdXJlIHRoZSBzdG9yZVxuLy8gc3Vic2NyaXB0aW9uIGNhbGxiYWNrIGFsd2F5cyBoYXMgdGhlIHNlbGVjdG9yIGZyb20gdGhlIGxhdGVzdCByZW5kZXIgY29tbWl0XG4vLyBhdmFpbGFibGUsIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgaGFwcGVuIGJldHdlZW4gcmVuZGVyIGFuZCB0aGUgZWZmZWN0LFxuLy8gd2hpY2ggbWF5IGNhdXNlIG1pc3NlZCB1cGRhdGVzOyB3ZSBhbHNvIG11c3QgZW5zdXJlIHRoZSBzdG9yZSBzdWJzY3JpcHRpb25cbi8vIGlzIGNyZWF0ZWQgc3luY2hyb25vdXNseSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBvY2N1ciBiZWZvcmUgdGhlXG4vLyBzdWJzY3JpcHRpb24gaXMgY3JlYXRlZCBhbmQgYW4gaW5jb25zaXN0ZW50IHN0YXRlIG1heSBiZSBvYnNlcnZlZFxuXG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0O1xuXG52YXIgcmVmRXF1YWxpdHkgPSBmdW5jdGlvbiByZWZFcXVhbGl0eShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcblxuZnVuY3Rpb24gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKSB7XG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcyArIDE7XG4gIH0sIDApLFxuICAgICAgZm9yY2VSZW5kZXIgPSBfdXNlUmVkdWNlclsxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9LCBbc3RvcmUsIGNvbnRleHRTdWJdKTtcbiAgdmFyIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdG9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RlZFN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHNlbGVjdG9yICE9PSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50IHx8IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IHNlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50O1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdmFyIGVycm9yTWVzc2FnZSA9IFwiQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSBzZWxlY3RpbmcgdGhlIHN0b3JlIHN0YXRlOiBcIiArIGVyci5tZXNzYWdlICsgXCIuXCI7XG5cbiAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBlcnJvck1lc3NhZ2UgKz0gXCJcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcblwiICsgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrICsgXCJcXG5cXG5PcmlnaW5hbCBzdGFjayB0cmFjZTpcIjtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgPSBzZWxlY3RvcjtcbiAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBzZWxlY3RlZFN0YXRlO1xuICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXdTZWxlY3RlZFN0YXRlID0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudChzdG9yZS5nZXRTdGF0ZSgpKTtcblxuICAgICAgICBpZiAoZXF1YWxpdHlGbihuZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSBpZ25vcmUgYWxsIGVycm9ycyBoZXJlLCBzaW5jZSB3aGVuIHRoZSBjb21wb25lbnRcbiAgICAgICAgLy8gaXMgcmUtcmVuZGVyZWQsIHRoZSBzZWxlY3RvcnMgYXJlIGNhbGxlZCBhZ2FpbiwgYW5kXG4gICAgICAgIC8vIHdpbGwgdGhyb3cgYWdhaW4sIGlmIG5laXRoZXIgcHJvcHMgbm9yIHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIGNoYW5nZWRcbiAgICAgICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gZXJyO1xuICAgICAgfVxuXG4gICAgICBmb3JjZVJlbmRlcih7fSk7XG4gICAgfVxuXG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb25dKTtcbiAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG59XG4vKipcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTZWxlY3RvcihzZWxlY3RvciwgZXF1YWxpdHlGbikge1xuICAgIGlmIChlcXVhbGl0eUZuID09PSB2b2lkIDApIHtcbiAgICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgICB9XG5cbiAgICBpbnZhcmlhbnQoc2VsZWN0b3IsIFwiWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yc1wiKTtcblxuICAgIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICAgIHN0b3JlID0gX3VzZVJlZHV4Q29udGV4dC5zdG9yZSxcbiAgICAgICAgY29udGV4dFN1YiA9IF91c2VSZWR1eENvbnRleHQuc3Vic2NyaXB0aW9uO1xuXG4gICAgcmV0dXJuIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yik7XG4gIH07XG59XG4vKipcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXG4gKiBhcyBhbiBhcmd1bWVudC4gVGhlIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBzdG9yZSBzdGF0ZS5cbiAqXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxuICogdGhhdCBhbGxvd3MgeW91IHRvIGN1c3RvbWl6ZSB0aGUgd2F5IHRoZSBzZWxlY3RlZCBzdGF0ZSBpcyBjb21wYXJlZCB0byBkZXRlcm1pbmVcbiAqIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBuZWVkcyB0byBiZSByZS1yZW5kZXJlZC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWxlY3RvciB0aGUgc2VsZWN0b3IgZnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBlcXVhbGl0eUZuIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgZXF1YWxpdHlcbiAqXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgc2VsZWN0ZWQgc3RhdGVcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXG4gKlxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxuICogICByZXR1cm4gPGRpdj57Y291bnRlcn08L2Rpdj5cbiAqIH1cbiAqL1xuXG5leHBvcnQgdmFyIHVzZVNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vaywgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vaywgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vaywgc2hhbGxvd0VxdWFsIH07IiwiLypcclxuICAgIE1ha2luZyBhbiBhY3Rpb24gY29uc3RhbnQgZm9yIGZldGNpbmcgdGhlIGRhdGFcclxuKi9cclxuXHJcbmV4cG9ydCBjb25zdCBHRVRfTk9URV9SRUNFSUVWRV9EQVRBID0gXCJHRVRfTk9URV9SRUNFSUVWRV9EQVRBXCI7XHJcbmV4cG9ydCBjb25zdCBHRVRfTk9URV9DT01QTEVURURfREFUQSA9IFwiR0VUX05PVEVfQ09NUExFVEVEX0RBVEFcIjsiLCJpbXBvcnQgeyBHRVRfTk9URV9DT01QTEVURURfREFUQSwgR0VUX05PVEVfUkVDRUlFVkVfREFUQSB9IGZyb20gJy4uL2FjdGlvbi9BY3Rpb25Db25zdGFudCc7XHJcblxyXG4vKiBcclxuICAgIERlZmluaW5nIHRoZSBpbml0aWF0ZSBTdGF0ZSB0byB1c2UgaW4gb3VyIGNvbXBvbmVudHNcclxuKi9cclxuXHJcbmNvbnN0IGluaXRhdGVfc3RhdGUgPSB7XHJcbiAgICBsb2FkaW5nX2dldG5vdGVzOiB0cnVlLFxyXG4gICAgZ2V0bm90ZXM6IFtdLFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0X25vdGVzX3JlZHVjZXIoc3RhdGUgPSBpbml0YXRlX3N0YXRlLCBhY3Rpb24pIHtcclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICBjYXNlIEdFVF9OT1RFX1JFQ0VJRVZFX0RBVEE6XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xyXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICBsb2FkaW5nX2dldG5vdGVzOiB0cnVlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgY2FzZSBHRVRfTk9URV9DT01QTEVURURfREFUQTpcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XHJcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgICAgIGxvYWRpbmdfZ2V0bm90ZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZ2V0bm90ZXM6IGFjdGlvbi5nZXRub3Rlc1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHsgZ2V0X25vdGVzX3JlZHVjZXIgfSBmcm9tICcuL0hvbWVSZWR1Y2VyJztcclxuXHJcbi8qIFxyXG4gICAgVXNpbmcgQ29tYm9uZVJlZHVjZXJzIHRvIGNvbWJpbmUgdGhlIHJlZHVjZXMsXHJcbiAgICBpbiBmdXR1cmUgdGhlIGFwcGxpY2F0aW9uIG1heSBoYXZlIG11bHRpcGxlIHJlZHVjZXJzXHJcbiovXHJcblxyXG5jb25zdCBhbGxSZWR1Y2VycyA9IGNvbWJpbmVSZWR1Y2Vycyh7XHJcbiAgZGF0YTogZ2V0X25vdGVzX3JlZHVjZXIsXHJcbn0pXHJcbmV4cG9ydCBkZWZhdWx0IGFsbFJlZHVjZXJzIiwiaW1wb3J0IHsgYXBwbHlNaWRkbGV3YXJlLCBjcmVhdGVTdG9yZSB9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHJlZHV4VGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xyXG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICdyZWR1eC1sb2dnZXInO1xyXG5pbXBvcnQgcm9vdFJlZHVjZXIgZnJvbSAnLi4vcmVkdWNlci9pbmRleCc7XHJcblxyXG4vKiBcclxuICBNb2RpZnkgdGhlIGxvZ2dlciAod2hpY2ggY2FuIGJlIHNlZW4gaW4gdGhlIGNvbnNvbGUubG9nIG91dHB1dCksXHJcbiAgYW5kIGNyZWF0ZSBzdG9yZSB3aXRoIHRoZSBoZWxwIG9mIG1pZGRsZXdhcmUgXHJcbiovXHJcblxyXG5jb25zdCBsb2dnZXIgPSBjcmVhdGVMb2dnZXIoe1xyXG4gIGNvbGxhcHNlZDogdHJ1ZSxcclxuICAvLyBwcmVkaWNhdGU6ICgpID0+XHJcbiAgLy8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCdcclxufSk7XHJcblxyXG4vL2NyZWF0ZSB0aGUgbWlkZGxld2FyZSBhbmQgc3RvcmVcclxuY29uc3QgbWlkZGxld2FyZSA9IGFwcGx5TWlkZGxld2FyZShyZWR1eFRodW5rLGxvZ2dlcik7XHJcblxyXG5jb25zdCBzdG9yZSA9IG1pZGRsZXdhcmUoY3JlYXRlU3RvcmUpKHJvb3RSZWR1Y2VyKTtcclxuXHJcbmV4cG9ydCB7c3RvcmV9OyIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJmdW5jdGlvbiB2YWx1ZU9mKG9iaikge1xuICByZXR1cm4gb2JqLnZhbHVlT2YgPyBvYmoudmFsdWVPZigpIDogT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIC8vIFRlc3QgZm9yIHN0cmljdCBlcXVhbGl0eSBmaXJzdC5cbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIC8vIE90aGVyd2lzZSwgaWYgZWl0aGVyIG9mIHRoZW0gPT0gbnVsbCB0aGV5IGFyZSBub3QgZXF1YWwuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgQXJyYXkuaXNBcnJheShiKSAmJlxuICAgICAgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmXG4gICAgICBhLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IHZhbHVlT2YoYSk7XG4gICAgdmFyIGJWYWx1ZSA9IHZhbHVlT2YoYik7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGEsIGIpKS5ldmVyeShmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKGNvbmRpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4ICsgXCI6IFwiICsgKG1lc3NhZ2UgfHwgJycpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZ3VkIGZyb20gJ2d1ZCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ3VkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgY29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXJcIik7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07IC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSBoYXZlIHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgbG9jYXRpb25cbiAgICAvLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuICAgIC8vIG9uIHRoZSBpbml0aWFsIHJlbmRlci4gSWYgdGhlcmUgYXJlLCB0aGV5IHdpbGwgcmVwbGFjZS9wdXNoIHdoZW5cbiAgICAvLyB0aGV5IG1vdW50IGFuZCBzaW5jZSBjRE0gZmlyZXMgaW4gY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMsIHdlIG1heVxuICAgIC8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5cbiAgICBfdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIF90aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3RlbikgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dC5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBvcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICB2YXIgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBwcm9wcy5tYXRjaCA/IGNoaWxkcmVuID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IGNoaWxkcmVuIDogY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkuaGlzdG9yeTtcbn1cbmZ1bmN0aW9uIHVzZUxvY2F0aW9uKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5sb2NhdGlvbjtcbn1cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVBhcmFtcygpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VSb3V0ZU1hdGNoKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgodXNlTG9jYXRpb24oKS5wYXRobmFtZSwgcGF0aCkgOiB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBcImVzbVwiKSB7XG4gICAgICB2YXIgaW5pdGlhbEJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbZ2xvYmFsW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gXCJlc21cIjtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci5qcy5tYXBcbiIsImltcG9ydCB7IFJvdXRlciwgX19Sb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0ICogZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIHJlc29sdmVUb0xvY2F0aW9uID0gZnVuY3Rpb24gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xudmFyIG5vcm1hbGl6ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xuXG52YXIgZm9yd2FyZFJlZlNoaW0gPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG52YXIgTGlua0FuY2hvciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgbmF2aWdhdGUgPSBfcmVmLm5hdmlnYXRlLFxuICAgICAgX29uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaW5uZXJSZWZcIiwgXCJuYXZpZ2F0ZVwiLCBcIm9uQ2xpY2tcIl0pO1xuXG4gIHZhciB0YXJnZXQgPSByZXN0LnRhcmdldDtcblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfb25DbGljaykgX29uQ2xpY2soZXZlbnQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhyb3cgZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gIH0gZWxzZSB7XG4gICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgcHJvcHMpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGlua0FuY2hvci5kaXNwbGF5TmFtZSA9IFwiTGlua0FuY2hvclwiO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuXG52YXIgTGluayA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYyJGNvbXBvbmVudCA9IF9yZWYyLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9yZWYyJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gTGlua0FuY2hvciA6IF9yZWYyJGNvbXBvbmVudCxcbiAgICAgIHJlcGxhY2UgPSBfcmVmMi5yZXBsYWNlLFxuICAgICAgdG8gPSBfcmVmMi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZjIuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImNvbXBvbmVudFwiLCBcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5O1xuICAgIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB2YXIgaHJlZiA9IGxvY2F0aW9uID8gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKSA6IFwiXCI7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG5hdmlnYXRlOiBmdW5jdGlvbiBuYXZpZ2F0ZSgpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pO1xuICAgICAgICB2YXIgbWV0aG9kID0gcmVwbGFjZSA/IGhpc3RvcnkucmVwbGFjZSA6IGhpc3RvcnkucHVzaDtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHN0cmljdDogc3RyaWN0XG4gICAgfSkgOiBudWxsO1xuICAgIHZhciBpc0FjdGl2ZSA9ICEhKGlzQWN0aXZlUHJvcCA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKSA6IG1hdGNoKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpIDogY2xhc3NOYW1lUHJvcDtcbiAgICB2YXIgc3R5bGUgPSBpc0FjdGl2ZSA/IF9leHRlbmRzKHt9LCBzdHlsZVByb3AsIHt9LCBhY3RpdmVTdHlsZSkgOiBzdHlsZVByb3A7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCB8fCBudWxsLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0bzogdG9Mb2NhdGlvblxuICAgIH0sIHJlc3QpOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltJDEgIT09IGZvcndhcmRSZWYkMSkge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG4gIHZhciBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1wicGFnZVwiLCBcInN0ZXBcIiwgXCJsb2NhdGlvblwiLCBcImRhdGVcIiwgXCJ0aW1lXCIsIFwidHJ1ZVwiXSk7XG4gIE5hdkxpbmsucHJvcFR5cGVzID0gX2V4dGVuZHMoe30sIExpbmsucHJvcFR5cGVzLCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBtYWtlU3R5bGVzIGFzIG1ha2VTdHlsZXNXaXRob3V0RGVmYXVsdCB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5cbmZ1bmN0aW9uIG1ha2VTdHlsZXMoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgcmV0dXJuIG1ha2VTdHlsZXNXaXRob3V0RGVmYXVsdChzdHlsZXNPckNyZWF0b3IsIF9leHRlbmRzKHtcbiAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZVxuICB9LCBvcHRpb25zKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1ha2VTdHlsZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBfcm9vdDtcblxuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDogKF9yb290ID0ge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgbWFyZ2luUmlnaHQ6ICdhdXRvJyxcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpXG4gICAgfSwgX2RlZmluZVByb3BlcnR5KF9yb290LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMylcbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF9yb290LCB0aGVtZS5icmVha3BvaW50cy51cCgnbWQnKSwge1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoNCksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoNClcbiAgICB9KSwgX3Jvb3QpLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZml4ZWQ9e3RydWV9YC4gKi9cbiAgICBmaXhlZDogT2JqZWN0LmtleXModGhlbWUuYnJlYWtwb2ludHMudmFsdWVzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYnJlYWtwb2ludCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW2JyZWFrcG9pbnRdO1xuXG4gICAgICBpZiAodmFsdWUgIT09IDApIHtcbiAgICAgICAgYWNjW3RoZW1lLmJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHtcbiAgICAgICAgICBtYXhXaWR0aDogdmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXhXaWR0aD1cInhzXCJgLiAqL1xuICAgIG1heFdpZHRoWHM6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3hzJyksIHtcbiAgICAgIG1heFdpZHRoOiBNYXRoLm1heCh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueHMsIDQ0NClcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1heFdpZHRoPVwic21cImAuICovXG4gICAgbWF4V2lkdGhTbTogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5zbVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWF4V2lkdGg9XCJtZFwiYC4gKi9cbiAgICBtYXhXaWR0aE1kOiBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdtZCcpLCB7XG4gICAgICBtYXhXaWR0aDogdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzLm1kXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXhXaWR0aD1cImxnXCJgLiAqL1xuICAgIG1heFdpZHRoTGc6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ2xnJyksIHtcbiAgICAgIG1heFdpZHRoOiB0aGVtZS5icmVha3BvaW50cy52YWx1ZXMubGdcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG1heFdpZHRoPVwieGxcImAuICovXG4gICAgbWF4V2lkdGhYbDogX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgneGwnKSwge1xuICAgICAgbWF4V2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy54bFxuICAgIH0pXG4gIH07XG59O1xudmFyIENvbnRhaW5lciA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQ29udGFpbmVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRmaXhlZCA9IHByb3BzLmZpeGVkLFxuICAgICAgZml4ZWQgPSBfcHJvcHMkZml4ZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZpeGVkLFxuICAgICAgX3Byb3BzJG1heFdpZHRoID0gcHJvcHMubWF4V2lkdGgsXG4gICAgICBtYXhXaWR0aCA9IF9wcm9wcyRtYXhXaWR0aCA9PT0gdm9pZCAwID8gJ2xnJyA6IF9wcm9wcyRtYXhXaWR0aCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZml4ZWRcIiwgXCJtYXhXaWR0aFwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBmaXhlZCAmJiBjbGFzc2VzLmZpeGVkLCBtYXhXaWR0aCAhPT0gZmFsc2UgJiYgY2xhc3Nlc1tcIm1heFdpZHRoXCIuY29uY2F0KGNhcGl0YWxpemUoU3RyaW5nKG1heFdpZHRoKSkpXSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQ29udGFpbmVyLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbWF4LXdpZHRoIHRvIG1hdGNoIHRoZSBtaW4td2lkdGggb2YgdGhlIGN1cnJlbnQgYnJlYWtwb2ludC5cbiAgICogVGhpcyBpcyB1c2VmdWwgaWYgeW91J2QgcHJlZmVyIHRvIGRlc2lnbiBmb3IgYSBmaXhlZCBzZXQgb2Ygc2l6ZXNcbiAgICogaW5zdGVhZCBvZiB0cnlpbmcgdG8gYWNjb21tb2RhdGUgYSBmdWxseSBmbHVpZCB2aWV3cG9ydC5cbiAgICogSXQncyBmbHVpZCBieSBkZWZhdWx0LlxuICAgKi9cbiAgZml4ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgdGhlIG1heC13aWR0aCBvZiB0aGUgY29udGFpbmVyLlxuICAgKiBUaGUgY29udGFpbmVyIHdpZHRoIGdyb3dzIHdpdGggdGhlIHNpemUgb2YgdGhlIHNjcmVlbi5cbiAgICogU2V0IHRvIGBmYWxzZWAgdG8gZGlzYWJsZSBgbWF4V2lkdGhgLlxuICAgKi9cbiAgbWF4V2lkdGg6IFByb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgZmFsc2VdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDb250YWluZXInXG59KShDb250YWluZXIpOyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZGlzYWJsZWQ6IGZhbHNlXG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0c1NoYXBlIH0gZnJvbSAnLi91dGlscy9Qcm9wVHlwZXMnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmV4cG9ydCB2YXIgVU5NT1VOVEVEID0gJ3VubW91bnRlZCc7XG5leHBvcnQgdmFyIEVYSVRFRCA9ICdleGl0ZWQnO1xuZXhwb3J0IHZhciBFTlRFUklORyA9ICdlbnRlcmluZyc7XG5leHBvcnQgdmFyIEVOVEVSRUQgPSAnZW50ZXJlZCc7XG5leHBvcnQgdmFyIEVYSVRJTkcgPSAnZXhpdGluZyc7XG4vKipcbiAqIFRoZSBUcmFuc2l0aW9uIGNvbXBvbmVudCBsZXRzIHlvdSBkZXNjcmliZSBhIHRyYW5zaXRpb24gZnJvbSBvbmUgY29tcG9uZW50XG4gKiBzdGF0ZSB0byBhbm90aGVyIF9vdmVyIHRpbWVfIHdpdGggYSBzaW1wbGUgZGVjbGFyYXRpdmUgQVBJLiBNb3N0IGNvbW1vbmx5XG4gKiBpdCdzIHVzZWQgdG8gYW5pbWF0ZSB0aGUgbW91bnRpbmcgYW5kIHVubW91bnRpbmcgb2YgYSBjb21wb25lbnQsIGJ1dCBjYW4gYWxzb1xuICogYmUgdXNlZCB0byBkZXNjcmliZSBpbi1wbGFjZSB0cmFuc2l0aW9uIHN0YXRlcyBhcyB3ZWxsLlxuICpcbiAqIC0tLVxuICpcbiAqICoqTm90ZSoqOiBgVHJhbnNpdGlvbmAgaXMgYSBwbGF0Zm9ybS1hZ25vc3RpYyBiYXNlIGNvbXBvbmVudC4gSWYgeW91J3JlIHVzaW5nXG4gKiB0cmFuc2l0aW9ucyBpbiBDU1MsIHlvdSdsbCBwcm9iYWJseSB3YW50IHRvIHVzZVxuICogW2BDU1NUcmFuc2l0aW9uYF0oaHR0cHM6Ly9yZWFjdGNvbW11bml0eS5vcmcvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9jc3MtdHJhbnNpdGlvbilcbiAqIGluc3RlYWQuIEl0IGluaGVyaXRzIGFsbCB0aGUgZmVhdHVyZXMgb2YgYFRyYW5zaXRpb25gLCBidXQgY29udGFpbnNcbiAqIGFkZGl0aW9uYWwgZmVhdHVyZXMgbmVjZXNzYXJ5IHRvIHBsYXkgbmljZSB3aXRoIENTUyB0cmFuc2l0aW9ucyAoaGVuY2UgdGhlXG4gKiBuYW1lIG9mIHRoZSBjb21wb25lbnQpLlxuICpcbiAqIC0tLVxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lcyBub3QgYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICogY29tcG9uZW50IGl0IHJlbmRlcnMsIGl0IG9ubHkgdHJhY2tzIFwiZW50ZXJcIiBhbmQgXCJleGl0XCIgc3RhdGVzIGZvciB0aGVcbiAqIGNvbXBvbmVudHMuIEl0J3MgdXAgdG8geW91IHRvIGdpdmUgbWVhbmluZyBhbmQgZWZmZWN0IHRvIHRob3NlIHN0YXRlcy4gRm9yXG4gKiBleGFtcGxlIHdlIGNhbiBhZGQgc3R5bGVzIHRvIGEgY29tcG9uZW50IHdoZW4gaXQgZW50ZXJzIG9yIGV4aXRzOlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuICpcbiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwO1xuICpcbiAqIGNvbnN0IGRlZmF1bHRTdHlsZSA9IHtcbiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsXG4gKiAgIG9wYWNpdHk6IDAsXG4gKiB9XG4gKlxuICogY29uc3QgdHJhbnNpdGlvblN0eWxlcyA9IHtcbiAqICAgZW50ZXJpbmc6IHsgb3BhY2l0eTogMSB9LFxuICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGV4aXRpbmc6ICB7IG9wYWNpdHk6IDAgfSxcbiAqICAgZXhpdGVkOiAgeyBvcGFjaXR5OiAwIH0sXG4gKiB9O1xuICpcbiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+IChcbiAqICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17ZHVyYXRpb259PlxuICogICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICA8ZGl2IHN0eWxlPXt7XG4gKiAgICAgICAgIC4uLmRlZmF1bHRTdHlsZSxcbiAqICAgICAgICAgLi4udHJhbnNpdGlvblN0eWxlc1tzdGF0ZV1cbiAqICAgICAgIH19PlxuICogICAgICAgICBJJ20gYSBmYWRlIFRyYW5zaXRpb24hXG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICApfVxuICogICA8L1RyYW5zaXRpb24+XG4gKiApO1xuICogYGBgXG4gKlxuICogVGhlcmUgYXJlIDQgbWFpbiBzdGF0ZXMgYSBUcmFuc2l0aW9uIGNhbiBiZSBpbjpcbiAqICAtIGAnZW50ZXJpbmcnYFxuICogIC0gYCdlbnRlcmVkJ2BcbiAqICAtIGAnZXhpdGluZydgXG4gKiAgLSBgJ2V4aXRlZCdgXG4gKlxuICogVHJhbnNpdGlvbiBzdGF0ZSBpcyB0b2dnbGVkIHZpYSB0aGUgYGluYCBwcm9wLiBXaGVuIGB0cnVlYCB0aGUgY29tcG9uZW50XG4gKiBiZWdpbnMgdGhlIFwiRW50ZXJcIiBzdGFnZS4gRHVyaW5nIHRoaXMgc3RhZ2UsIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCBmcm9tXG4gKiBpdHMgY3VycmVudCB0cmFuc2l0aW9uIHN0YXRlLCB0byBgJ2VudGVyaW5nJ2AgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGVcbiAqIHRyYW5zaXRpb24gYW5kIHRoZW4gdG8gdGhlIGAnZW50ZXJlZCdgIHN0YWdlIG9uY2UgaXQncyBjb21wbGV0ZS4gTGV0J3MgdGFrZVxuICogdGhlIGZvbGxvd2luZyBleGFtcGxlICh3ZSdsbCB1c2UgdGhlXG4gKiBbdXNlU3RhdGVdKGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ob29rcy1yZWZlcmVuY2UuaHRtbCN1c2VzdGF0ZSkgaG9vayk6XG4gKlxuICogYGBganN4XG4gKiBmdW5jdGlvbiBBcHAoKSB7XG4gKiAgIGNvbnN0IFtpblByb3AsIHNldEluUHJvcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9ezUwMH0+XG4gKiAgICAgICAgIHtzdGF0ZSA9PiAoXG4gKiAgICAgICAgICAgLy8gLi4uXG4gKiAgICAgICAgICl9XG4gKiAgICAgICA8L1RyYW5zaXRpb24+XG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHNldEluUHJvcCh0cnVlKX0+XG4gKiAgICAgICAgIENsaWNrIHRvIEVudGVyXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGJ1dHRvbiBpcyBjbGlja2VkIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCB0byB0aGUgYCdlbnRlcmluZydgIHN0YXRlXG4gKiBhbmQgc3RheSB0aGVyZSBmb3IgNTAwbXMgKHRoZSB2YWx1ZSBvZiBgdGltZW91dGApIGJlZm9yZSBpdCBmaW5hbGx5IHN3aXRjaGVzXG4gKiB0byBgJ2VudGVyZWQnYC5cbiAqXG4gKiBXaGVuIGBpbmAgaXMgYGZhbHNlYCB0aGUgc2FtZSB0aGluZyBoYXBwZW5zIGV4Y2VwdCB0aGUgc3RhdGUgbW92ZXMgZnJvbVxuICogYCdleGl0aW5nJ2AgdG8gYCdleGl0ZWQnYC5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgdmFyIHBhcmVudEdyb3VwID0gY29udGV4dDsgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnNcblxuICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyO1xuICAgIHZhciBpbml0aWFsU3RhdHVzO1xuICAgIF90aGlzLmFwcGVhclN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJvcHMuaW4pIHtcbiAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IEVYSVRFRDtcbiAgICAgICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gRU5URVJJTkc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRU5URVJFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BzLnVubW91bnRPbkV4aXQgfHwgcHJvcHMubW91bnRPbkVudGVyKSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBVTk1PVU5URUQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgfVxuICAgIH1cblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgc3RhdHVzOiBpbml0aWFsU3RhdHVzXG4gICAgfTtcbiAgICBfdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFRyYW5zaXRpb24uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKF9yZWYsIHByZXZTdGF0ZSkge1xuICAgIHZhciBuZXh0SW4gPSBfcmVmLmluO1xuXG4gICAgaWYgKG5leHRJbiAmJiBwcmV2U3RhdGUuc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9OyAvLyBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgLy8gICBsZXQgbmV4dFN0YXR1cyA9IG51bGxcbiAgLy8gICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gIC8vICAgICBjb25zdCB7IHN0YXR1cyB9ID0gdGhpcy5zdGF0ZVxuICAvLyAgICAgaWYgKHRoaXMucHJvcHMuaW4pIHtcbiAgLy8gICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7XG4gIC8vICAgICAgICAgbmV4dFN0YXR1cyA9IEVOVEVSSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH0gZWxzZSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HXG4gIC8vICAgICAgIH1cbiAgLy8gICAgIH1cbiAgLy8gICB9XG4gIC8vICAgcmV0dXJuIHsgbmV4dFN0YXR1cyB9XG4gIC8vIH1cblxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyh0cnVlLCB0aGlzLmFwcGVhclN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgbmV4dFN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gICAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklORztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyhmYWxzZSwgbmV4dFN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0VGltZW91dHMgPSBmdW5jdGlvbiBnZXRUaW1lb3V0cygpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXMucHJvcHMudGltZW91dDtcbiAgICB2YXIgZXhpdCwgZW50ZXIsIGFwcGVhcjtcbiAgICBleGl0ID0gZW50ZXIgPSBhcHBlYXIgPSB0aW1lb3V0O1xuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCAmJiB0eXBlb2YgdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGV4aXQgPSB0aW1lb3V0LmV4aXQ7XG4gICAgICBlbnRlciA9IHRpbWVvdXQuZW50ZXI7IC8vIFRPRE86IHJlbW92ZSBmYWxsYmFjayBmb3IgbmV4dCBtYWpvclxuXG4gICAgICBhcHBlYXIgPSB0aW1lb3V0LmFwcGVhciAhPT0gdW5kZWZpbmVkID8gdGltZW91dC5hcHBlYXIgOiBlbnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXhpdDogZXhpdCxcbiAgICAgIGVudGVyOiBlbnRlcixcbiAgICAgIGFwcGVhcjogYXBwZWFyXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3RhdHVzID0gZnVuY3Rpb24gdXBkYXRlU3RhdHVzKG1vdW50aW5nLCBuZXh0U3RhdHVzKSB7XG4gICAgaWYgKG1vdW50aW5nID09PSB2b2lkIDApIHtcbiAgICAgIG1vdW50aW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG5leHRTdGF0dXMgIT09IG51bGwpIHtcbiAgICAgIC8vIG5leHRTdGF0dXMgd2lsbCBhbHdheXMgYmUgRU5URVJJTkcgb3IgRVhJVElORy5cbiAgICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gICAgICB2YXIgbm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdChub2RlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBVTk1PVU5URURcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucGVyZm9ybUVudGVyID0gZnVuY3Rpb24gcGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgZW50ZXIgPSB0aGlzLnByb3BzLmVudGVyO1xuICAgIHZhciBhcHBlYXJpbmcgPSB0aGlzLmNvbnRleHQgPyB0aGlzLmNvbnRleHQuaXNNb3VudGluZyA6IG1vdW50aW5nO1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTtcbiAgICB2YXIgZW50ZXJUaW1lb3V0ID0gYXBwZWFyaW5nID8gdGltZW91dHMuYXBwZWFyIDogdGltZW91dHMuZW50ZXI7IC8vIG5vIGVudGVyIGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVOVEVSRURcbiAgICAvLyBpZiB3ZSBhcmUgbW91bnRpbmcgYW5kIHJ1bm5pbmcgdGhpcyBpdCBtZWFucyBhcHBlYXIgX211c3RfIGJlIHNldFxuXG4gICAgaWYgKCFtb3VudGluZyAmJiAhZW50ZXIgfHwgY29uZmlnLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkVudGVyKG5vZGUsIGFwcGVhcmluZyk7XG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgc3RhdHVzOiBFTlRFUklOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyaW5nKG5vZGUsIGFwcGVhcmluZyk7XG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQobm9kZSwgZW50ZXJUaW1lb3V0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRU5URVJFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChub2RlLCBhcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KG5vZGUpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBleGl0ID0gdGhpcy5wcm9wcy5leGl0O1xuICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTsgLy8gbm8gZXhpdCBhbmltYXRpb24gc2tpcCByaWdodCB0byBFWElURURcblxuICAgIGlmICghZXhpdCB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgc3RhdHVzOiBFWElUSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGluZyhub2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIGNhbmNlbE5leHRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5uZXh0Q2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpO1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGhcbiAgICAvLyBzZXRTdGF0ZSBjYWxsYmFja3MgYW5kIHVubW91bnRpbmcgaW4gdGVzdGluZywgc28gYWx3YXlzIG1ha2Ugc3VyZSB0aGF0XG4gICAgLy8gd2UgY2FuIGNhbmNlbCBhbnkgcGVuZGluZyBzZXRTdGF0ZSBjYWxsYmFja3MgYWZ0ZXIgd2UgdW5tb3VudC5cbiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTtcbiAgICB0aGlzLnNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIF9wcm90by5zZXROZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBzZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBhY3RpdmUgPSB0cnVlO1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIF90aGlzNC5uZXh0Q2FsbGJhY2sgPSBudWxsO1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChub2RlLCB0aW1lb3V0LCBoYW5kbGVyKSB7XG4gICAgdGhpcy5zZXROZXh0Q2FsbGJhY2soaGFuZGxlcik7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2spO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBzdGF0dXMgPSB0aGlzLnN0YXRlLnN0YXR1cztcblxuICAgIGlmIChzdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiXSk7IC8vIGZpbHRlciBwcm9wcyBmb3IgVHJhbnN0aXRpb25cblxuXG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuaW47XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMubW91bnRPbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnVubW91bnRPbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMudGltZW91dDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5hZGRFbmRMaXN0ZW5lcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmVkO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXRpbmc7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0ZWQ7XG5cbiAgICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgfSwgY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKSk7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgcmV0dXJuICgvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGNoaWxkUHJvcHMpKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb247XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb24uY29udGV4dFR5cGUgPSBUcmFuc2l0aW9uR3JvdXBDb250ZXh0O1xuVHJhbnNpdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTm9ybWFsbHkgYSBjb21wb25lbnQgaXMgbm90IHRyYW5zaXRpb25lZCBpZiBpdCBpcyBzaG93biB3aGVuIHRoZVxuICAgKiBgPFRyYW5zaXRpb24+YCBjb21wb25lbnQgbW91bnRzLiBJZiB5b3Ugd2FudCB0byB0cmFuc2l0aW9uIG9uIHRoZSBmaXJzdFxuICAgKiBtb3VudCBzZXQgYGFwcGVhcmAgdG8gYHRydWVgLCBhbmQgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4gYXMgc29vblxuICAgKiBhcyB0aGUgYDxUcmFuc2l0aW9uPmAgbW91bnRzLlxuICAgKlxuICAgKiA+ICoqTm90ZSoqOiB0aGVyZSBhcmUgbm8gc3BlY2lhbCBhcHBlYXIgc3RhdGVzIGxpa2UgYGFwcGVhcmluZ2AvYGFwcGVhcmVkYCwgdGhpcyBwcm9wXG4gICAqID4gb25seSBhZGRzIGFuIGFkZGl0aW9uYWwgZW50ZXIgdHJhbnNpdGlvbi4gSG93ZXZlciwgaW4gdGhlXG4gICAqID4gYDxDU1NUcmFuc2l0aW9uPmAgY29tcG9uZW50IHRoYXQgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiBkb2VzIHJlc3VsdCBpblxuICAgKiA+IGFkZGl0aW9uYWwgYC5hcHBlYXItKmAgY2xhc3NlcywgdGhhdCB3YXkgeW91IGNhbiBjaG9vc2UgdG8gc3R5bGUgaXRcbiAgICogPiBkaWZmZXJlbnRseS5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGVudGVyIHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBleGl0IHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBSZXF1aXJlZCB1bmxlc3MgYGFkZEVuZExpc3RlbmVyYCBpcyBwcm92aWRlZC5cbiAgICpcbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9uczpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9ezUwMH1cbiAgICogYGBgXG4gICAqXG4gICAqIG9yIGluZGl2aWR1YWxseTpcbiAgICpcbiAgICogYGBganN4XG4gICAqIHRpbWVvdXQ9e3tcbiAgICogIGFwcGVhcjogNTAwLFxuICAgKiAgZW50ZXI6IDMwMCxcbiAgICogIGV4aXQ6IDUwMCxcbiAgICogfX1cbiAgICogYGBgXG4gICAqXG4gICAqIC0gYGFwcGVhcmAgZGVmYXVsdHMgdG8gdGhlIHZhbHVlIG9mIGBlbnRlcmBcbiAgICogLSBgZW50ZXJgIGRlZmF1bHRzIHRvIGAwYFxuICAgKiAtIGBleGl0YCBkZWZhdWx0cyB0byBgMGBcbiAgICpcbiAgICogQHR5cGUge251bWJlciB8IHsgZW50ZXI/OiBudW1iZXIsIGV4aXQ/OiBudW1iZXIsIGFwcGVhcj86IG51bWJlciB9fVxuICAgKi9cbiAgdGltZW91dDogZnVuY3Rpb24gdGltZW91dChwcm9wcykge1xuICAgIHZhciBwdCA9IHRpbWVvdXRzU2hhcGU7XG4gICAgaWYgKCFwcm9wcy5hZGRFbmRMaXN0ZW5lcikgcHQgPSBwdC5pc1JlcXVpcmVkO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHB0LmFwcGx5KHZvaWQgMCwgW3Byb3BzXS5jb25jYXQoYXJncykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmdcbiAgICogRE9NIG5vZGUgYW5kIGEgYGRvbmVgIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiAqKk5vdGU6KiogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbn0gOiB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IDA7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IDE7XG5UcmFuc2l0aW9uLkVOVEVSSU5HID0gMjtcblRyYW5zaXRpb24uRU5URVJFRCA9IDM7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSA0O1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbjsiLCJleHBvcnQgdmFyIHJlZmxvdyA9IGZ1bmN0aW9uIHJlZmxvdyhub2RlKSB7XG4gIHJldHVybiBub2RlLnNjcm9sbFRvcDtcbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvblByb3BzKHByb3BzLCBvcHRpb25zKSB7XG4gIHZhciB0aW1lb3V0ID0gcHJvcHMudGltZW91dCxcbiAgICAgIF9wcm9wcyRzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgc3R5bGUgPSBfcHJvcHMkc3R5bGUgPT09IHZvaWQgMCA/IHt9IDogX3Byb3BzJHN0eWxlO1xuICByZXR1cm4ge1xuICAgIGR1cmF0aW9uOiBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gfHwgdHlwZW9mIHRpbWVvdXQgPT09ICdudW1iZXInID8gdGltZW91dCA6IHRpbWVvdXRbb3B0aW9ucy5tb2RlXSB8fCAwLFxuICAgIGRlbGF5OiBzdHlsZS50cmFuc2l0aW9uRGVsYXlcbiAgfTtcbn0iLCJpbXBvcnQgeyB1c2VUaGVtZSBhcyB1c2VUaGVtZVdpdGhvdXREZWZhdWx0IH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gdXNlVGhlbWVXaXRob3V0RGVmYXVsdCgpIHx8IGRlZmF1bHRUaGVtZTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHsgZ2V0VHJhbnNpdGlvblByb3BzIH0gZnJvbSAnLi4vdHJhbnNpdGlvbnMvdXRpbHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIgZWxlbWVudC4gKi9cbiAgICBjb250YWluZXI6IHtcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnaGVpZ2h0JylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBlbGVtZW50IHdoZW4gdGhlIHRyYW5zaXRpb24gaGFzIGVudGVyZWQuICovXG4gICAgZW50ZXJlZDoge1xuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICBvdmVyZmxvdzogJ3Zpc2libGUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIgZWxlbWVudCB3aGVuIHRoZSB0cmFuc2l0aW9uIGhhcyBleGl0ZWQgYW5kIGBjb2xsYXBzZWRIZWlnaHRgICE9IDBweC4gKi9cbiAgICBoaWRkZW46IHtcbiAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBvdXRlciB3cmFwcGVyIGVsZW1lbnQuICovXG4gICAgd3JhcHBlcjoge1xuICAgICAgLy8gSGFjayB0byBnZXQgY2hpbGRyZW4gd2l0aCBhIG5lZ2F0aXZlIG1hcmdpbiB0byBub3QgZmFsc2lmeSB0aGUgaGVpZ2h0IGNvbXB1dGF0aW9uLlxuICAgICAgZGlzcGxheTogJ2ZsZXgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciB3cmFwcGVyIGVsZW1lbnQuICovXG4gICAgd3JhcHBlcklubmVyOiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogVGhlIENvbGxhcHNlIHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGVcbiAqIFtWZXJ0aWNhbCBTdGVwcGVyXSgvY29tcG9uZW50cy9zdGVwcGVycy8jdmVydGljYWwtc3RlcHBlcikgU3RlcENvbnRlbnQgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG52YXIgQ29sbGFwc2UgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENvbGxhcHNlKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xsYXBzZWRIZWlnaCA9IHByb3BzLmNvbGxhcHNlZEhlaWdodCxcbiAgICAgIGNvbGxhcHNlZEhlaWdodCA9IF9wcm9wcyRjb2xsYXBzZWRIZWlnaCA9PT0gdm9pZCAwID8gJzBweCcgOiBfcHJvcHMkY29sbGFwc2VkSGVpZ2gsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2RpdicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0aW5nID0gcHJvcHMub25FeGl0aW5nLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIF9wcm9wcyR0aW1lb3V0ID0gcHJvcHMudGltZW91dCxcbiAgICAgIHRpbWVvdXQgPSBfcHJvcHMkdGltZW91dCA9PT0gdm9pZCAwID8gZHVyYXRpb24uc3RhbmRhcmQgOiBfcHJvcHMkdGltZW91dCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xsYXBzZWRIZWlnaHRcIiwgXCJjb21wb25lbnRcIiwgXCJpblwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyZWRcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJ0aW1lb3V0XCJdKTtcblxuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpO1xuICB2YXIgdGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIHdyYXBwZXJSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBhdXRvVHJhbnNpdGlvbkR1cmF0aW9uID0gUmVhY3QudXNlUmVmKCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lci5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlRW50ZXIobm9kZSwgaXNBcHBlYXJpbmcpIHtcbiAgICBub2RlLnN0eWxlLmhlaWdodCA9IGNvbGxhcHNlZEhlaWdodDtcblxuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUVudGVyaW5nID0gZnVuY3Rpb24gaGFuZGxlRW50ZXJpbmcobm9kZSwgaXNBcHBlYXJpbmcpIHtcbiAgICB2YXIgd3JhcHBlckhlaWdodCA9IHdyYXBwZXJSZWYuY3VycmVudCA/IHdyYXBwZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgOiAwO1xuXG4gICAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KSxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX2dldFRyYW5zaXRpb25Qcm9wcy5kdXJhdGlvbjtcblxuICAgIGlmICh0aW1lb3V0ID09PSAnYXV0bycpIHtcbiAgICAgIHZhciBkdXJhdGlvbjIgPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24od3JhcHBlckhlaWdodCk7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiXCIuY29uY2F0KGR1cmF0aW9uMiwgXCJtc1wiKTtcbiAgICAgIGF1dG9UcmFuc2l0aW9uRHVyYXRpb24uY3VycmVudCA9IGR1cmF0aW9uMjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0eXBlb2YgdHJhbnNpdGlvbkR1cmF0aW9uID09PSAnc3RyaW5nJyA/IHRyYW5zaXRpb25EdXJhdGlvbiA6IFwiXCIuY29uY2F0KHRyYW5zaXRpb25EdXJhdGlvbiwgXCJtc1wiKTtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLmhlaWdodCA9IFwiXCIuY29uY2F0KHdyYXBwZXJIZWlnaHQsIFwicHhcIik7XG5cbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlcmVkID0gZnVuY3Rpb24gaGFuZGxlRW50ZXJlZChub2RlLCBpc0FwcGVhcmluZykge1xuICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nO1xuXG4gICAgaWYgKG9uRW50ZXJlZCkge1xuICAgICAgb25FbnRlcmVkKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUV4aXQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0KG5vZGUpIHtcbiAgICB2YXIgd3JhcHBlckhlaWdodCA9IHdyYXBwZXJSZWYuY3VycmVudCA/IHdyYXBwZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgOiAwO1xuICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gXCJcIi5jb25jYXQod3JhcHBlckhlaWdodCwgXCJweFwiKTtcblxuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIG9uRXhpdChub2RlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUV4aXRpbmcgPSBmdW5jdGlvbiBoYW5kbGVFeGl0aW5nKG5vZGUpIHtcbiAgICB2YXIgd3JhcHBlckhlaWdodCA9IHdyYXBwZXJSZWYuY3VycmVudCA/IHdyYXBwZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgOiAwO1xuXG4gICAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcHMyID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KSxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX2dldFRyYW5zaXRpb25Qcm9wczIuZHVyYXRpb247XG5cbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICB2YXIgZHVyYXRpb24yID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKHdyYXBwZXJIZWlnaHQpO1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIlwiLmNvbmNhdChkdXJhdGlvbjIsIFwibXNcIik7XG4gICAgICBhdXRvVHJhbnNpdGlvbkR1cmF0aW9uLmN1cnJlbnQgPSBkdXJhdGlvbjI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gdHlwZW9mIHRyYW5zaXRpb25EdXJhdGlvbiA9PT0gJ3N0cmluZycgPyB0cmFuc2l0aW9uRHVyYXRpb24gOiBcIlwiLmNvbmNhdCh0cmFuc2l0aW9uRHVyYXRpb24sIFwibXNcIik7XG4gICAgfVxuXG4gICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBjb2xsYXBzZWRIZWlnaHQ7XG5cbiAgICBpZiAob25FeGl0aW5nKSB7XG4gICAgICBvbkV4aXRpbmcobm9kZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBhZGRFbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEVuZExpc3RlbmVyKF8sIG5leHQpIHtcbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICB0aW1lci5jdXJyZW50ID0gc2V0VGltZW91dChuZXh0LCBhdXRvVHJhbnNpdGlvbkR1cmF0aW9uLmN1cnJlbnQgfHwgMCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRyYW5zaXRpb24sIF9leHRlbmRzKHtcbiAgICBpbjogaW5Qcm9wLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRW50ZXJlZDogaGFuZGxlRW50ZXJlZCxcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgb25FeGl0aW5nOiBoYW5kbGVFeGl0aW5nLFxuICAgIGFkZEVuZExpc3RlbmVyOiBhZGRFbmRMaXN0ZW5lcixcbiAgICB0aW1lb3V0OiB0aW1lb3V0ID09PSAnYXV0bycgPyBudWxsIDogdGltZW91dFxuICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuY29udGFpbmVyLCBjbGFzc05hbWUsIHtcbiAgICAgICAgZW50ZXJlZDogY2xhc3Nlcy5lbnRlcmVkLFxuICAgICAgICBleGl0ZWQ6ICFpblByb3AgJiYgY29sbGFwc2VkSGVpZ2h0ID09PSAnMHB4JyAmJiBjbGFzc2VzLmhpZGRlblxuICAgICAgfVtzdGF0ZV0pLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgbWluSGVpZ2h0OiBjb2xsYXBzZWRIZWlnaHRcbiAgICAgIH0sIHN0eWxlKSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgY2hpbGRQcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLndyYXBwZXIsXG4gICAgICByZWY6IHdyYXBwZXJSZWZcbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy53cmFwcGVySW5uZXJcbiAgICB9LCBjaGlsZHJlbikpKTtcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENvbGxhcHNlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG5vZGUgdG8gYmUgY29sbGFwc2VkLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSBjb250YWluZXIgd2hlbiBjb2xsYXBzZWQuXG4gICAqL1xuICBjb2xsYXBzZWRIZWlnaHQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0aW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKlxuICAgKiBTZXQgdG8gJ2F1dG8nIHRvIGF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlIHRyYW5zaXRpb24gdGltZSBiYXNlZCBvbiBoZWlnaHQuXG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSksIFByb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSldKVxufSA6IHZvaWQgMDtcbkNvbGxhcHNlLm11aVN1cHBvcnRBdXRvID0gdHJ1ZTtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDb2xsYXBzZSdcbn0pKENvbGxhcHNlKTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgZWxldmF0aW9ucyA9IHt9O1xuICB0aGVtZS5zaGFkb3dzLmZvckVhY2goZnVuY3Rpb24gKHNoYWRvdywgaW5kZXgpIHtcbiAgICBlbGV2YXRpb25zW1wiZWxldmF0aW9uXCIuY29uY2F0KGluZGV4KV0gPSB7XG4gICAgICBib3hTaGFkb3c6IHNoYWRvd1xuICAgIH07XG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQucGFwZXIsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JveC1zaGFkb3cnKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzcXVhcmU9e2ZhbHNlfWAuICovXG4gICAgcm91bmRlZDoge1xuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXNcbiAgICB9XG4gIH0sIGVsZXZhdGlvbnMpO1xufTtcbnZhciBQYXBlciA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gUGFwZXIocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRzcXVhcmUgPSBwcm9wcy5zcXVhcmUsXG4gICAgICBzcXVhcmUgPSBfcHJvcHMkc3F1YXJlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzcXVhcmUsXG4gICAgICBfcHJvcHMkZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uLFxuICAgICAgZWxldmF0aW9uID0gX3Byb3BzJGVsZXZhdGlvbiA9PT0gdm9pZCAwID8gMSA6IF9wcm9wcyRlbGV2YXRpb24sXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcInNxdWFyZVwiLCBcImVsZXZhdGlvblwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghdGhlbWUuc2hhZG93c1tlbGV2YXRpb25dKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IHRoaXMgZWxldmF0aW9uIGBcIi5jb25jYXQoZWxldmF0aW9uLCBcImAgaXMgbm90IGltcGxlbWVudGVkLlwiKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNsYXNzTmFtZSA9IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wiZWxldmF0aW9uXCIuY29uY2F0KGVsZXZhdGlvbildLCBjbGFzc05hbWVQcm9wLCAhc3F1YXJlICYmIGNsYXNzZXMucm91bmRlZCk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFBhcGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNoYWRvdyBkZXB0aCwgY29ycmVzcG9uZHMgdG8gYGRwYCBpbiB0aGUgc3BlYy5cbiAgICogSXQgYWNjZXB0cyB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAyNCBpbmNsdXNpdmUuXG4gICAqL1xuICBlbGV2YXRpb246IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcm91bmRlZCBjb3JuZXJzIGFyZSBkaXNhYmxlZC5cbiAgICovXG4gIHNxdWFyZTogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpUGFwZXInXG59KShQYXBlcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3RvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IENvbGxhcHNlIGZyb20gJy4uL0NvbGxhcHNlJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgdHJhbnNpdGlvbiA9IHtcbiAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnbWFyZ2luJ10sIHRyYW5zaXRpb24pLFxuICAgICAgJyY6YmVmb3JlJzoge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgdG9wOiAtMSxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIGhlaWdodDogMSxcbiAgICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZGl2aWRlcixcbiAgICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKFsnb3BhY2l0eScsICdiYWNrZ3JvdW5kLWNvbG9yJ10sIHRyYW5zaXRpb24pXG4gICAgICB9LFxuICAgICAgJyY6Zmlyc3QtY2hpbGQnOiB7XG4gICAgICAgICcmOmJlZm9yZSc6IHtcbiAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGV4cGFuZGVkJzoge1xuICAgICAgICBtYXJnaW46ICcxNnB4IDAnLFxuICAgICAgICAnJjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgICBtYXJnaW5Ub3A6IDBcbiAgICAgICAgfSxcbiAgICAgICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgICAgICBtYXJnaW5Cb3R0b206IDBcbiAgICAgICAgfSxcbiAgICAgICAgJyY6YmVmb3JlJzoge1xuICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGV4cGFuZGVkICsgJic6IHtcbiAgICAgICAgJyY6YmVmb3JlJzoge1xuICAgICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRCYWNrZ3JvdW5kXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNxdWFyZT17ZmFsc2V9YC4gKi9cbiAgICByb3VuZGVkOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAnJjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzXG4gICAgICB9LFxuICAgICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgICAvLyBGaXggYSByZW5kZXJpbmcgaXNzdWUgb24gRWRnZVxuICAgICAgICAnQHN1cHBvcnRzICgtbXMtaW1lLWFsaWduOiBhdXRvKSc6IHtcbiAgICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAwLFxuICAgICAgICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXhwYW5kZWQ9e3RydWV9YC4gKi9cbiAgICBleHBhbmRlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fVxuICB9O1xufTtcbnZhciBFeHBhbnNpb25QYW5lbCA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRXhwYW5zaW9uUGFuZWwocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW5Qcm9wID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRkZWZhdWx0RXhwYW5kZSA9IHByb3BzLmRlZmF1bHRFeHBhbmRlZCxcbiAgICAgIGRlZmF1bHRFeHBhbmRlZCA9IF9wcm9wcyRkZWZhdWx0RXhwYW5kZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGVmYXVsdEV4cGFuZGUsXG4gICAgICBfcHJvcHMkZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGRpc2FibGVkID0gX3Byb3BzJGRpc2FibGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlZCxcbiAgICAgIGV4cGFuZGVkUHJvcCA9IHByb3BzLmV4cGFuZGVkLFxuICAgICAgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIF9wcm9wcyRzcXVhcmUgPSBwcm9wcy5zcXVhcmUsXG4gICAgICBzcXVhcmUgPSBfcHJvcHMkc3F1YXJlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzcXVhcmUsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gQ29sbGFwc2UgOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBUcmFuc2l0aW9uUHJvcHMgPSBwcm9wcy5UcmFuc2l0aW9uUHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiZGVmYXVsdEV4cGFuZGVkXCIsIFwiZGlzYWJsZWRcIiwgXCJleHBhbmRlZFwiLCBcIm9uQ2hhbmdlXCIsIFwic3F1YXJlXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcIlRyYW5zaXRpb25Qcm9wc1wiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYoZXhwYW5kZWRQcm9wICE9IG51bGwpLFxuICAgICAgaXNDb250cm9sbGVkID0gX1JlYWN0JHVzZVJlZi5jdXJyZW50O1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShkZWZhdWx0RXhwYW5kZWQpLFxuICAgICAgZXhwYW5kZWRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldEV4cGFuZGVkU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIGV4cGFuZGVkID0gaXNDb250cm9sbGVkID8gZXhwYW5kZWRQcm9wIDogZXhwYW5kZWRTdGF0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNDb250cm9sbGVkICE9PSAoZXhwYW5kZWRQcm9wICE9IG51bGwpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IEEgY29tcG9uZW50IGlzIGNoYW5naW5nIFwiLmNvbmNhdChpc0NvbnRyb2xsZWQgPyAnYSAnIDogJ2FuIHVuJywgXCJjb250cm9sbGVkIEV4cGFuc2lvblBhbmVsIHRvIGJlIFwiKS5jb25jYXQoaXNDb250cm9sbGVkID8gJ3VuJyA6ICcnLCBcImNvbnRyb2xsZWQuXCIpLCAnRWxlbWVudHMgc2hvdWxkIG5vdCBzd2l0Y2ggZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuJywgJ0RlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgRXhwYW5zaW9uUGFuZWwgJyArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4nLCAnTW9yZSBpbmZvOiBodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cyddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbZXhwYW5kZWRQcm9wLCBpc0NvbnRyb2xsZWRdKTtcbiAgfVxuXG4gIHZhciBoYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgc2V0RXhwYW5kZWRTdGF0ZSghZXhwYW5kZWQpO1xuICAgIH1cblxuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQsICFleHBhbmRlZCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBfUmVhY3QkQ2hpbGRyZW4kdG9BcnIgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuUHJvcCksXG4gICAgICBfUmVhY3QkQ2hpbGRyZW4kdG9BcnIyID0gX3RvQXJyYXkoX1JlYWN0JENoaWxkcmVuJHRvQXJyKSxcbiAgICAgIHN1bW1hcnkgPSBfUmVhY3QkQ2hpbGRyZW4kdG9BcnIyWzBdLFxuICAgICAgY2hpbGRyZW4gPSBfUmVhY3QkQ2hpbGRyZW4kdG9BcnIyLnNsaWNlKDEpO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBhcGVyLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBleHBhbmRlZCAmJiBjbGFzc2VzLmV4cGFuZGVkLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCAhc3F1YXJlICYmIGNsYXNzZXMucm91bmRlZCksXG4gICAgcmVmOiByZWYsXG4gICAgc3F1YXJlOiBzcXVhcmVcbiAgfSwgb3RoZXIpLCBSZWFjdC5jbG9uZUVsZW1lbnQoc3VtbWFyeSwge1xuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBleHBhbmRlZDogZXhwYW5kZWQsXG4gICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZVxuICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgaW46IGV4cGFuZGVkLFxuICAgIHRpbWVvdXQ6IFwiYXV0b1wiXG4gIH0sIFRyYW5zaXRpb25Qcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHN1bW1hcnkucHJvcHMuaWQsXG4gICAgaWQ6IHN1bW1hcnkucHJvcHNbJ2FyaWEtY29udHJvbHMnXSxcbiAgICByb2xlOiBcInJlZ2lvblwiXG4gIH0sIGNoaWxkcmVuKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBFeHBhbnNpb25QYW5lbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgZXhwYW5zaW9uIHBhbmVsLlxuICAgKi9cbiAgY2hpbGRyZW46IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBzdW1tYXJ5ID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShwcm9wcy5jaGlsZHJlbilbMF07XG5cbiAgICBpZiAoc3VtbWFyeS50eXBlID09PSBSZWFjdC5GcmFnbWVudCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIk1hdGVyaWFsLVVJOiB0aGUgRXhwYW5zaW9uUGFuZWwgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLiBcIiArICdDb25zaWRlciBwcm92aWRpbmcgYW4gYXJyYXkgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KHN1bW1hcnkpKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogZXhwZWN0ZWQgdGhlIGZpcnN0IGNoaWxkIG9mIEV4cGFuc2lvblBhbmVsIHRvIGJlIGEgdmFsaWQgZWxlbWVudC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZXhwYW5kcyB0aGUgcGFuZWwgYnkgZGVmYXVsdC5cbiAgICovXG4gIGRlZmF1bHRFeHBhbmRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHBhbmVsIHdpbGwgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZXhwYW5kcyB0aGUgcGFuZWwsIG90aGVyd2lzZSBjb2xsYXBzZSBpdC5cbiAgICogU2V0dGluZyB0aGlzIHByb3AgZW5hYmxlcyBjb250cm9sIG92ZXIgdGhlIHBhbmVsLlxuICAgKi9cbiAgZXhwYW5kZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBleHBhbmQvY29sbGFwc2Ugc3RhdGUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGV4cGFuZGVkIFRoZSBgZXhwYW5kZWRgIHN0YXRlIG9mIHRoZSBwYW5lbC5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgc3F1YXJlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgY29sbGFwc2UgZWZmZWN0LlxuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBgVHJhbnNpdGlvbmAgZWxlbWVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlFeHBhbnNpb25QYW5lbCdcbn0pKEV4cGFuc2lvblBhbmVsKTsiLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5XCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCIuL25vbkl0ZXJhYmxlUmVzdFwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlUmVzdCgpO1xufSIsIi8vIFRPRE86IE1ha2UgaXQgcHJpdmF0ZSBvbmx5IGluIHY1XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRSZWYocmVmLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZih2YWx1ZSk7XG4gIH0gZWxzZSBpZiAocmVmKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfVxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4vc2V0UmVmJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUZvcmtSZWYocmVmQSwgcmVmQikge1xuICAvKipcbiAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiB0aGUgcmVmIHByb3BzIGNoYW5nZSBhbmQgYXJlIGRlZmluZWQuXG4gICAqIFRoaXMgbWVhbnMgcmVhY3Qgd2lsbCBjYWxsIHRoZSBvbGQgZm9ya1JlZiB3aXRoIGBudWxsYCBhbmQgdGhlIG5ldyBmb3JrUmVmXG4gICAqIHdpdGggdGhlIHJlZi4gQ2xlYW51cCBuYXR1cmFsbHkgZW1lcmdlcyBmcm9tIHRoaXMgYmVoYXZpb3JcbiAgICovXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmVmQSA9PSBudWxsICYmIHJlZkIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyZWZWYWx1ZSkge1xuICAgICAgc2V0UmVmKHJlZkEsIHJlZlZhbHVlKTtcbiAgICAgIHNldFJlZihyZWZCLCByZWZWYWx1ZSk7XG4gICAgfTtcbiAgfSwgW3JlZkEsIHJlZkJdKTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTQwOTkjaXNzdWVjb21tZW50LTQ0MDAxMzg5MlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRXZlbnRDYWxsYmFjayhmbikge1xuICB2YXIgcmVmID0gUmVhY3QudXNlUmVmKGZuKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJlZi5jdXJyZW50ID0gZm47XG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICgwLCByZWYuY3VycmVudCkoZXZlbnQpO1xuICB9LCBbXSk7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8qKlxuICogTm9Tc3IgcHVycG9zZWx5IHJlbW92ZXMgY29tcG9uZW50cyBmcm9tIHRoZSBzdWJqZWN0IG9mIFNlcnZlciBTaWRlIFJlbmRlcmluZyAoU1NSKS5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBjYW4gYmUgdXNlZnVsIGluIGEgdmFyaWV0eSBvZiBzaXR1YXRpb25zOlxuICogLSBFc2NhcGUgaGF0Y2ggZm9yIGJyb2tlbiBkZXBlbmRlbmNpZXMgbm90IHN1cHBvcnRpbmcgU1NSLlxuICogLSBJbXByb3ZlIHRoZSB0aW1lLXRvLWZpcnN0IHBhaW50IG9uIHRoZSBjbGllbnQgYnkgb25seSByZW5kZXJpbmcgYWJvdmUgdGhlIGZvbGQuXG4gKiAtIFJlZHVjZSB0aGUgcmVuZGVyaW5nIHRpbWUgb24gdGhlIHNlcnZlci5cbiAqIC0gVW5kZXIgdG9vIGhlYXZ5IHNlcnZlciBsb2FkLCB5b3UgY2FuIHR1cm4gb24gc2VydmljZSBkZWdyYWRhdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBOb1Nzcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkZWZlciA9IHByb3BzLmRlZmVyLFxuICAgICAgZGVmZXIgPSBfcHJvcHMkZGVmZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRlZmVyLFxuICAgICAgX3Byb3BzJGZhbGxiYWNrID0gcHJvcHMuZmFsbGJhY2ssXG4gICAgICBmYWxsYmFjayA9IF9wcm9wcyRmYWxsYmFjayA9PT0gdm9pZCAwID8gbnVsbCA6IF9wcm9wcyRmYWxsYmFjaztcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgbW91bnRlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0TW91bnRlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWRlZmVyKSB7XG4gICAgICBzZXRNb3VudGVkU3RhdGUodHJ1ZSk7XG4gICAgfVxuICB9LCBbZGVmZXJdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZGVmZXIpIHtcbiAgICAgIHNldE1vdW50ZWRTdGF0ZSh0cnVlKTtcbiAgICB9XG4gIH0sIFtkZWZlcl0pOyAvLyBXZSBuZWVkIHRoZSBGcmFnbWVudCBoZXJlIHRvIGZvcmNlIHJlYWN0LWRvY2dlbiB0byByZWNvZ25pc2UgTm9Tc3IgYXMgYSBjb21wb25lbnQuXG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIG1vdW50ZWRTdGF0ZSA/IGNoaWxkcmVuIDogZmFsbGJhY2spO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBOb1Nzci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBZb3UgY2FuIHdyYXAgYSBub2RlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIG5vdCBvbmx5IHByZXZlbnQgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgKiBJdCB3aWxsIGFsc28gZGVmZXIgdGhlIHJlbmRlcmluZyBvZiB0aGUgY2hpbGRyZW4gaW50byBhIGRpZmZlcmVudCBzY3JlZW4gZnJhbWUuXG4gICAqL1xuICBkZWZlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBmYWxsYmFjayBjb250ZW50IHRvIGRpc3BsYXkuXG4gICAqL1xuICBmYWxsYmFjazogUHJvcFR5cGVzLm5vZGVcbn0gOiB2b2lkIDA7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBOb1NzclsncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChOb1Nzci5wcm9wVHlwZXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBOb1NzcjsiLCIvLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvdjQuMS41L3NyYy9mb2N1cy12aXNpYmxlLmpzXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG52YXIgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG52YXIgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbnZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSBudWxsO1xudmFyIGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gIHRleHQ6IHRydWUsXG4gIHNlYXJjaDogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxuICB0ZWw6IHRydWUsXG4gIGVtYWlsOiB0cnVlLFxuICBwYXNzd29yZDogdHJ1ZSxcbiAgbnVtYmVyOiB0cnVlLFxuICBkYXRlOiB0cnVlLFxuICBtb250aDogdHJ1ZSxcbiAgd2VlazogdHJ1ZSxcbiAgdGltZTogdHJ1ZSxcbiAgZGF0ZXRpbWU6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWVcbn07XG4vKipcbiAqIENvbXB1dGVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGVcbiAqIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBiZWluZyBhZGRlZCwgaS5lLiB3aGV0aGVyIGl0IHNob3VsZCBhbHdheXMgbWF0Y2hcbiAqIGA6Zm9jdXMtdmlzaWJsZWAgd2hlbiBmb2N1c2VkLlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5cbmZ1bmN0aW9uIGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KG5vZGUpIHtcbiAgdmFyIHR5cGUgPSBub2RlLnR5cGUsXG4gICAgICB0YWdOYW1lID0gbm9kZS50YWdOYW1lO1xuXG4gIGlmICh0YWdOYW1lID09PSAnSU5QVVQnICYmIGlucHV0VHlwZXNXaGl0ZWxpc3RbdHlwZV0gJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0YWdOYW1lID09PSAnVEVYVEFSRUEnICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAobm9kZS5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVLZXlEb3duKCkge1xuICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbn1cbi8qKlxuICogSWYgYXQgYW55IHBvaW50IGEgdXNlciBjbGlja3Mgd2l0aCBhIHBvaW50aW5nIGRldmljZSwgZW5zdXJlIHRoYXQgd2UgY2hhbmdlXG4gKiB0aGUgbW9kYWxpdHkgYXdheSBmcm9tIGtleWJvYXJkLlxuICogVGhpcyBhdm9pZHMgdGhlIHNpdHVhdGlvbiB3aGVyZSBhIHVzZXIgcHJlc3NlcyBhIGtleSBvbiBhbiBhbHJlYWR5IGZvY3VzZWRcbiAqIGVsZW1lbnQsIGFuZCB0aGVuIGNsaWNrcyBvbiBhIGRpZmZlcmVudCBlbGVtZW50LCBmb2N1c2luZyBpdCB3aXRoIGFcbiAqIHBvaW50aW5nIGRldmljZSwgd2hpbGUgd2Ugc3RpbGwgdGhpbmsgd2UncmUgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gKiBAcGFyYW0ge0V2ZW50fSBlXG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVQb2ludGVyRG93bigpIHtcbiAgaGFkS2V5Ym9hcmRFdmVudCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICBpZiAodGhpcy52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgLy8gSWYgdGhlIHRhYiBiZWNvbWVzIGFjdGl2ZSBhZ2FpbiwgdGhlIGJyb3dzZXIgd2lsbCBoYW5kbGUgY2FsbGluZyBmb2N1c1xuICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgIC8vIElmIHRoaXMgdGFiIGNoYW5nZSBjYXVzZWQgYSBibHVyIG9uIGFuIGVsZW1lbnQgd2l0aCBmb2N1cy12aXNpYmxlLFxuICAgIC8vIHJlLWFwcGx5IHRoZSBjbGFzcyB3aGVuIHRoZSB1c2VyIHN3aXRjaGVzIGJhY2sgdG8gdGhlIHRhYi5cbiAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwYXJlKG93bmVyRG9jdW1lbnQpIHtcbiAgb3duZXJEb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIG93bmVyRG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBvd25lckRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBvd25lckRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIG93bmVyRG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVhcmRvd24ob3duZXJEb2N1bWVudCkge1xuICBvd25lckRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgb3duZXJEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIG93bmVyRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIG93bmVyRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgb3duZXJEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gdGFyZ2V0Lm1hdGNoZXMoJzpmb2N1cy12aXNpYmxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7fSAvLyBicm93c2VycyBub3QgaW1wbGVtZW50aW5nIDpmb2N1cy12aXNpYmxlIHdpbGwgdGhyb3cgYSBTeW50YXhFcnJvclxuICAvLyB3ZSB1c2Ugb3VyIG93biBoZXVyaXN0aWMgZm9yIHRob3NlIGJyb3dzZXJzXG4gIC8vIHJldGhyb3cgbWlnaHQgYmUgYmV0dGVyIGlmIGl0J3Mgbm90IHRoZSBleHBlY3RlZCBlcnJvciBidXQgZG8gd2UgcmVhbGx5XG4gIC8vIHdhbnQgdG8gY3Jhc2ggaWYgZm9jdXMtdmlzaWJsZSBtYWxmdW5jdGlvbmVkP1xuICAvLyBubyBuZWVkIGZvciB2YWxpZEZvY3VzVGFyZ2V0IGNoZWNrLiB0aGUgdXNlciBkb2VzIHRoYXQgYnkgYXR0YWNoaW5nIGl0IHRvXG4gIC8vIGZvY3VzYWJsZSBldmVudHMgb25seVxuXG5cbiAgcmV0dXJuIGhhZEtleWJvYXJkRXZlbnQgfHwgZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkodGFyZ2V0KTtcbn1cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWQgb24gYSBmb2N1cy12aXNpYmxlIGVsZW1lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIGhhbmRsZUJsdXJWaXNpYmxlKCkge1xuICAvLyBUbyBkZXRlY3QgYSB0YWIvd2luZG93IHN3aXRjaCwgd2UgbG9vayBmb3IgYSBibHVyIGV2ZW50IGZvbGxvd2VkXG4gIC8vIHJhcGlkbHkgYnkgYSB2aXNpYmlsaXR5IGNoYW5nZS5cbiAgLy8gSWYgd2UgZG9uJ3Qgc2VlIGEgdmlzaWJpbGl0eSBjaGFuZ2Ugd2l0aGluIDEwMG1zLCBpdCdzIHByb2JhYmx5IGFcbiAgLy8gcmVndWxhciBmb2N1cyBjaGFuZ2UuXG4gIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gdHJ1ZTtcbiAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCk7XG4gIH0sIDEwMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VJc0ZvY3VzVmlzaWJsZSgpIHtcbiAgdmFyIHJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIHZhciBub2RlID0gUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpO1xuXG4gICAgaWYgKG5vZGUgIT0gbnVsbCkge1xuICAgICAgcHJlcGFyZShub2RlLm93bmVyRG9jdW1lbnQpO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4ge1xuICAgIGlzRm9jdXNWaXNpYmxlOiBpc0ZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXJWaXNpYmxlOiBoYW5kbGVCbHVyVmlzaWJsZSxcbiAgICByZWY6IHJlZlxuICB9O1xufSIsImltcG9ydCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuXG4gKlxuICogQHBhcmFtIHsqfSBjaGlsZHJlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmBcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nKGNoaWxkcmVuLCBtYXBGbikge1xuICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gbWFwcGVyKGNoaWxkKSB7XG4gICAgcmV0dXJuIG1hcEZuICYmIGlzVmFsaWRFbGVtZW50KGNoaWxkKSA/IG1hcEZuKGNoaWxkKSA6IGNoaWxkO1xuICB9O1xuXG4gIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoY2hpbGRyZW4pIENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNoaWxkTWFwcGluZ3MocHJldiwgbmV4dCkge1xuICBwcmV2ID0gcHJldiB8fCB7fTtcbiAgbmV4dCA9IG5leHQgfHwge307XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgcmV0dXJuIGtleSBpbiBuZXh0ID8gbmV4dFtrZXldIDogcHJldltrZXldO1xuICB9IC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAvLyB0aGUgY29tYmluZWQgbGlzdFxuXG5cbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBwZW5kaW5nS2V5cyA9IFtdO1xuXG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChwcmV2S2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgIHBlbmRpbmdLZXlzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGk7XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcblxuICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHQpIHtcbiAgICBpZiAobmV4dEtleXNQZW5kaW5nW25leHRLZXldKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbmV4dEtleXNQZW5kaW5nW25leHRLZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwZW5kaW5nTmV4dEtleSA9IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXTtcbiAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nTmV4dEtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gIH0gLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG5cblxuICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ0tleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcChjaGlsZCwgcHJvcCwgcHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzW3Byb3BdICE9IG51bGwgPyBwcm9wc1twcm9wXSA6IGNoaWxkLnByb3BzW3Byb3BdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhwcm9wcywgb25FeGl0ZWQpIHtcbiAgcmV0dXJuIGdldENoaWxkTWFwcGluZyhwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgaW46IHRydWUsXG4gICAgICBhcHBlYXI6IGdldFByb3AoY2hpbGQsICdhcHBlYXInLCBwcm9wcyksXG4gICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgcHJvcHMpLFxuICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBwcm9wcylcbiAgICB9KTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIG9uRXhpdGVkKSB7XG4gIHZhciBuZXh0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gIHZhciBjaGlsZHJlbiA9IG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2Q2hpbGRNYXBwaW5nLCBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2tleV07XG4gICAgaWYgKCFpc1ZhbGlkRWxlbWVudChjaGlsZCkpIHJldHVybjtcbiAgICB2YXIgaGFzUHJldiA9IGtleSBpbiBwcmV2Q2hpbGRNYXBwaW5nO1xuICAgIHZhciBoYXNOZXh0ID0ga2V5IGluIG5leHRDaGlsZE1hcHBpbmc7XG4gICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZE1hcHBpbmdba2V5XTtcbiAgICB2YXIgaXNMZWF2aW5nID0gaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSAmJiAhcHJldkNoaWxkLnByb3BzLmluOyAvLyBpdGVtIGlzIG5ldyAoZW50ZXJpbmcpXG5cbiAgICBpZiAoaGFzTmV4dCAmJiAoIWhhc1ByZXYgfHwgaXNMZWF2aW5nKSkge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2VudGVyaW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiB0cnVlLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFoYXNOZXh0ICYmIGhhc1ByZXYgJiYgIWlzTGVhdmluZykge1xuICAgICAgLy8gaXRlbSBpcyBvbGQgKGV4aXRpbmcpXG4gICAgICAvLyBjb25zb2xlLmxvZygnbGVhdmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgaW46IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGhhc05leHQgJiYgaGFzUHJldiAmJiBpc1ZhbGlkRWxlbWVudChwcmV2Q2hpbGQpKSB7XG4gICAgICAvLyBpdGVtIGhhc24ndCBjaGFuZ2VkIHRyYW5zaXRpb24gc3RhdGVzXG4gICAgICAvLyBjb3B5IG92ZXIgdGhlIGxhc3QgdHJhbnNpdGlvbiBwcm9wcztcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd1bmNoYW5nZWQnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHByZXZDaGlsZC5wcm9wcy5pbixcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb25Hcm91cENvbnRleHQgZnJvbSAnLi9UcmFuc2l0aW9uR3JvdXBDb250ZXh0JztcbmltcG9ydCB7IGdldENoaWxkTWFwcGluZywgZ2V0SW5pdGlhbENoaWxkTWFwcGluZywgZ2V0TmV4dENoaWxkTWFwcGluZyB9IGZyb20gJy4vdXRpbHMvQ2hpbGRNYXBwaW5nJztcblxudmFyIHZhbHVlcyA9IE9iamVjdC52YWx1ZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gb2JqW2tdO1xuICB9KTtcbn07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGNoaWxkRmFjdG9yeTogZnVuY3Rpb24gY2hpbGRGYWN0b3J5KGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgYDxUcmFuc2l0aW9uR3JvdXA+YCBjb21wb25lbnQgbWFuYWdlcyBhIHNldCBvZiB0cmFuc2l0aW9uIGNvbXBvbmVudHNcbiAgICogKGA8VHJhbnNpdGlvbj5gIGFuZCBgPENTU1RyYW5zaXRpb24+YCkgaW4gYSBsaXN0LiBMaWtlIHdpdGggdGhlIHRyYW5zaXRpb25cbiAgICogY29tcG9uZW50cywgYDxUcmFuc2l0aW9uR3JvdXA+YCBpcyBhIHN0YXRlIG1hY2hpbmUgZm9yIG1hbmFnaW5nIHRoZSBtb3VudGluZ1xuICAgKiBhbmQgdW5tb3VudGluZyBvZiBjb21wb25lbnRzIG92ZXIgdGltZS5cbiAgICpcbiAgICogQ29uc2lkZXIgdGhlIGV4YW1wbGUgYmVsb3cuIEFzIGl0ZW1zIGFyZSByZW1vdmVkIG9yIGFkZGVkIHRvIHRoZSBUb2RvTGlzdCB0aGVcbiAgICogYGluYCBwcm9wIGlzIHRvZ2dsZWQgYXV0b21hdGljYWxseSBieSB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YC5cbiAgICpcbiAgICogTm90ZSB0aGF0IGA8VHJhbnNpdGlvbkdyb3VwPmAgIGRvZXMgbm90IGRlZmluZSBhbnkgYW5pbWF0aW9uIGJlaGF2aW9yIVxuICAgKiBFeGFjdGx5IF9ob3dfIGEgbGlzdCBpdGVtIGFuaW1hdGVzIGlzIHVwIHRvIHRoZSBpbmRpdmlkdWFsIHRyYW5zaXRpb25cbiAgICogY29tcG9uZW50LiBUaGlzIG1lYW5zIHlvdSBjYW4gbWl4IGFuZCBtYXRjaCBhbmltYXRpb25zIGFjcm9zcyBkaWZmZXJlbnQgbGlzdFxuICAgKiBpdGVtcy5cbiAgICovXG5cbn07XG5cbnZhciBUcmFuc2l0aW9uR3JvdXAgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbkdyb3VwLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUcmFuc2l0aW9uR3JvdXAocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcblxuICAgIHZhciBoYW5kbGVFeGl0ZWQgPSBfdGhpcy5oYW5kbGVFeGl0ZWQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSk7IC8vIEluaXRpYWwgY2hpbGRyZW4gc2hvdWxkIGFsbCBiZSBlbnRlcmluZywgZGVwZW5kZW50IG9uIGFwcGVhclxuXG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiB0cnVlXG4gICAgICB9LFxuICAgICAgaGFuZGxlRXhpdGVkOiBoYW5kbGVFeGl0ZWQsXG4gICAgICBmaXJzdFJlbmRlcjogdHJ1ZVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb25Hcm91cC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvbnRleHRWYWx1ZToge1xuICAgICAgICBpc01vdW50aW5nOiBmYWxzZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogZmlyc3RSZW5kZXIgPyBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nKG5leHRQcm9wcywgaGFuZGxlRXhpdGVkKSA6IGdldE5leHRDaGlsZE1hcHBpbmcobmV4dFByb3BzLCBwcmV2Q2hpbGRNYXBwaW5nLCBoYW5kbGVFeGl0ZWQpLFxuICAgICAgZmlyc3RSZW5kZXI6IGZhbHNlXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gaGFuZGxlRXhpdGVkKGNoaWxkLCBub2RlKSB7XG4gICAgdmFyIGN1cnJlbnRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKGNoaWxkLmtleSBpbiBjdXJyZW50Q2hpbGRNYXBwaW5nKSByZXR1cm47XG5cbiAgICBpZiAoY2hpbGQucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm1vdW50ZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IF9leHRlbmRzKHt9LCBzdGF0ZS5jaGlsZHJlbik7XG5cbiAgICAgICAgZGVsZXRlIGNoaWxkcmVuW2NoaWxkLmtleV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBDb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgIGNoaWxkRmFjdG9yeSA9IF90aGlzJHByb3BzLmNoaWxkRmFjdG9yeSxcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY29tcG9uZW50XCIsIFwiY2hpbGRGYWN0b3J5XCJdKTtcblxuICAgIHZhciBjb250ZXh0VmFsdWUgPSB0aGlzLnN0YXRlLmNvbnRleHRWYWx1ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2YWx1ZXModGhpcy5zdGF0ZS5jaGlsZHJlbikubWFwKGNoaWxkRmFjdG9yeSk7XG4gICAgZGVsZXRlIHByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgcHJvcHMuZW50ZXI7XG4gICAgZGVsZXRlIHByb3BzLmV4aXQ7XG5cbiAgICBpZiAoQ29tcG9uZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIHByb3BzLCBjaGlsZHJlbikpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uR3JvdXA7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblRyYW5zaXRpb25Hcm91cC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBgPFRyYW5zaXRpb25Hcm91cD5gIHJlbmRlcnMgYSBgPGRpdj5gIGJ5IGRlZmF1bHQuIFlvdSBjYW4gY2hhbmdlIHRoaXNcbiAgICogYmVoYXZpb3IgYnkgcHJvdmlkaW5nIGEgYGNvbXBvbmVudGAgcHJvcC5cbiAgICogSWYgeW91IHVzZSBSZWFjdCB2MTYrIGFuZCB3b3VsZCBsaWtlIHRvIGF2b2lkIGEgd3JhcHBpbmcgYDxkaXY+YCBlbGVtZW50XG4gICAqIHlvdSBjYW4gcGFzcyBpbiBgY29tcG9uZW50PXtudWxsfWAuIFRoaXMgaXMgdXNlZnVsIGlmIHRoZSB3cmFwcGluZyBkaXZcbiAgICogYm9ya3MgeW91ciBjc3Mgc3R5bGVzLlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBgPFRyYW5zaXRpb24+YCBjb21wb25lbnRzLCB0aGF0IGFyZSB0b2dnbGVkIGBpbmAgYW5kIG91dCBhcyB0aGV5XG4gICAqIGxlYXZlLiB0aGUgYDxUcmFuc2l0aW9uR3JvdXA+YCB3aWxsIGluamVjdCBzcGVjaWZpYyB0cmFuc2l0aW9uIHByb3BzLCBzb1xuICAgKiByZW1lbWJlciB0byBzcHJlYWQgdGhlbSB0aHJvdWdoIGlmIHlvdSBhcmUgd3JhcHBpbmcgdGhlIGA8VHJhbnNpdGlvbj5gIGFzXG4gICAqIHdpdGggb3VyIGA8RmFkZT5gIGV4YW1wbGUuXG4gICAqXG4gICAqIFdoaWxlIHRoaXMgY29tcG9uZW50IGlzIG1lYW50IGZvciBtdWx0aXBsZSBgVHJhbnNpdGlvbmAgb3IgYENTU1RyYW5zaXRpb25gXG4gICAqIGNoaWxkcmVuLCBzb21ldGltZXMgeW91IG1heSB3YW50IHRvIGhhdmUgYSBzaW5nbGUgdHJhbnNpdGlvbiBjaGlsZCB3aXRoXG4gICAqIGNvbnRlbnQgdGhhdCB5b3Ugd2FudCB0byBiZSB0cmFuc2l0aW9uZWQgb3V0IGFuZCBpbiB3aGVuIHlvdSBjaGFuZ2UgaXRcbiAgICogKGUuZy4gcm91dGVzLCBpbWFnZXMgZXRjLikgSW4gdGhhdCBjYXNlIHlvdSBjYW4gY2hhbmdlIHRoZSBga2V5YCBwcm9wIG9mXG4gICAqIHRoZSB0cmFuc2l0aW9uIGNoaWxkIGFzIHlvdSBjaGFuZ2UgaXRzIGNvbnRlbnQsIHRoaXMgd2lsbCBjYXVzZVxuICAgKiBgVHJhbnNpdGlvbkdyb3VwYCB0byB0cmFuc2l0aW9uIHRoZSBjaGlsZCBvdXQgYW5kIGJhY2sgaW4uXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgYXBwZWFyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZW50ZXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGV4aXQgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFlvdSBtYXkgbmVlZCB0byBhcHBseSByZWFjdGl2ZSB1cGRhdGVzIHRvIGEgY2hpbGQgYXMgaXQgaXMgZXhpdGluZy5cbiAgICogVGhpcyBpcyBnZW5lcmFsbHkgZG9uZSBieSB1c2luZyBgY2xvbmVFbGVtZW50YCBob3dldmVyIGluIHRoZSBjYXNlIG9mIGFuIGV4aXRpbmdcbiAgICogY2hpbGQgdGhlIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiByZW1vdmVkIGFuZCBub3QgYWNjZXNzaWJsZSB0byB0aGUgY29uc3VtZXIuXG4gICAqXG4gICAqIElmIHlvdSBkbyBuZWVkIHRvIHVwZGF0ZSBhIGNoaWxkIGFzIGl0IGxlYXZlcyB5b3UgY2FuIHByb3ZpZGUgYSBgY2hpbGRGYWN0b3J5YFxuICAgKiB0byB3cmFwIGV2ZXJ5IGNoaWxkLCBldmVuIHRoZSBvbmVzIHRoYXQgYXJlIGxlYXZpbmcuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKGNoaWxkOiBSZWFjdEVsZW1lbnQpIC0+IFJlYWN0RWxlbWVudFxuICAgKi9cbiAgY2hpbGRGYWN0b3J5OiBQcm9wVHlwZXMuZnVuY1xufSA6IHt9O1xuVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbmV4cG9ydCBkZWZhdWx0IFRyYW5zaXRpb25Hcm91cDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnLi4vdXRpbHMvdXNlRXZlbnRDYWxsYmFjayc7XG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUVmZmVjdCA6IFJlYWN0LnVzZUxheW91dEVmZmVjdDtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSaXBwbGUocHJvcHMpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJHB1bHNhdGUgPSBwcm9wcy5wdWxzYXRlLFxuICAgICAgcHVsc2F0ZSA9IF9wcm9wcyRwdWxzYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRwdWxzYXRlLFxuICAgICAgcmlwcGxlWCA9IHByb3BzLnJpcHBsZVgsXG4gICAgICByaXBwbGVZID0gcHJvcHMucmlwcGxlWSxcbiAgICAgIHJpcHBsZVNpemUgPSBwcm9wcy5yaXBwbGVTaXplLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBfcHJvcHMkb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGVkID0gX3Byb3BzJG9uRXhpdGVkID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoKSB7fSA6IF9wcm9wcyRvbkV4aXRlZCxcbiAgICAgIHRpbWVvdXQgPSBwcm9wcy50aW1lb3V0O1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBsZWF2aW5nID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0TGVhdmluZyA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJpcHBsZSwgY2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCBwdWxzYXRlICYmIGNsYXNzZXMucmlwcGxlUHVsc2F0ZSk7XG4gIHZhciByaXBwbGVTdHlsZXMgPSB7XG4gICAgd2lkdGg6IHJpcHBsZVNpemUsXG4gICAgaGVpZ2h0OiByaXBwbGVTaXplLFxuICAgIHRvcDogLShyaXBwbGVTaXplIC8gMikgKyByaXBwbGVZLFxuICAgIGxlZnQ6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWFxuICB9O1xuICB2YXIgY2hpbGRDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuY2hpbGQsIGxlYXZpbmcgJiYgY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHB1bHNhdGUgJiYgY2xhc3Nlcy5jaGlsZFB1bHNhdGUpO1xuICB2YXIgaGFuZGxlRXhpdGVkID0gdXNlRXZlbnRDYWxsYmFjayhvbkV4aXRlZCk7IC8vIFJpcHBsZSBpcyB1c2VkIGZvciB1c2VyIGZlZWRiYWNrIChlLmcuIGNsaWNrIG9yIHByZXNzKSBzbyB3ZSB3YW50IHRvIGFwcGx5IHN0eWxlcyB3aXRoIHRoZSBoaWdoZXN0IHByaW9yaXR5XG5cbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghaW5Qcm9wKSB7XG4gICAgICAvLyByZWFjdC10cmFuc2l0aW9uLWdyb3VwI29uRXhpdFxuICAgICAgc2V0TGVhdmluZyh0cnVlKTsgLy8gcmVhY3QtdHJhbnNpdGlvbi1ncm91cCNvbkV4aXRlZFxuXG4gICAgICB2YXIgdGltZW91dElkID0gc2V0VGltZW91dChoYW5kbGVFeGl0ZWQsIHRpbWVvdXQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtoYW5kbGVFeGl0ZWQsIGluUHJvcCwgdGltZW91dF0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogcmlwcGxlQ2xhc3NOYW1lLFxuICAgIHN0eWxlOiByaXBwbGVTdHlsZXNcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2hpbGRDbGFzc05hbWVcbiAgfSkpO1xufVxuXG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSaXBwbGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlIC0gaW5qZWN0ZWQgZnJvbSBUcmFuc2l0aW9uR3JvdXBcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHB1bHNhdGVzLCB0eXBpY2FsbHkgaW5kaWNhdGluZyB0aGUga2V5Ym9hcmQgZm9jdXMgc3RhdGUgb2YgYW4gZWxlbWVudC5cbiAgICovXG4gIHB1bHNhdGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiB0aGUgcmlwcGxlLlxuICAgKi9cbiAgcmlwcGxlU2l6ZTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogSG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFZlcnRpY2FsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogZXhpdCBkZWxheVxuICAgKi9cbiAgdGltZW91dDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUmlwcGxlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb25Hcm91cCB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgUmlwcGxlIGZyb20gJy4vUmlwcGxlJztcbnZhciBEVVJBVElPTiA9IDU1MDtcbmV4cG9ydCB2YXIgREVMQVlfUklQUExFID0gODA7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB6SW5kZXg6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlYCBjbGFzcy4gKi9cbiAgICByaXBwbGU6IHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlVmlzaWJsZWAgY2xhc3MuICovXG4gICAgcmlwcGxlVmlzaWJsZToge1xuICAgICAgb3BhY2l0eTogMC4zLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgYW5pbWF0aW9uOiBcIiRlbnRlciBcIi5jb25jYXQoRFVSQVRJT04sIFwibXMgXCIpLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlUHVsc2F0ZWAgY2xhc3MuICovXG4gICAgcmlwcGxlUHVsc2F0ZToge1xuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IFwiXCIuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXIsIFwibXNcIilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkYCBjbGFzcy4gKi9cbiAgICBjaGlsZDoge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnY3VycmVudENvbG9yJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRMZWF2aW5nYCBjbGFzcy4gKi9cbiAgICBjaGlsZExlYXZpbmc6IHtcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBhbmltYXRpb246IFwiJGV4aXQgXCIuY29uY2F0KERVUkFUSU9OLCBcIm1zIFwiKS5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkUHVsc2F0ZWAgY2xhc3MuICovXG4gICAgY2hpbGRQdWxzYXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBhbmltYXRpb246IFwiJHB1bHNhdGUgMjUwMG1zIFwiLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCBcIiAyMDBtcyBpbmZpbml0ZVwiKVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgZW50ZXInOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApJyxcbiAgICAgICAgb3BhY2l0eTogMC4xXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgICAgb3BhY2l0eTogMC4zXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBleGl0Jzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICBvcGFjaXR5OiAxXG4gICAgICB9LFxuICAgICAgJzEwMCUnOiB7XG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIHB1bHNhdGUnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xuICAgICAgfSxcbiAgICAgICc1MCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuOTIpJ1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICpcbiAqIFRPRE8gdjU6IE1ha2UgcHJpdmF0ZVxuICovXG5cbnZhciBUb3VjaFJpcHBsZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVG91Y2hSaXBwbGUocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGNlbnRlciA9IHByb3BzLmNlbnRlcixcbiAgICAgIGNlbnRlclByb3AgPSBfcHJvcHMkY2VudGVyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRjZW50ZXIsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjZW50ZXJcIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoW10pLFxuICAgICAgcmlwcGxlcyA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldFJpcHBsZXMgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIG5leHRLZXkgPSBSZWFjdC51c2VSZWYoMCk7XG4gIHZhciByaXBwbGVDYWxsYmFjayA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmlwcGxlQ2FsbGJhY2suY3VycmVudCkge1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCgpO1xuICAgICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9LCBbcmlwcGxlc10pOyAvLyBVc2VkIHRvIGZpbHRlciBvdXQgbW91c2UgZW11bGF0ZWQgZXZlbnRzIG9uIG1vYmlsZS5cblxuICB2YXIgaWdub3JpbmdNb3VzZURvd24gPSBSZWFjdC51c2VSZWYoZmFsc2UpOyAvLyBXZSB1c2UgYSB0aW1lciBpbiBvcmRlciB0byBvbmx5IHNob3cgdGhlIHJpcHBsZXMgZm9yIHRvdWNoIFwiY2xpY2tcIiBsaWtlIGV2ZW50cy5cbiAgLy8gV2UgZG9uJ3Qgd2FudCB0byBkaXNwbGF5IHRoZSByaXBwbGUgZm9yIHRvdWNoIHNjcm9sbCBldmVudHMuXG5cbiAgdmFyIHN0YXJ0VGltZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7IC8vIFRoaXMgaXMgdGhlIGhvb2sgY2FsbGVkIG9uY2UgdGhlIHByZXZpb3VzIHRpbWVvdXQgaXMgcmVhZHkuXG5cbiAgdmFyIHN0YXJ0VGltZXJDb21taXQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBjb250YWluZXIgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFyVGltZW91dChzdGFydFRpbWVyLmN1cnJlbnQpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgdmFyIHN0YXJ0Q29tbWl0ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIHZhciBwdWxzYXRlID0gcGFyYW1zLnB1bHNhdGUsXG4gICAgICAgIHJpcHBsZVggPSBwYXJhbXMucmlwcGxlWCxcbiAgICAgICAgcmlwcGxlWSA9IHBhcmFtcy5yaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplID0gcGFyYW1zLnJpcHBsZVNpemUsXG4gICAgICAgIGNiID0gcGFyYW1zLmNiO1xuICAgIHNldFJpcHBsZXMoZnVuY3Rpb24gKG9sZFJpcHBsZXMpIHtcbiAgICAgIHJldHVybiBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG9sZFJpcHBsZXMpLCBbUmVhY3QuY3JlYXRlRWxlbWVudChSaXBwbGUsIHtcbiAgICAgICAga2V5OiBuZXh0S2V5LmN1cnJlbnQsXG4gICAgICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgICAgIHRpbWVvdXQ6IERVUkFUSU9OLFxuICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplXG4gICAgICB9KV0pO1xuICAgIH0pO1xuICAgIG5leHRLZXkuY3VycmVudCArPSAxO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW2NsYXNzZXNdKTtcbiAgdmFyIHN0YXJ0ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBldmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBjYiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICAgIHZhciBfb3B0aW9ucyRwdWxzYXRlID0gb3B0aW9ucy5wdWxzYXRlLFxuICAgICAgICBwdWxzYXRlID0gX29wdGlvbnMkcHVsc2F0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRwdWxzYXRlLFxuICAgICAgICBfb3B0aW9ucyRjZW50ZXIgPSBvcHRpb25zLmNlbnRlcixcbiAgICAgICAgY2VudGVyID0gX29wdGlvbnMkY2VudGVyID09PSB2b2lkIDAgPyBjZW50ZXJQcm9wIHx8IG9wdGlvbnMucHVsc2F0ZSA6IF9vcHRpb25zJGNlbnRlcixcbiAgICAgICAgX29wdGlvbnMkZmFrZUVsZW1lbnQgPSBvcHRpb25zLmZha2VFbGVtZW50LFxuICAgICAgICBmYWtlRWxlbWVudCA9IF9vcHRpb25zJGZha2VFbGVtZW50ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGZha2VFbGVtZW50O1xuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQpIHtcbiAgICAgIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudCA9IGZha2VFbGVtZW50ID8gbnVsbCA6IGNvbnRhaW5lci5jdXJyZW50O1xuICAgIHZhciByZWN0ID0gZWxlbWVudCA/IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDBcbiAgICB9OyAvLyBHZXQgdGhlIHNpemUgb2YgdGhlIHJpcHBsZVxuXG4gICAgdmFyIHJpcHBsZVg7XG4gICAgdmFyIHJpcHBsZVk7XG4gICAgdmFyIHJpcHBsZVNpemU7XG5cbiAgICBpZiAoY2VudGVyIHx8IGV2ZW50LmNsaWVudFggPT09IDAgJiYgZXZlbnQuY2xpZW50WSA9PT0gMCB8fCAhZXZlbnQuY2xpZW50WCAmJiAhZXZlbnQudG91Y2hlcykge1xuICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQocmVjdC53aWR0aCAvIDIpO1xuICAgICAgcmlwcGxlWSA9IE1hdGgucm91bmQocmVjdC5oZWlnaHQgLyAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNsaWVudFggPSBldmVudC5jbGllbnRYID8gZXZlbnQuY2xpZW50WCA6IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgIHZhciBjbGllbnRZID0gZXZlbnQuY2xpZW50WSA/IGV2ZW50LmNsaWVudFkgOiBldmVudC50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICByaXBwbGVYID0gTWF0aC5yb3VuZChjbGllbnRYIC0gcmVjdC5sZWZ0KTtcbiAgICAgIHJpcHBsZVkgPSBNYXRoLnJvdW5kKGNsaWVudFkgLSByZWN0LnRvcCk7XG4gICAgfVxuXG4gICAgaWYgKGNlbnRlcikge1xuICAgICAgcmlwcGxlU2l6ZSA9IE1hdGguc3FydCgoMiAqIE1hdGgucG93KHJlY3Qud2lkdGgsIDIpICsgTWF0aC5wb3cocmVjdC5oZWlnaHQsIDIpKSAvIDMpOyAvLyBGb3Igc29tZSByZWFzb24gdGhlIGFuaW1hdGlvbiBpcyBicm9rZW4gb24gTW9iaWxlIENocm9tZSBpZiB0aGUgc2l6ZSBpZiBldmVuLlxuXG4gICAgICBpZiAocmlwcGxlU2l6ZSAlIDIgPT09IDApIHtcbiAgICAgICAgcmlwcGxlU2l6ZSArPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2l6ZVggPSBNYXRoLm1heChNYXRoLmFicygoZWxlbWVudCA/IGVsZW1lbnQuY2xpZW50V2lkdGggOiAwKSAtIHJpcHBsZVgpLCByaXBwbGVYKSAqIDIgKyAyO1xuICAgICAgdmFyIHNpemVZID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudEhlaWdodCA6IDApIC0gcmlwcGxlWSksIHJpcHBsZVkpICogMiArIDI7XG4gICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KE1hdGgucG93KHNpemVYLCAyKSArIE1hdGgucG93KHNpemVZLCAyKSk7XG4gICAgfSAvLyBUb3VjaGUgZGV2aWNlc1xuXG5cbiAgICBpZiAoZXZlbnQudG91Y2hlcykge1xuICAgICAgLy8gUHJlcGFyZSB0aGUgcmlwcGxlIGVmZmVjdC5cbiAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RhcnRDb21taXQoe1xuICAgICAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemUsXG4gICAgICAgICAgY2I6IGNiXG4gICAgICAgIH0pO1xuICAgICAgfTsgLy8gRGVsYXkgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgcmlwcGxlIGVmZmVjdC5cblxuXG4gICAgICBzdGFydFRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0sIERFTEFZX1JJUFBMRSk7IC8vIFdlIGhhdmUgdG8gbWFrZSBhIHRyYWRlb2ZmIHdpdGggdGhpcyB2YWx1ZS5cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRDb21taXQoe1xuICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplLFxuICAgICAgICBjYjogY2JcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2NlbnRlclByb3AsIHN0YXJ0Q29tbWl0XSk7XG4gIHZhciBwdWxzYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHN0YXJ0KHt9LCB7XG4gICAgICBwdWxzYXRlOiB0cnVlXG4gICAgfSk7XG4gIH0sIFtzdGFydF0pO1xuICB2YXIgc3RvcCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCwgY2IpIHtcbiAgICBjbGVhclRpbWVvdXQoc3RhcnRUaW1lci5jdXJyZW50KTsgLy8gVGhlIHRvdWNoIGludGVyYWN0aW9uIG9jY3VycyB0b28gcXVpY2tseS5cbiAgICAvLyBXZSBzdGlsbCB3YW50IHRvIHNob3cgcmlwcGxlIGVmZmVjdC5cblxuICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hlbmQnICYmIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgc3RhcnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN0b3AoZXZlbnQsIGNiKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgc2V0UmlwcGxlcyhmdW5jdGlvbiAob2xkUmlwcGxlcykge1xuICAgICAgaWYgKG9sZFJpcHBsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gb2xkUmlwcGxlcy5zbGljZSgxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9sZFJpcHBsZXM7XG4gICAgfSk7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBzdG9wOiBzdG9wXG4gICAgfTtcbiAgfSwgW3B1bHNhdGUsIHN0YXJ0LCBzdG9wXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IGNvbnRhaW5lclxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwLCB7XG4gICAgY29tcG9uZW50OiBudWxsLFxuICAgIGV4aXQ6IHRydWVcbiAgfSwgcmlwcGxlcykpO1xufSk7IC8vIFRPRE8gY2xlYW51cCBhZnRlciBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1kb2NnZW4vcHVsbC8zNzggaXMgcmVsZWFzZWRcblxuZnVuY3Rpb24gd2l0aE11aU5hbWUoQ29tcG9uZW50KSB7XG4gIENvbXBvbmVudC5tdWlOYW1lID0gJ011aVRvdWNoUmlwcGxlJztcbiAgcmV0dXJuIENvbXBvbmVudDtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVG91Y2hSaXBwbGUucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlIHN0YXJ0cyBhdCB0aGUgY2VudGVyIG9mIHRoZSBjb21wb25lbnRcbiAgICogcmF0aGVyIHRoYW4gYXQgdGhlIHBvaW50IG9mIGludGVyYWN0aW9uLlxuICAgKi9cbiAgY2VudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIGZsaXA6IGZhbHNlLFxuICBuYW1lOiAnTXVpVG91Y2hSaXBwbGUnXG59KSh3aXRoTXVpTmFtZShSZWFjdC5tZW1vKFRvdWNoUmlwcGxlKSkpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLCByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnLi4vdXRpbHMvdXNlRXZlbnRDYWxsYmFjayc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgTm9Tc3IgZnJvbSAnLi4vTm9Tc3InO1xuaW1wb3J0IHsgdXNlSXNGb2N1c1Zpc2libGUgfSBmcm9tICcuLi91dGlscy9mb2N1c1Zpc2libGUnO1xuaW1wb3J0IFRvdWNoUmlwcGxlIGZyb20gJy4vVG91Y2hSaXBwbGUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAvLyBSZW1vdmUgZ3JleSBoaWdobGlnaHRcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgLy8gUmVzZXQgZGVmYXVsdCB2YWx1ZVxuICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgb3V0bGluZTogMCxcbiAgICBib3JkZXI6IDAsXG4gICAgbWFyZ2luOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgbWFyZ2luIGluIFNhZmFyaVxuICAgIGJvcmRlclJhZGl1czogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBGaXJlZm94XG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICctbW96LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgLy8gUmVzZXRcbiAgICAnLXdlYmtpdC1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAvLyBTbyB3ZSB0YWtlIHByZWNlZGVudCBvdmVyIHRoZSBzdHlsZSBvZiBhIG5hdGl2ZSA8YSAvPiBlbGVtZW50LlxuICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuXG4gICAgfSxcbiAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIC8vIERpc2FibGUgbGluayBpbnRlcmFjdGlvbnNcbiAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgfVxuICB9LFxuXG4gIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gIGRpc2FibGVkOiB7fSxcblxuICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGtleWJvYXJkIGZvY3VzZWQuICovXG4gIGZvY3VzVmlzaWJsZToge31cbn07XG4vKipcbiAqIGBCdXR0b25CYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYSBidXR0b24uXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgZm9jdXMvcmlwcGxlIGxvZ2ljLlxuICovXG5cbnZhciBCdXR0b25CYXNlID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCdXR0b25CYXNlKHByb3BzLCByZWYpIHtcbiAgdmFyIGFjdGlvbiA9IHByb3BzLmFjdGlvbixcbiAgICAgIGJ1dHRvblJlZlByb3AgPSBwcm9wcy5idXR0b25SZWYsXG4gICAgICBfcHJvcHMkY2VudGVyUmlwcGxlID0gcHJvcHMuY2VudGVyUmlwcGxlLFxuICAgICAgY2VudGVyUmlwcGxlID0gX3Byb3BzJGNlbnRlclJpcHBsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkY2VudGVyUmlwcGxlLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdidXR0b24nIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgX3Byb3BzJGRpc2FibGVSaXBwbGUgPSBwcm9wcy5kaXNhYmxlUmlwcGxlLFxuICAgICAgZGlzYWJsZVJpcHBsZSA9IF9wcm9wcyRkaXNhYmxlUmlwcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUmlwcGxlLFxuICAgICAgX3Byb3BzJGRpc2FibGVUb3VjaFJpID0gcHJvcHMuZGlzYWJsZVRvdWNoUmlwcGxlLFxuICAgICAgZGlzYWJsZVRvdWNoUmlwcGxlID0gX3Byb3BzJGRpc2FibGVUb3VjaFJpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlVG91Y2hSaSxcbiAgICAgIF9wcm9wcyRmb2N1c1JpcHBsZSA9IHByb3BzLmZvY3VzUmlwcGxlLFxuICAgICAgZm9jdXNSaXBwbGUgPSBfcHJvcHMkZm9jdXNSaXBwbGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvY3VzUmlwcGxlLFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gcHJvcHMuZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICAgIG9uRm9jdXNWaXNpYmxlID0gcHJvcHMub25Gb2N1c1Zpc2libGUsXG4gICAgICBvbktleURvd24gPSBwcm9wcy5vbktleURvd24sXG4gICAgICBvbktleVVwID0gcHJvcHMub25LZXlVcCxcbiAgICAgIG9uTW91c2VEb3duID0gcHJvcHMub25Nb3VzZURvd24sXG4gICAgICBvbk1vdXNlTGVhdmUgPSBwcm9wcy5vbk1vdXNlTGVhdmUsXG4gICAgICBvbk1vdXNlVXAgPSBwcm9wcy5vbk1vdXNlVXAsXG4gICAgICBvblRvdWNoRW5kID0gcHJvcHMub25Ub3VjaEVuZCxcbiAgICAgIG9uVG91Y2hNb3ZlID0gcHJvcHMub25Ub3VjaE1vdmUsXG4gICAgICBvblRvdWNoU3RhcnQgPSBwcm9wcy5vblRvdWNoU3RhcnQsXG4gICAgICBvbkRyYWdMZWF2ZSA9IHByb3BzLm9uRHJhZ0xlYXZlLFxuICAgICAgX3Byb3BzJHRhYkluZGV4ID0gcHJvcHMudGFiSW5kZXgsXG4gICAgICB0YWJJbmRleCA9IF9wcm9wcyR0YWJJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyR0YWJJbmRleCxcbiAgICAgIFRvdWNoUmlwcGxlUHJvcHMgPSBwcm9wcy5Ub3VjaFJpcHBsZVByb3BzLFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyR0eXBlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGlvblwiLCBcImJ1dHRvblJlZlwiLCBcImNlbnRlclJpcHBsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZVJpcHBsZVwiLCBcImRpc2FibGVUb3VjaFJpcHBsZVwiLCBcImZvY3VzUmlwcGxlXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbkZvY3VzVmlzaWJsZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9uTW91c2VVcFwiLCBcIm9uVG91Y2hFbmRcIiwgXCJvblRvdWNoTW92ZVwiLCBcIm9uVG91Y2hTdGFydFwiLCBcIm9uRHJhZ0xlYXZlXCIsIFwidGFiSW5kZXhcIiwgXCJUb3VjaFJpcHBsZVByb3BzXCIsIFwidHlwZVwiXSk7XG5cbiAgdmFyIGJ1dHRvblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICBmdW5jdGlvbiBnZXRCdXR0b25Ob2RlKCkge1xuICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKGJ1dHRvblJlZi5jdXJyZW50KTtcbiAgfVxuXG4gIHZhciByaXBwbGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGZvY3VzVmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldEZvY3VzVmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICBpZiAoZGlzYWJsZWQgJiYgZm9jdXNWaXNpYmxlKSB7XG4gICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgfVxuXG4gIHZhciBfdXNlSXNGb2N1c1Zpc2libGUgPSB1c2VJc0ZvY3VzVmlzaWJsZSgpLFxuICAgICAgaXNGb2N1c1Zpc2libGUgPSBfdXNlSXNGb2N1c1Zpc2libGUuaXNGb2N1c1Zpc2libGUsXG4gICAgICBvbkJsdXJWaXNpYmxlID0gX3VzZUlzRm9jdXNWaXNpYmxlLm9uQmx1clZpc2libGUsXG4gICAgICBmb2N1c1Zpc2libGVSZWYgPSBfdXNlSXNGb2N1c1Zpc2libGUucmVmO1xuXG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzVmlzaWJsZTogZnVuY3Rpb24gZm9jdXNWaXNpYmxlKCkge1xuICAgICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgICAgIGJ1dHRvblJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChmb2N1c1Zpc2libGUgJiYgZm9jdXNSaXBwbGUgJiYgIWRpc2FibGVSaXBwbGUpIHtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoKTtcbiAgICB9XG4gIH0sIFtkaXNhYmxlUmlwcGxlLCBmb2N1c1JpcHBsZSwgZm9jdXNWaXNpYmxlXSk7XG5cbiAgZnVuY3Rpb24gdXNlUmlwcGxlSGFuZGxlcihyaXBwbGVBY3Rpb24sIGV2ZW50Q2FsbGJhY2spIHtcbiAgICB2YXIgc2tpcFJpcHBsZUFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZGlzYWJsZVRvdWNoUmlwcGxlO1xuICAgIHJldHVybiB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50Q2FsbGJhY2spIHtcbiAgICAgICAgZXZlbnRDYWxsYmFjayhldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpZ25vcmUgPSBldmVudC5kZWZhdWx0UHJldmVudGVkIHx8IHNraXBSaXBwbGVBY3Rpb247XG5cbiAgICAgIGlmICghaWdub3JlICYmIHJpcHBsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50W3JpcHBsZUFjdGlvbl0oZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYW5kbGVNb3VzZURvd24gPSB1c2VSaXBwbGVIYW5kbGVyKCdzdGFydCcsIG9uTW91c2VEb3duKTtcbiAgdmFyIGhhbmRsZURyYWdMZWF2ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbkRyYWdMZWF2ZSk7XG4gIHZhciBoYW5kbGVNb3VzZVVwID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uTW91c2VVcCk7XG4gIHZhciBoYW5kbGVNb3VzZUxlYXZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChmb2N1c1Zpc2libGUpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKG9uTW91c2VMZWF2ZSkge1xuICAgICAgb25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlVG91Y2hTdGFydCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0YXJ0Jywgb25Ub3VjaFN0YXJ0KTtcbiAgdmFyIGhhbmRsZVRvdWNoRW5kID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uVG91Y2hFbmQpO1xuICB2YXIgaGFuZGxlVG91Y2hNb3ZlID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIG9uVG91Y2hNb3ZlKTtcbiAgdmFyIGhhbmRsZUJsdXIgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGZvY3VzVmlzaWJsZSkge1xuICAgICAgb25CbHVyVmlzaWJsZShldmVudCk7XG4gICAgICBzZXRGb2N1c1Zpc2libGUoZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChvbkJsdXIpIHtcbiAgICAgIG9uQmx1cihldmVudCk7XG4gICAgfVxuICB9LCBmYWxzZSk7XG4gIHZhciBoYW5kbGVGb2N1cyA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGaXggZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzc2OVxuXG5cbiAgICBpZiAoIWJ1dHRvblJlZi5jdXJyZW50KSB7XG4gICAgICBidXR0b25SZWYuY3VycmVudCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgfVxuXG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlKGV2ZW50KSkge1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKHRydWUpO1xuXG4gICAgICBpZiAob25Gb2N1c1Zpc2libGUpIHtcbiAgICAgICAgb25Gb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvbkZvY3VzKSB7XG4gICAgICBvbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICAvKipcbiAgICogSUUgMTEgc2hpbSBmb3IgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQvcmVwZWF0XG4gICAqL1xuXG4gIHZhciBrZXlkb3duUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdmFyIGhhbmRsZUtleURvd24gPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIENoZWNrIGlmIGtleSBpcyBhbHJlYWR5IGRvd24gdG8gYXZvaWQgcmVwZWF0cyBiZWluZyBjb3VudGVkIGFzIG11bHRpcGxlIGFjdGl2YXRpb25zXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmICFrZXlkb3duUmVmLmN1cnJlbnQgJiYgZm9jdXNWaXNpYmxlICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICBrZXlkb3duUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5zdGFydChldmVudCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH1cblxuICAgIHZhciBidXR0b24gPSBnZXRCdXR0b25Ob2RlKCk7IC8vIEtleWJvYXJkIGFjY2Vzc2liaWxpdHkgZm9yIG5vbiBpbnRlcmFjdGl2ZSBlbGVtZW50c1xuXG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBjb21wb25lbnQgJiYgY29tcG9uZW50ICE9PSAnYnV0dG9uJyAmJiAoZXZlbnQua2V5ID09PSAnICcgfHwgZXZlbnQua2V5ID09PSAnRW50ZXInKSAmJiAhKGJ1dHRvbi50YWdOYW1lID09PSAnQScgJiYgYnV0dG9uLmhyZWYpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAob25DbGljaykge1xuICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlS2V5VXAgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChmb2N1c1JpcHBsZSAmJiBldmVudC5rZXkgPT09ICcgJyAmJiByaXBwbGVSZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgcmlwcGxlUmVmLmN1cnJlbnQuc3RvcChldmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudC5wdWxzYXRlKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvbktleVVwKSB7XG4gICAgICBvbktleVVwKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICB2YXIgQ29tcG9uZW50UHJvcCA9IGNvbXBvbmVudDtcblxuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicgJiYgb3RoZXIuaHJlZikge1xuICAgIENvbXBvbmVudFByb3AgPSAnYSc7XG4gIH1cblxuICB2YXIgYnV0dG9uUHJvcHMgPSB7fTtcblxuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicpIHtcbiAgICBidXR0b25Qcm9wcy50eXBlID0gdHlwZTtcbiAgICBidXR0b25Qcm9wcy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICB9IGVsc2Uge1xuICAgIGlmIChDb21wb25lbnRQcm9wICE9PSAnYScgfHwgIW90aGVyLmhyZWYpIHtcbiAgICAgIGJ1dHRvblByb3BzLnJvbGUgPSAnYnV0dG9uJztcbiAgICB9XG5cbiAgICBidXR0b25Qcm9wc1snYXJpYS1kaXNhYmxlZCddID0gZGlzYWJsZWQ7XG4gIH1cblxuICB2YXIgaGFuZGxlVXNlclJlZiA9IHVzZUZvcmtSZWYoYnV0dG9uUmVmUHJvcCwgcmVmKTtcbiAgdmFyIGhhbmRsZU93blJlZiA9IHVzZUZvcmtSZWYoZm9jdXNWaXNpYmxlUmVmLCBidXR0b25SZWYpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihoYW5kbGVVc2VyUmVmLCBoYW5kbGVPd25SZWYpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnRQcm9wLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBmb2N1c1Zpc2libGUgJiYgW2NsYXNzZXMuZm9jdXNWaXNpYmxlLCBmb2N1c1Zpc2libGVDbGFzc05hbWVdLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkKSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBvbkZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICBvbktleURvd246IGhhbmRsZUtleURvd24sXG4gICAgb25LZXlVcDogaGFuZGxlS2V5VXAsXG4gICAgb25Nb3VzZURvd246IGhhbmRsZU1vdXNlRG93bixcbiAgICBvbk1vdXNlTGVhdmU6IGhhbmRsZU1vdXNlTGVhdmUsXG4gICAgb25Nb3VzZVVwOiBoYW5kbGVNb3VzZVVwLFxuICAgIG9uRHJhZ0xlYXZlOiBoYW5kbGVEcmFnTGVhdmUsXG4gICAgb25Ub3VjaEVuZDogaGFuZGxlVG91Y2hFbmQsXG4gICAgb25Ub3VjaE1vdmU6IGhhbmRsZVRvdWNoTW92ZSxcbiAgICBvblRvdWNoU3RhcnQ6IGhhbmRsZVRvdWNoU3RhcnQsXG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgdGFiSW5kZXg6IGRpc2FibGVkID8gLTEgOiB0YWJJbmRleFxuICB9LCBidXR0b25Qcm9wcywgb3RoZXIpLCBjaGlsZHJlbiwgIWRpc2FibGVSaXBwbGUgJiYgIWRpc2FibGVkID8gUmVhY3QuY3JlYXRlRWxlbWVudChOb1NzciwgbnVsbCwgUmVhY3QuY3JlYXRlRWxlbWVudChUb3VjaFJpcHBsZSwgX2V4dGVuZHMoe1xuICAgIHJlZjogcmlwcGxlUmVmLFxuICAgIGNlbnRlcjogY2VudGVyUmlwcGxlXG4gIH0sIFRvdWNoUmlwcGxlUHJvcHMpKSkgOiBudWxsKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQnV0dG9uQmFzZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIHJlZiBmb3IgaW1wZXJhdGl2ZSBhY3Rpb25zLlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICovXG4gIGFjdGlvbjogcmVmVHlwZSxcblxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBuYXRpdmUgYnV0dG9uIGNvbXBvbmVudC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGByZWZgIGluc3RlYWQuXG4gICAqL1xuICBidXR0b25SZWY6IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZXMgd2lsbCBiZSBjZW50ZXJlZC5cbiAgICogVGhleSB3b24ndCBzdGFydCBhdCB0aGUgY3Vyc29yIGludGVyYWN0aW9uIHBvc2l0aW9uLlxuICAgKi9cbiAgY2VudGVyUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lYC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0b3VjaCByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlVG91Y2hSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGhhdmUgYSBrZXlib2FyZCBmb2N1cyByaXBwbGUuXG4gICAqIGBkaXNhYmxlUmlwcGxlYCBtdXN0IGFsc28gYmUgYGZhbHNlYC5cbiAgICovXG4gIGZvY3VzUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wIGNhbiBoZWxwIGEgcGVyc29uIGtub3cgd2hpY2ggZWxlbWVudCBoYXMgdGhlIGtleWJvYXJkIGZvY3VzLlxuICAgKiBUaGUgY2xhc3MgbmFtZSB3aWxsIGJlIGFwcGxpZWQgd2hlbiB0aGUgZWxlbWVudCBnYWluIHRoZSBmb2N1cyB0aHJvdWdoIGEga2V5Ym9hcmQgaW50ZXJhY3Rpb24uXG4gICAqIEl0J3MgYSBwb2x5ZmlsbCBmb3IgdGhlIFtDU1MgOmZvY3VzLXZpc2libGUgc2VsZWN0b3JdKGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMtNC8jdGhlLWZvY3VzLXZpc2libGUtcHNldWRvKS5cbiAgICogVGhlIHJhdGlvbmFsZSBmb3IgdXNpbmcgdGhpcyBmZWF0dXJlIFtpcyBleHBsYWluZWQgaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9ibG9iL21hc3Rlci9leHBsYWluZXIubWQpLlxuICAgKiBBIFtwb2x5ZmlsbCBjYW4gYmUgdXNlZF0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZSkgdG8gYXBwbHkgYSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gb3RoZXIgY29tcG9uZW50c1xuICAgKiBpZiBuZWVkZWQuXG4gICAqL1xuICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkRyYWdMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZCB3aXRoIGEga2V5Ym9hcmQuXG4gICAqIFdlIHRyaWdnZXIgYSBgb25Gb2N1c2AgY2FsbGJhY2sgdG9vLlxuICAgKi9cbiAgb25Gb2N1c1Zpc2libGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Nb3VzZURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlTGVhdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlVXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoRW5kOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Ub3VjaE1vdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoU3RhcnQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICByb2xlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0YWJJbmRleDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBgVG91Y2hSaXBwbGVgIGVsZW1lbnQuXG4gICAqL1xuICBUb3VjaFJpcHBsZVByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGNvbnRyb2wgdGhlIGJ1dHRvbidzIHB1cnBvc2UuXG4gICAqIFRoaXMgcHJvcCBwYXNzZXMgdGhlIHZhbHVlIHRvIHRoZSBgdHlwZWAgYXR0cmlidXRlIG9mIHRoZSBuYXRpdmUgYnV0dG9uIGNvbXBvbmVudC5cbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ3N1Ym1pdCcsICdyZXNldCcsICdidXR0b24nXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQnV0dG9uQmFzZSdcbn0pKEJ1dHRvbkJhc2UpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3InO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgZmxleDogJzAgMCBhdXRvJyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICAgICAgcGFkZGluZzogMTIsXG4gICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJyxcbiAgICAgIC8vIEV4cGxpY2l0bHkgc2V0IHRoZSBkZWZhdWx0IHZhbHVlIHRvIHNvbHZlIGEgYnVnIG9uIElFIDExLlxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYmFja2dyb3VuZC1jb2xvcicsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXN0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZWRnZT1cInN0YXJ0XCJgLiAqL1xuICAgIGVkZ2VTdGFydDoge1xuICAgICAgbWFyZ2luTGVmdDogLTEyLFxuICAgICAgJyRzaXplU21hbGwmJzoge1xuICAgICAgICBtYXJnaW5MZWZ0OiAtM1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlZGdlPVwiZW5kXCJgLiAqL1xuICAgIGVkZ2VFbmQ6IHtcbiAgICAgIG1hcmdpblJpZ2h0OiAtMTIsXG4gICAgICAnJHNpemVTbWFsbCYnOiB7XG4gICAgICAgIG1hcmdpblJpZ2h0OiAtM1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBzaXplU21hbGw6IHtcbiAgICAgIHBhZGRpbmc6IDMsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE4KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgY2hpbGRyZW4gY29udGFpbmVyIGVsZW1lbnQuICovXG4gICAgbGFiZWw6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnaW5oZXJpdCcsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2luaGVyaXQnXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogUmVmZXIgdG8gdGhlIFtJY29uc10oL2NvbXBvbmVudHMvaWNvbnMvKSBzZWN0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uXG4gKiByZWdhcmRpbmcgdGhlIGF2YWlsYWJsZSBpY29uIG9wdGlvbnMuXG4gKi9cblxudmFyIEljb25CdXR0b24gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEljb25CdXR0b24ocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGVkZ2UgPSBwcm9wcy5lZGdlLFxuICAgICAgZWRnZSA9IF9wcm9wcyRlZGdlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRlZGdlLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPSBwcm9wcy5kaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVGb2N1c1JpLFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAnbWVkaXVtJyA6IF9wcm9wcyRzaXplLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImVkZ2VcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUZvY3VzUmlwcGxlXCIsIFwic2l6ZVwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgY29sb3IgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwge1xuICAgICAgc21hbGw6IGNsYXNzZXNbXCJzaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXVxuICAgIH1bc2l6ZV0sIHtcbiAgICAgIHN0YXJ0OiBjbGFzc2VzLmVkZ2VTdGFydCxcbiAgICAgIGVuZDogY2xhc3Nlcy5lZGdlRW5kXG4gICAgfVtlZGdlXSksXG4gICAgY2VudGVyUmlwcGxlOiB0cnVlLFxuICAgIGZvY3VzUmlwcGxlOiAhZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWxcbiAgfSwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSWNvbkJ1dHRvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgaWNvbiBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5ub2RlLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgZm91bmQgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KHByb3BzLmNoaWxkcmVuKS5zb21lKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSAmJiBjaGlsZC5wcm9wcy5vbkNsaWNrO1xuICAgIH0pO1xuXG4gICAgaWYgKGZvdW5kKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IHlvdSBhcmUgcHJvdmlkaW5nIGFuIG9uQ2xpY2sgZXZlbnQgbGlzdGVuZXIgJyArICd0byBhIGNoaWxkIG9mIGEgYnV0dG9uIGVsZW1lbnQuJywgJ0ZpcmVmb3ggd2lsbCBuZXZlciB0cmlnZ2VyIHRoZSBldmVudC4nLCAnWW91IHNob3VsZCBtb3ZlIHRoZSBvbkNsaWNrIGxpc3RlbmVyIHRvIHRoZSBwYXJlbnQgYnV0dG9uIGVsZW1lbnQuJywgJ2h0dHBzOi8vZ2l0aHViLmNvbS9tdWktb3JnL21hdGVyaWFsLXVpL2lzc3Vlcy8xMzk1NyddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbiB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSAga2V5Ym9hcmQgZm9jdXMgcmlwcGxlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqIGBkaXNhYmxlUmlwcGxlYCBtdXN0IGFsc28gYmUgdHJ1ZS5cbiAgICovXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBnaXZlbiwgdXNlcyBhIG5lZ2F0aXZlIG1hcmdpbiB0byBjb3VudGVyYWN0IHRoZSBwYWRkaW5nIG9uIG9uZVxuICAgKiBzaWRlICh0aGlzIGlzIG9mdGVuIGhlbHBmdWwgZm9yIGFsaWduaW5nIHRoZSBsZWZ0IG9yIHJpZ2h0XG4gICAqIHNpZGUgb2YgdGhlIGljb24gd2l0aCBjb250ZW50IGFib3ZlIG9yIGJlbG93LCB3aXRob3V0IHJ1aW5pbmcgdGhlIGJvcmRlclxuICAgKiBzaXplIGFuZCBzaGFwZSkuXG4gICAqL1xuICBlZGdlOiBQcm9wVHlwZXMub25lT2YoWydzdGFydCcsICdlbmQnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgYnV0dG9uLlxuICAgKiBgc21hbGxgIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGRlbnNlIGJ1dHRvbiBzdHlsaW5nLlxuICAgKi9cbiAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnc21hbGwnLCAnbWVkaXVtJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUljb25CdXR0b24nXG59KShJY29uQnV0dG9uKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IEJ1dHRvbkJhc2UgZnJvbSAnLi4vQnV0dG9uQmFzZSc7XG5pbXBvcnQgSWNvbkJ1dHRvbiBmcm9tICcuLi9JY29uQnV0dG9uJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciB0cmFuc2l0aW9uID0ge1xuICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVzdFxuICB9O1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgbWluSGVpZ2h0OiA4ICogNixcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ21pbi1oZWlnaHQnLCAnYmFja2dyb3VuZC1jb2xvciddLCB0cmFuc2l0aW9uKSxcbiAgICAgIHBhZGRpbmc6ICcwIDI0cHggMCAyNHB4JyxcbiAgICAgICcmOmhvdmVyOm5vdCgkZGlzYWJsZWQpJzoge1xuICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgfSxcbiAgICAgICcmJGV4cGFuZGVkJzoge1xuICAgICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNlZCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBvcGFjaXR5OiAwLjM4XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQsIGNoaWxkcmVuIHdyYXBwZXIgZWxlbWVudCBhbmQgYEljb25CdXR0b25gIGNvbXBvbmVudCBpZiBgZXhwYW5kZWQ9e3RydWV9YC4gKi9cbiAgICBleHBhbmRlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBhbmQgY2hpbGRyZW4gd3JhcHBlciBlbGVtZW50cyB3aGVuIGZvY3VzZWQuICovXG4gICAgZm9jdXNlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlZD17dHJ1ZX1gLiAqL1xuICAgIGRpc2FibGVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjaGlsZHJlbiB3cmFwcGVyIGVsZW1lbnQuICovXG4gICAgY29udGVudDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleEdyb3c6IDEsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydtYXJnaW4nXSwgdHJhbnNpdGlvbiksXG4gICAgICBtYXJnaW46ICcxMnB4IDAnLFxuICAgICAgJyYkZXhwYW5kZWQnOiB7XG4gICAgICAgIG1hcmdpbjogJzIwcHggMCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBJY29uQnV0dG9uYCBjb21wb25lbnQgd2hlbiBgZXhwYW5kSWNvbmAgaXMgc3VwcGxpZWQuICovXG4gICAgZXhwYW5kSWNvbjoge1xuICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDBkZWcpJyxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywgdHJhbnNpdGlvbiksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgLy8gRGlzYWJsZSB0aGUgaG92ZXIgZWZmZWN0IGZvciB0aGUgSWNvbkJ1dHRvbixcbiAgICAgICAgLy8gYmVjYXVzZSBhIGhvdmVyIGVmZmVjdCBzaG91bGQgYXBwbHkgdG8gdGhlIGVudGlyZSBFeHBhbmQgYnV0dG9uIGFuZFxuICAgICAgICAvLyBub3Qgb25seSB0byB0aGUgSWNvbkJ1dHRvbi5cbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICB9LFxuICAgICAgJyYkZXhwYW5kZWQnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgxODBkZWcpJ1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG52YXIgRXhwYW5zaW9uUGFuZWxTdW1tYXJ5ID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBFeHBhbnNpb25QYW5lbFN1bW1hcnkocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBleHBhbmRlZCA9IHByb3BzLmV4cGFuZGVkLFxuICAgICAgZXhwYW5kSWNvbiA9IHByb3BzLmV4cGFuZEljb24sXG4gICAgICBJY29uQnV0dG9uUHJvcHMgPSBwcm9wcy5JY29uQnV0dG9uUHJvcHMsXG4gICAgICBvbkJsdXIgPSBwcm9wcy5vbkJsdXIsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICBvbkZvY3VzVmlzaWJsZSA9IHByb3BzLm9uRm9jdXNWaXNpYmxlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkXCIsIFwiZXhwYW5kZWRcIiwgXCJleHBhbmRJY29uXCIsIFwiSWNvbkJ1dHRvblByb3BzXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkNsaWNrXCIsIFwib25Gb2N1c1Zpc2libGVcIl0pO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBmb2N1c2VkU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRGb2N1c2VkU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIGhhbmRsZUZvY3VzVmlzaWJsZSA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzVmlzaWJsZShldmVudCkge1xuICAgIHNldEZvY3VzZWRTdGF0ZSh0cnVlKTtcblxuICAgIGlmIChvbkZvY3VzVmlzaWJsZSkge1xuICAgICAgb25Gb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQpIHtcbiAgICBzZXRGb2N1c2VkU3RhdGUoZmFsc2UpO1xuXG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIGlmIChvbkNoYW5nZSkge1xuICAgICAgb25DaGFuZ2UoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQnV0dG9uQmFzZSwgX2V4dGVuZHMoe1xuICAgIGZvY3VzUmlwcGxlOiBmYWxzZSxcbiAgICBkaXNhYmxlUmlwcGxlOiB0cnVlLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBjb21wb25lbnQ6IFwiZGl2XCIsXG4gICAgXCJhcmlhLWV4cGFuZGVkXCI6IGV4cGFuZGVkLFxuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCwgZXhwYW5kZWQgJiYgY2xhc3Nlcy5leHBhbmRlZCwgZm9jdXNlZFN0YXRlICYmIGNsYXNzZXMuZm9jdXNlZCksXG4gICAgb25Gb2N1c1Zpc2libGU6IGhhbmRsZUZvY3VzVmlzaWJsZSxcbiAgICBvbkJsdXI6IGhhbmRsZUJsdXIsXG4gICAgb25DbGljazogaGFuZGxlQ2hhbmdlLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuY29udGVudCwgZXhwYW5kZWQgJiYgY2xhc3Nlcy5leHBhbmRlZClcbiAgfSwgY2hpbGRyZW4pLCBleHBhbmRJY29uICYmIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSWNvbkJ1dHRvbiwgX2V4dGVuZHMoe1xuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5leHBhbmRJY29uLCBleHBhbmRlZCAmJiBjbGFzc2VzLmV4cGFuZGVkKSxcbiAgICBlZGdlOiBcImVuZFwiLFxuICAgIGNvbXBvbmVudDogXCJkaXZcIixcbiAgICB0YWJJbmRleDogLTEsXG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlXG4gIH0sIEljb25CdXR0b25Qcm9wcyksIGV4cGFuZEljb24pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRXhwYW5zaW9uUGFuZWxTdW1tYXJ5LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBleHBhbnNpb24gcGFuZWwgc3VtbWFyeS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzdW1tYXJ5IHdpbGwgYmUgZGlzcGxheWVkIGluIGEgZGlzYWJsZWQgc3RhdGUuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogSWYgYHRydWVgLCBleHBhbmRzIHRoZSBzdW1tYXJ5LCBvdGhlcndpc2UgY29sbGFwc2UgaXQuXG4gICAqL1xuICBleHBhbmRlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpY29uIHRvIGRpc3BsYXkgYXMgdGhlIGV4cGFuZCBpbmRpY2F0b3IuXG4gICAqL1xuICBleHBhbmRJY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgYEljb25CdXR0b25gIGVsZW1lbnQgd3JhcHBpbmcgdGhlIGV4cGFuZCBpY29uLlxuICAgKi9cbiAgSWNvbkJ1dHRvblByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzVmlzaWJsZTogUHJvcFR5cGVzLmZ1bmNcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRXhwYW5zaW9uUGFuZWxTdW1tYXJ5J1xufSkoRXhwYW5zaW9uUGFuZWxTdW1tYXJ5KTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBGb3JtQ29udHJvbENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KCk7XG5leHBvcnQgZnVuY3Rpb24gdXNlRm9ybUNvbnRyb2woKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KEZvcm1Db250cm9sQ29udGV4dCk7XG59XG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbENvbnRleHQ7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnLi4vdXRpbHMvZGVib3VuY2UnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5cbmZ1bmN0aW9uIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIHBhcnNlSW50KGNvbXB1dGVkU3R5bGVbcHJvcGVydHldLCAxMCkgfHwgMDtcbn1cblxudmFyIHVzZUVuaGFuY2VkRWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3QgOiBSZWFjdC51c2VFZmZlY3Q7XG52YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc2hhZG93IHRleHRhcmVhIGVsZW1lbnQuICovXG4gIHNoYWRvdzoge1xuICAgIC8vIFZpc2liaWxpdHkgbmVlZGVkIHRvIGhpZGUgdGhlIGV4dHJhIHRleHQgYXJlYSBvbiBpUGFkc1xuICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgIC8vIFJlbW92ZSBmcm9tIHRoZSBjb250ZW50IGZsb3dcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAvLyBJZ25vcmUgdGhlIHNjcm9sbGJhciB3aWR0aFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICBoZWlnaHQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgLy8gQ3JlYXRlIGEgbmV3IGxheWVyLCBpbmNyZWFzZSB0aGUgaXNvbGF0aW9uIG9mIHRoZSBjb21wdXRlZCB2YWx1ZXNcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVaKDApJ1xuICB9XG59O1xudmFyIFRleHRhcmVhQXV0b3NpemUgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRleHRhcmVhQXV0b3NpemUocHJvcHMsIHJlZikge1xuICB2YXIgb25DaGFuZ2UgPSBwcm9wcy5vbkNoYW5nZSxcbiAgICAgIHJvd3MgPSBwcm9wcy5yb3dzLFxuICAgICAgcm93c01heCA9IHByb3BzLnJvd3NNYXgsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJvbkNoYW5nZVwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwic3R5bGVcIiwgXCJ2YWx1ZVwiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VSZWYgPSBSZWFjdC51c2VSZWYodmFsdWUgIT0gbnVsbCksXG4gICAgICBpc0NvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIGlucHV0UmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihyZWYsIGlucHV0UmVmKTtcbiAgdmFyIHNoYWRvd1JlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoe30pLFxuICAgICAgc3RhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgc3luY0hlaWdodCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5wdXQgPSBpbnB1dFJlZi5jdXJyZW50O1xuICAgIHZhciBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoaW5wdXQpO1xuICAgIHZhciBpbnB1dFNoYWxsb3cgPSBzaGFkb3dSZWYuY3VycmVudDtcbiAgICBpbnB1dFNoYWxsb3cuc3R5bGUud2lkdGggPSBjb21wdXRlZFN0eWxlLndpZHRoO1xuICAgIGlucHV0U2hhbGxvdy52YWx1ZSA9IGlucHV0LnZhbHVlIHx8IHByb3BzLnBsYWNlaG9sZGVyIHx8ICd4JztcbiAgICB2YXIgYm94U2l6aW5nID0gY29tcHV0ZWRTdHlsZVsnYm94LXNpemluZyddO1xuICAgIHZhciBwYWRkaW5nID0gZ2V0U3R5bGVWYWx1ZShjb21wdXRlZFN0eWxlLCAncGFkZGluZy1ib3R0b20nKSArIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ3BhZGRpbmctdG9wJyk7XG4gICAgdmFyIGJvcmRlciA9IGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ2JvcmRlci1ib3R0b20td2lkdGgnKSArIGdldFN0eWxlVmFsdWUoY29tcHV0ZWRTdHlsZSwgJ2JvcmRlci10b3Atd2lkdGgnKTsgLy8gVGhlIGhlaWdodCBvZiB0aGUgaW5uZXIgY29udGVudFxuXG4gICAgdmFyIGlubmVySGVpZ2h0ID0gaW5wdXRTaGFsbG93LnNjcm9sbEhlaWdodCAtIHBhZGRpbmc7IC8vIE1lYXN1cmUgaGVpZ2h0IG9mIGEgdGV4dGFyZWEgd2l0aCBhIHNpbmdsZSByb3dcblxuICAgIGlucHV0U2hhbGxvdy52YWx1ZSA9ICd4JztcbiAgICB2YXIgc2luZ2xlUm93SGVpZ2h0ID0gaW5wdXRTaGFsbG93LnNjcm9sbEhlaWdodCAtIHBhZGRpbmc7IC8vIFRoZSBoZWlnaHQgb2YgdGhlIG91dGVyIGNvbnRlbnRcblxuICAgIHZhciBvdXRlckhlaWdodCA9IGlubmVySGVpZ2h0O1xuXG4gICAgaWYgKHJvd3MgIT0gbnVsbCkge1xuICAgICAgb3V0ZXJIZWlnaHQgPSBNYXRoLm1heChOdW1iZXIocm93cykgKiBzaW5nbGVSb3dIZWlnaHQsIG91dGVySGVpZ2h0KTtcbiAgICB9XG5cbiAgICBpZiAocm93c01heCAhPSBudWxsKSB7XG4gICAgICBvdXRlckhlaWdodCA9IE1hdGgubWluKE51bWJlcihyb3dzTWF4KSAqIHNpbmdsZVJvd0hlaWdodCwgb3V0ZXJIZWlnaHQpO1xuICAgIH1cblxuICAgIG91dGVySGVpZ2h0ID0gTWF0aC5tYXgob3V0ZXJIZWlnaHQsIHNpbmdsZVJvd0hlaWdodCk7IC8vIFRha2UgdGhlIGJveCBzaXppbmcgaW50byBhY2NvdW50IGZvciBhcHBseWluZyB0aGlzIHZhbHVlIGFzIGEgc3R5bGUuXG5cbiAgICB2YXIgb3V0ZXJIZWlnaHRTdHlsZSA9IG91dGVySGVpZ2h0ICsgKGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnID8gcGFkZGluZyArIGJvcmRlciA6IDApO1xuICAgIHZhciBvdmVyZmxvdyA9IE1hdGguYWJzKG91dGVySGVpZ2h0IC0gaW5uZXJIZWlnaHQpIDw9IDE7XG4gICAgc2V0U3RhdGUoZnVuY3Rpb24gKHByZXZTdGF0ZSkge1xuICAgICAgLy8gTmVlZCBhIGxhcmdlIGVub3VnaCBkaWZmZXJlbnQgdG8gdXBkYXRlIHRoZSBoZWlnaHQuXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIGluZmluaXRlIHJlbmRlcmluZyBsb29wLlxuICAgICAgaWYgKG91dGVySGVpZ2h0U3R5bGUgPiAwICYmIE1hdGguYWJzKChwcmV2U3RhdGUub3V0ZXJIZWlnaHRTdHlsZSB8fCAwKSAtIG91dGVySGVpZ2h0U3R5bGUpID4gMSB8fCBwcmV2U3RhdGUub3ZlcmZsb3cgIT09IG92ZXJmbG93KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb3ZlcmZsb3c6IG92ZXJmbG93LFxuICAgICAgICAgIG91dGVySGVpZ2h0U3R5bGU6IG91dGVySGVpZ2h0U3R5bGVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICB9KTtcbiAgfSwgW3Jvd3MsIHJvd3NNYXgsIHByb3BzLnBsYWNlaG9sZGVyXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICB9O1xuICB9LCBbc3luY0hlaWdodF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgc3luY0hlaWdodCgpO1xuICB9KTtcblxuICB2YXIgaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHN5bmNIZWlnaHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIG9uQ2hhbmdlKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiLCBfZXh0ZW5kcyh7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgcmVmOiBoYW5kbGVSZWYgLy8gQXBwbHkgdGhlIHJvd3MgcHJvcCB0byBnZXQgYSBcImNvcnJlY3RcIiBmaXJzdCBTU1IgcGFpbnRcbiAgICAsXG4gICAgcm93czogcm93cyB8fCAxLFxuICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICBoZWlnaHQ6IHN0YXRlLm91dGVySGVpZ2h0U3R5bGUsXG4gICAgICAvLyBOZWVkIGEgbGFyZ2UgZW5vdWdoIGRpZmZlcmVudCB0byBhbGxvdyBzY3JvbGxpbmcuXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIGluZmluaXRlIHJlbmRlcmluZyBsb29wLlxuICAgICAgb3ZlcmZsb3c6IHN0YXRlLm92ZXJmbG93ID8gJ2hpZGRlbicgOiBudWxsXG4gICAgfSwgc3R5bGUpXG4gIH0sIG90aGVyKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiLCB7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIGNsYXNzTmFtZTogcHJvcHMuY2xhc3NOYW1lLFxuICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgIHJlZjogc2hhZG93UmVmLFxuICAgIHRhYkluZGV4OiAtMSxcbiAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlcy5zaGFkb3csIHt9LCBzdHlsZSlcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUZXh0YXJlYUF1dG9zaXplLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogTWluaW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5LlxuICAgKi9cbiAgcm93czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkuXG4gICAqL1xuICByb3dzTWF4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB2YWx1ZTogUHJvcFR5cGVzLmFueVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IFRleHRhcmVhQXV0b3NpemU7IiwiLy8gQ29ycmVzcG9uZHMgdG8gMTAgZnJhbWVzIGF0IDYwIEh6LlxuLy8gQSBmZXcgYnl0ZXMgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9kZWJvdW5jZSBpcyB+MyBrQiBhbmQgZGVib3VuY2UgfjMwMCBCLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoZnVuYykge1xuICB2YXIgd2FpdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTY2O1xuICB2YXIgdGltZW91dDtcblxuICBmdW5jdGlvbiBkZWJvdW5jZWQoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXRoaXNcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbiBsYXRlcigpIHtcbiAgICAgIGZ1bmMuYXBwbHkodGhhdCwgYXJncyk7XG4gICAgfTtcblxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gIH1cblxuICBkZWJvdW5jZWQuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB9O1xuXG4gIHJldHVybiBkZWJvdW5jZWQ7XG59IiwiLy8gU3VwcG9ydHMgZGV0ZXJtaW5hdGlvbiBvZiBpc0NvbnRyb2xsZWQoKS5cbi8vIENvbnRyb2xsZWQgaW5wdXQgYWNjZXB0cyBpdHMgY3VycmVudCB2YWx1ZSBhcyBhIHByb3AuXG4vL1xuLy8gQHNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Zvcm1zLmh0bWwjY29udHJvbGxlZC1jb21wb25lbnRzXG4vLyBAcGFyYW0gdmFsdWVcbi8vIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHN0cmluZyAoaW5jbHVkaW5nICcnKSBvciBudW1iZXIgKGluY2x1ZGluZyB6ZXJvKVxuZXhwb3J0IGZ1bmN0aW9uIGhhc1ZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICEoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwKTtcbn0gLy8gRGV0ZXJtaW5lIGlmIGZpZWxkIGlzIGVtcHR5IG9yIGZpbGxlZC5cbi8vIFJlc3BvbnNlIGRldGVybWluZXMgaWYgbGFiZWwgaXMgcHJlc2VudGVkIGFib3ZlIGZpZWxkIG9yIGFzIHBsYWNlaG9sZGVyLlxuLy9cbi8vIEBwYXJhbSBvYmpcbi8vIEBwYXJhbSBTU1Jcbi8vIEByZXR1cm5zIHtib29sZWFufSBGYWxzZSB3aGVuIG5vdCBwcmVzZW50IG9yIGVtcHR5IHN0cmluZy5cbi8vICAgICAgICAgICAgICAgICAgICBUcnVlIHdoZW4gYW55IG51bWJlciBvciBzdHJpbmcgd2l0aCBsZW5ndGguXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpbGxlZChvYmopIHtcbiAgdmFyIFNTUiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gIHJldHVybiBvYmogJiYgKGhhc1ZhbHVlKG9iai52YWx1ZSkgJiYgb2JqLnZhbHVlICE9PSAnJyB8fCBTU1IgJiYgaGFzVmFsdWUob2JqLmRlZmF1bHRWYWx1ZSkgJiYgb2JqLmRlZmF1bHRWYWx1ZSAhPT0gJycpO1xufSAvLyBEZXRlcm1pbmUgaWYgYW4gSW5wdXQgaXMgYWRvcm5lZCBvbiBzdGFydC5cbi8vIEl0J3MgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCB3aXRoIExUUi5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBubyBhZG9ybm1lbnRzLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhZG9ybmVkIGF0IHRoZSBzdGFydC5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRvcm5lZFN0YXJ0KG9iaikge1xuICByZXR1cm4gb2JqLnN0YXJ0QWRvcm5tZW50O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcblxuLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvY2xpY2stZXZlbnRzLWhhdmUta2V5LWV2ZW50cywganN4LWExMXkvbm8tc3RhdGljLWVsZW1lbnQtaW50ZXJhY3Rpb25zICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgZm9ybUNvbnRyb2xTdGF0ZSBmcm9tICcuLi9Gb3JtQ29udHJvbC9mb3JtQ29udHJvbFN0YXRlJztcbmltcG9ydCBGb3JtQ29udHJvbENvbnRleHQsIHsgdXNlRm9ybUNvbnRyb2wgfSBmcm9tICcuLi9Gb3JtQ29udHJvbC9Gb3JtQ29udHJvbENvbnRleHQnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgVGV4dGFyZWFBdXRvc2l6ZSBmcm9tICcuLi9UZXh0YXJlYUF1dG9zaXplJztcbmltcG9ydCB7IGlzRmlsbGVkIH0gZnJvbSAnLi91dGlscyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgbGlnaHQgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCc7XG4gIHZhciBwbGFjZWhvbGRlciA9IHtcbiAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41LFxuICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHtcbiAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgfSlcbiAgfTtcbiAgdmFyIHBsYWNlaG9sZGVySGlkZGVuID0ge1xuICAgIG9wYWNpdHk6ICcwICFpbXBvcnRhbnQnXG4gIH07XG4gIHZhciBwbGFjZWhvbGRlclZpc2libGUgPSB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH07XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICAvLyBNaW1pY3MgdGhlIGRlZmF1bHQgaW5wdXQgZGlzcGxheSBwcm9wZXJ0eSB1c2VkIGJ5IGJyb3dzZXJzIGZvciBhbiBpbnB1dC5cbiAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTYpLFxuICAgICAgbGluZUhlaWdodDogJzEuMTg3NWVtJyxcbiAgICAgIC8vIFJlc2V0ICgxOXB4KSwgbWF0Y2ggdGhlIG5hdGl2ZSBpbnB1dCBsaW5lLWhlaWdodFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAvLyBQcmV2ZW50IHBhZGRpbmcgaXNzdWUgd2l0aCBmdWxsV2lkdGguXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGN1cnNvcjogJ3RleHQnLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuZGlzYWJsZWQsXG4gICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBhIGRlc2NlbmRhbnQgb2YgYEZvcm1Db250cm9sYC4gKi9cbiAgICBmb3JtQ29udHJvbDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc3RhcnRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRTdGFydDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlbmRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRFbmQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBtdWx0aWxpbmU6IHtcbiAgICAgIHBhZGRpbmc6IFwiXCIuY29uY2F0KDggLSAyLCBcInB4IDAgXCIpLmNvbmNhdCg4IC0gMSwgXCJweFwiKSxcbiAgICAgICcmJG1hcmdpbkRlbnNlJzoge1xuICAgICAgICBwYWRkaW5nVG9wOiA0IC0gMVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBmdWxsV2lkdGg6IHtcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC4gKi9cbiAgICBpbnB1dDoge1xuICAgICAgZm9udDogJ2luaGVyaXQnLFxuICAgICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQoOCAtIDIsIFwicHggMCBcIikuY29uY2F0KDggLSAxLCBcInB4XCIpLFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgYm94U2l6aW5nOiAnY29udGVudC1ib3gnLFxuICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgaGVpZ2h0OiAnMS4xODc1ZW0nLFxuICAgICAgLy8gUmVzZXQgKDE5cHgpLCBtYXRjaCB0aGUgbmF0aXZlIGlucHV0IGxpbmUtaGVpZ2h0XG4gICAgICBtYXJnaW46IDAsXG4gICAgICAvLyBSZXNldCBmb3IgU2FmYXJpXG4gICAgICAvLyBSZW1vdmUgZ3JleSBoaWdobGlnaHRcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIC8vIE1ha2UgdGhlIGZsZXggaXRlbSBzaHJpbmsgd2l0aCBGaXJlZm94XG4gICAgICBtaW5XaWR0aDogMCxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAvLyBGaXggSUUgMTEgd2lkdGggaXNzdWVcbiAgICAgIGFuaW1hdGlvbk5hbWU6ICckYXV0by1maWxsLWNhbmNlbCcsXG4gICAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgJyY6Oi1tb3otcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIElFIDExXG4gICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgICAvLyBFZGdlXG4gICAgICAnJjpmb2N1cyc6IHtcbiAgICAgICAgb3V0bGluZTogMFxuICAgICAgfSxcbiAgICAgIC8vIFJlc2V0IEZpcmVmb3ggaW52YWxpZCByZXF1aXJlZCBpbnB1dCBzdHlsZVxuICAgICAgJyY6aW52YWxpZCc6IHtcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAnJjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbic6IHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIHdoZW4gdHlwZT1zZWFyY2guXG4gICAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZSdcbiAgICAgIH0sXG4gICAgICAvLyBTaG93IGFuZCBoaWRlIHRoZSBwbGFjZWhvbGRlciBsb2dpY1xuICAgICAgJ2xhYmVsW2RhdGEtc2hyaW5rPWZhbHNlXSArICRmb3JtQ29udHJvbCAmJzoge1xuICAgICAgICAnJjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgICAnJjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlckhpZGRlbixcbiAgICAgICAgLy8gSUUgMTFcbiAgICAgICAgJyY6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBFZGdlXG4gICAgICAgICcmOmZvY3VzOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAnJjpmb2N1czo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyVmlzaWJsZSxcbiAgICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICAgJyY6Zm9jdXM6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAvLyBJRSAxMVxuICAgICAgICAnJjpmb2N1czo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlIC8vIEVkZ2VcblxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBvcGFjaXR5OiAxIC8vIFJlc2V0IGlPUyBvcGFjaXR5XG5cbiAgICAgIH0sXG4gICAgICAnJjotd2Via2l0LWF1dG9maWxsJzoge1xuICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogJzUwMDBzJyxcbiAgICAgICAgYW5pbWF0aW9uTmFtZTogJyRhdXRvLWZpbGwnXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBhdXRvLWZpbGwnOiB7XG4gICAgICBmcm9tOiB7fVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgYXV0by1maWxsLWNhbmNlbCc6IHtcbiAgICAgIGZyb206IHt9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDQgLSAxXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHNlbGVjdD17dHJ1ZX1gLiAqL1xuICAgIGlucHV0U2VsZWN0OiB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IDI0XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIGlucHV0TXVsdGlsaW5lOiB7XG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIHJlc2l6ZTogJ25vbmUnLFxuICAgICAgcGFkZGluZzogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGB0eXBlPVwic2VhcmNoXCJgLiAqL1xuICAgIGlucHV0VHlwZVNlYXJjaDoge1xuICAgICAgLy8gSW1wcm92ZSB0eXBlIHNlYXJjaCBzdHlsZS5cbiAgICAgICctbW96LWFwcGVhcmFuY2UnOiAndGV4dGZpZWxkJyxcbiAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAndGV4dGZpZWxkJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkU3RhcnQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgaGlkZGVuTGFiZWw9e3RydWV9YC4gKi9cbiAgICBpbnB1dEhpZGRlbkxhYmVsOiB7fVxuICB9O1xufTtcbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlRWZmZWN0IDogUmVhY3QudXNlTGF5b3V0RWZmZWN0O1xuLyoqXG4gKiBgSW5wdXRCYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYW4gaW5wdXQuXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgc3RhdGUgbG9naWMuXG4gKi9cblxudmFyIElucHV0QmFzZSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gSW5wdXRCYXNlKHByb3BzLCByZWYpIHtcbiAgdmFyIGFyaWFEZXNjcmliZWRieSA9IHByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10sXG4gICAgICBhdXRvQ29tcGxldGUgPSBwcm9wcy5hdXRvQ29tcGxldGUsXG4gICAgICBhdXRvRm9jdXMgPSBwcm9wcy5hdXRvRm9jdXMsXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZW5kQWRvcm5tZW50ID0gcHJvcHMuZW5kQWRvcm5tZW50LFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIF9wcm9wcyRmdWxsV2lkdGggPSBwcm9wcy5mdWxsV2lkdGgsXG4gICAgICBmdWxsV2lkdGggPSBfcHJvcHMkZnVsbFdpZHRoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmdWxsV2lkdGgsXG4gICAgICBpZCA9IHByb3BzLmlkLFxuICAgICAgX3Byb3BzJGlucHV0Q29tcG9uZW50ID0gcHJvcHMuaW5wdXRDb21wb25lbnQsXG4gICAgICBpbnB1dENvbXBvbmVudCA9IF9wcm9wcyRpbnB1dENvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2lucHV0JyA6IF9wcm9wcyRpbnB1dENvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRpbnB1dFByb3BzID0gcHJvcHMuaW5wdXRQcm9wcztcbiAgX3Byb3BzJGlucHV0UHJvcHMgPSBfcHJvcHMkaW5wdXRQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkaW5wdXRQcm9wcztcblxuICB2YXIgaW5wdXRQcm9wc0NsYXNzTmFtZSA9IF9wcm9wcyRpbnB1dFByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGlucHV0UHJvcHNQcm9wID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcyRpbnB1dFByb3BzLCBbXCJjbGFzc05hbWVcIl0pLFxuICAgICAgaW5wdXRSZWZQcm9wID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBtYXJnaW4gPSBwcm9wcy5tYXJnaW4sXG4gICAgICBfcHJvcHMkbXVsdGlsaW5lID0gcHJvcHMubXVsdGlsaW5lLFxuICAgICAgbXVsdGlsaW5lID0gX3Byb3BzJG11bHRpbGluZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkbXVsdGlsaW5lLFxuICAgICAgbmFtZSA9IHByb3BzLm5hbWUsXG4gICAgICBvbkJsdXIgPSBwcm9wcy5vbkJsdXIsXG4gICAgICBvbkNoYW5nZSA9IHByb3BzLm9uQ2hhbmdlLFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICAgIG9uS2V5RG93biA9IHByb3BzLm9uS2V5RG93bixcbiAgICAgIG9uS2V5VXAgPSBwcm9wcy5vbktleVVwLFxuICAgICAgcGxhY2Vob2xkZXIgPSBwcm9wcy5wbGFjZWhvbGRlcixcbiAgICAgIHJlYWRPbmx5ID0gcHJvcHMucmVhZE9ubHksXG4gICAgICByZW5kZXJTdWZmaXggPSBwcm9wcy5yZW5kZXJTdWZmaXgsXG4gICAgICByb3dzID0gcHJvcHMucm93cyxcbiAgICAgIHJvd3NNYXggPSBwcm9wcy5yb3dzTWF4LFxuICAgICAgX3Byb3BzJHNlbGVjdCA9IHByb3BzLnNlbGVjdCxcbiAgICAgIHNlbGVjdCA9IF9wcm9wcyRzZWxlY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJHNlbGVjdCxcbiAgICAgIHN0YXJ0QWRvcm5tZW50ID0gcHJvcHMuc3RhcnRBZG9ybm1lbnQsXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR0eXBlLFxuICAgICAgdmFsdWUgPSBwcm9wcy52YWx1ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIFwiYXV0b0NvbXBsZXRlXCIsIFwiYXV0b0ZvY3VzXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRlZmF1bHRWYWx1ZVwiLCBcImRpc2FibGVkXCIsIFwiZW5kQWRvcm5tZW50XCIsIFwiZXJyb3JcIiwgXCJmdWxsV2lkdGhcIiwgXCJpZFwiLCBcImlucHV0Q29tcG9uZW50XCIsIFwiaW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibWFyZ2luXCIsIFwibXVsdGlsaW5lXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZWFkT25seVwiLCBcInJlbmRlclN1ZmZpeFwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwic2VsZWN0XCIsIFwic3RhcnRBZG9ybm1lbnRcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIl0pO1xuXG4gIHZhciBfUmVhY3QkdXNlUmVmID0gUmVhY3QudXNlUmVmKHZhbHVlICE9IG51bGwpLFxuICAgICAgaXNDb250cm9sbGVkID0gX1JlYWN0JHVzZVJlZi5jdXJyZW50O1xuXG4gIHZhciBpbnB1dFJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgaGFuZGxlSW5wdXRSZWZXYXJuaW5nID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpbnN0YW5jZSAmJiAhKGluc3RhbmNlIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkgJiYgIWluc3RhbmNlLmZvY3VzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogeW91IGhhdmUgcHJvdmlkZWQgYSBgaW5wdXRDb21wb25lbnRgIHRvIHRoZSBpbnB1dCBjb21wb25lbnQnLCAndGhhdCBkb2VzIG5vdCBjb3JyZWN0bHkgaGFuZGxlIHRoZSBgaW5wdXRSZWZgIHByb3AuJywgJ01ha2Ugc3VyZSB0aGUgYGlucHV0UmVmYCBwcm9wIGlzIGNhbGxlZCB3aXRoIGEgSFRNTElucHV0RWxlbWVudC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbXSk7XG4gIHZhciBoYW5kbGVJbnB1dFByb3BzUmVmUHJvcCA9IHVzZUZvcmtSZWYoaW5wdXRQcm9wc1Byb3AucmVmLCBoYW5kbGVJbnB1dFJlZldhcm5pbmcpO1xuICB2YXIgaGFuZGxlSW5wdXRSZWZQcm9wID0gdXNlRm9ya1JlZihpbnB1dFJlZlByb3AsIGhhbmRsZUlucHV0UHJvcHNSZWZQcm9wKTtcbiAgdmFyIGhhbmRsZUlucHV0UmVmID0gdXNlRm9ya1JlZihpbnB1dFJlZiwgaGFuZGxlSW5wdXRSZWZQcm9wKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgZm9jdXNlZCA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldEZvY3VzZWQgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIG11aUZvcm1Db250cm9sID0gdXNlRm9ybUNvbnRyb2woKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgICAgcmV0dXJuIG11aUZvcm1Db250cm9sLnJlZ2lzdGVyRWZmZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSwgW211aUZvcm1Db250cm9sXSk7XG4gIH1cblxuICB2YXIgZmNzID0gZm9ybUNvbnRyb2xTdGF0ZSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIG11aUZvcm1Db250cm9sOiBtdWlGb3JtQ29udHJvbCxcbiAgICBzdGF0ZXM6IFsnZGlzYWJsZWQnLCAnZXJyb3InLCAnaGlkZGVuTGFiZWwnLCAnbWFyZ2luJywgJ3JlcXVpcmVkJywgJ2ZpbGxlZCddXG4gIH0pO1xuICBmY3MuZm9jdXNlZCA9IG11aUZvcm1Db250cm9sID8gbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCA6IGZvY3VzZWQ7IC8vIFRoZSBibHVyIHdvbid0IGZpcmUgd2hlbiB0aGUgZGlzYWJsZWQgc3RhdGUgaXMgc2V0IG9uIGEgZm9jdXNlZCBpbnB1dC5cbiAgLy8gV2UgbmVlZCB0byBib29rIGtlZXAgdGhlIGZvY3VzZWQgc3RhdGUgbWFudWFsbHkuXG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIW11aUZvcm1Db250cm9sICYmIGRpc2FibGVkICYmIGZvY3VzZWQpIHtcbiAgICAgIHNldEZvY3VzZWQoZmFsc2UpO1xuXG4gICAgICBpZiAob25CbHVyKSB7XG4gICAgICAgIG9uQmx1cigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW211aUZvcm1Db250cm9sLCBkaXNhYmxlZCwgZm9jdXNlZCwgb25CbHVyXSk7XG4gIHZhciBvbkZpbGxlZCA9IG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRmlsbGVkO1xuICB2YXIgb25FbXB0eSA9IG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRW1wdHk7XG4gIHZhciBjaGVja0RpcnR5ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChpc0ZpbGxlZChvYmopKSB7XG4gICAgICBpZiAob25GaWxsZWQpIHtcbiAgICAgICAgb25GaWxsZWQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9uRW1wdHkpIHtcbiAgICAgIG9uRW1wdHkoKTtcbiAgICB9XG4gIH0sIFtvbkZpbGxlZCwgb25FbXB0eV0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzQ29udHJvbGxlZCkge1xuICAgICAgY2hlY2tEaXJ0eSh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbdmFsdWUsIGNoZWNrRGlydHksIGlzQ29udHJvbGxlZF0pO1xuXG4gIHZhciBoYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIGhhbmRsZUZvY3VzKGV2ZW50KSB7XG4gICAgLy8gRml4IGEgYnVnIHdpdGggSUUgMTEgd2hlcmUgdGhlIGZvY3VzL2JsdXIgZXZlbnRzIGFyZSB0cmlnZ2VyZWRcbiAgICAvLyB3aGlsZSB0aGUgaW5wdXQgaXMgZGlzYWJsZWQuXG4gICAgaWYgKGZjcy5kaXNhYmxlZCkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uRm9jdXMpIHtcbiAgICAgIG9uRm9jdXMoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkZvY3VzKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUJsdXIgPSBmdW5jdGlvbiBoYW5kbGVCbHVyKGV2ZW50KSB7XG4gICAgaWYgKG9uQmx1cikge1xuICAgICAgb25CbHVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25CbHVyKSB7XG4gICAgICBtdWlGb3JtQ29udHJvbC5vbkJsdXIoZXZlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRGb2N1c2VkKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShldmVudCkge1xuICAgIGlmICghaXNDb250cm9sbGVkKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IGV2ZW50LnRhcmdldCB8fCBpbnB1dFJlZi5jdXJyZW50O1xuXG4gICAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01hdGVyaWFsLVVJOiBFeHBlY3RlZCB2YWxpZCBpbnB1dCB0YXJnZXQuICcgKyAnRGlkIHlvdSB1c2UgYSBjdXN0b20gYGlucHV0Q29tcG9uZW50YCBhbmQgZm9yZ2V0IHRvIGZvcndhcmQgcmVmcz8gJyArICdTZWUgaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vci9pbnB1dC1jb21wb25lbnQtcmVmLWludGVyZmFjZSBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgfVxuXG4gICAgICBjaGVja0RpcnR5KHtcbiAgICAgICAgdmFsdWU6IGVsZW1lbnQudmFsdWVcbiAgICAgIH0pO1xuICAgIH0gLy8gUGVyZm9ybSBpbiB0aGUgd2lsbFVwZGF0ZVxuXG5cbiAgICBpZiAob25DaGFuZ2UpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIG9uQ2hhbmdlLmFwcGx5KHZvaWQgMCwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgIH1cbiAgfTsgLy8gQ2hlY2sgdGhlIGlucHV0IHN0YXRlIG9uIG1vdW50LCBpbiBjYXNlIGl0IHdhcyBmaWxsZWQgYnkgdGhlIHVzZXJcbiAgLy8gb3IgYXV0byBmaWxsZWQgYnkgdGhlIGJyb3dzZXIgYmVmb3JlIHRoZSBoeWRyYXRpb24gKGZvciBTU1IpLlxuXG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBjaGVja0RpcnR5KGlucHV0UmVmLmN1cnJlbnQpO1xuICB9LCBbXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG5cbiAgdmFyIGhhbmRsZUNsaWNrID0gZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCAmJiBldmVudC5jdXJyZW50VGFyZ2V0ID09PSBldmVudC50YXJnZXQpIHtcbiAgICAgIGlucHV0UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBpZiAob25DbGljaykge1xuICAgICAgb25DbGljayhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBJbnB1dENvbXBvbmVudCA9IGlucHV0Q29tcG9uZW50O1xuXG4gIHZhciBpbnB1dFByb3BzID0gX2V4dGVuZHMoe30sIGlucHV0UHJvcHNQcm9wLCB7XG4gICAgcmVmOiBoYW5kbGVJbnB1dFJlZlxuICB9KTtcblxuICBpZiAodHlwZW9mIElucHV0Q29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIGlucHV0UHJvcHMgPSBfZXh0ZW5kcyh7XG4gICAgICAvLyBSZW5hbWUgcmVmIHRvIGlucHV0UmVmIGFzIHdlIGRvbid0IGtub3cgdGhlXG4gICAgICAvLyBwcm92aWRlZCBgaW5wdXRDb21wb25lbnRgIHN0cnVjdHVyZS5cbiAgICAgIGlucHV0UmVmOiBoYW5kbGVJbnB1dFJlZixcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9LCBpbnB1dFByb3BzLCB7XG4gICAgICByZWY6IG51bGxcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChtdWx0aWxpbmUpIHtcbiAgICBpZiAocm93cyAmJiAhcm93c01heCkge1xuICAgICAgSW5wdXRDb21wb25lbnQgPSAndGV4dGFyZWEnO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dFByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICByb3dzTWF4OiByb3dzTWF4XG4gICAgICB9LCBpbnB1dFByb3BzKTtcbiAgICAgIElucHV0Q29tcG9uZW50ID0gVGV4dGFyZWFBdXRvc2l6ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaW5wdXRQcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9LCBpbnB1dFByb3BzKTtcbiAgfVxuXG4gIHZhciBoYW5kbGVBdXRvRmlsbCA9IGZ1bmN0aW9uIGhhbmRsZUF1dG9GaWxsKGV2ZW50KSB7XG4gICAgLy8gUHJvdmlkZSBhIGZha2UgdmFsdWUgYXMgQ2hyb21lIG1pZ2h0IG5vdCBsZXQgeW91IGFjY2VzcyBpdCBmb3Igc2VjdXJpdHkgcmVhc29ucy5cbiAgICBjaGVja0RpcnR5KGV2ZW50LmFuaW1hdGlvbk5hbWUuaW5kZXhPZignYXV0by1maWxsLWNhbmNlbCcpICE9PSAtMSA/IGlucHV0UmVmLmN1cnJlbnQgOiB7XG4gICAgICB2YWx1ZTogJ3gnXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZVByb3AsIGZjcy5kaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBmY3MuZXJyb3IgJiYgY2xhc3Nlcy5lcnJvciwgZnVsbFdpZHRoICYmIGNsYXNzZXMuZnVsbFdpZHRoLCBmY3MuZm9jdXNlZCAmJiBjbGFzc2VzLmZvY3VzZWQsIG11aUZvcm1Db250cm9sICYmIGNsYXNzZXMuZm9ybUNvbnRyb2wsIG11bHRpbGluZSAmJiBjbGFzc2VzLm11bHRpbGluZSwgc3RhcnRBZG9ybm1lbnQgJiYgY2xhc3Nlcy5hZG9ybmVkU3RhcnQsIGVuZEFkb3JubWVudCAmJiBjbGFzc2VzLmFkb3JuZWRFbmQsIHtcbiAgICAgIGRlbnNlOiBjbGFzc2VzLm1hcmdpbkRlbnNlXG4gICAgfVtmY3MubWFyZ2luXSksXG4gICAgb25DbGljazogaGFuZGxlQ2xpY2ssXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCBzdGFydEFkb3JubWVudCwgUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtQ29udHJvbENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbnVsbFxuICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0Q29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgXCJhcmlhLWludmFsaWRcIjogZmNzLmVycm9yLFxuICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBhcmlhRGVzY3JpYmVkYnksXG4gICAgYXV0b0NvbXBsZXRlOiBhdXRvQ29tcGxldGUsXG4gICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuaW5wdXQsIGlucHV0UHJvcHNDbGFzc05hbWUsIGZjcy5kaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBtdWx0aWxpbmUgJiYgY2xhc3Nlcy5pbnB1dE11bHRpbGluZSwgc2VsZWN0ICYmIGNsYXNzZXMuaW5wdXRTZWxlY3QsIGZjcy5oaWRkZW5MYWJlbCAmJiBjbGFzc2VzLmlucHV0SGlkZGVuTGFiZWwsIHN0YXJ0QWRvcm5tZW50ICYmIGNsYXNzZXMuaW5wdXRBZG9ybmVkU3RhcnQsIGVuZEFkb3JubWVudCAmJiBjbGFzc2VzLmlucHV0QWRvcm5lZEVuZCwge1xuICAgICAgc2VhcmNoOiBjbGFzc2VzLmlucHV0VHlwZVNlYXJjaFxuICAgIH1bdHlwZV0sIHtcbiAgICAgIGRlbnNlOiBjbGFzc2VzLmlucHV0TWFyZ2luRGVuc2VcbiAgICB9W2Zjcy5tYXJnaW5dKSxcbiAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgIGlkOiBpZCxcbiAgICBvbkFuaW1hdGlvblN0YXJ0OiBoYW5kbGVBdXRvRmlsbCxcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICBvbkNoYW5nZTogaGFuZGxlQ2hhbmdlLFxuICAgIG9uRm9jdXM6IGhhbmRsZUZvY3VzLFxuICAgIG9uS2V5RG93bjogb25LZXlEb3duLFxuICAgIG9uS2V5VXA6IG9uS2V5VXAsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICByZXF1aXJlZDogZmNzLnJlcXVpcmVkLFxuICAgIHJvd3M6IHJvd3MsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0sIGlucHV0UHJvcHMpKSksIGVuZEFkb3JubWVudCwgcmVuZGVyU3VmZml4ID8gcmVuZGVyU3VmZml4KF9leHRlbmRzKHt9LCBmY3MsIHtcbiAgICBzdGFydEFkb3JubWVudDogc3RhcnRBZG9ybm1lbnRcbiAgfSkpIDogbnVsbCk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IElucHV0QmFzZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICAnYXJpYS1kZXNjcmliZWRieSc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoaXMgcHJvcCBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBbZm9sbG93aW5nIHRoZSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbCkuXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHdyYXBwZXIgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgYGlucHV0YCBlbGVtZW50IHZhbHVlLiBVc2Ugd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBQcm9wVHlwZXMuYW55LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBgaW5wdXRgIGVsZW1lbnQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogW0F0dHJpYnV0ZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudC9pbnB1dCNBdHRyaWJ1dGVzKSBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQYXNzIGEgcmVmIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBQcm9wVHlwZXMub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdGV4dGFyZWEgZWxlbWVudCB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKi9cbiAgbXVsdGlsaW5lOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYCAoc3RyaW5nKS5cbiAgICovXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRm9jdXM6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleVVwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBpbnB1dCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlbmRlclN1ZmZpeDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5udW1iZXJdKSxcblxuICAvKipcbiAgICogU2hvdWxkIGJlIGB0cnVlYCB3aGVuIHRoZSBjb21wb25lbnQgaG9zdHMgYSBzZWxlY3QuXG4gICAqL1xuICBzZWxlY3Q6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgW2EgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I0Zvcm1fJTNDaW5wdXQlM0VfdHlwZXMpLlxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IFByb3BUeXBlcy5hbnlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSW5wdXRCYXNlJ1xufSkoSW5wdXRCYXNlKTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtQ29udHJvbFN0YXRlKF9yZWYpIHtcbiAgdmFyIHByb3BzID0gX3JlZi5wcm9wcyxcbiAgICAgIHN0YXRlcyA9IF9yZWYuc3RhdGVzLFxuICAgICAgbXVpRm9ybUNvbnRyb2wgPSBfcmVmLm11aUZvcm1Db250cm9sO1xuICByZXR1cm4gc3RhdGVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdGF0ZSkge1xuICAgIGFjY1tzdGF0ZV0gPSBwcm9wc1tzdGF0ZV07XG5cbiAgICBpZiAobXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHNbc3RhdGVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhY2Nbc3RhdGVdID0gbXVpRm9ybUNvbnRyb2xbc3RhdGVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyNCksXG4gICAgICB3aWR0aDogJzFlbScsXG4gICAgICBoZWlnaHQ6ICcxZW0nLFxuICAgICAgLy8gQ2hyb21lIGZpeCBmb3IgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODIwNTQxXG4gICAgICAvLyBUbyByZW1vdmUgYXQgc29tZSBwb2ludC5cbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIGZsZXhTaHJpbms6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImFjdGlvblwiYC4gKi9cbiAgICBjb2xvckFjdGlvbjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImVycm9yXCJgLiAqL1xuICAgIGNvbG9yRXJyb3I6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJkaXNhYmxlZFwiYC4gKi9cbiAgICBjb2xvckRpc2FibGVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICB9LFxuICAgIGZvbnRTaXplSW5oZXJpdDoge1xuICAgICAgZm9udFNpemU6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIGZvbnRTaXplU21hbGw6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjApXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwibGFyZ2VcImAuICovXG4gICAgZm9udFNpemVMYXJnZToge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgzNilcbiAgICB9XG4gIH07XG59O1xudmFyIEljb24gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEljb24ocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnaW5oZXJpdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ3NwYW4nIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRmb250U2l6ZSA9IHByb3BzLmZvbnRTaXplLFxuICAgICAgZm9udFNpemUgPSBfcHJvcHMkZm9udFNpemUgPT09IHZvaWQgMCA/ICdkZWZhdWx0JyA6IF9wcm9wcyRmb250U2l6ZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJmb250U2l6ZVwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KCdtYXRlcmlhbC1pY29ucycsIGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCBjb2xvciAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBmb250U2l6ZSAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJmb250U2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKGZvbnRTaXplKSldKSxcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gSWNvbi5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgaWNvbiBmb250IGxpZ2F0dXJlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdhY3Rpb24nLCAnZXJyb3InLCAnZGlzYWJsZWQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAyNHB4LCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICovXG4gIGZvbnRTaXplOiBQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2RlZmF1bHQnLCAnc21hbGwnLCAnbGFyZ2UnXSlcbn0gOiB2b2lkIDA7XG5JY29uLm11aU5hbWUgPSAnSWNvbic7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSWNvbidcbn0pKEljb24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBwYWRkaW5nOiAnOHB4IDI0cHggMjRweCdcbiAgfVxufTtcbnZhciBFeHBhbnNpb25QYW5lbERldGFpbHMgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEV4cGFuc2lvblBhbmVsRGV0YWlscyhwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBFeHBhbnNpb25QYW5lbERldGFpbHMucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGV4cGFuc2lvbiBwYW5lbCBkZXRhaWxzLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRXhwYW5zaW9uUGFuZWxEZXRhaWxzJ1xufSkoRXhwYW5zaW9uUGFuZWxEZXRhaWxzKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZmFkZSB9IGZyb20gJy4uL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICAvLyBSZXNldCBicm93c2VyIGRlZmF1bHQgc3R5bGUuXG4gICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZGl2aWRlclxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhYnNvbHV0ZT17dHJ1ZX1gLiAqL1xuICAgIGFic29sdXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJpbnNldFwiYC4gKi9cbiAgICBpbnNldDoge1xuICAgICAgbWFyZ2luTGVmdDogNzJcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbGlnaHQ9e3RydWV9YC4gKi9cbiAgICBsaWdodDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuZGl2aWRlciwgMC4wOClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm1pZGRsZVwiYC4gKi9cbiAgICBtaWRkbGU6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICBtYXJnaW5SaWdodDogdGhlbWUuc3BhY2luZygyKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBvcmllbnRhdGlvbj1cInZlcnRpY2FsXCJgLiAqL1xuICAgIHZlcnRpY2FsOiB7XG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHdpZHRoOiAxXG4gICAgfVxuICB9O1xufTtcbnZhciBEaXZpZGVyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEaXZpZGVyKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRhYnNvbHV0ZSA9IHByb3BzLmFic29sdXRlLFxuICAgICAgYWJzb2x1dGUgPSBfcHJvcHMkYWJzb2x1dGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGFic29sdXRlLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2hyJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkbGlnaHQgPSBwcm9wcy5saWdodCxcbiAgICAgIGxpZ2h0ID0gX3Byb3BzJGxpZ2h0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRsaWdodCxcbiAgICAgIF9wcm9wcyRvcmllbnRhdGlvbiA9IHByb3BzLm9yaWVudGF0aW9uLFxuICAgICAgb3JpZW50YXRpb24gPSBfcHJvcHMkb3JpZW50YXRpb24gPT09IHZvaWQgMCA/ICdob3Jpem9udGFsJyA6IF9wcm9wcyRvcmllbnRhdGlvbixcbiAgICAgIF9wcm9wcyRyb2xlID0gcHJvcHMucm9sZSxcbiAgICAgIHJvbGUgPSBfcHJvcHMkcm9sZSA9PT0gdm9pZCAwID8gQ29tcG9uZW50ICE9PSAnaHInID8gJ3NlcGFyYXRvcicgOiB1bmRlZmluZWQgOiBfcHJvcHMkcm9sZSxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ2Z1bGxXaWR0aCcgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhYnNvbHV0ZVwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJsaWdodFwiLCBcIm9yaWVudGF0aW9uXCIsIFwicm9sZVwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgdmFyaWFudCAhPT0gJ2Z1bGxXaWR0aCcgJiYgY2xhc3Nlc1t2YXJpYW50XSwgYWJzb2x1dGUgJiYgY2xhc3Nlcy5hYnNvbHV0ZSwgbGlnaHQgJiYgY2xhc3Nlcy5saWdodCwge1xuICAgICAgdmVydGljYWw6IGNsYXNzZXMudmVydGljYWxcbiAgICB9W29yaWVudGF0aW9uXSksXG4gICAgcm9sZTogcm9sZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBEaXZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIEFic29sdXRlbHkgcG9zaXRpb24gdGhlIGVsZW1lbnQuXG4gICAqL1xuICBhYnNvbHV0ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGRpdmlkZXIgd2lsbCBoYXZlIGEgbGlnaHRlciBjb2xvci5cbiAgICovXG4gIGxpZ2h0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGRpdmlkZXIgb3JpZW50YXRpb24uXG4gICAqL1xuICBvcmllbnRhdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnaG9yaXpvbnRhbCcsICd2ZXJ0aWNhbCddKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcm9sZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZnVsbFdpZHRoJywgJ2luc2V0JywgJ21pZGRsZSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlEaXZpZGVyJ1xufSkoRGl2aWRlcik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCAnLi4vQnV0dG9uJzsgLy8gU28gd2UgZG9uJ3QgaGF2ZSBhbnkgb3ZlcnJpZGUgcHJpb3JpdHkgaXNzdWUuXG5cbmV4cG9ydCB2YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHBhZGRpbmc6IDgsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCdcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlU3BhY2luZz17ZmFsc2V9YC4gKi9cbiAgc3BhY2luZzoge1xuICAgICcmID4gKiArIConOiB7XG4gICAgICBtYXJnaW5MZWZ0OiA4XG4gICAgfVxuICB9XG59O1xudmFyIEV4cGFuc2lvblBhbmVsQWN0aW9ucyA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gRXhwYW5zaW9uUGFuZWxBY3Rpb25zKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGRpc2FibGVTcGFjaW5nID0gcHJvcHMuZGlzYWJsZVNwYWNpbmcsXG4gICAgICBkaXNhYmxlU3BhY2luZyA9IF9wcm9wcyRkaXNhYmxlU3BhY2luZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVNwYWNpbmcsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVTcGFjaW5nXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCAhZGlzYWJsZVNwYWNpbmcgJiYgY2xhc3Nlcy5zcGFjaW5nKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBFeHBhbnNpb25QYW5lbEFjdGlvbnMucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBhY3Rpb25zIGRvIG5vdCBoYXZlIGFkZGl0aW9uYWwgbWFyZ2luLlxuICAgKi9cbiAgZGlzYWJsZVNwYWNpbmc6IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUV4cGFuc2lvblBhbmVsQWN0aW9ucydcbn0pKEV4cGFuc2lvblBhbmVsQWN0aW9ucyk7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCB7IGZhZGUgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IF9leHRlbmRzKHt9LCB0aGVtZS50eXBvZ3JhcGh5LmJ1dHRvbiwge1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBtaW5XaWR0aDogNjQsXG4gICAgICBwYWRkaW5nOiAnNnB4IDE2cHgnLFxuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydiYWNrZ3JvdW5kLWNvbG9yJywgJ2JveC1zaGFkb3cnLCAnYm9yZGVyJ10sIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfSxcbiAgICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgICB9XG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc3BhbiBlbGVtZW50IHRoYXQgd3JhcHMgdGhlIGNoaWxkcmVuLiAqL1xuICAgIGxhYmVsOiB7XG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgLy8gRW5zdXJlIHRoZSBjb3JyZWN0IHdpZHRoIGZvciBpT1MgU2FmYXJpXG4gICAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnaW5oZXJpdCcsXG4gICAgICBqdXN0aWZ5Q29udGVudDogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJ0ZXh0XCJgLiAqL1xuICAgIHRleHQ6IHtcbiAgICAgIHBhZGRpbmc6ICc2cHggOHB4J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwidGV4dFwiYCBhbmQgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICB0ZXh0UHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJ0ZXh0XCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgdGV4dFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWQ6IHtcbiAgICAgIHBhZGRpbmc6ICc1cHggMTVweCcsXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKScpLFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgb3V0bGluZWRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChmYWRlKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCAwLjUpKSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYCBhbmQgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIG91dGxpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGZhZGUodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgMC41KSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiksXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjb250YWluZWRcImAuICovXG4gICAgY29udGFpbmVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5nZXRDb250cmFzdFRleHQodGhlbWUucGFsZXR0ZS5ncmV5WzMwMF0pLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSxcbiAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1syXSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleS5BMTAwLFxuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNF0sXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMl0sXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXlbMzAwXVxuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkQmFja2dyb3VuZFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNWaXNpYmxlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNl1cbiAgICAgIH0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s4XVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQsXG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1swXSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImNvbnRhaW5lZFwiYCBhbmQgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb250YWluZWRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY29udGFpbmVkXCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29udGFpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSBCdXR0b25CYXNlIHJvb3QgZWxlbWVudCBpZiB0aGUgYnV0dG9uIGlzIGtleWJvYXJkIGZvY3VzZWQuICovXG4gICAgZm9jdXNWaXNpYmxlOiB7fSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGJvcmRlckNvbG9yOiAnY3VycmVudENvbG9yJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAgYW5kIGB2YXJpYW50PVwidGV4dFwiYC4gKi9cbiAgICB0ZXh0U2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAnNHB4IDVweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAgYW5kIGB2YXJpYW50PVwidGV4dFwiYC4gKi9cbiAgICB0ZXh0U2l6ZUxhcmdlOiB7XG4gICAgICBwYWRkaW5nOiAnOHB4IDExcHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgIGFuZCBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkU2l6ZVNtYWxsOiB7XG4gICAgICBwYWRkaW5nOiAnM3B4IDlweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAgYW5kIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWRTaXplTGFyZ2U6IHtcbiAgICAgIHBhZGRpbmc6ICc3cHggMjFweCcsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwic21hbGxcImAgYW5kIGB2YXJpYW50PVwiY29udGFpbmVkXCJgLiAqL1xuICAgIGNvbnRhaW5lZFNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogJzRweCAxMHB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJsYXJnZVwiYCBhbmQgYHZhcmlhbnQ9XCJjb250YWluZWRcImAuICovXG4gICAgY29udGFpbmVkU2l6ZUxhcmdlOiB7XG4gICAgICBwYWRkaW5nOiAnOHB4IDIycHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAuICovXG4gICAgc2l6ZUxhcmdlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgc3RhcnRJY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQuICovXG4gICAgc3RhcnRJY29uOiB7XG4gICAgICBkaXNwbGF5OiAnaW5oZXJpdCcsXG4gICAgICBtYXJnaW5SaWdodDogOCxcbiAgICAgIG1hcmdpbkxlZnQ6IC00XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBlbmRJY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQuICovXG4gICAgZW5kSWNvbjoge1xuICAgICAgZGlzcGxheTogJ2luaGVyaXQnLFxuICAgICAgbWFyZ2luUmlnaHQ6IC00LFxuICAgICAgbWFyZ2luTGVmdDogOFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiBlbGVtZW50IGlmIHN1cHBsaWVkIGFuZCBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIGljb25TaXplU21hbGw6IHtcbiAgICAgICcmID4gKjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgZm9udFNpemU6IDE4XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpY29uIGVsZW1lbnQgaWYgc3VwcGxpZWQgYW5kIGBzaXplPVwibWVkaXVtXCJgLiAqL1xuICAgIGljb25TaXplTWVkaXVtOiB7XG4gICAgICAnJiA+ICo6Zmlyc3QtY2hpbGQnOiB7XG4gICAgICAgIGZvbnRTaXplOiAyMFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaWNvbiBlbGVtZW50IGlmIHN1cHBsaWVkIGFuZCBgc2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIGljb25TaXplTGFyZ2U6IHtcbiAgICAgICcmID4gKjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgZm9udFNpemU6IDIyXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbnZhciBCdXR0b24gPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEJ1dHRvbihwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbG9yID0gX3Byb3BzJGNvbG9yID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkY29sb3IsXG4gICAgICBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3Byb3BzJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gJ2J1dHRvbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPSBwcm9wcy5kaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVGb2N1c1JpLFxuICAgICAgZW5kSWNvblByb3AgPSBwcm9wcy5lbmRJY29uLFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gcHJvcHMuZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGZ1bGxXaWR0aCA9IHByb3BzLmZ1bGxXaWR0aCxcbiAgICAgIGZ1bGxXaWR0aCA9IF9wcm9wcyRmdWxsV2lkdGggPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZ1bGxXaWR0aCxcbiAgICAgIF9wcm9wcyRzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHNpemUgPSBfcHJvcHMkc2l6ZSA9PT0gdm9pZCAwID8gJ21lZGl1bScgOiBfcHJvcHMkc2l6ZSxcbiAgICAgIHN0YXJ0SWNvblByb3AgPSBwcm9wcy5zdGFydEljb24sXG4gICAgICBfcHJvcHMkdHlwZSA9IHByb3BzLnR5cGUsXG4gICAgICB0eXBlID0gX3Byb3BzJHR5cGUgPT09IHZvaWQgMCA/ICdidXR0b24nIDogX3Byb3BzJHR5cGUsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICd0ZXh0JyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlRm9jdXNSaXBwbGVcIiwgXCJlbmRJY29uXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwiZnVsbFdpZHRoXCIsIFwic2l6ZVwiLCBcInN0YXJ0SWNvblwiLCBcInR5cGVcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgc3RhcnRJY29uID0gc3RhcnRJY29uUHJvcCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuc3RhcnRJY29uLCBjbGFzc2VzW1wiaWNvblNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldKVxuICB9LCBzdGFydEljb25Qcm9wKTtcbiAgdmFyIGVuZEljb24gPSBlbmRJY29uUHJvcCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuZW5kSWNvbiwgY2xhc3Nlc1tcImljb25TaXplXCIuY29uY2F0KGNhcGl0YWxpemUoc2l6ZSkpXSlcbiAgfSwgZW5kSWNvblByb3ApO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b25CYXNlLCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1t2YXJpYW50XSwgY2xhc3NOYW1lLCBjb2xvciA9PT0gJ2luaGVyaXQnID8gY2xhc3Nlcy5jb2xvckluaGVyaXQgOiBjb2xvciAhPT0gJ2RlZmF1bHQnICYmIGNsYXNzZXNbXCJcIi5jb25jYXQodmFyaWFudCkuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIHNpemUgIT09ICdtZWRpdW0nICYmIFtjbGFzc2VzW1wiXCIuY29uY2F0KHZhcmlhbnQsIFwiU2l6ZVwiKS5jb25jYXQoY2FwaXRhbGl6ZShzaXplKSldLCBjbGFzc2VzW1wic2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKHNpemUpKV1dLCBkaXNhYmxlZCAmJiBjbGFzc2VzLmRpc2FibGVkLCBmdWxsV2lkdGggJiYgY2xhc3Nlcy5mdWxsV2lkdGgpLFxuICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5mb2N1c1Zpc2libGUsIGZvY3VzVmlzaWJsZUNsYXNzTmFtZSksXG4gICAgcmVmOiByZWYsXG4gICAgdHlwZTogdHlwZVxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWxcbiAgfSwgc3RhcnRJY29uLCBjaGlsZHJlbiwgZW5kSWNvbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCdXR0b24ucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGJ1dHRvbi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSB3aWxsIGJlIGRpc2FibGVkLlxuICAgKiBgZGlzYWJsZVJpcHBsZWAgbXVzdCBhbHNvIGJlIHRydWUuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqXG4gICAqIOKaoO+4jyBXaXRob3V0IGEgcmlwcGxlIHRoZXJlIGlzIG5vIHN0eWxpbmcgZm9yIDpmb2N1cy12aXNpYmxlIGJ5IGRlZmF1bHQuIEJlIHN1cmVcbiAgICogdG8gaGlnaGxpZ2h0IHRoZSBlbGVtZW50IGJ5IGFwcGx5aW5nIHNlcGFyYXRlIHN0eWxlcyB3aXRoIHRoZSBgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lYC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbGVtZW50IHBsYWNlZCBhZnRlciB0aGUgY2hpbGRyZW4uXG4gICAqL1xuICBlbmRJY29uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIGxpbmsgdG8gd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqIElmIGRlZmluZWQsIGFuIGBhYCBlbGVtZW50IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCBub2RlLlxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGJ1dHRvbi5cbiAgICogYHNtYWxsYCBpcyBlcXVpdmFsZW50IHRvIHRoZSBkZW5zZSBidXR0b24gc3R5bGluZy5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bScsICdsYXJnZSddKSxcblxuICAvKipcbiAgICogRWxlbWVudCBwbGFjZWQgYmVmb3JlIHRoZSBjaGlsZHJlbi5cbiAgICovXG4gIHN0YXJ0SWNvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3RleHQnLCAnb3V0bGluZWQnLCAnY29udGFpbmVkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJ1dHRvbidcbn0pKEJ1dHRvbik7IiwiZnVuY3Rpb24gb3duZXJEb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb3duZXJEb2N1bWVudDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCBzZXRSZWYgZnJvbSAnLi4vdXRpbHMvc2V0UmVmJztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHsgZWxlbWVudEFjY2VwdGluZ1JlZiwgZXhhY3RQcm9wIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcblxuZnVuY3Rpb24gbWFwRXZlbnRQcm9wVG9FdmVudChldmVudFByb3ApIHtcbiAgcmV0dXJuIGV2ZW50UHJvcC5zdWJzdHJpbmcoMikudG9Mb3dlckNhc2UoKTtcbn1cbi8qKlxuICogTGlzdGVuIGZvciBjbGljayBldmVudHMgdGhhdCBvY2N1ciBzb21ld2hlcmUgaW4gdGhlIGRvY3VtZW50LCBvdXRzaWRlIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAqIEZvciBpbnN0YW5jZSwgaWYgeW91IG5lZWQgdG8gaGlkZSBhIG1lbnUgd2hlbiBwZW9wbGUgY2xpY2sgYW55d2hlcmUgZWxzZSBvbiB5b3VyIHBhZ2UuXG4gKi9cblxuXG52YXIgQ2xpY2tBd2F5TGlzdGVuZXIgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIENsaWNrQXdheUxpc3RlbmVyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkbW91c2VFdmVudCA9IHByb3BzLm1vdXNlRXZlbnQsXG4gICAgICBtb3VzZUV2ZW50ID0gX3Byb3BzJG1vdXNlRXZlbnQgPT09IHZvaWQgMCA/ICdvbkNsaWNrJyA6IF9wcm9wcyRtb3VzZUV2ZW50LFxuICAgICAgX3Byb3BzJHRvdWNoRXZlbnQgPSBwcm9wcy50b3VjaEV2ZW50LFxuICAgICAgdG91Y2hFdmVudCA9IF9wcm9wcyR0b3VjaEV2ZW50ID09PSB2b2lkIDAgPyAnb25Ub3VjaEVuZCcgOiBfcHJvcHMkdG91Y2hFdmVudCxcbiAgICAgIG9uQ2xpY2tBd2F5ID0gcHJvcHMub25DbGlja0F3YXk7XG4gIHZhciBtb3ZlZFJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHZhciBub2RlUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgbW91bnRlZFJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbW91bnRlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgbW91bnRlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW10pO1xuICB2YXIgaGFuZGxlTm9kZVJlZiA9IHVzZUZvcmtSZWYobm9kZVJlZiwgcmVmKTsgLy8gY2FuIGJlIHJlbW92ZWQgb25jZSB3ZSBkcm9wIHN1cHBvcnQgZm9yIG5vbiByZWYgZm9yd2FyZGluZyBjbGFzcyBjb21wb25lbnRzXG5cbiAgdmFyIGhhbmRsZU93blJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgc2V0UmVmKGhhbmRsZU5vZGVSZWYsIFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKSk7XG4gIH0sIFtoYW5kbGVOb2RlUmVmXSk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgaGFuZGxlT3duUmVmKTtcbiAgdmFyIGhhbmRsZUNsaWNrQXdheSA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV2ZW50cyB0aGF0IGhhdmUgYmVlbiBgZXZlbnQucHJldmVudERlZmF1bHQoKWAgbWFya2VkLlxuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJRSAxMSBzdXBwb3J0LCB3aGljaCB0cmlnZ2VyIHRoZSBoYW5kbGVDbGlja0F3YXkgZXZlbiBhZnRlciB0aGUgdW5iaW5kXG5cblxuICAgIGlmICghbW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBEbyBub3QgYWN0IGlmIHVzZXIgcGVyZm9ybWVkIHRvdWNobW92ZVxuXG5cbiAgICBpZiAobW92ZWRSZWYuY3VycmVudCkge1xuICAgICAgbW92ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gVGhlIGNoaWxkIG1pZ2h0IHJlbmRlciBudWxsLlxuXG5cbiAgICBpZiAoIW5vZGVSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gTXVsdGkgd2luZG93IHN1cHBvcnRcblxuXG4gICAgdmFyIGRvYyA9IG93bmVyRG9jdW1lbnQobm9kZVJlZi5jdXJyZW50KTtcblxuICAgIGlmIChkb2MuZG9jdW1lbnRFbGVtZW50ICYmIGRvYy5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiAhbm9kZVJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgIG9uQ2xpY2tBd2F5KGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlVG91Y2hNb3ZlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIG1vdmVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRvdWNoRXZlbnQgIT09IGZhbHNlKSB7XG4gICAgICB2YXIgbWFwcGVkVG91Y2hFdmVudCA9IG1hcEV2ZW50UHJvcFRvRXZlbnQodG91Y2hFdmVudCk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKG1hcHBlZFRvdWNoRXZlbnQsIGhhbmRsZUNsaWNrQXdheSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBoYW5kbGVUb3VjaE1vdmUpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihtYXBwZWRUb3VjaEV2ZW50LCBoYW5kbGVDbGlja0F3YXkpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBoYW5kbGVUb3VjaE1vdmUpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbaGFuZGxlQ2xpY2tBd2F5LCBoYW5kbGVUb3VjaE1vdmUsIHRvdWNoRXZlbnRdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobW91c2VFdmVudCAhPT0gZmFsc2UpIHtcbiAgICAgIHZhciBtYXBwZWRNb3VzZUV2ZW50ID0gbWFwRXZlbnRQcm9wVG9FdmVudChtb3VzZUV2ZW50KTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIobWFwcGVkTW91c2VFdmVudCwgaGFuZGxlQ2xpY2tBd2F5KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIobWFwcGVkTW91c2VFdmVudCwgaGFuZGxlQ2xpY2tBd2F5KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW2hhbmRsZUNsaWNrQXdheSwgbW91c2VFdmVudF0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgcmVmOiBoYW5kbGVSZWZcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDbGlja0F3YXlMaXN0ZW5lci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUaGUgd3JhcHBlZCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IGVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIG1vdXNlIGV2ZW50IHRvIGxpc3RlbiB0by4gWW91IGNhbiBkaXNhYmxlIHRoZSBsaXN0ZW5lciBieSBwcm92aWRpbmcgYGZhbHNlYC5cbiAgICovXG4gIG1vdXNlRXZlbnQ6IFByb3BUeXBlcy5vbmVPZihbJ29uQ2xpY2snLCAnb25Nb3VzZURvd24nLCAnb25Nb3VzZVVwJywgZmFsc2VdKSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiBhIFwiY2xpY2sgYXdheVwiIGV2ZW50IGlzIGRldGVjdGVkLlxuICAgKi9cbiAgb25DbGlja0F3YXk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSB0b3VjaCBldmVudCB0byBsaXN0ZW4gdG8uIFlvdSBjYW4gZGlzYWJsZSB0aGUgbGlzdGVuZXIgYnkgcHJvdmlkaW5nIGBmYWxzZWAuXG4gICAqL1xuICB0b3VjaEV2ZW50OiBQcm9wVHlwZXMub25lT2YoWydvblRvdWNoU3RhcnQnLCAnb25Ub3VjaEVuZCcsIGZhbHNlXSlcbn0gOiB2b2lkIDA7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBDbGlja0F3YXlMaXN0ZW5lclsncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChDbGlja0F3YXlMaXN0ZW5lci5wcm9wVHlwZXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDbGlja0F3YXlMaXN0ZW5lcjsiLCIvKipcbiAqIFNhZmUgY2hhaW5lZCBmdW5jdGlvblxuICpcbiAqIFdpbGwgb25seSBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gaWYgbmVlZGVkLFxuICogb3RoZXJ3aXNlIHdpbGwgcGFzcyBiYWNrIGV4aXN0aW5nIGZ1bmN0aW9ucyBvciBudWxsLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmN0aW9ucyB0byBjaGFpblxuICogQHJldHVybnMge2Z1bmN0aW9ufG51bGx9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbigpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBmdW5jKSB7XG4gICAgaWYgKGZ1bmMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBpbnZhbGlkIEFyZ3VtZW50IFR5cGUsIG11c3Qgb25seSBwcm92aWRlIGZ1bmN0aW9ucywgdW5kZWZpbmVkLCBvciBudWxsLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sIGZ1bmN0aW9uICgpIHt9KTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWUnO1xuaW1wb3J0IHsgcmVmbG93LCBnZXRUcmFuc2l0aW9uUHJvcHMgfSBmcm9tICcuLi90cmFuc2l0aW9ucy91dGlscyc7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcblxuZnVuY3Rpb24gZ2V0U2NhbGUodmFsdWUpIHtcbiAgcmV0dXJuIFwic2NhbGUoXCIuY29uY2F0KHZhbHVlLCBcIiwgXCIpLmNvbmNhdChNYXRoLnBvdyh2YWx1ZSwgMiksIFwiKVwiKTtcbn1cblxudmFyIHN0eWxlcyA9IHtcbiAgZW50ZXJpbmc6IHtcbiAgICBvcGFjaXR5OiAxLFxuICAgIHRyYW5zZm9ybTogZ2V0U2NhbGUoMSlcbiAgfSxcbiAgZW50ZXJlZDoge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNmb3JtOiAnbm9uZSdcbiAgfVxufTtcbi8qKlxuICogVGhlIEdyb3cgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbVG9vbHRpcF0oL2NvbXBvbmVudHMvdG9vbHRpcHMvKSBhbmRcbiAqIFtQb3BvdmVyXSgvY29tcG9uZW50cy9wb3BvdmVyLykgY29tcG9uZW50cy5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cblxudmFyIEdyb3cgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEdyb3cocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGluUHJvcCA9IHByb3BzLmluLFxuICAgICAgb25FbnRlciA9IHByb3BzLm9uRW50ZXIsXG4gICAgICBvbkV4aXQgPSBwcm9wcy5vbkV4aXQsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgX3Byb3BzJHRpbWVvdXQgPSBwcm9wcy50aW1lb3V0LFxuICAgICAgdGltZW91dCA9IF9wcm9wcyR0aW1lb3V0ID09PSB2b2lkIDAgPyAnYXV0bycgOiBfcHJvcHMkdGltZW91dCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRXhpdFwiLCBcInN0eWxlXCIsIFwidGltZW91dFwiXSk7XG5cbiAgdmFyIHRpbWVyID0gUmVhY3QudXNlUmVmKCk7XG4gIHZhciBhdXRvVGltZW91dCA9IFJlYWN0LnVzZVJlZigpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJlZik7XG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlRW50ZXIobm9kZSwgaXNBcHBlYXJpbmcpIHtcbiAgICByZWZsb3cobm9kZSk7IC8vIFNvIHRoZSBhbmltYXRpb24gYWx3YXlzIHN0YXJ0IGZyb20gdGhlIHN0YXJ0LlxuXG4gICAgdmFyIF9nZXRUcmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KSxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX2dldFRyYW5zaXRpb25Qcm9wcy5kdXJhdGlvbixcbiAgICAgICAgZGVsYXkgPSBfZ2V0VHJhbnNpdGlvblByb3BzLmRlbGF5O1xuXG4gICAgdmFyIGR1cmF0aW9uO1xuXG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgZHVyYXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24obm9kZS5jbGllbnRIZWlnaHQpO1xuICAgICAgYXV0b1RpbWVvdXQuY3VycmVudCA9IGR1cmF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSBbdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgZGVsYXk6IGRlbGF5XG4gICAgfSksIHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uICogMC42NjYsXG4gICAgICBkZWxheTogZGVsYXlcbiAgICB9KV0uam9pbignLCcpO1xuXG4gICAgaWYgKG9uRW50ZXIpIHtcbiAgICAgIG9uRW50ZXIobm9kZSwgaXNBcHBlYXJpbmcpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlRXhpdCA9IGZ1bmN0aW9uIGhhbmRsZUV4aXQobm9kZSkge1xuICAgIHZhciBfZ2V0VHJhbnNpdGlvblByb3BzMiA9IGdldFRyYW5zaXRpb25Qcm9wcyh7XG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICB0aW1lb3V0OiB0aW1lb3V0XG4gICAgfSwge1xuICAgICAgbW9kZTogJ2V4aXQnXG4gICAgfSksXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9nZXRUcmFuc2l0aW9uUHJvcHMyLmR1cmF0aW9uLFxuICAgICAgICBkZWxheSA9IF9nZXRUcmFuc2l0aW9uUHJvcHMyLmRlbGF5O1xuXG4gICAgdmFyIGR1cmF0aW9uO1xuXG4gICAgaWYgKHRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgZHVyYXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5nZXRBdXRvSGVpZ2h0RHVyYXRpb24obm9kZS5jbGllbnRIZWlnaHQpO1xuICAgICAgYXV0b1RpbWVvdXQuY3VycmVudCA9IGR1cmF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBkdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbjtcbiAgICB9XG5cbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSBbdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgZGVsYXk6IGRlbGF5XG4gICAgfSksIHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgZHVyYXRpb246IGR1cmF0aW9uICogMC42NjYsXG4gICAgICBkZWxheTogZGVsYXkgfHwgZHVyYXRpb24gKiAwLjMzM1xuICAgIH0pXS5qb2luKCcsJyk7XG4gICAgbm9kZS5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gZ2V0U2NhbGUoMC43NSk7XG5cbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBhZGRFbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEVuZExpc3RlbmVyKF8sIG5leHQpIHtcbiAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICB0aW1lci5jdXJyZW50ID0gc2V0VGltZW91dChuZXh0LCBhdXRvVGltZW91dC5jdXJyZW50IHx8IDApO1xuICAgIH1cbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uLCBfZXh0ZW5kcyh7XG4gICAgYXBwZWFyOiB0cnVlLFxuICAgIGluOiBpblByb3AsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FeGl0OiBoYW5kbGVFeGl0LFxuICAgIGFkZEVuZExpc3RlbmVyOiBhZGRFbmRMaXN0ZW5lcixcbiAgICB0aW1lb3V0OiB0aW1lb3V0ID09PSAnYXV0bycgPyBudWxsIDogdGltZW91dFxuICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgIHN0eWxlOiBfZXh0ZW5kcyh7XG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogZ2V0U2NhbGUoMC43NSksXG4gICAgICAgIHZpc2liaWxpdHk6IHN0YXRlID09PSAnZXhpdGVkJyAmJiAhaW5Qcm9wID8gJ2hpZGRlbicgOiB1bmRlZmluZWRcbiAgICAgIH0sIHN0eWxlc1tzdGF0ZV0sIHt9LCBzdHlsZSwge30sIGNoaWxkcmVuLnByb3BzLnN0eWxlKSxcbiAgICAgIHJlZjogaGFuZGxlUmVmXG4gICAgfSwgY2hpbGRQcm9wcykpO1xuICB9KTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR3Jvdy5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBhbmltYXRpb24uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICovXG4gIHRpbWVvdXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgZW50ZXI6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZXhpdDogUHJvcFR5cGVzLm51bWJlclxuICB9KSwgUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKV0pXG59IDogdm9pZCAwO1xuR3Jvdy5tdWlTdXBwb3J0QXV0byA9IHRydWU7XG5leHBvcnQgZGVmYXVsdCBHcm93OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBtYXJnaW46IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImJvZHkyXCJgLiAqL1xuICAgIGJvZHkyOiB0aGVtZS50eXBvZ3JhcGh5LmJvZHkyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImJvZHkxXCJgLiAqL1xuICAgIGJvZHkxOiB0aGVtZS50eXBvZ3JhcGh5LmJvZHkxLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImNhcHRpb25cImAuICovXG4gICAgY2FwdGlvbjogdGhlbWUudHlwb2dyYXBoeS5jYXB0aW9uLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImJ1dHRvblwiYC4gKi9cbiAgICBidXR0b246IHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImgxXCJgLiAqL1xuICAgIGgxOiB0aGVtZS50eXBvZ3JhcGh5LmgxLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImgyXCJgLiAqL1xuICAgIGgyOiB0aGVtZS50eXBvZ3JhcGh5LmgyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImgzXCJgLiAqL1xuICAgIGgzOiB0aGVtZS50eXBvZ3JhcGh5LmgzLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImg0XCJgLiAqL1xuICAgIGg0OiB0aGVtZS50eXBvZ3JhcGh5Lmg0LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImg1XCJgLiAqL1xuICAgIGg1OiB0aGVtZS50eXBvZ3JhcGh5Lmg1LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImg2XCJgLiAqL1xuICAgIGg2OiB0aGVtZS50eXBvZ3JhcGh5Lmg2LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInN1YnRpdGxlMVwiYC4gKi9cbiAgICBzdWJ0aXRsZTE6IHRoZW1lLnR5cG9ncmFwaHkuc3VidGl0bGUxLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInN1YnRpdGxlMlwiYC4gKi9cbiAgICBzdWJ0aXRsZTI6IHRoZW1lLnR5cG9ncmFwaHkuc3VidGl0bGUyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm92ZXJsaW5lXCJgLiAqL1xuICAgIG92ZXJsaW5lOiB0aGVtZS50eXBvZ3JhcGh5Lm92ZXJsaW5lLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInNyT25seVwiYC4gT25seSBhY2Nlc3NpYmxlIHRvIHNjcmVlbiByZWFkZXJzLiAqL1xuICAgIHNyT25seToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cImxlZnRcImAuICovXG4gICAgYWxpZ25MZWZ0OiB7XG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cImNlbnRlclwiYC4gKi9cbiAgICBhbGlnbkNlbnRlcjoge1xuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cInJpZ2h0XCJgLiAqL1xuICAgIGFsaWduUmlnaHQ6IHtcbiAgICAgIHRleHRBbGlnbjogJ3JpZ2h0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbGlnbj1cImp1c3RpZnlcImAuICovXG4gICAgYWxpZ25KdXN0aWZ5OiB7XG4gICAgICB0ZXh0QWxpZ246ICdqdXN0aWZ5J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBub3dyYXA9e3RydWV9YC4gKi9cbiAgICBub1dyYXA6IHtcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGd1dHRlckJvdHRvbT17dHJ1ZX1gLiAqL1xuICAgIGd1dHRlckJvdHRvbToge1xuICAgICAgbWFyZ2luQm90dG9tOiAnMC4zNWVtJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwYXJhZ3JhcGg9e3RydWV9YC4gKi9cbiAgICBwYXJhZ3JhcGg6IHtcbiAgICAgIG1hcmdpbkJvdHRvbTogMTZcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwidGV4dFByaW1hcnlcImAuICovXG4gICAgY29sb3JUZXh0UHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwidGV4dFNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclRleHRTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZXJyb3JcImAuICovXG4gICAgY29sb3JFcnJvcjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNwbGF5PVwiaW5saW5lXCJgLiAqL1xuICAgIGRpc3BsYXlJbmxpbmU6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc3BsYXk9XCJibG9ja1wiYC4gKi9cbiAgICBkaXNwbGF5QmxvY2s6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9XG4gIH07XG59O1xudmFyIGRlZmF1bHRWYXJpYW50TWFwcGluZyA9IHtcbiAgaDE6ICdoMScsXG4gIGgyOiAnaDInLFxuICBoMzogJ2gzJyxcbiAgaDQ6ICdoNCcsXG4gIGg1OiAnaDUnLFxuICBoNjogJ2g2JyxcbiAgc3VidGl0bGUxOiAnaDYnLFxuICBzdWJ0aXRsZTI6ICdoNicsXG4gIGJvZHkxOiAncCcsXG4gIGJvZHkyOiAncCdcbn07XG52YXIgVHlwb2dyYXBoeSA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVHlwb2dyYXBoeShwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYWxpZ24gPSBwcm9wcy5hbGlnbixcbiAgICAgIGFsaWduID0gX3Byb3BzJGFsaWduID09PSB2b2lkIDAgPyAnaW5oZXJpdCcgOiBfcHJvcHMkYWxpZ24sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdpbml0aWFsJyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNwbGF5ID0gcHJvcHMuZGlzcGxheSxcbiAgICAgIGRpc3BsYXkgPSBfcHJvcHMkZGlzcGxheSA9PT0gdm9pZCAwID8gJ2luaXRpYWwnIDogX3Byb3BzJGRpc3BsYXksXG4gICAgICBfcHJvcHMkZ3V0dGVyQm90dG9tID0gcHJvcHMuZ3V0dGVyQm90dG9tLFxuICAgICAgZ3V0dGVyQm90dG9tID0gX3Byb3BzJGd1dHRlckJvdHRvbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZ3V0dGVyQm90dG9tLFxuICAgICAgX3Byb3BzJG5vV3JhcCA9IHByb3BzLm5vV3JhcCxcbiAgICAgIG5vV3JhcCA9IF9wcm9wcyRub1dyYXAgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG5vV3JhcCxcbiAgICAgIF9wcm9wcyRwYXJhZ3JhcGggPSBwcm9wcy5wYXJhZ3JhcGgsXG4gICAgICBwYXJhZ3JhcGggPSBfcHJvcHMkcGFyYWdyYXBoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRwYXJhZ3JhcGgsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdib2R5MScgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIF9wcm9wcyR2YXJpYW50TWFwcGluZyA9IHByb3BzLnZhcmlhbnRNYXBwaW5nLFxuICAgICAgdmFyaWFudE1hcHBpbmcgPSBfcHJvcHMkdmFyaWFudE1hcHBpbmcgPT09IHZvaWQgMCA/IGRlZmF1bHRWYXJpYW50TWFwcGluZyA6IF9wcm9wcyR2YXJpYW50TWFwcGluZyxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc3BsYXlcIiwgXCJndXR0ZXJCb3R0b21cIiwgXCJub1dyYXBcIiwgXCJwYXJhZ3JhcGhcIiwgXCJ2YXJpYW50XCIsIFwidmFyaWFudE1hcHBpbmdcIl0pO1xuXG4gIHZhciBDb21wb25lbnQgPSBjb21wb25lbnQgfHwgKHBhcmFncmFwaCA/ICdwJyA6IHZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdIHx8IGRlZmF1bHRWYXJpYW50TWFwcGluZ1t2YXJpYW50XSkgfHwgJ3NwYW4nO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIHZhcmlhbnQgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW3ZhcmlhbnRdLCBjb2xvciAhPT0gJ2luaXRpYWwnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBub1dyYXAgJiYgY2xhc3Nlcy5ub1dyYXAsIGd1dHRlckJvdHRvbSAmJiBjbGFzc2VzLmd1dHRlckJvdHRvbSwgcGFyYWdyYXBoICYmIGNsYXNzZXMucGFyYWdyYXBoLCBhbGlnbiAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJhbGlnblwiLmNvbmNhdChjYXBpdGFsaXplKGFsaWduKSldLCBkaXNwbGF5ICE9PSAnaW5pdGlhbCcgJiYgY2xhc3Nlc1tcImRpc3BsYXlcIi5jb25jYXQoY2FwaXRhbGl6ZShkaXNwbGF5KSldKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUeXBvZ3JhcGh5LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNldCB0aGUgdGV4dC1hbGlnbiBvbiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgYWxpZ246IFByb3BUeXBlcy5vbmVPZihbJ2luaGVyaXQnLCAnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnLCAnanVzdGlmeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2luaXRpYWwnLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICd0ZXh0UHJpbWFyeScsICd0ZXh0U2Vjb25kYXJ5JywgJ2Vycm9yJ10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQnkgZGVmYXVsdCwgaXQgbWFwcyB0aGUgdmFyaWFudCB0byBhIGdvb2QgZGVmYXVsdCBoZWFkbGluZSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQ29udHJvbHMgdGhlIGRpc3BsYXkgdHlwZVxuICAgKi9cbiAgZGlzcGxheTogUHJvcFR5cGVzLm9uZU9mKFsnaW5pdGlhbCcsICdibG9jaycsICdpbmxpbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBoYXZlIGEgYm90dG9tIG1hcmdpbi5cbiAgICovXG4gIGd1dHRlckJvdHRvbTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBub3Qgd3JhcCwgYnV0IGluc3RlYWQgd2lsbCB0cnVuY2F0ZSB3aXRoIGEgdGV4dCBvdmVyZmxvdyBlbGxpcHNpcy5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRleHQgb3ZlcmZsb3cgY2FuIG9ubHkgaGFwcGVuIHdpdGggYmxvY2sgb3IgaW5saW5lLWJsb2NrIGxldmVsIGVsZW1lbnRzXG4gICAqICh0aGUgZWxlbWVudCBuZWVkcyB0byBoYXZlIGEgd2lkdGggaW4gb3JkZXIgdG8gb3ZlcmZsb3cpLlxuICAgKi9cbiAgbm9XcmFwOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKi9cbiAgcGFyYWdyYXBoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgdGhlbWUgdHlwb2dyYXBoeSBzdHlsZXMuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJywgJ2JvZHkxJywgJ2JvZHkyJywgJ2NhcHRpb24nLCAnYnV0dG9uJywgJ292ZXJsaW5lJywgJ3NyT25seScsICdpbmhlcml0J10pLFxuXG4gIC8qKlxuICAgKiBXZSBhcmUgZW1waXJpY2FsbHkgbWFwcGluZyB0aGUgdmFyaWFudCBwcm9wIHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IERPTSBlbGVtZW50IHR5cGVzLlxuICAgKiBGb3IgaW5zdGFuY2UsIHN1YnRpdGxlMSB0byBgPGg2PmAuXG4gICAqIElmIHlvdSB3aXNoIHRvIGNoYW5nZSB0aGF0IG1hcHBpbmcsIHlvdSBjYW4gcHJvdmlkZSB5b3VyIG93bi5cbiAgICogQWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIGBjb21wb25lbnRgIHByb3AuXG4gICAqL1xuICB2YXJpYW50TWFwcGluZzogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUeXBvZ3JhcGh5J1xufSkoVHlwb2dyYXBoeSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHlcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnLi4vVHlwb2dyYXBoeSc7XG5pbXBvcnQgeyBlbXBoYXNpemUgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvcic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgZW1waGFzaXMgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAwLjggOiAwLjk4O1xuICB2YXIgYmFja2dyb3VuZENvbG9yID0gZW1waGFzaXplKHRoZW1lLnBhbGV0dGUuYmFja2dyb3VuZC5kZWZhdWx0LCBlbXBoYXNpcyk7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmRDb2xvciksXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvcixcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgIHBhZGRpbmc6ICc2cHggMTZweCcsXG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1cyxcbiAgICAgIGZsZXhHcm93OiAxXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIGZsZXhHcm93OiAnaW5pdGlhbCcsXG4gICAgICBtaW5XaWR0aDogMjg4XG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgbWVzc2FnZSB3cmFwcGVyIGVsZW1lbnQuICovXG4gICAgbWVzc2FnZToge1xuICAgICAgcGFkZGluZzogJzhweCAwJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYWN0aW9uIHdyYXBwZXIgZWxlbWVudCBpZiBgYWN0aW9uYCBpcyBwcm92aWRlZC4gKi9cbiAgICBhY3Rpb246IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgbWFyZ2luTGVmdDogJ2F1dG8nLFxuICAgICAgcGFkZGluZ0xlZnQ6IDE2LFxuICAgICAgbWFyZ2luUmlnaHQ6IC04XG4gICAgfVxuICB9O1xufTtcbnZhciBTbmFja2JhckNvbnRlbnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNuYWNrYmFyQ29udGVudChwcm9wcywgcmVmKSB7XG4gIHZhciBhY3Rpb24gPSBwcm9wcy5hY3Rpb24sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG1lc3NhZ2UgPSBwcm9wcy5tZXNzYWdlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGlvblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJtZXNzYWdlXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlciwgX2V4dGVuZHMoe1xuICAgIGNvbXBvbmVudDogVHlwb2dyYXBoeSxcbiAgICB2YXJpYW50OiBcImJvZHkyXCIsXG4gICAgdmFyaWFudE1hcHBpbmc6IHtcbiAgICAgIGJvZHkxOiAnZGl2JyxcbiAgICAgIGJvZHkyOiAnZGl2J1xuICAgIH0sXG4gICAgcm9sZTogXCJhbGVydGRpYWxvZ1wiLFxuICAgIHNxdWFyZTogdHJ1ZSxcbiAgICBlbGV2YXRpb246IDYsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5tZXNzYWdlXG4gIH0sIG1lc3NhZ2UpLCBhY3Rpb24gPyBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuYWN0aW9uXG4gIH0sIGFjdGlvbikgOiBudWxsKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU25hY2tiYXJDb250ZW50LnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBhY3Rpb24gdG8gZGlzcGxheS5cbiAgICovXG4gIGFjdGlvbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXkuXG4gICAqL1xuICBtZXNzYWdlOiBQcm9wVHlwZXMubm9kZVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTbmFja2JhckNvbnRlbnQnXG59KShTbmFja2JhckNvbnRlbnQpOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuaW1wb3J0IENsaWNrQXdheUxpc3RlbmVyIGZyb20gJy4uL0NsaWNrQXdheUxpc3RlbmVyJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuaW1wb3J0IGNyZWF0ZUNoYWluZWRGdW5jdGlvbiBmcm9tICcuLi91dGlscy9jcmVhdGVDaGFpbmVkRnVuY3Rpb24nO1xuaW1wb3J0IEdyb3cgZnJvbSAnLi4vR3Jvdyc7XG5pbXBvcnQgU25hY2tiYXJDb250ZW50IGZyb20gJy4uL1NuYWNrYmFyQ29udGVudCc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgdG9wMSA9IHtcbiAgICB0b3A6IDhcbiAgfTtcbiAgdmFyIGJvdHRvbTEgPSB7XG4gICAgYm90dG9tOiA4XG4gIH07XG4gIHZhciByaWdodCA9IHtcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJ1xuICB9O1xuICB2YXIgbGVmdCA9IHtcbiAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnXG4gIH07XG4gIHZhciB0b3AzID0ge1xuICAgIHRvcDogMjRcbiAgfTtcbiAgdmFyIGJvdHRvbTMgPSB7XG4gICAgYm90dG9tOiAyNFxuICB9O1xuICB2YXIgcmlnaHQzID0ge1xuICAgIHJpZ2h0OiAyNFxuICB9O1xuICB2YXIgbGVmdDMgPSB7XG4gICAgbGVmdDogMjRcbiAgfTtcbiAgdmFyIGNlbnRlciA9IHtcbiAgICBsZWZ0OiAnNTAlJyxcbiAgICByaWdodDogJ2F1dG8nLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknXG4gIH07XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5zbmFja2JhcixcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgbGVmdDogOCxcbiAgICAgIHJpZ2h0OiA4LFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICd0b3AnLCAnY2VudGVyJyB9fWAuICovXG4gICAgYW5jaG9yT3JpZ2luVG9wQ2VudGVyOiBfZXh0ZW5kcyh7fSwgdG9wMSwgX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwgX2V4dGVuZHMoe30sIHRvcDMsIHt9LCBjZW50ZXIpKSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ2JvdHRvbScsICdjZW50ZXInIH19YC4gKi9cbiAgICBhbmNob3JPcmlnaW5Cb3R0b21DZW50ZXI6IF9leHRlbmRzKHt9LCBib3R0b20xLCBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCBfZXh0ZW5kcyh7fSwgYm90dG9tMywge30sIGNlbnRlcikpKSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFuY2hvck9yaWdpbj17eyAndG9wJywgJ3JpZ2h0JyB9fWAuICovXG4gICAgYW5jaG9yT3JpZ2luVG9wUmlnaHQ6IF9leHRlbmRzKHt9LCB0b3AxLCB7fSwgcmlnaHQsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIF9leHRlbmRzKHtcbiAgICAgIGxlZnQ6ICdhdXRvJ1xuICAgIH0sIHRvcDMsIHt9LCByaWdodDMpKSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ2JvdHRvbScsICdyaWdodCcgfX1gLiAqL1xuICAgIGFuY2hvck9yaWdpbkJvdHRvbVJpZ2h0OiBfZXh0ZW5kcyh7fSwgYm90dG9tMSwge30sIHJpZ2h0LCBfZGVmaW5lUHJvcGVydHkoe30sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCBfZXh0ZW5kcyh7XG4gICAgICBsZWZ0OiAnYXV0bydcbiAgICB9LCBib3R0b20zLCB7fSwgcmlnaHQzKSkpLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICd0b3AnLCAnbGVmdCcgfX1gLiAqL1xuICAgIGFuY2hvck9yaWdpblRvcExlZnQ6IF9leHRlbmRzKHt9LCB0b3AxLCB7fSwgbGVmdCwgX2RlZmluZVByb3BlcnR5KHt9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwgX2V4dGVuZHMoe1xuICAgICAgcmlnaHQ6ICdhdXRvJ1xuICAgIH0sIHRvcDMsIHt9LCBsZWZ0MykpKSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFuY2hvck9yaWdpbj17eyAnYm90dG9tJywgJ2xlZnQnIH19YC4gKi9cbiAgICBhbmNob3JPcmlnaW5Cb3R0b21MZWZ0OiBfZXh0ZW5kcyh7fSwgYm90dG9tMSwge30sIGxlZnQsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIF9leHRlbmRzKHtcbiAgICAgIHJpZ2h0OiAnYXV0bydcbiAgICB9LCBib3R0b20zLCB7fSwgbGVmdDMpKSlcbiAgfTtcbn07XG52YXIgU25hY2tiYXIgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNuYWNrYmFyKHByb3BzLCByZWYpIHtcbiAgdmFyIGFjdGlvbiA9IHByb3BzLmFjdGlvbixcbiAgICAgIF9wcm9wcyRhbmNob3JPcmlnaW4gPSBwcm9wcy5hbmNob3JPcmlnaW47XG4gIF9wcm9wcyRhbmNob3JPcmlnaW4gPSBfcHJvcHMkYW5jaG9yT3JpZ2luID09PSB2b2lkIDAgPyB7XG4gICAgdmVydGljYWw6ICdib3R0b20nLFxuICAgIGhvcml6b250YWw6ICdjZW50ZXInXG4gIH0gOiBfcHJvcHMkYW5jaG9yT3JpZ2luO1xuXG4gIHZhciB2ZXJ0aWNhbCA9IF9wcm9wcyRhbmNob3JPcmlnaW4udmVydGljYWwsXG4gICAgICBob3Jpem9udGFsID0gX3Byb3BzJGFuY2hvck9yaWdpbi5ob3Jpem9udGFsLFxuICAgICAgYXV0b0hpZGVEdXJhdGlvbiA9IHByb3BzLmF1dG9IaWRlRHVyYXRpb24sXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBDbGlja0F3YXlMaXN0ZW5lclByb3BzID0gcHJvcHMuQ2xpY2tBd2F5TGlzdGVuZXJQcm9wcyxcbiAgICAgIENvbnRlbnRQcm9wcyA9IHByb3BzLkNvbnRlbnRQcm9wcyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlV2luZG93QiA9IHByb3BzLmRpc2FibGVXaW5kb3dCbHVyTGlzdGVuZXIsXG4gICAgICBkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyID0gX3Byb3BzJGRpc2FibGVXaW5kb3dCID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlV2luZG93QixcbiAgICAgIG1lc3NhZ2UgPSBwcm9wcy5tZXNzYWdlLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIG9uTW91c2VFbnRlciA9IHByb3BzLm9uTW91c2VFbnRlcixcbiAgICAgIG9uTW91c2VMZWF2ZSA9IHByb3BzLm9uTW91c2VMZWF2ZSxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgcmVzdW1lSGlkZUR1cmF0aW9uID0gcHJvcHMucmVzdW1lSGlkZUR1cmF0aW9uLFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Db21wID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPT09IHZvaWQgMCA/IEdyb3cgOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPSBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPT09IHZvaWQgMCA/IHtcbiAgICBlbnRlcjogZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlblxuICB9IDogX3Byb3BzJHRyYW5zaXRpb25EdXJhLFxuICAgICAgVHJhbnNpdGlvblByb3BzID0gcHJvcHMuVHJhbnNpdGlvblByb3BzLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGlvblwiLCBcImFuY2hvck9yaWdpblwiLCBcImF1dG9IaWRlRHVyYXRpb25cIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJDbGlja0F3YXlMaXN0ZW5lclByb3BzXCIsIFwiQ29udGVudFByb3BzXCIsIFwiZGlzYWJsZVdpbmRvd0JsdXJMaXN0ZW5lclwiLCBcIm1lc3NhZ2VcIiwgXCJvbkNsb3NlXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9uTW91c2VFbnRlclwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9wZW5cIiwgXCJyZXN1bWVIaWRlRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsIFwiVHJhbnNpdGlvblByb3BzXCJdKTtcblxuICB2YXIgdGltZXJBdXRvSGlkZSA9IFJlYWN0LnVzZVJlZigpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSh0cnVlKSxcbiAgICAgIGV4aXRlZCA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldEV4aXRlZCA9IF9SZWFjdCR1c2VTdGF0ZVsxXTsgLy8gVGltZXIgdGhhdCBjb250cm9scyBkZWxheSBiZWZvcmUgc25hY2tiYXIgYXV0byBoaWRlc1xuXG5cbiAgdmFyIHNldEF1dG9IaWRlVGltZXIgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoYXV0b0hpZGVEdXJhdGlvblBhcmFtKSB7XG4gICAgdmFyIGF1dG9IaWRlRHVyYXRpb25CZWZvcmUgPSBhdXRvSGlkZUR1cmF0aW9uUGFyYW0gIT0gbnVsbCA/IGF1dG9IaWRlRHVyYXRpb25QYXJhbSA6IGF1dG9IaWRlRHVyYXRpb247XG5cbiAgICBpZiAoIW9uQ2xvc2UgfHwgYXV0b0hpZGVEdXJhdGlvbkJlZm9yZSA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyQXV0b0hpZGUuY3VycmVudCk7XG4gICAgdGltZXJBdXRvSGlkZS5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYXV0b0hpZGVEdXJhdGlvbkFmdGVyID0gYXV0b0hpZGVEdXJhdGlvblBhcmFtICE9IG51bGwgPyBhdXRvSGlkZUR1cmF0aW9uUGFyYW0gOiBhdXRvSGlkZUR1cmF0aW9uO1xuXG4gICAgICBpZiAoIW9uQ2xvc2UgfHwgYXV0b0hpZGVEdXJhdGlvbkFmdGVyID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBvbkNsb3NlKG51bGwsICd0aW1lb3V0Jyk7XG4gICAgfSwgYXV0b0hpZGVEdXJhdGlvbkJlZm9yZSk7XG4gIH0sIFthdXRvSGlkZUR1cmF0aW9uLCBvbkNsb3NlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIHNldEF1dG9IaWRlVGltZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyQXV0b0hpZGUuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW29wZW4sIHNldEF1dG9IaWRlVGltZXJdKTsgLy8gUGF1c2UgdGhlIHRpbWVyIHdoZW4gdGhlIHVzZXIgaXMgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgU25hY2tiYXJcbiAgLy8gb3Igd2hlbiB0aGUgdXNlciBoaWRlIHRoZSB3aW5kb3cuXG5cbiAgdmFyIGhhbmRsZVBhdXNlID0gZnVuY3Rpb24gaGFuZGxlUGF1c2UoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyQXV0b0hpZGUuY3VycmVudCk7XG4gIH07IC8vIFJlc3RhcnQgdGhlIHRpbWVyIHdoZW4gdGhlIHVzZXIgaXMgbm8gbG9uZ2VyIGludGVyYWN0aW5nIHdpdGggdGhlIFNuYWNrYmFyXG4gIC8vIG9yIHdoZW4gdGhlIHdpbmRvdyBpcyBzaG93biBiYWNrLlxuXG5cbiAgdmFyIGhhbmRsZVJlc3VtZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXV0b0hpZGVEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICBpZiAocmVzdW1lSGlkZUR1cmF0aW9uICE9IG51bGwpIHtcbiAgICAgICAgc2V0QXV0b0hpZGVUaW1lcihyZXN1bWVIaWRlRHVyYXRpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNldEF1dG9IaWRlVGltZXIoYXV0b0hpZGVEdXJhdGlvbiAqIDAuNSk7XG4gICAgfVxuICB9LCBbYXV0b0hpZGVEdXJhdGlvbiwgcmVzdW1lSGlkZUR1cmF0aW9uLCBzZXRBdXRvSGlkZVRpbWVyXSk7XG5cbiAgdmFyIGhhbmRsZU1vdXNlRW50ZXIgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZUVudGVyKGV2ZW50KSB7XG4gICAgaWYgKG9uTW91c2VFbnRlcikge1xuICAgICAgb25Nb3VzZUVudGVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICBoYW5kbGVQYXVzZSgpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVNb3VzZUxlYXZlID0gZnVuY3Rpb24gaGFuZGxlTW91c2VMZWF2ZShldmVudCkge1xuICAgIGlmIChvbk1vdXNlTGVhdmUpIHtcbiAgICAgIG9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfVxuXG4gICAgaGFuZGxlUmVzdW1lKCk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNsaWNrQXdheSA9IGZ1bmN0aW9uIGhhbmRsZUNsaWNrQXdheShldmVudCkge1xuICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICBvbkNsb3NlKGV2ZW50LCAnY2xpY2thd2F5Jyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoKSB7XG4gICAgc2V0RXhpdGVkKHRydWUpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlciA9IGZ1bmN0aW9uIGhhbmRsZUVudGVyKCkge1xuICAgIHNldEV4aXRlZChmYWxzZSk7XG4gIH07XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWRpc2FibGVXaW5kb3dCbHVyTGlzdGVuZXIgJiYgb3Blbikge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgaGFuZGxlUmVzdW1lKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgaGFuZGxlUGF1c2UpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgaGFuZGxlUmVzdW1lKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCBoYW5kbGVQYXVzZSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtkaXNhYmxlV2luZG93Qmx1ckxpc3RlbmVyLCBoYW5kbGVSZXN1bWUsIG9wZW5dKTsgLy8gU28gd2Ugb25seSByZW5kZXIgYWN0aXZlIHNuYWNrYmFycy5cblxuICBpZiAoIW9wZW4gJiYgZXhpdGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDbGlja0F3YXlMaXN0ZW5lciwgX2V4dGVuZHMoe1xuICAgIG9uQ2xpY2tBd2F5OiBoYW5kbGVDbGlja0F3YXlcbiAgfSwgQ2xpY2tBd2F5TGlzdGVuZXJQcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJhbmNob3JPcmlnaW5cIi5jb25jYXQoY2FwaXRhbGl6ZSh2ZXJ0aWNhbCkpLmNvbmNhdChjYXBpdGFsaXplKGhvcml6b250YWwpKV0sIGNsYXNzTmFtZSksXG4gICAgb25Nb3VzZUVudGVyOiBoYW5kbGVNb3VzZUVudGVyLFxuICAgIG9uTW91c2VMZWF2ZTogaGFuZGxlTW91c2VMZWF2ZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogdHJ1ZSxcbiAgICBpbjogb3BlbixcbiAgICBvbkVudGVyOiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oaGFuZGxlRW50ZXIsIG9uRW50ZXIpLFxuICAgIG9uRW50ZXJlZDogb25FbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IG9uRW50ZXJpbmcsXG4gICAgb25FeGl0OiBvbkV4aXQsXG4gICAgb25FeGl0ZWQ6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVFeGl0ZWQsIG9uRXhpdGVkKSxcbiAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgZGlyZWN0aW9uOiB2ZXJ0aWNhbCA9PT0gJ3RvcCcgPyAnZG93bicgOiAndXAnXG4gIH0sIFRyYW5zaXRpb25Qcm9wcyksIGNoaWxkcmVuIHx8IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU25hY2tiYXJDb250ZW50LCBfZXh0ZW5kcyh7XG4gICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICBhY3Rpb246IGFjdGlvblxuICB9LCBDb250ZW50UHJvcHMpKSkpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU25hY2tiYXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGFjdGlvbiB0byBkaXNwbGF5LlxuICAgKi9cbiAgYWN0aW9uOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIGFuY2hvciBvZiB0aGUgYFNuYWNrYmFyYC5cbiAgICovXG4gIGFuY2hvck9yaWdpbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBQcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ2NlbnRlcicsICdyaWdodCddKS5pc1JlcXVpcmVkLFxuICAgIHZlcnRpY2FsOiBQcm9wVHlwZXMub25lT2YoWyd0b3AnLCAnYm90dG9tJ10pLmlzUmVxdWlyZWRcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGF1dG9tYXRpY2FsbHkgY2FsbGluZyB0aGVcbiAgICogYG9uQ2xvc2VgIGZ1bmN0aW9uLiBgb25DbG9zZWAgc2hvdWxkIHRoZW4gc2V0IHRoZSBzdGF0ZSBvZiB0aGUgYG9wZW5gXG4gICAqIHByb3AgdG8gaGlkZSB0aGUgU25hY2tiYXIuIFRoaXMgYmVoYXZpb3IgaXMgZGlzYWJsZWQgYnkgZGVmYXVsdCB3aXRoXG4gICAqIHRoZSBgbnVsbGAgdmFsdWUuXG4gICAqL1xuICBhdXRvSGlkZUR1cmF0aW9uOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlIHRoZSBgU25hY2tiYXJDb250ZW50YCBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGBDbGlja0F3YXlMaXN0ZW5lcmAgZWxlbWVudC5cbiAgICovXG4gIENsaWNrQXdheUxpc3RlbmVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgU25hY2tiYXJDb250ZW50YF0oL2FwaS9zbmFja2Jhci1jb250ZW50LykgZWxlbWVudC5cbiAgICovXG4gIENvbnRlbnRQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYGF1dG9IaWRlRHVyYXRpb25gIHRpbWVyIHdpbGwgZXhwaXJlIGV2ZW4gaWYgdGhlIHdpbmRvdyBpcyBub3QgZm9jdXNlZC5cbiAgICovXG4gIGRpc2FibGVXaW5kb3dCbHVyTGlzdGVuZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIGRpc3BsYXlpbmcgbXVsdGlwbGUgY29uc2VjdXRpdmUgU25hY2tiYXJzIGZyb20gYSBwYXJlbnQgcmVuZGVyaW5nIGEgc2luZ2xlXG4gICAqIDxTbmFja2Jhci8+LCBhZGQgdGhlIGtleSBwcm9wIHRvIGVuc3VyZSBpbmRlcGVuZGVudCB0cmVhdG1lbnQgb2YgZWFjaCBtZXNzYWdlLlxuICAgKiBlLmcuIDxTbmFja2JhciBrZXk9e21lc3NhZ2V9IC8+LCBvdGhlcndpc2UsIHRoZSBtZXNzYWdlIG1heSB1cGRhdGUtaW4tcGxhY2UgYW5kXG4gICAqIGZlYXR1cmVzIHN1Y2ggYXMgYXV0b0hpZGVEdXJhdGlvbiBtYXkgYmUgY2FuY2VsZWQuXG4gICAqL1xuICBrZXk6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXkuXG4gICAqL1xuICBtZXNzYWdlOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVHlwaWNhbGx5IGBvbkNsb3NlYCBpcyB1c2VkIHRvIHNldCBzdGF0ZSBpbiB0aGUgcGFyZW50IGNvbXBvbmVudCxcbiAgICogd2hpY2ggaXMgdXNlZCB0byBjb250cm9sIHRoZSBgU25hY2tiYXJgIGBvcGVuYCBwcm9wLlxuICAgKiBUaGUgYHJlYXNvbmAgcGFyYW1ldGVyIGNhbiBvcHRpb25hbGx5IGJlIHVzZWQgdG8gY29udHJvbCB0aGUgcmVzcG9uc2UgdG8gYG9uQ2xvc2VgLFxuICAgKiBmb3IgZXhhbXBsZSBpZ25vcmluZyBgY2xpY2thd2F5YC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIENhbiBiZTpgXCJ0aW1lb3V0XCJgIChgYXV0b0hpZGVEdXJhdGlvbmAgZXhwaXJlZCkgb3I6IGBcImNsaWNrYXdheVwiYC5cbiAgICovXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIHRyYW5zaXRpb24gaXMgZW50ZXJpbmcuXG4gICAqL1xuICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdHJhbnNpdGlvbiBoYXMgZW50ZXJlZC5cbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgZW50ZXJpbmcuXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSB0cmFuc2l0aW9uIGlzIGV4aXRpbmcuXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB0cmFuc2l0aW9uIGhhcyBleGl0ZWQuXG4gICAqL1xuICBvbkV4aXRlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgZXhpdGluZy5cbiAgICovXG4gIG9uRXhpdGluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VFbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIGBTbmFja2JhcmAgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBkaXNtaXNzaW5nIGFmdGVyIHVzZXIgaW50ZXJhY3Rpb24uXG4gICAqIElmIGBhdXRvSGlkZUR1cmF0aW9uYCBwcm9wIGlzbid0IHNwZWNpZmllZCwgaXQgZG9lcyBub3RoaW5nLlxuICAgKiBJZiBgYXV0b0hpZGVEdXJhdGlvbmAgcHJvcCBpcyBzcGVjaWZpZWQgYnV0IGByZXN1bWVIaWRlRHVyYXRpb25gIGlzbid0LFxuICAgKiB3ZSBkZWZhdWx0IHRvIGBhdXRvSGlkZUR1cmF0aW9uIC8gMmAgbXMuXG4gICAqL1xuICByZXN1bWVIaWRlRHVyYXRpb246IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHRyYW5zaXRpb24uXG4gICAqL1xuICBUcmFuc2l0aW9uQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgYFRyYW5zaXRpb25gIGVsZW1lbnQuXG4gICAqL1xuICBUcmFuc2l0aW9uUHJvcHM6IFByb3BUeXBlcy5vYmplY3Rcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBmbGlwOiBmYWxzZSxcbiAgbmFtZTogJ011aVNuYWNrYmFyJ1xufSkoU25hY2tiYXIpOyIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xyXG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbic7XHJcbmltcG9ydCBTbmFja2JhciBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9TbmFja2Jhcic7XHJcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0ljb25CdXR0b24nO1xyXG5pbXBvcnQgQ2xvc2VJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9pY29ucy9DbG9zZSc7XHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKHRoZW1lID0+ICh7XHJcbiAgICBjbG9zZToge1xyXG4gICAgICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMC41KSxcclxuICAgIH0sXHJcbn0pKTtcclxuXHJcbi8qIFxyXG4gICAgVGhpcyBpcyB0aGUgc2hhcmVkIChkeW5hbWljKSBjb21wb25lbnQgbGF5b3V0IHdoaWNoIGJlaW5nIGNhbGxpbmcgaW4gYWZldyBwYXJ0IG9mIHRoZSBjb2RlXHJcbiAgICB3aGljaCBpcyBmb3IgT25EZWxldGUgdGhlIG5vdGUgYW5kIGdpdmUgbm90aWZpY2F0aW9uIGlmIGl0cyBlbXB0eVxyXG4qL1xyXG5jb25zdCBTbmFjayA9IHByb3BzID0+IHtcclxuICAgIGNvbnN0IHF1ZXVlUmVmID0gUmVhY3QudXNlUmVmKFtdKTtcclxuICAgIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFttZXNzYWdlSW5mbywgc2V0TWVzc2FnZUluZm9dID0gUmVhY3QudXNlU3RhdGUodW5kZWZpbmVkKTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmIChwcm9wcy5zbmFja0ZsYWcpIHtcclxuICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBwcm9wcy5tZXNzYWdlO1xyXG4gICAgICAgICAgICBxdWV1ZVJlZi5jdXJyZW50LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSxcclxuICAgICAgICAgICAgICAgIGtleTogbmV3IERhdGUoKS5nZXRUaW1lKCksXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9wZW4pIHtcclxuICAgICAgICAgICAgICAgIC8vIGltbWVkaWF0ZWx5IGJlZ2luIGRpc21pc3NpbmcgY3VycmVudCBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAvLyB0byBzdGFydCBzaG93aW5nIG5ldyBvbmVcclxuICAgICAgICAgICAgICAgIHNldE9wZW4oZmFsc2UpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1F1ZXVlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZXRPcGVuKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbcHJvcHNdKTtcclxuXHJcbiAgICBjb25zdCBwcm9jZXNzUXVldWUgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHF1ZXVlUmVmLmN1cnJlbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBzZXRNZXNzYWdlSW5mbyhxdWV1ZVJlZi5jdXJyZW50LnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICBzZXRPcGVuKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2xvc2UgPSAoZXZlbnQsIHJlYXNvbikgPT4ge1xyXG4gICAgICAgIGlmIChyZWFzb24gPT09ICdjbGlja2F3YXknKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0T3BlbihmYWxzZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZUV4aXRlZCA9ICgpID0+IHtcclxuICAgICAgICBwcm9jZXNzUXVldWUoKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8U25hY2tiYXJcclxuICAgICAgICAgICAgICAgIGtleT17bWVzc2FnZUluZm8gPyBtZXNzYWdlSW5mby5rZXkgOiB1bmRlZmluZWR9XHJcbiAgICAgICAgICAgICAgICBhbmNob3JPcmlnaW49e3tcclxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogJ2JvdHRvbScsXHJcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogJ2NlbnRlcicsXHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgb3Blbj17b3Blbn1cclxuICAgICAgICAgICAgICAgIGF1dG9IaWRlRHVyYXRpb249ezIwMDB9XHJcbiAgICAgICAgICAgICAgICBvbkNsb3NlPXtoYW5kbGVDbG9zZX1cclxuICAgICAgICAgICAgICAgIG9uRXhpdGVkPXtoYW5kbGVFeGl0ZWR9XHJcbiAgICAgICAgICAgICAgICBDb250ZW50UHJvcHM9e3tcclxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1kZXNjcmliZWRieSc6ICdtZXNzYWdlLWlkJyxcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlPXs8c3BhbiBpZD1cIm1lc3NhZ2UtaWRcIj57bWVzc2FnZUluZm8gPyBtZXNzYWdlSW5mby5tZXNzYWdlIDogdW5kZWZpbmVkfTwvc3Bhbj59XHJcbiAgICAgICAgICAgICAgICBhY3Rpb249e3Byb3BzLmhhc0FjdGlvbiAmJiBbXHJcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBrZXk9XCJ1bmRvXCIgY29sb3I9XCJzZWNvbmRhcnlcIiBzaXplPVwic21hbGxcIiBvbkNsaWNrPXtwcm9wcy5vblVuZG99PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBVTkRPXHJcbiAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+LFxyXG4gICAgICAgICAgICAgICAgXX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNuYWNrOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xyXG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcclxuaW1wb3J0IHsgRXhwYW5zaW9uUGFuZWwsIEV4cGFuc2lvblBhbmVsRGV0YWlscywgRXhwYW5zaW9uUGFuZWxTdW1tYXJ5LCBFeHBhbnNpb25QYW5lbEFjdGlvbnMsIEljb24sIEJ1dHRvbiwgRGl2aWRlciwgSW5wdXRCYXNlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xyXG5pbXBvcnQgU25hY2tiYXIgZnJvbSAnLi9TbmFja2Jhcic7XHJcblxyXG4vKiBcclxuICBUaGlzIGNvbnRhaW5lciB3aWxsIGNyZWF0ZSB0aGUgY2FyZHMgYmFzZWQgb24gdGhlIGNsb3NlIGNsaWNrICxcclxuICBjbG9zZSBidG4gaXMga2luZCBvZiBkeW5hbWljLCB3aGljaCB3aWxsIHNhdmUgdGhlIGRhdGEgaWYgdGl0bGUgYW5kIG5vdGUgYXJlIGJlaW5nIG1hZGVcclxuKi9cclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXModGhlbWUgPT4gKHtcclxuICByb290OiB7XHJcbiAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgcGFkZGluZ1RvcDogJy43ZW0nLFxyXG4gICAgcGFkZGluZ0JvdHRvbTogJzEuNmVtJ1xyXG4gIH0sXHJcbiAgcGFuZWw6IHtcclxuICAgIGJvcmRlcjogXCIycHggc29saWQgI2NjY1wiLFxyXG4gICAgYm94U2hhZG93OiBcIjBweCAwcHggNHB4IDRweCAjY2NjY2NjNTJcIlxyXG4gIH0sXHJcbiAgdGljazoge1xyXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICByaWdodDogJzIwcHgnLFxyXG4gICAgdG9wOiBcIjE1cHhcIlxyXG4gIH0sXHJcbiAgaGVhZGluZzoge1xyXG4gICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSksXHJcbiAgfSxcclxuICB0aXRsZToge1xyXG4gICAgZm9udFNpemU6IFwiMS4yNXJlbVwiLFxyXG4gICAgZm9udFdlaWdodDogXCI1MDBcIixcclxuICAgIGxpbmVIZWlnaHQ6IFwiMS42XCIsXHJcbiAgICBsZXR0ZXJTcGFjaW5nOiBcIjAuMDA3NWVtXCIsXHJcbiAgICBjb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDAuNTQpXCIsXHJcbiAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICBmbGV4OiAxLFxyXG4gIH0sXHJcbiAgc2Vjb25kYXJ5SGVhZGluZzoge1xyXG4gICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSksXHJcbiAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcclxuICB9LFxyXG4gIGljb246IHtcclxuICAgIHZlcnRpY2FsQWxpZ246ICdib3R0b20nLFxyXG4gICAgaGVpZ2h0OiAyMCxcclxuICAgIHdpZHRoOiAyMCxcclxuICB9LFxyXG4gIGRldGFpbHM6IHtcclxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG4gIH0sXHJcbiAgY29sdW1uOiB7XHJcbiAgICBmbGV4QmFzaXM6ICczMy4zMyUnLFxyXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgZmxleDogMSxcclxuICAgIHBhZGRpbmdSaWdodDogJzQuNGVtJ1xyXG4gIH0sXHJcbiAgY29sdW1uMTAwOiB7XHJcbiAgICB3aWR0aDogJzEwMCUnLFxyXG4gIH0sXHJcbiAgdGV4dGFyZWE6IHtcclxuICAgIGJvcmRlcjogJ25vbmUnLFxyXG4gICAgb3V0bGluZTogJ25vbmUnLFxyXG4gICAgd2lkdGg6ICcxMDAlJyxcclxuICAgIGhlaWdodDogJzEwMCUnLFxyXG4gICAgcmVzaXplOiAnbm9uZScsXHJcbiAgICBmb250U2l6ZTogXCIwLjg3NXJlbVwiLFxyXG4gICAgZm9udEZhbWlseTogXCJSb2JvdG8sIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWZcIlxyXG4gIH0sXHJcbiAgaGVscGVyOiB7XHJcbiAgICBib3JkZXJMZWZ0OiBgMnB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5kaXZpZGVyfWAsXHJcbiAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDEsIDIpLFxyXG4gIH0sXHJcbiAgbGluazoge1xyXG4gICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxyXG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcclxuICAgICcmOmhvdmVyJzoge1xyXG4gICAgICB0ZXh0RGVjb3JhdGlvbjogJ3VuZGVybGluZScsXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pKTtcclxuXHJcbmNvbnN0IEFkZEJveCA9IHByb3BzID0+IHtcclxuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcblxyXG4gIGNvbnN0IFtpc0V4cGFuZGVkLCBzZXRFeHBhbmRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW3RpdGxlLCBzZXRUaXRsZV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICBjb25zdCBbbm90ZSwgc2V0Tm90ZV0gPSB1c2VTdGF0ZShcIlwiKTtcclxuICBjb25zdCBbdGl0bGVQbGFjZWhvbGRlciwgc2V0VGl0bGVQbGFjZWhvbGRlcl0gPSB1c2VTdGF0ZShcIlRha2UgYSBub3RlLi4uXCIpO1xyXG4gIGNvbnN0IFtzbmFja0ZsYWcsIHNldFNuYWNrRmxhZ10gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gIC8qIFxyXG4gICAgY2FsbGluZyBhY3Rpb24gZnJvbSBwYXJlbnRzIHRvIGNyZWF0ZSBub3RlXHJcbiAgKi9cclxuICBjb25zdCBtYWtlTm90ZSA9ICgpID0+IHtcclxuICAgIHByb3BzLmNyZWF0ZU5vdGUodGl0bGUsIG5vdGUpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9uVGl0bGVDbGljayA9ICgpID0+IHtcclxuICAgIHNldFRpdGxlUGxhY2Vob2xkZXIoXCJUaXRsZVwiKVxyXG4gICAgc2V0RXhwYW5kZWQodHJ1ZSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgb25DYW5jZWxDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgaWYgKHRpdGxlICYmIG5vdGUpIHtcclxuICAgICAgbWFrZU5vdGUodGl0bGUsIG5vdGUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2V0U25hY2tGbGFnKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBzZXRTbmFja0ZsYWcoZmFsc2UpO1xyXG4gICAgfSwgMTAwMCk7XHJcblxyXG4gICAgc2V0VGl0bGVQbGFjZWhvbGRlcihcIlRha2UgYSBub3RlLi4uXCIpO1xyXG4gICAgc2V0VGl0bGUoXCJcIik7XHJcbiAgICBzZXROb3RlKFwiXCIpO1xyXG4gICAgc2V0RXhwYW5kZWQoZmFsc2UpO1xyXG4gIH07XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9PlxyXG4gICAgICA8U25hY2tiYXIgaGFzQWN0aW9uPXtmYWxzZX0gbWVzc2FnZT17XCJNYWtlIGEgbm90ZSBhbmQgZ2l2ZSBpdCBhIHRpdGxlLi4uXCJ9IHNuYWNrRmxhZz17c25hY2tGbGFnfSAvPlxyXG4gICAgICA8RXhwYW5zaW9uUGFuZWwgY2xhc3NOYW1lPXtjbGFzc2VzLnBhbmVsfVxyXG4gICAgICAgIGV4cGFuZGVkPXtpc0V4cGFuZGVkfT5cclxuICAgICAgICA8RXhwYW5zaW9uUGFuZWxTdW1tYXJ5XHJcbiAgICAgICAgICBhcmlhLWNvbnRyb2xzPVwicGFuZWwxYy1jb250ZW50XCJcclxuICAgICAgICAgIGlkPVwicGFuZWwxYy1oZWFkZXJcIlxyXG4gICAgICAgICAgb25DbGljaz17KGV2ZW50KSA9PiB7IG9uVGl0bGVDbGljaygpIH19XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuY29sdW1ufT5cclxuICAgICAgICAgICAgPElucHV0QmFzZVxyXG4gICAgICAgICAgICAgIHZhbHVlPXt0aXRsZX1cclxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMudGl0bGV9XHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3RpdGxlUGxhY2Vob2xkZXJ9XHJcbiAgICAgICAgICAgICAgaW5wdXRQcm9wcz17eyAnYXJpYS1sYWJlbCc6ICd0aXRsZScgfX1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHsgc2V0VGl0bGUoZS50YXJnZXQudmFsdWUpIH19XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxJY29uIGNsYXNzTmFtZT17Y2xhc3Nlcy50aWNrfT5jaGVjazwvSWNvbj5cclxuICAgICAgICA8L0V4cGFuc2lvblBhbmVsU3VtbWFyeT5cclxuICAgICAgICA8RXhwYW5zaW9uUGFuZWxEZXRhaWxzIGNsYXNzTmFtZT17Y2xhc3Nlcy5kZXRhaWxzfT5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmNvbHVtbjEwMH0+XHJcbiAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzc05hbWU9e2NsYXNzZXMudGV4dGFyZWF9XHJcbiAgICAgICAgICAgICAgdmFsdWU9e25vdGV9XHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJXcml0ZSBoZXJlLi4uXCJcclxuICAgICAgICAgICAgICBpZD1cIm5hbWVzXCJcclxuICAgICAgICAgICAgICBuYW1lPVwiaGFyZFwiXHJcbiAgICAgICAgICAgICAgcm93cz17MTB9XHJcbiAgICAgICAgICAgICAgd3JhcD1cImhhcmRcIlxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4geyBzZXROb3RlKGUudGFyZ2V0LnZhbHVlKSB9fT5cclxuICAgICAgICAgICAgPC90ZXh0YXJlYT5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvRXhwYW5zaW9uUGFuZWxEZXRhaWxzPlxyXG4gICAgICAgIDxEaXZpZGVyIC8+XHJcbiAgICAgICAgPEV4cGFuc2lvblBhbmVsQWN0aW9ucz5cclxuICAgICAgICAgIDxCdXR0b24gc2l6ZT1cInNtYWxsXCIgb25DbGljaz17KGV2ZW50KSA9PiB7IG9uQ2FuY2VsQ2xpY2soZXZlbnQpIH19PkNsb3NlPC9CdXR0b24+XHJcbiAgICAgICAgPC9FeHBhbnNpb25QYW5lbEFjdGlvbnM+XHJcbiAgICAgIDwvRXhwYW5zaW9uUGFuZWw+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBZGRCb3g7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4uL3V0aWxzL3NldFJlZic7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICBjb250YWluZXIgPSB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7IC8vICNTdHJpY3RNb2RlIHJlYWR5XG5cbiAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKGNvbnRhaW5lcik7XG59XG5cbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuLyoqXG4gKiBQb3J0YWxzIHByb3ZpZGUgYSBmaXJzdC1jbGFzcyB3YXkgdG8gcmVuZGVyIGNoaWxkcmVuIGludG8gYSBET00gbm9kZVxuICogdGhhdCBleGlzdHMgb3V0c2lkZSB0aGUgRE9NIGhpZXJhcmNoeSBvZiB0aGUgcGFyZW50IGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUG9ydGFsID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3J0YWwocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNvbnRhaW5lciA9IHByb3BzLmNvbnRhaW5lcixcbiAgICAgIF9wcm9wcyRkaXNhYmxlUG9ydGFsID0gcHJvcHMuZGlzYWJsZVBvcnRhbCxcbiAgICAgIGRpc2FibGVQb3J0YWwgPSBfcHJvcHMkZGlzYWJsZVBvcnRhbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVBvcnRhbCxcbiAgICAgIG9uUmVuZGVyZWQgPSBwcm9wcy5vblJlbmRlcmVkO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShudWxsKSxcbiAgICAgIG1vdW50Tm9kZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldE1vdW50Tm9kZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJlZik7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWRpc2FibGVQb3J0YWwpIHtcbiAgICAgIHNldE1vdW50Tm9kZShnZXRDb250YWluZXIoY29udGFpbmVyKSB8fCBkb2N1bWVudC5ib2R5KTtcbiAgICB9XG4gIH0sIFtjb250YWluZXIsIGRpc2FibGVQb3J0YWxdKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChtb3VudE5vZGUgJiYgIWRpc2FibGVQb3J0YWwpIHtcbiAgICAgIHNldFJlZihyZWYsIG1vdW50Tm9kZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBzZXRSZWYocmVmLCBudWxsKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSwgW3JlZiwgbW91bnROb2RlLCBkaXNhYmxlUG9ydGFsXSk7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAob25SZW5kZXJlZCAmJiAobW91bnROb2RlIHx8IGRpc2FibGVQb3J0YWwpKSB7XG4gICAgICBvblJlbmRlcmVkKCk7XG4gICAgfVxuICB9LCBbb25SZW5kZXJlZCwgbW91bnROb2RlLCBkaXNhYmxlUG9ydGFsXSk7XG5cbiAgaWYgKGRpc2FibGVQb3J0YWwpIHtcbiAgICBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKTtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7XG4gICAgICByZWY6IGhhbmRsZVJlZlxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG1vdW50Tm9kZSA/IFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChjaGlsZHJlbiwgbW91bnROb2RlKSA6IG1vdW50Tm9kZTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gUG9ydGFsLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjaGlsZHJlbiB0byByZW5kZXIgaW50byB0aGUgYGNvbnRhaW5lcmAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEEgbm9kZSwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLmluc3RhbmNlT2YoUmVhY3QuQ29tcG9uZW50KSwgUHJvcFR5cGVzLmluc3RhbmNlT2YodHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gT2JqZWN0IDogRWxlbWVudCldKSxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgcG9ydGFsIGJlaGF2aW9yLlxuICAgKiBUaGUgY2hpbGRyZW4gc3RheSB3aXRoaW4gaXQncyBwYXJlbnQgRE9NIGhpZXJhcmNoeS5cbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBvbmNlIHRoZSBjaGlsZHJlbiBoYXMgYmVlbiBtb3VudGVkIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKlxuICAgKiBUaGlzIHByb3Agd2lsbCBiZSBkZXByZWNhdGVkIGFuZCByZW1vdmVkIGluIHY1LCB0aGUgcmVmIGNhbiBiZSB1c2VkIGluc3RlYWQuXG4gICAqL1xuICBvblJlbmRlcmVkOiBQcm9wVHlwZXMuZnVuY1xufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIFBvcnRhbFsncHJvcFR5cGVzJyArICcnXSA9IGV4YWN0UHJvcChQb3J0YWwucHJvcFR5cGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9ydGFsOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFBvcHBlckpTIGZyb20gJ3BvcHBlci5qcyc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgcmVmVHlwZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgUG9ydGFsIGZyb20gJy4uL1BvcnRhbCc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4uL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4uL3V0aWxzL3NldFJlZic7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCBvd25lcldpbmRvdyBmcm9tICcuLi91dGlscy9vd25lcldpbmRvdyc7XG4vKipcbiAqIEZsaXBzIHBsYWNlbWVudCBpZiBpbiA8Ym9keSBkaXI9XCJydGxcIiAvPlxuICogQHBhcmFtIHtzdHJpbmd9IHBsYWNlbWVudFxuICovXG5cbmZ1bmN0aW9uIGZsaXBQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHZhciBkaXJlY3Rpb24gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5ib2R5LmdldEF0dHJpYnV0ZSgnZGlyJykgfHwgJ2x0cic7XG5cbiAgaWYgKGRpcmVjdGlvbiAhPT0gJ3J0bCcpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG5cbiAgc3dpdGNoIChwbGFjZW1lbnQpIHtcbiAgICBjYXNlICdib3R0b20tZW5kJzpcbiAgICAgIHJldHVybiAnYm90dG9tLXN0YXJ0JztcblxuICAgIGNhc2UgJ2JvdHRvbS1zdGFydCc6XG4gICAgICByZXR1cm4gJ2JvdHRvbS1lbmQnO1xuXG4gICAgY2FzZSAndG9wLWVuZCc6XG4gICAgICByZXR1cm4gJ3RvcC1zdGFydCc7XG5cbiAgICBjYXNlICd0b3Atc3RhcnQnOlxuICAgICAgcmV0dXJuICd0b3AtZW5kJztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFuY2hvckVsKGFuY2hvckVsKSB7XG4gIHJldHVybiB0eXBlb2YgYW5jaG9yRWwgPT09ICdmdW5jdGlvbicgPyBhbmNob3JFbCgpIDogYW5jaG9yRWw7XG59XG5cbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xudmFyIGRlZmF1bHRQb3BwZXJPcHRpb25zID0ge307XG4vKipcbiAqIFBvcHBlcnMgcmVseSBvbiB0aGUgM3JkIHBhcnR5IGxpYnJhcnkgW1BvcHBlci5qc10oaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMpIGZvciBwb3NpdGlvbmluZy5cbiAqL1xuXG52YXIgUG9wcGVyID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQb3BwZXIocHJvcHMsIHJlZikge1xuICB2YXIgYW5jaG9yRWwgPSBwcm9wcy5hbmNob3JFbCxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjb250YWluZXIgPSBwcm9wcy5jb250YWluZXIsXG4gICAgICBfcHJvcHMkZGlzYWJsZVBvcnRhbCA9IHByb3BzLmRpc2FibGVQb3J0YWwsXG4gICAgICBkaXNhYmxlUG9ydGFsID0gX3Byb3BzJGRpc2FibGVQb3J0YWwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVQb3J0YWwsXG4gICAgICBfcHJvcHMka2VlcE1vdW50ZWQgPSBwcm9wcy5rZWVwTW91bnRlZCxcbiAgICAgIGtlZXBNb3VudGVkID0gX3Byb3BzJGtlZXBNb3VudGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRrZWVwTW91bnRlZCxcbiAgICAgIG1vZGlmaWVycyA9IHByb3BzLm1vZGlmaWVycyxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgX3Byb3BzJHBsYWNlbWVudCA9IHByb3BzLnBsYWNlbWVudCxcbiAgICAgIGluaXRpYWxQbGFjZW1lbnQgPSBfcHJvcHMkcGxhY2VtZW50ID09PSB2b2lkIDAgPyAnYm90dG9tJyA6IF9wcm9wcyRwbGFjZW1lbnQsXG4gICAgICBfcHJvcHMkcG9wcGVyT3B0aW9ucyA9IHByb3BzLnBvcHBlck9wdGlvbnMsXG4gICAgICBwb3BwZXJPcHRpb25zID0gX3Byb3BzJHBvcHBlck9wdGlvbnMgPT09IHZvaWQgMCA/IGRlZmF1bHRQb3BwZXJPcHRpb25zIDogX3Byb3BzJHBvcHBlck9wdGlvbnMsXG4gICAgICBwb3BwZXJSZWZQcm9wID0gcHJvcHMucG9wcGVyUmVmLFxuICAgICAgX3Byb3BzJHRyYW5zaXRpb24gPSBwcm9wcy50cmFuc2l0aW9uLFxuICAgICAgdHJhbnNpdGlvbiA9IF9wcm9wcyR0cmFuc2l0aW9uID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyR0cmFuc2l0aW9uLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFuY2hvckVsXCIsIFwiY2hpbGRyZW5cIiwgXCJjb250YWluZXJcIiwgXCJkaXNhYmxlUG9ydGFsXCIsIFwia2VlcE1vdW50ZWRcIiwgXCJtb2RpZmllcnNcIiwgXCJvcGVuXCIsIFwicGxhY2VtZW50XCIsIFwicG9wcGVyT3B0aW9uc1wiLCBcInBvcHBlclJlZlwiLCBcInRyYW5zaXRpb25cIl0pO1xuXG4gIHZhciB0b29sdGlwUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgb3duUmVmID0gdXNlRm9ya1JlZih0b29sdGlwUmVmLCByZWYpO1xuICB2YXIgcG9wcGVyUmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICB2YXIgaGFuZGxlUG9wcGVyUmVmID0gdXNlRm9ya1JlZihwb3BwZXJSZWYsIHBvcHBlclJlZlByb3ApO1xuICB2YXIgaGFuZGxlUG9wcGVyUmVmUmVmID0gUmVhY3QudXNlUmVmKGhhbmRsZVBvcHBlclJlZik7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBoYW5kbGVQb3BwZXJSZWZSZWYuY3VycmVudCA9IGhhbmRsZVBvcHBlclJlZjtcbiAgfSwgW2hhbmRsZVBvcHBlclJlZl0pO1xuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKHBvcHBlclJlZlByb3AsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcG9wcGVyUmVmLmN1cnJlbnQ7XG4gIH0sIFtdKTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUodHJ1ZSksXG4gICAgICBleGl0ZWQgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRFeGl0ZWQgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIHJ0bFBsYWNlbWVudCA9IGZsaXBQbGFjZW1lbnQoaW5pdGlhbFBsYWNlbWVudCk7XG4gIC8qKlxuICAgKiBwbGFjZW1lbnQgaW5pdGlhbGl6ZWQgZnJvbSBwcm9wIGJ1dCBjYW4gY2hhbmdlIGR1cmluZyBsaWZldGltZSBpZiBtb2RpZmllcnMuZmxpcC5cbiAgICogbW9kaWZpZXJzLmZsaXAgaXMgZXNzZW50aWFsbHkgYSBmbGlwIGZvciBjb250cm9sbGVkL3VuY29udHJvbGxlZCBiZWhhdmlvclxuICAgKi9cblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMiA9IFJlYWN0LnVzZVN0YXRlKHJ0bFBsYWNlbWVudCksXG4gICAgICBwbGFjZW1lbnQgPSBfUmVhY3QkdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0UGxhY2VtZW50ID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgaGFuZGxlT3BlbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRvb2x0aXBSZWYuY3VycmVudCB8fCAhYW5jaG9yRWwgfHwgIW9wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocG9wcGVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHBvcHBlclJlZi5jdXJyZW50LmRlc3Ryb3koKTtcbiAgICAgIGhhbmRsZVBvcHBlclJlZlJlZi5jdXJyZW50KG51bGwpO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVQb3BwZXJVcGRhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BwZXJVcGRhdGUoZGF0YSkge1xuICAgICAgc2V0UGxhY2VtZW50KGRhdGEucGxhY2VtZW50KTtcbiAgICB9O1xuXG4gICAgdmFyIHJlc29sdmVkQW5jaG9yRWwgPSBnZXRBbmNob3JFbChhbmNob3JFbCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KHJlc29sdmVkQW5jaG9yRWwpO1xuXG4gICAgICBpZiAocmVzb2x2ZWRBbmNob3JFbCBpbnN0YW5jZW9mIGNvbnRhaW5lcldpbmRvdy5FbGVtZW50KSB7XG4gICAgICAgIHZhciBib3ggPSByZXNvbHZlZEFuY2hvckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmIGJveC50b3AgPT09IDAgJiYgYm94LmxlZnQgPT09IDAgJiYgYm94LnJpZ2h0ID09PSAwICYmIGJveC5ib3R0b20gPT09IDApIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogdGhlIGBhbmNob3JFbGAgcHJvcCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50IGlzIGludmFsaWQuJywgJ1RoZSBhbmNob3IgZWxlbWVudCBzaG91bGQgYmUgcGFydCBvZiB0aGUgZG9jdW1lbnQgbGF5b3V0LicsIFwiTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHByZXNlbnQgaW4gdGhlIGRvY3VtZW50IG9yIHRoYXQgaXQncyBub3QgZGlzcGxheSBub25lLlwiXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcG9wcGVyID0gbmV3IFBvcHBlckpTKGdldEFuY2hvckVsKGFuY2hvckVsKSwgdG9vbHRpcFJlZi5jdXJyZW50LCBfZXh0ZW5kcyh7XG4gICAgICBwbGFjZW1lbnQ6IHJ0bFBsYWNlbWVudFxuICAgIH0sIHBvcHBlck9wdGlvbnMsIHtcbiAgICAgIG1vZGlmaWVyczogX2V4dGVuZHMoe30sIGRpc2FibGVQb3J0YWwgPyB7fSA6IHtcbiAgICAgICAgLy8gSXQncyB1c2luZyBzY3JvbGxQYXJlbnQgYnkgZGVmYXVsdCwgd2UgY2FuIHVzZSB0aGUgdmlld3BvcnQgd2hlbiB1c2luZyBhIHBvcnRhbC5cbiAgICAgICAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgICAgICAgYm91bmRhcmllc0VsZW1lbnQ6ICd3aW5kb3cnXG4gICAgICAgIH1cbiAgICAgIH0sIHt9LCBtb2RpZmllcnMsIHt9LCBwb3BwZXJPcHRpb25zLm1vZGlmaWVycyksXG4gICAgICAvLyBXZSBjb3VsZCBoYXZlIGJlZW4gdXNpbmcgYSBjdXN0b20gbW9kaWZpZXIgbGlrZSByZWFjdC1wb3BwZXIgaXMgZG9pbmcuXG4gICAgICAvLyBCdXQgaXQgc2VlbXMgdGhpcyBpcyB0aGUgYmVzdCBwdWJsaWMgQVBJIGZvciB0aGlzIHVzZSBjYXNlLlxuICAgICAgb25DcmVhdGU6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVQb3BwZXJVcGRhdGUsIHBvcHBlck9wdGlvbnMub25DcmVhdGUpLFxuICAgICAgb25VcGRhdGU6IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihoYW5kbGVQb3BwZXJVcGRhdGUsIHBvcHBlck9wdGlvbnMub25VcGRhdGUpXG4gICAgfSkpO1xuICAgIGhhbmRsZVBvcHBlclJlZlJlZi5jdXJyZW50KHBvcHBlcik7XG4gIH0sIFthbmNob3JFbCwgZGlzYWJsZVBvcnRhbCwgbW9kaWZpZXJzLCBvcGVuLCBydGxQbGFjZW1lbnQsIHBvcHBlck9wdGlvbnNdKTtcbiAgdmFyIGhhbmRsZVJlZiA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgc2V0UmVmKG93blJlZiwgbm9kZSk7XG4gICAgaGFuZGxlT3BlbigpO1xuICB9LCBbb3duUmVmLCBoYW5kbGVPcGVuXSk7XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gZnVuY3Rpb24gaGFuZGxlRW50ZXIoKSB7XG4gICAgc2V0RXhpdGVkKGZhbHNlKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlQ2xvc2UgPSBmdW5jdGlvbiBoYW5kbGVDbG9zZSgpIHtcbiAgICBpZiAoIXBvcHBlclJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcG9wcGVyUmVmLmN1cnJlbnQuZGVzdHJveSgpO1xuICAgIGhhbmRsZVBvcHBlclJlZlJlZi5jdXJyZW50KG51bGwpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoKSB7XG4gICAgc2V0RXhpdGVkKHRydWUpO1xuICAgIGhhbmRsZUNsb3NlKCk7XG4gIH07XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAvLyBMZXQncyB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvbi5cbiAgICBoYW5kbGVPcGVuKCk7XG4gIH0sIFtoYW5kbGVPcGVuXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghb3BlbiAmJiAhdHJhbnNpdGlvbikge1xuICAgICAgLy8gT3RoZXJ3aXNlIGhhbmRsZUV4aXRlZCB3aWxsIGNhbGwgdGhpcy5cbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfVxuICB9LCBbb3BlbiwgdHJhbnNpdGlvbl0pO1xuXG4gIGlmICgha2VlcE1vdW50ZWQgJiYgIW9wZW4gJiYgKCF0cmFuc2l0aW9uIHx8IGV4aXRlZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBjaGlsZFByb3BzID0ge1xuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH07XG5cbiAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICBjaGlsZFByb3BzLlRyYW5zaXRpb25Qcm9wcyA9IHtcbiAgICAgIGluOiBvcGVuLFxuICAgICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBvcnRhbCwge1xuICAgIGRpc2FibGVQb3J0YWw6IGRpc2FibGVQb3J0YWwsXG4gICAgY29udGFpbmVyOiBjb250YWluZXJcbiAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgcm9sZTogXCJ0b29sdGlwXCIsXG4gICAgc3R5bGU6IHtcbiAgICAgIC8vIFByZXZlbnRzIHNjcm9sbCBpc3N1ZSwgd2FpdGluZyBmb3IgUG9wcGVyLmpzIHRvIGFkZCB0aGlzIHN0eWxlIG9uY2UgaW5pdGlhdGVkLlxuICAgICAgcG9zaXRpb246ICdmaXhlZCdcbiAgICB9XG4gIH0sIG90aGVyKSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oY2hpbGRQcm9wcykgOiBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3BwZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhpcyBpcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQsIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZWZlcmVuY2UgZWxlbWVudCxcbiAgICogdGhhdCBtYXkgYmUgdXNlZCB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgcGFzc2VkIGFzIHRoZSByZWZlcmVuY2Ugb2JqZWN0IG9mIHRoZSBQb3BwZXJcbiAgICogaW5zdGFuY2UuXG4gICAqXG4gICAqIFRoZSByZWZlcmVuY2UgZWxlbWVudCBzaG91bGQgYmUgYW4gSFRNTCBFbGVtZW50IGluc3RhbmNlIG9yIGEgcmVmZXJlbmNlT2JqZWN0OlxuICAgKiBodHRwczovL3BvcHBlci5qcy5vcmcvcG9wcGVyLWRvY3VtZW50YXRpb24uaHRtbCNyZWZlcmVuY2VPYmplY3QuXG4gICAqL1xuICBhbmNob3JFbDogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgaWYgKHByb3BzLm9wZW4pIHtcbiAgICAgIHZhciByZXNvbHZlZEFuY2hvckVsID0gZ2V0QW5jaG9yRWwocHJvcHMuYW5jaG9yRWwpO1xuICAgICAgdmFyIGNvbnRhaW5lcldpbmRvdyA9IG93bmVyV2luZG93KHJlc29sdmVkQW5jaG9yRWwpO1xuXG4gICAgICBpZiAocmVzb2x2ZWRBbmNob3JFbCBpbnN0YW5jZW9mIGNvbnRhaW5lcldpbmRvdy5FbGVtZW50KSB7XG4gICAgICAgIHZhciBib3ggPSByZXNvbHZlZEFuY2hvckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmIGJveC50b3AgPT09IDAgJiYgYm94LmxlZnQgPT09IDAgJiYgYm94LnJpZ2h0ID09PSAwICYmIGJveC5ib3R0b20gPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IHRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdUaGUgYW5jaG9yIGVsZW1lbnQgc2hvdWxkIGJlIHBhcnQgb2YgdGhlIGRvY3VtZW50IGxheW91dC4nLCBcIk1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyBwcmVzZW50IGluIHRoZSBkb2N1bWVudCBvciB0aGF0IGl0J3Mgbm90IGRpc3BsYXkgbm9uZS5cIl0uam9pbignXFxuJykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFyZXNvbHZlZEFuY2hvckVsIHx8IHR5cGVvZiByZXNvbHZlZEFuY2hvckVsLmNsaWVudFdpZHRoICE9PSAnbnVtYmVyJyB8fCB0eXBlb2YgcmVzb2x2ZWRBbmNob3JFbC5jbGllbnRIZWlnaHQgIT09ICdudW1iZXInIHx8IHR5cGVvZiByZXNvbHZlZEFuY2hvckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IHRoZSBgYW5jaG9yRWxgIHByb3AgcHJvdmlkZWQgdG8gdGhlIGNvbXBvbmVudCBpcyBpbnZhbGlkLicsICdJdCBzaG91bGQgYmUgYW4gSFRNTCBFbGVtZW50IGluc3RhbmNlIG9yIGEgcmVmZXJlbmNlT2JqZWN0OicsICdodHRwczovL3BvcHBlci5qcy5vcmcvcG9wcGVyLWRvY3VtZW50YXRpb24uaHRtbCNyZWZlcmVuY2VPYmplY3QuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogUG9wcGVyIHJlbmRlciBmdW5jdGlvbiBvciBub2RlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5ub2RlLCBQcm9wVHlwZXMuZnVuY10pLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEEgbm9kZSwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBwYXNzZWQgdG8gdGhlIE1vZGFsIGNvbXBvbmVudC5cbiAgICogQnkgZGVmYXVsdCwgaXQgdXNlcyB0aGUgYm9keSBvZiB0aGUgYW5jaG9yRWwncyB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKSxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgcG9ydGFsIGJlaGF2aW9yLlxuICAgKiBUaGUgY2hpbGRyZW4gc3RheSB3aXRoaW4gaXQncyBwYXJlbnQgRE9NIGhpZXJhcmNoeS5cbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBbHdheXMga2VlcCB0aGUgY2hpbGRyZW4gaW4gdGhlIERPTS5cbiAgICogVGhpcyBwcm9wIGNhbiBiZSB1c2VmdWwgaW4gU0VPIHNpdHVhdGlvbiBvclxuICAgKiB3aGVuIHlvdSB3YW50IHRvIG1heGltaXplIHRoZSByZXNwb25zaXZlbmVzcyBvZiB0aGUgUG9wcGVyLlxuICAgKi9cbiAga2VlcE1vdW50ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBQb3BwZXIuanMgaXMgYmFzZWQgb24gYSBcInBsdWdpbi1saWtlXCIgYXJjaGl0ZWN0dXJlLFxuICAgKiBtb3N0IG9mIGl0cyBmZWF0dXJlcyBhcmUgZnVsbHkgZW5jYXBzdWxhdGVkIFwibW9kaWZpZXJzXCIuXG4gICAqXG4gICAqIEEgbW9kaWZpZXIgaXMgYSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCBlYWNoIHRpbWUgUG9wcGVyLmpzIG5lZWRzIHRvXG4gICAqIGNvbXB1dGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIuXG4gICAqIEZvciB0aGlzIHJlYXNvbiwgbW9kaWZpZXJzIHNob3VsZCBiZSB2ZXJ5IHBlcmZvcm1hbnQgdG8gYXZvaWQgYm90dGxlbmVja3MuXG4gICAqIFRvIGxlYXJuIGhvdyB0byBjcmVhdGUgYSBtb2RpZmllciwgW3JlYWQgdGhlIG1vZGlmaWVycyBkb2N1bWVudGF0aW9uXShodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9ibG9iL21hc3Rlci9kb2NzL19pbmNsdWRlcy9wb3BwZXItZG9jdW1lbnRhdGlvbi5tZCNtb2RpZmllcnMtLW9iamVjdCkuXG4gICAqL1xuICBtb2RpZmllcnM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHBvcHBlciBpcyB2aXNpYmxlLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogUG9wcGVyIHBsYWNlbWVudC5cbiAgICovXG4gIHBsYWNlbWVudDogUHJvcFR5cGVzLm9uZU9mKFsnYm90dG9tLWVuZCcsICdib3R0b20tc3RhcnQnLCAnYm90dG9tJywgJ2xlZnQtZW5kJywgJ2xlZnQtc3RhcnQnLCAnbGVmdCcsICdyaWdodC1lbmQnLCAncmlnaHQtc3RhcnQnLCAncmlnaHQnLCAndG9wLWVuZCcsICd0b3Atc3RhcnQnLCAndG9wJ10pLFxuXG4gIC8qKlxuICAgKiBPcHRpb25zIHByb3ZpZGVkIHRvIHRoZSBbYHBvcHBlci5qc2BdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzKSBpbnN0YW5jZS5cbiAgICovXG4gIHBvcHBlck9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEEgcmVmIHRoYXQgcG9pbnRzIHRvIHRoZSB1c2VkIHBvcHBlciBpbnN0YW5jZS5cbiAgICovXG4gIHBvcHBlclJlZjogcmVmVHlwZSxcblxuICAvKipcbiAgICogSGVscCBzdXBwb3J0aW5nIGEgcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uIGNvbXBvbmVudC5cbiAgICovXG4gIHRyYW5zaXRpb246IFByb3BUeXBlcy5ib29sXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgUG9wcGVyOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB7IGZhZGUgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBHcm93IGZyb20gJy4uL0dyb3cnO1xuaW1wb3J0IFBvcHBlciBmcm9tICcuLi9Qb3BwZXInO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4uL3V0aWxzL3NldFJlZic7XG5pbXBvcnQgeyB1c2VJc0ZvY3VzVmlzaWJsZSB9IGZyb20gJy4uL3V0aWxzL2ZvY3VzVmlzaWJsZSc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcblxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBQb3BwZXIgY29tcG9uZW50LiAqL1xuICAgIHBvcHBlcjoge1xuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXgudG9vbHRpcCxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIGZsaXA6IGZhbHNlIC8vIGRpc2FibGUganNzLXJ0bCBwbHVnaW5cblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgUG9wcGVyIGNvbXBvbmVudCBpZiBgaW50ZXJhY3RpdmU9e3RydWV9YC4gKi9cbiAgICBwb3BwZXJJbnRlcmFjdGl2ZToge1xuICAgICAgcG9pbnRlckV2ZW50czogJ2F1dG8nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIChsYWJlbCB3cmFwcGVyKSBlbGVtZW50LiAqL1xuICAgIHRvb2x0aXA6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLmdyZXlbNzAwXSwgMC45KSxcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICAgICAgcGFkZGluZzogJzRweCA4cHgnLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxMCksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCgxNCAvIDEwKSwgXCJlbVwiKSxcbiAgICAgIG1heFdpZHRoOiAzMDAsXG4gICAgICB3b3JkV3JhcDogJ2JyZWFrLXdvcmQnLFxuICAgICAgZm9udFdlaWdodDogdGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0TWVkaXVtXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIChsYWJlbCB3cmFwcGVyKSBlbGVtZW50IGlmIHRoZSB0b29sdGlwIGlzIG9wZW5lZCBieSB0b3VjaC4gKi9cbiAgICB0b3VjaDoge1xuICAgICAgcGFkZGluZzogJzhweCAxNnB4JyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTQpLFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoMTYgLyAxNCksIFwiZW1cIiksXG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRSZWd1bGFyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIChsYWJlbCB3cmFwcGVyKSBlbGVtZW50IGlmIGBwbGFjZW1lbnRgIGNvbnRhaW5zIFwibGVmdFwiLiAqL1xuICAgIHRvb2x0aXBQbGFjZW1lbnRMZWZ0OiBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAncmlnaHQgY2VudGVyJyxcbiAgICAgIG1hcmdpbjogJzAgMjRweCAnXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1hcmdpbjogJzAgMTRweCdcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIChsYWJlbCB3cmFwcGVyKSBlbGVtZW50IGlmIGBwbGFjZW1lbnRgIGNvbnRhaW5zIFwicmlnaHRcIi4gKi9cbiAgICB0b29sdGlwUGxhY2VtZW50UmlnaHQ6IF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICdsZWZ0IGNlbnRlcicsXG4gICAgICBtYXJnaW46ICcwIDI0cHgnXG4gICAgfSwgdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1hcmdpbjogJzAgMTRweCdcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSB0b29sdGlwIChsYWJlbCB3cmFwcGVyKSBlbGVtZW50IGlmIGBwbGFjZW1lbnRgIGNvbnRhaW5zIFwidG9wXCIuICovXG4gICAgdG9vbHRpcFBsYWNlbWVudFRvcDogX2RlZmluZVByb3BlcnR5KHtcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJ2NlbnRlciBib3R0b20nLFxuICAgICAgbWFyZ2luOiAnMjRweCAwJ1xuICAgIH0sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBtYXJnaW46ICcxNHB4IDAnXG4gICAgfSksXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgdG9vbHRpcCAobGFiZWwgd3JhcHBlcikgZWxlbWVudCBpZiBgcGxhY2VtZW50YCBjb250YWlucyBcImJvdHRvbVwiLiAqL1xuICAgIHRvb2x0aXBQbGFjZW1lbnRCb3R0b206IF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICdjZW50ZXIgdG9wJyxcbiAgICAgIG1hcmdpbjogJzI0cHggMCdcbiAgICB9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWFyZ2luOiAnMTRweCAwJ1xuICAgIH0pXG4gIH07XG59O1xudmFyIFRvb2x0aXAgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvb2x0aXAocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJGRpc2FibGVGb2N1c0xpID0gcHJvcHMuZGlzYWJsZUZvY3VzTGlzdGVuZXIsXG4gICAgICBkaXNhYmxlRm9jdXNMaXN0ZW5lciA9IF9wcm9wcyRkaXNhYmxlRm9jdXNMaSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUZvY3VzTGksXG4gICAgICBfcHJvcHMkZGlzYWJsZUhvdmVyTGkgPSBwcm9wcy5kaXNhYmxlSG92ZXJMaXN0ZW5lcixcbiAgICAgIGRpc2FibGVIb3Zlckxpc3RlbmVyID0gX3Byb3BzJGRpc2FibGVIb3ZlckxpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlSG92ZXJMaSxcbiAgICAgIF9wcm9wcyRkaXNhYmxlVG91Y2hMaSA9IHByb3BzLmRpc2FibGVUb3VjaExpc3RlbmVyLFxuICAgICAgZGlzYWJsZVRvdWNoTGlzdGVuZXIgPSBfcHJvcHMkZGlzYWJsZVRvdWNoTGkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVUb3VjaExpLFxuICAgICAgX3Byb3BzJGVudGVyRGVsYXkgPSBwcm9wcy5lbnRlckRlbGF5LFxuICAgICAgZW50ZXJEZWxheSA9IF9wcm9wcyRlbnRlckRlbGF5ID09PSB2b2lkIDAgPyAwIDogX3Byb3BzJGVudGVyRGVsYXksXG4gICAgICBfcHJvcHMkZW50ZXJUb3VjaERlbGEgPSBwcm9wcy5lbnRlclRvdWNoRGVsYXksXG4gICAgICBlbnRlclRvdWNoRGVsYXkgPSBfcHJvcHMkZW50ZXJUb3VjaERlbGEgPT09IHZvaWQgMCA/IDcwMCA6IF9wcm9wcyRlbnRlclRvdWNoRGVsYSxcbiAgICAgIGlkID0gcHJvcHMuaWQsXG4gICAgICBfcHJvcHMkaW50ZXJhY3RpdmUgPSBwcm9wcy5pbnRlcmFjdGl2ZSxcbiAgICAgIGludGVyYWN0aXZlID0gX3Byb3BzJGludGVyYWN0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpbnRlcmFjdGl2ZSxcbiAgICAgIF9wcm9wcyRsZWF2ZURlbGF5ID0gcHJvcHMubGVhdmVEZWxheSxcbiAgICAgIGxlYXZlRGVsYXkgPSBfcHJvcHMkbGVhdmVEZWxheSA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRsZWF2ZURlbGF5LFxuICAgICAgX3Byb3BzJGxlYXZlVG91Y2hEZWxhID0gcHJvcHMubGVhdmVUb3VjaERlbGF5LFxuICAgICAgbGVhdmVUb3VjaERlbGF5ID0gX3Byb3BzJGxlYXZlVG91Y2hEZWxhID09PSB2b2lkIDAgPyAxNTAwIDogX3Byb3BzJGxlYXZlVG91Y2hEZWxhLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbk9wZW4gPSBwcm9wcy5vbk9wZW4sXG4gICAgICBvcGVuUHJvcCA9IHByb3BzLm9wZW4sXG4gICAgICBfcHJvcHMkcGxhY2VtZW50ID0gcHJvcHMucGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3Byb3BzJHBsYWNlbWVudCA9PT0gdm9pZCAwID8gJ2JvdHRvbScgOiBfcHJvcHMkcGxhY2VtZW50LFxuICAgICAgUG9wcGVyUHJvcHMgPSBwcm9wcy5Qb3BwZXJQcm9wcyxcbiAgICAgIHRpdGxlID0gcHJvcHMudGl0bGUsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gR3JvdyA6IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCxcbiAgICAgIFRyYW5zaXRpb25Qcm9wcyA9IHByb3BzLlRyYW5zaXRpb25Qcm9wcyxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJkaXNhYmxlRm9jdXNMaXN0ZW5lclwiLCBcImRpc2FibGVIb3Zlckxpc3RlbmVyXCIsIFwiZGlzYWJsZVRvdWNoTGlzdGVuZXJcIiwgXCJlbnRlckRlbGF5XCIsIFwiZW50ZXJUb3VjaERlbGF5XCIsIFwiaWRcIiwgXCJpbnRlcmFjdGl2ZVwiLCBcImxlYXZlRGVsYXlcIiwgXCJsZWF2ZVRvdWNoRGVsYXlcIiwgXCJvbkNsb3NlXCIsIFwib25PcGVuXCIsIFwib3BlblwiLCBcInBsYWNlbWVudFwiLCBcIlBvcHBlclByb3BzXCIsIFwidGl0bGVcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwiVHJhbnNpdGlvblByb3BzXCJdKTtcblxuICB2YXIgdGhlbWUgPSB1c2VUaGVtZSgpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBvcGVuU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRPcGVuU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTIgPSBSZWFjdC51c2VTdGF0ZSgwKSxcbiAgICAgIGZvcmNlVXBkYXRlID0gX1JlYWN0JHVzZVN0YXRlMlsxXTtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMyA9IFJlYWN0LnVzZVN0YXRlKCksXG4gICAgICBjaGlsZE5vZGUgPSBfUmVhY3QkdXNlU3RhdGUzWzBdLFxuICAgICAgc2V0Q2hpbGROb2RlID0gX1JlYWN0JHVzZVN0YXRlM1sxXTtcblxuICB2YXIgaWdub3JlTm9uVG91Y2hFdmVudHMgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuXG4gIHZhciBfUmVhY3QkdXNlUmVmID0gUmVhY3QudXNlUmVmKG9wZW5Qcm9wICE9IG51bGwpLFxuICAgICAgaXNDb250cm9sbGVkID0gX1JlYWN0JHVzZVJlZi5jdXJyZW50O1xuXG4gIHZhciBkZWZhdWx0SWQgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGNsb3NlVGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGVudGVyVGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIGxlYXZlVGltZXIgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIHRvdWNoVGltZXIgPSBSZWFjdC51c2VSZWYoKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kaXNhYmxlZCAmJiAhaXNDb250cm9sbGVkICYmIHRpdGxlICE9PSAnJyAmJiBjaGlsZE5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYnV0dG9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IHlvdSBhcmUgcHJvdmlkaW5nIGEgZGlzYWJsZWQgYGJ1dHRvbmAgY2hpbGQgdG8gdGhlIFRvb2x0aXAgY29tcG9uZW50LicsICdBIGRpc2FibGVkIGVsZW1lbnQgZG9lcyBub3QgZmlyZSBldmVudHMuJywgXCJUb29sdGlwIG5lZWRzIHRvIGxpc3RlbiB0byB0aGUgY2hpbGQgZWxlbWVudCdzIGV2ZW50cyB0byBkaXNwbGF5IHRoZSB0aXRsZS5cIiwgJycsICdBZGQgYSBzaW1wbGUgd3JhcHBlciBlbGVtZW50LCBzdWNoIGFzIGEgYHNwYW5gLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbaXNDb250cm9sbGVkLCB0aXRsZSwgY2hpbGROb2RlXSk7XG4gIH1cblxuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIC8vIEZhbGxiYWNrIHRvIHRoaXMgZGVmYXVsdCBpZCB3aGVuIHBvc3NpYmxlLlxuICAgIC8vIFVzZSB0aGUgcmFuZG9tIHZhbHVlIGZvciBjbGllbnQtc2lkZSByZW5kZXJpbmcgb25seS5cbiAgICAvLyBXZSBjYW4ndCB1c2UgaXQgc2VydmVyLXNpZGUuXG4gICAgaWYgKCFkZWZhdWx0SWQuY3VycmVudCkge1xuICAgICAgZGVmYXVsdElkLmN1cnJlbnQgPSBcIm11aS10b29sdGlwLVwiLmNvbmNhdChNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxZTUpKTtcbiAgICB9IC8vIFJlcmVuZGVyIHdpdGggZGVmYXVsdElkIGFuZCBjaGlsZE5vZGUuXG5cblxuICAgIGlmIChvcGVuUHJvcCkge1xuICAgICAgZm9yY2VVcGRhdGUoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuICFuO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbb3BlblByb3BdKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KGNsb3NlVGltZXIuY3VycmVudCk7XG4gICAgICBjbGVhclRpbWVvdXQoZW50ZXJUaW1lci5jdXJyZW50KTtcbiAgICAgIGNsZWFyVGltZW91dChsZWF2ZVRpbWVyLmN1cnJlbnQpO1xuICAgICAgY2xlYXJUaW1lb3V0KHRvdWNoVGltZXIuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0NvbnRyb2xsZWQgIT09IChvcGVuUHJvcCAhPSBudWxsKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyBcIi5jb25jYXQoaXNDb250cm9sbGVkID8gJ2EgJyA6ICdhbiB1bicsIFwiY29udHJvbGxlZCBUb29sdGlwIHRvIGJlIFwiKS5jb25jYXQoaXNDb250cm9sbGVkID8gJ3VuJyA6ICcnLCBcImNvbnRyb2xsZWQuXCIpLCAnRWxlbWVudHMgc2hvdWxkIG5vdCBzd2l0Y2ggZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuJywgJ0RlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgVG9vbHRpcCAnICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LicsICdNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtvcGVuUHJvcCwgaXNDb250cm9sbGVkXSk7XG4gIH1cblxuICB2YXIgaGFuZGxlT3BlbiA9IGZ1bmN0aW9uIGhhbmRsZU9wZW4oZXZlbnQpIHtcbiAgICAvLyBUaGUgbW91c2VvdmVyIGV2ZW50IHdpbGwgdHJpZ2dlciBmb3IgZXZlcnkgbmVzdGVkIGVsZW1lbnQgaW4gdGhlIHRvb2x0aXAuXG4gICAgLy8gV2UgY2FuIHNraXAgcmVyZW5kZXJpbmcgd2hlbiB0aGUgdG9vbHRpcCBpcyBhbHJlYWR5IG9wZW4uXG4gICAgLy8gV2UgYXJlIHVzaW5nIHRoZSBtb3VzZW92ZXIgZXZlbnQgaW5zdGVhZCBvZiB0aGUgbW91c2VlbnRlciBldmVudCB0byBmaXggYSBoaWRlL3Nob3cgaXNzdWUuXG4gICAgaWYgKCFpc0NvbnRyb2xsZWQgJiYgIW9wZW5TdGF0ZSkge1xuICAgICAgc2V0T3BlblN0YXRlKHRydWUpO1xuICAgIH1cblxuICAgIGlmIChvbk9wZW4pIHtcbiAgICAgIG9uT3BlbihldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlciA9IGZ1bmN0aW9uIGhhbmRsZUVudGVyKGV2ZW50KSB7XG4gICAgdmFyIGNoaWxkcmVuUHJvcHMgPSBjaGlsZHJlbi5wcm9wcztcblxuICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2VvdmVyJyAmJiBjaGlsZHJlblByb3BzLm9uTW91c2VPdmVyKSB7XG4gICAgICBjaGlsZHJlblByb3BzLm9uTW91c2VPdmVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaWdub3JlTm9uVG91Y2hFdmVudHMuY3VycmVudCAmJiBldmVudC50eXBlICE9PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFJlbW92ZSB0aGUgdGl0bGUgYWhlYWQgb2YgdGltZS5cbiAgICAvLyBXZSBkb24ndCB3YW50IHRvIHdhaXQgZm9yIHRoZSBuZXh0IHJlbmRlciBjb21taXQuXG4gICAgLy8gV2Ugd291bGQgcmlzayBkaXNwbGF5aW5nIHR3byB0b29sdGlwcyBhdCB0aGUgc2FtZSB0aW1lIChuYXRpdmUgKyB0aGlzIG9uZSkuXG5cblxuICAgIGlmIChjaGlsZE5vZGUpIHtcbiAgICAgIGNoaWxkTm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3RpdGxlJyk7XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGVudGVyVGltZXIuY3VycmVudCk7XG4gICAgY2xlYXJUaW1lb3V0KGxlYXZlVGltZXIuY3VycmVudCk7XG5cbiAgICBpZiAoZW50ZXJEZWxheSkge1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgZW50ZXJUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGhhbmRsZU9wZW4oZXZlbnQpO1xuICAgICAgfSwgZW50ZXJEZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZU9wZW4oZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgX3VzZUlzRm9jdXNWaXNpYmxlID0gdXNlSXNGb2N1c1Zpc2libGUoKSxcbiAgICAgIGlzRm9jdXNWaXNpYmxlID0gX3VzZUlzRm9jdXNWaXNpYmxlLmlzRm9jdXNWaXNpYmxlLFxuICAgICAgb25CbHVyVmlzaWJsZSA9IF91c2VJc0ZvY3VzVmlzaWJsZS5vbkJsdXJWaXNpYmxlLFxuICAgICAgZm9jdXNWaXNpYmxlUmVmID0gX3VzZUlzRm9jdXNWaXNpYmxlLnJlZjtcblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlNCA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGNoaWxkSXNGb2N1c1Zpc2libGUgPSBfUmVhY3QkdXNlU3RhdGU0WzBdLFxuICAgICAgc2V0Q2hpbGRJc0ZvY3VzVmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZTRbMV07XG5cbiAgdmFyIGhhbmRsZUJsdXIgPSBmdW5jdGlvbiBoYW5kbGVCbHVyKCkge1xuICAgIGlmIChjaGlsZElzRm9jdXNWaXNpYmxlKSB7XG4gICAgICBzZXRDaGlsZElzRm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICAgIG9uQmx1clZpc2libGUoKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUZvY3VzID0gZnVuY3Rpb24gaGFuZGxlRm9jdXMoZXZlbnQpIHtcbiAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzc3NjlcbiAgICAvLyBUaGUgYXV0b0ZvY3VzIG9mIFJlYWN0IG1pZ2h0IHRyaWdnZXIgdGhlIGV2ZW50IGJlZm9yZSB0aGUgY29tcG9uZW50RGlkTW91bnQuXG4gICAgLy8gV2UgbmVlZCB0byBhY2NvdW50IGZvciB0aGlzIGV2ZW50dWFsaXR5LlxuICAgIGlmICghY2hpbGROb2RlKSB7XG4gICAgICBzZXRDaGlsZE5vZGUoZXZlbnQuY3VycmVudFRhcmdldCk7XG4gICAgfVxuXG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlKGV2ZW50KSkge1xuICAgICAgc2V0Q2hpbGRJc0ZvY3VzVmlzaWJsZSh0cnVlKTtcbiAgICAgIGhhbmRsZUVudGVyKGV2ZW50KTtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW5Qcm9wcyA9IGNoaWxkcmVuLnByb3BzO1xuXG4gICAgaWYgKGNoaWxkcmVuUHJvcHMub25Gb2N1cykge1xuICAgICAgY2hpbGRyZW5Qcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNsb3NlID0gZnVuY3Rpb24gaGFuZGxlQ2xvc2UoZXZlbnQpIHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgc2V0T3BlblN0YXRlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAob25DbG9zZSkge1xuICAgICAgb25DbG9zZShldmVudCk7XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGNsb3NlVGltZXIuY3VycmVudCk7XG4gICAgY2xvc2VUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZ25vcmVOb25Ub3VjaEV2ZW50cy5jdXJyZW50ID0gZmFsc2U7XG4gICAgfSwgdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3QpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVMZWF2ZSA9IGZ1bmN0aW9uIGhhbmRsZUxlYXZlKGV2ZW50KSB7XG4gICAgdmFyIGNoaWxkcmVuUHJvcHMgPSBjaGlsZHJlbi5wcm9wcztcblxuICAgIGlmIChldmVudC50eXBlID09PSAnYmx1cicpIHtcbiAgICAgIGlmIChjaGlsZHJlblByb3BzLm9uQmx1cikge1xuICAgICAgICBjaGlsZHJlblByb3BzLm9uQmx1cihldmVudCk7XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZUJsdXIoZXZlbnQpO1xuICAgIH1cblxuICAgIGlmIChldmVudC50eXBlID09PSAnbW91c2VsZWF2ZScgJiYgY2hpbGRyZW5Qcm9wcy5vbk1vdXNlTGVhdmUpIHtcbiAgICAgIGNoaWxkcmVuUHJvcHMub25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoZW50ZXJUaW1lci5jdXJyZW50KTtcbiAgICBjbGVhclRpbWVvdXQobGVhdmVUaW1lci5jdXJyZW50KTtcbiAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgbGVhdmVUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVDbG9zZShldmVudCk7XG4gICAgfSwgbGVhdmVEZWxheSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVRvdWNoU3RhcnQgPSBmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0KGV2ZW50KSB7XG4gICAgaWdub3JlTm9uVG91Y2hFdmVudHMuY3VycmVudCA9IHRydWU7XG4gICAgdmFyIGNoaWxkcmVuUHJvcHMgPSBjaGlsZHJlbi5wcm9wcztcblxuICAgIGlmIChjaGlsZHJlblByb3BzLm9uVG91Y2hTdGFydCkge1xuICAgICAgY2hpbGRyZW5Qcm9wcy5vblRvdWNoU3RhcnQoZXZlbnQpO1xuICAgIH1cblxuICAgIGNsZWFyVGltZW91dChsZWF2ZVRpbWVyLmN1cnJlbnQpO1xuICAgIGNsZWFyVGltZW91dChjbG9zZVRpbWVyLmN1cnJlbnQpO1xuICAgIGNsZWFyVGltZW91dCh0b3VjaFRpbWVyLmN1cnJlbnQpO1xuICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICB0b3VjaFRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZUVudGVyKGV2ZW50KTtcbiAgICB9LCBlbnRlclRvdWNoRGVsYXkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVUb3VjaEVuZCA9IGZ1bmN0aW9uIGhhbmRsZVRvdWNoRW5kKGV2ZW50KSB7XG4gICAgaWYgKGNoaWxkcmVuLnByb3BzLm9uVG91Y2hFbmQpIHtcbiAgICAgIGNoaWxkcmVuLnByb3BzLm9uVG91Y2hFbmQoZXZlbnQpO1xuICAgIH1cblxuICAgIGNsZWFyVGltZW91dCh0b3VjaFRpbWVyLmN1cnJlbnQpO1xuICAgIGNsZWFyVGltZW91dChsZWF2ZVRpbWVyLmN1cnJlbnQpO1xuICAgIGV2ZW50LnBlcnNpc3QoKTtcbiAgICBsZWF2ZVRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZUNsb3NlKGV2ZW50KTtcbiAgICB9LCBsZWF2ZVRvdWNoRGVsYXkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVVc2VSZWYgPSB1c2VGb3JrUmVmKHNldENoaWxkTm9kZSwgcmVmKTtcbiAgdmFyIGhhbmRsZUZvY3VzUmVmID0gdXNlRm9ya1JlZihmb2N1c1Zpc2libGVSZWYsIGhhbmRsZVVzZVJlZik7IC8vIGNhbiBiZSByZW1vdmVkIG9uY2Ugd2UgZHJvcCBzdXBwb3J0IGZvciBub24gcmVmIGZvcndhcmRpbmcgY2xhc3MgY29tcG9uZW50c1xuXG4gIHZhciBoYW5kbGVPd25SZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIHNldFJlZihoYW5kbGVGb2N1c1JlZiwgUmVhY3RET00uZmluZERPTU5vZGUoaW5zdGFuY2UpKTtcbiAgfSwgW2hhbmRsZUZvY3VzUmVmXSk7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGNoaWxkcmVuLnJlZiwgaGFuZGxlT3duUmVmKTtcbiAgdmFyIG9wZW4gPSBpc0NvbnRyb2xsZWQgPyBvcGVuUHJvcCA6IG9wZW5TdGF0ZTsgLy8gVGhlcmUgaXMgbm8gcG9pbnQgaW4gZGlzcGxheWluZyBhbiBlbXB0eSB0b29sdGlwLlxuXG4gIGlmICh0aXRsZSA9PT0gJycpIHtcbiAgICBvcGVuID0gZmFsc2U7XG4gIH0gLy8gRm9yIGFjY2Vzc2liaWxpdHkgYW5kIFNFTyBjb25jZXJucywgd2UgcmVuZGVyIHRoZSB0aXRsZSB0byB0aGUgRE9NIG5vZGUgd2hlblxuICAvLyB0aGUgdG9vbHRpcCBpcyBoaWRkZW4uIEhvd2V2ZXIsIHdlIGhhdmUgbWFkZSBhIHRyYWRlb2ZmIHdoZW5cbiAgLy8gYGRpc2FibGVIb3Zlckxpc3RlbmVyYCBpcyBzZXQuIFRoaXMgdGl0bGUgbG9naWMgaXMgZGlzYWJsZWQuXG4gIC8vIEl0J3MgYWxsb3dpbmcgdXMgdG8ga2VlcCB0aGUgaW1wbGVtZW50YXRpb24gc2l6ZSBtaW5pbWFsLlxuICAvLyBXZSBhcmUgb3BlbiB0byBjaGFuZ2UgdGhlIHRyYWRlb2ZmLlxuXG5cbiAgdmFyIHNob3VsZFNob3dOYXRpdmVUaXRsZSA9ICFvcGVuICYmICFkaXNhYmxlSG92ZXJMaXN0ZW5lcjtcblxuICB2YXIgY2hpbGRyZW5Qcm9wcyA9IF9leHRlbmRzKHtcbiAgICAnYXJpYS1kZXNjcmliZWRieSc6IG9wZW4gPyBpZCB8fCBkZWZhdWx0SWQuY3VycmVudCA6IG51bGwsXG4gICAgdGl0bGU6IHNob3VsZFNob3dOYXRpdmVUaXRsZSAmJiB0eXBlb2YgdGl0bGUgPT09ICdzdHJpbmcnID8gdGl0bGUgOiBudWxsXG4gIH0sIG90aGVyLCB7fSwgY2hpbGRyZW4ucHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IGNsc3gob3RoZXIuY2xhc3NOYW1lLCBjaGlsZHJlbi5wcm9wcy5jbGFzc05hbWUpXG4gIH0pO1xuXG4gIGlmICghZGlzYWJsZVRvdWNoTGlzdGVuZXIpIHtcbiAgICBjaGlsZHJlblByb3BzLm9uVG91Y2hTdGFydCA9IGhhbmRsZVRvdWNoU3RhcnQ7XG4gICAgY2hpbGRyZW5Qcm9wcy5vblRvdWNoRW5kID0gaGFuZGxlVG91Y2hFbmQ7XG4gIH1cblxuICBpZiAoIWRpc2FibGVIb3Zlckxpc3RlbmVyKSB7XG4gICAgY2hpbGRyZW5Qcm9wcy5vbk1vdXNlT3ZlciA9IGhhbmRsZUVudGVyO1xuICAgIGNoaWxkcmVuUHJvcHMub25Nb3VzZUxlYXZlID0gaGFuZGxlTGVhdmU7XG4gIH1cblxuICBpZiAoIWRpc2FibGVGb2N1c0xpc3RlbmVyKSB7XG4gICAgY2hpbGRyZW5Qcm9wcy5vbkZvY3VzID0gaGFuZGxlRm9jdXM7XG4gICAgY2hpbGRyZW5Qcm9wcy5vbkJsdXIgPSBoYW5kbGVMZWF2ZTtcbiAgfVxuXG4gIHZhciBpbnRlcmFjdGl2ZVdyYXBwZXJMaXN0ZW5lcnMgPSBpbnRlcmFjdGl2ZSA/IHtcbiAgICBvbk1vdXNlT3ZlcjogY2hpbGRyZW5Qcm9wcy5vbk1vdXNlT3ZlcixcbiAgICBvbk1vdXNlTGVhdmU6IGNoaWxkcmVuUHJvcHMub25Nb3VzZUxlYXZlLFxuICAgIG9uRm9jdXM6IGNoaWxkcmVuUHJvcHMub25Gb2N1cyxcbiAgICBvbkJsdXI6IGNoaWxkcmVuUHJvcHMub25CbHVyXG4gIH0gOiB7fTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChjaGlsZHJlbi5wcm9wcy50aXRsZSkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiB5b3UgaGF2ZSBwcm92aWRlZCBhIGB0aXRsZWAgcHJvcCB0byB0aGUgY2hpbGQgb2YgPFRvb2x0aXAgLz4uJywgXCJSZW1vdmUgdGhpcyB0aXRsZSBwcm9wIGBcIi5jb25jYXQoY2hpbGRyZW4ucHJvcHMudGl0bGUsIFwiYCBvciB0aGUgVG9vbHRpcCBjb21wb25lbnQuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZHJlbiwgX2V4dGVuZHMoe1xuICAgIHJlZjogaGFuZGxlUmVmXG4gIH0sIGNoaWxkcmVuUHJvcHMpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChQb3BwZXIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5wb3BwZXIsIGludGVyYWN0aXZlICYmIGNsYXNzZXMucG9wcGVySW50ZXJhY3RpdmUpLFxuICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgIGFuY2hvckVsOiBjaGlsZE5vZGUsXG4gICAgb3BlbjogY2hpbGROb2RlID8gb3BlbiA6IGZhbHNlLFxuICAgIGlkOiBjaGlsZHJlblByb3BzWydhcmlhLWRlc2NyaWJlZGJ5J10sXG4gICAgdHJhbnNpdGlvbjogdHJ1ZVxuICB9LCBpbnRlcmFjdGl2ZVdyYXBwZXJMaXN0ZW5lcnMsIFBvcHBlclByb3BzKSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgcGxhY2VtZW50SW5uZXIgPSBfcmVmLnBsYWNlbWVudCxcbiAgICAgICAgVHJhbnNpdGlvblByb3BzSW5uZXIgPSBfcmVmLlRyYW5zaXRpb25Qcm9wcztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICB0aW1lb3V0OiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyXG4gICAgfSwgVHJhbnNpdGlvblByb3BzSW5uZXIsIFRyYW5zaXRpb25Qcm9wcyksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMudG9vbHRpcCwgY2xhc3Nlc1tcInRvb2x0aXBQbGFjZW1lbnRcIi5jb25jYXQoY2FwaXRhbGl6ZShwbGFjZW1lbnRJbm5lci5zcGxpdCgnLScpWzBdKSldLCBpZ25vcmVOb25Ub3VjaEV2ZW50cy5jdXJyZW50ICYmIGNsYXNzZXMudG91Y2gpXG4gICAgfSwgdGl0bGUpKTtcbiAgfSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb29sdGlwLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRvb2x0aXAgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogZWxlbWVudEFjY2VwdGluZ1JlZi5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogRG8gbm90IHJlc3BvbmQgdG8gZm9jdXMgZXZlbnRzLlxuICAgKi9cbiAgZGlzYWJsZUZvY3VzTGlzdGVuZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEbyBub3QgcmVzcG9uZCB0byBob3ZlciBldmVudHMuXG4gICAqL1xuICBkaXNhYmxlSG92ZXJMaXN0ZW5lcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERvIG5vdCByZXNwb25kIHRvIGxvbmcgcHJlc3MgdG91Y2ggZXZlbnRzLlxuICAgKi9cbiAgZGlzYWJsZVRvdWNoTGlzdGVuZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGJlZm9yZSBzaG93aW5nIHRoZSB0b29sdGlwLlxuICAgKiBUaGlzIHByb3Agd29uJ3QgaW1wYWN0IHRoZSBlbnRlciB0b3VjaCBkZWxheSAoYGVudGVyVG91Y2hEZWxheWApLlxuICAgKi9cbiAgZW50ZXJEZWxheTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgYSB1c2VyIG11c3QgdG91Y2ggdGhlIGVsZW1lbnQgYmVmb3JlIHNob3dpbmcgdGhlIHRvb2x0aXAuXG4gICAqL1xuICBlbnRlclRvdWNoRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgdG9vbHRpcCBhbmQgdGhlIHdyYXBwZXIgY29tcG9uZW50IGlzIG5vdCBjbGVhciBmcm9tIHRoZSBET00uXG4gICAqIFRoaXMgcHJvcCBpcyB1c2VkIHdpdGggYXJpYS1kZXNjcmliZWRieSB0byBzb2x2ZSB0aGUgYWNjZXNzaWJpbGl0eSBpc3N1ZS5cbiAgICogSWYgeW91IGRvbid0IHByb3ZpZGUgdGhpcyBwcm9wLiBJdCBmYWxscyBiYWNrIHRvIGEgcmFuZG9tbHkgZ2VuZXJhdGVkIGlkLlxuICAgKi9cbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIE1ha2VzIGEgdG9vbHRpcCBpbnRlcmFjdGl2ZSwgaS5lLiB3aWxsIG5vdCBjbG9zZSB3aGVuIHRoZSB1c2VyXG4gICAqIGhvdmVycyBvdmVyIHRoZSB0b29sdGlwIGJlZm9yZSB0aGUgYGxlYXZlRGVsYXlgIGlzIGV4cGlyZWQuXG4gICAqL1xuICBpbnRlcmFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXQgYmVmb3JlIGhpZGluZyB0aGUgdG9vbHRpcC5cbiAgICogVGhpcyBwcm9wIHdvbid0IGltcGFjdCB0aGUgbGVhdmUgdG91Y2ggZGVsYXkgKGBsZWF2ZVRvdWNoRGVsYXlgKS5cbiAgICovXG4gIGxlYXZlRGVsYXk6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGFmdGVyIHRoZSB1c2VyIHN0b3BzIHRvdWNoaW5nIGFuIGVsZW1lbnQgYmVmb3JlIGhpZGluZyB0aGUgdG9vbHRpcC5cbiAgICovXG4gIGxlYXZlVG91Y2hEZWxheTogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKi9cbiAgb25DbG9zZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbk9wZW46IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0b29sdGlwIGlzIHNob3duLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRvb2x0aXAgcGxhY2VtZW50LlxuICAgKi9cbiAgcGxhY2VtZW50OiBQcm9wVHlwZXMub25lT2YoWydib3R0b20tZW5kJywgJ2JvdHRvbS1zdGFydCcsICdib3R0b20nLCAnbGVmdC1lbmQnLCAnbGVmdC1zdGFydCcsICdsZWZ0JywgJ3JpZ2h0LWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICd0b3AtZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnXSksXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgUG9wcGVyYF0oL2FwaS9wb3BwZXIvKSBlbGVtZW50LlxuICAgKi9cbiAgUG9wcGVyUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRvb2x0aXAgdGl0bGUuIFplcm8tbGVuZ3RoIHRpdGxlcyBzdHJpbmcgYXJlIG5ldmVyIGRpc3BsYXllZC5cbiAgICovXG4gIHRpdGxlOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSB0cmFuc2l0aW9uLlxuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBgVHJhbnNpdGlvbmAgZWxlbWVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUb29sdGlwJ1xufSkoVG9vbHRpcCk7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgd2l0aFN0eWxlcywgbWFrZVN0eWxlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XHJcbmltcG9ydCB7RXhwYW5zaW9uUGFuZWwsIEV4cGFuc2lvblBhbmVsRGV0YWlscywgRXhwYW5zaW9uUGFuZWxTdW1tYXJ5LCBFeHBhbnNpb25QYW5lbEFjdGlvbnMsIFR5cG9ncmFwaHksIEljb24sIENoaXAsIEJ1dHRvbiwgRGl2aWRlciwgSW5wdXRCYXNlLCBUb29sdGlwfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZSc7XHJcblxyXG4vKiBcclxuICAgIFRoaXMgY29udGFpbmVyIHdpbGwgbWFrZSB0aGUgY2FyZHMgYmFzZWQgb24gdGhlIHBhcmVudHMgc3RhdGUsXHJcbiAgICBoZXJlIHdlIHJlY2VpdmUgdGhlIGRhdGEgYXMgcHJvcHMgYW5kIHN0YXJ0IGJ1aWxkaW5nIHRoZW0gXHJcbiovXHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKHRoZW1lID0+ICh7XHJcbiAgICByb290OiB7XHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBwYWRkaW5nQm90dG9tOiAnOHB4JyxcclxuICAgIH0sXHJcbiAgICBwYW5lbDoge1xyXG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgdHJhbnNwYXJlbnRcIixcclxuICAgICAgICAnJjpob3Zlcic6IHtcclxuICAgICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcclxuICAgICAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCAjY2NjXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnJjpob3Zlcj5kaXY+ZGl2PnNwYW4nOiB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGVkaXQ6IHtcclxuICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIixcclxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgICByaWdodDogJzIwcHgnLFxyXG4gICAgICAgIHRvcDogXCIxNXB4XCJcclxuICAgIH0sXHJcbiAgICBkZWxldGU6IHtcclxuICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIixcclxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgICByaWdodDogJzYwcHgnLFxyXG4gICAgICAgIHRvcDogXCIxNXB4XCJcclxuICAgIH0sXHJcbiAgICBoZWFkaW5nOiB7XHJcbiAgICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSksXHJcbiAgICB9LFxyXG4gICAgdGl0bGU6IHtcclxuICAgICAgICBmb250U2l6ZTogXCIxLjI1cmVtXCIsXHJcbiAgICAgICAgZm9udFdlaWdodDogXCI1MDBcIixcclxuICAgICAgICBsaW5lSGVpZ2h0OiBcIjEuNlwiLFxyXG4gICAgICAgIGxldHRlclNwYWNpbmc6IFwiMC4wMDc1ZW1cIixcclxuICAgICAgICBjb2xvcjogXCJyZ2JhKDAsIDAsIDAsIDAuNTQpXCIsXHJcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgICAgIGZsZXg6IDFcclxuICAgIH0sXHJcbiAgICBzZWNvbmRhcnlIZWFkaW5nOiB7XHJcbiAgICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNSksXHJcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXHJcbiAgICB9LFxyXG4gICAgaWNvbjoge1xyXG4gICAgICAgIHZlcnRpY2FsQWxpZ246ICdib3R0b20nLFxyXG4gICAgICAgIGhlaWdodDogMjAsXHJcbiAgICAgICAgd2lkdGg6IDIwLFxyXG4gICAgfSxcclxuICAgIGRldGFpbHM6IHtcclxuICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuICAgIH0sXHJcbiAgICBjb2x1bW46IHtcclxuICAgICAgICBmbGV4QmFzaXM6ICczMy4zMyUnLFxyXG4gICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgICAgICBmbGV4OiAxLFxyXG4gICAgICAgIHBhZGRpbmdSaWdodDogJzQuNGVtJ1xyXG4gICAgfSxcclxuICAgIGNvbHVtbjEwMDoge1xyXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICB9LFxyXG4gICAgdGV4dGFyZWE6IHtcclxuICAgICAgICBib3JkZXI6ICdub25lJyxcclxuICAgICAgICBvdXRsaW5lOiAnbm9uZScsXHJcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcclxuICAgICAgICByZXNpemU6ICdub25lJyxcclxuICAgICAgICBmb250U2l6ZTogXCIwLjg3NXJlbVwiLFxyXG4gICAgICAgIGZvbnRGYW1pbHk6IFwiUm9ib3RvLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmXCJcclxuICAgIH0sXHJcbiAgICBoZWxwZXI6IHtcclxuICAgICAgICBib3JkZXJMZWZ0OiBgMnB4IHNvbGlkICR7dGhlbWUucGFsZXR0ZS5kaXZpZGVyfWAsXHJcbiAgICAgICAgcGFkZGluZzogdGhlbWUuc3BhY2luZygxLCAyKSxcclxuICAgIH0sXHJcbiAgICBsaW5rOiB7XHJcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxyXG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXHJcbiAgICAgICAgJyY6aG92ZXInOiB7XHJcbiAgICAgICAgICAgIHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxufSkpO1xyXG5cclxuY29uc3QgTGlnaHRUb29sdGlwID0gd2l0aFN0eWxlcyh0aGVtZSA9PiAoe1xyXG4gICAgdG9vbHRpcDoge1xyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsXHJcbiAgICAgICAgY29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcclxuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMV0sXHJcbiAgICAgICAgZm9udFNpemU6IDExLFxyXG4gICAgfSxcclxufSkpKFRvb2x0aXApO1xyXG5cclxubGV0IF9pc1NuYWNrT3BlbiA9IGZhbHNlO1xyXG5cclxuY29uc3QgQ2FyZHMgPSBwcm9wcyA9PiB7XHJcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcblxyXG4gICAgY29uc3QgW3BsYWNlaG9sZGVyLCBzZXRQbGFjZWhvbGRlcl0gPSB1c2VTdGF0ZShcIlRha2UgYSBub3RlLi4uXCIpO1xyXG4gICAgY29uc3QgW3NlbGVjdGVkLCBzZXRTZWxlY3RlZF0gPSB1c2VTdGF0ZShjbGFzc2VzLnJvb3QpO1xyXG4gICAgY29uc3QgW2lzRXhwYW5kZWQsIHNldEV4cGFuZGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFtyZWFkb25seSwgc2V0UmVhZG9ubHldID0gdXNlU3RhdGUodHJ1ZSk7XHJcbiAgICBjb25zdCBbdGl0bGUsIHNldFRpdGxlXSA9IHVzZVN0YXRlKHByb3BzLnRpdGxlKTtcclxuICAgIGNvbnN0IFtub3RlLCBzZXROb3RlXSA9IHVzZVN0YXRlKHByb3BzLm5vdGUpO1xyXG4gICAgY29uc3QgW3RvRG8sIHNldFRvRG9dID0gdXNlU3RhdGUobnVsbCk7XHJcblxyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgLyogXHJcbiAgICAgICAgICAgIFRoZSBsb2dpYyBvZiBDb2xsYXBzaW5nLCBhZGRpbmcgdGhlIHN0eWxlLCBibGlua2luZyB0aGUgY2FyZHMgKGNvbG9yKSwgcmVhZG9ubHlcclxuICAgICAgICAgICAgaXMgYmVpbmcgZG9uZSBiYXNlZCBvbiB0aGUgdmFyaW91cyBmbGFncyB0aGF0IHdlIGhhdmUgZGVmaW5lZCBmcm9tIHBhcmVudHMsXHJcbiAgICAgICAgICAgIHRoZW4gaW4gdGhpcyBzZWN0aW9uIHdlIGNvbnRyb2wgaXQgYW5kIG1ha2UgaXQgaGFwcGVuICBcclxuICAgICAgICAqL1xyXG4gICAgICAgIF9pc1NuYWNrT3BlbiA9IGZhbHNlO1xyXG5cclxuICAgICAgICBzZXRUaXRsZShwcm9wcy50aXRsZSk7XHJcbiAgICAgICAgc2V0Tm90ZShwcm9wcy5ub3RlKTtcclxuXHJcbiAgICAgICAgaWYgKHRvRG8pIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpLmNsYXNzTmFtZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIGNsZWFyU3R5bGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNyb290ID4gZGl2Om50aC1jaGlsZCgyKSA+IGRpdjpudGgtY2hpbGQoMikgPiBkaXZcIikpO1xyXG4gICAgICAgICAgICBjbGVhclN0eWxlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjcm9vdCA+IGRpdjpudGgtY2hpbGQoMikgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2ID4gZGl2XCIpKTtcclxuICAgICAgICAgICAgY2xlYXJTdHlsZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI3Jvb3QgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2Om50aC1jaGlsZCgyKSA+IGRpdiA+IGRpdiA+IGRpdlwiKSk7XHJcbiAgICAgICAgICAgIHRvRG8uc3R5bGUuYW5pbWF0aW9uTmFtZSA9IFwic25hY2tiYXJcIjtcclxuICAgICAgICAgICAgdG9Eby5zdHlsZVtcIi13ZWJraXQtYW5pbWF0aW9uTmFtZVwiXSA9IFwic25hY2tiYXJcIjtcclxuICAgICAgICAgICAgc2V0VG9EbygpO1xyXG4gICAgICAgICAgICBpZiAodGltZXIpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclN0eWxlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIjcm9vdCA+IGRpdjpudGgtY2hpbGQoMikgPiBkaXY6bnRoLWNoaWxkKDIpID4gZGl2ID4gZGl2XCIpKTtcclxuICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW3Byb3BzXSk7XHJcblxyXG4gICAgY29uc3QgY2xlYXJTdHlsZSA9IChlbGVtcykgPT4ge1xyXG4gICAgICAgIHZhciBpbmRleCA9IDAsIGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcclxuICAgICAgICBmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgZWxlbXNbaW5kZXhdLnN0eWxlID0gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb25UaXRsZUNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICghX2lzU25hY2tPcGVuKSB7XHJcbiAgICAgICAgICAgIHNldEV4cGFuZGVkKCFpc0V4cGFuZGVkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG9uRWRpdENsaWNrID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0U2VsZWN0ZWQoY2xhc3Nlcy5yb290ICsgXCIgZnVsbHNjcmVlblwiKTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikuY2xhc3NOYW1lID0gXCJzZWxlY3RlZFwiO1xyXG4gICAgICAgIHNldFJlYWRvbmx5KGZhbHNlKTtcclxuXHJcbiAgICAgICAgX2lzU25hY2tPcGVuID0gdHJ1ZTtcclxuICAgICAgICBzZXRFeHBhbmRlZCh0cnVlKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgb25DYW5jZWxDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChfaXNTbmFja09wZW4gJiYgKHByb3BzLnRpdGxlICE9IHRpdGxlIHx8IHByb3BzLm5vdGUgIT0gbm90ZSkpIHtcclxuICAgICAgICAgICAgc2V0VG9EbyhldmVudC50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgICAgIHByb3BzLm9uVXBkYXRlKHByb3BzLmlkLCB0aXRsZSwgbm90ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9pc1NuYWNrT3BlbiA9IGZhbHNlO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKS5jbGFzc05hbWUgPSBcIlwiO1xyXG4gICAgICAgIHNldFNlbGVjdGVkKGNsYXNzZXMucm9vdCk7XHJcbiAgICAgICAgc2V0UmVhZG9ubHkodHJ1ZSk7XHJcbiAgICAgICAgc2V0RXhwYW5kZWQoZmFsc2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBvbkRlbGV0ZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIF9pc1NuYWNrT3BlbiA9IHRydWU7XHJcbiAgICAgICAgc2V0VG9EbyhldmVudC50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUpO1xyXG4gICAgICAgIHNldEV4cGFuZGVkKGZhbHNlKTtcclxuICAgICAgICBwcm9wcy5vbkRlbGV0ZShwcm9wcy5pZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c2VsZWN0ZWR9PlxyXG4gICAgICAgICAgICA8RXhwYW5zaW9uUGFuZWwgY2xhc3NOYW1lPXtjbGFzc2VzLnBhbmVsfVxyXG4gICAgICAgICAgICAgICAgZXhwYW5kZWQ9e2lzRXhwYW5kZWR9PlxyXG4gICAgICAgICAgICAgICAgPEV4cGFuc2lvblBhbmVsU3VtbWFyeVxyXG4gICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9XCJwYW5lbDFjLWNvbnRlbnRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGlkPVwicGFuZWwxYy1oZWFkZXJcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHsgb25UaXRsZUNsaWNrKCkgfX1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5jb2x1bW59PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRCYXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGl0bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMudGl0bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFByb3BzPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtbGFiZWwnOiAndGl0bGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiByZWFkb25seVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4geyBzZXRUaXRsZShlLnRhcmdldC52YWx1ZSkgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8TGlnaHRUb29sdGlwIHRpdGxlPVwiRGVsZXRlIHRhc2tcIiBwbGFjZW1lbnQ9XCJ0b3BcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEljb24gb25DbGljaz17KGV2ZW50KSA9PiB7IG9uRGVsZXRlKGV2ZW50KSB9fSBjbGFzc05hbWU9e2NsYXNzZXMuZGVsZXRlfT5kZWxldGU8L0ljb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9MaWdodFRvb2x0aXA+XHJcbiAgICAgICAgICAgICAgICAgICAgPExpZ2h0VG9vbHRpcCB0aXRsZT1cIkVkaXQgdGFza1wiIHBsYWNlbWVudD1cInRvcFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8SWNvbiBjbGFzc05hbWU9e2NsYXNzZXMuZWRpdH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhldmVudCkgPT4geyBvbkVkaXRDbGljayhldmVudCkgfX0+ZWRpdDwvSWNvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L0xpZ2h0VG9vbHRpcD5cclxuICAgICAgICAgICAgICAgIDwvRXhwYW5zaW9uUGFuZWxTdW1tYXJ5PlxyXG4gICAgICAgICAgICAgICAgPEV4cGFuc2lvblBhbmVsRGV0YWlscyBjbGFzc05hbWU9e2NsYXNzZXMuZGV0YWlsc30+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuY29sdW1uMTAwfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzTmFtZT17Y2xhc3Nlcy50ZXh0YXJlYX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtub3RlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE9ubHk9e3JlYWRvbmx5fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJXcml0ZSBoZXJlLi4uXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwibmFtZXNcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cImhhcmRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93cz17MTB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cmFwPVwiaGFyZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHsgc2V0Tm90ZShlLnRhcmdldC52YWx1ZSkgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dGFyZWE+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L0V4cGFuc2lvblBhbmVsRGV0YWlscz5cclxuICAgICAgICAgICAgICAgIDxEaXZpZGVyIC8+XHJcbiAgICAgICAgICAgICAgICA8RXhwYW5zaW9uUGFuZWxBY3Rpb25zPlxyXG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gc2l6ZT1cInNtYWxsXCIgb25DbGljaz17KGV2ZW50KSA9PiB7IG9uQ2FuY2VsQ2xpY2soZXZlbnQpIH19PkNsb3NlPC9CdXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L0V4cGFuc2lvblBhbmVsQWN0aW9ucz5cclxuICAgICAgICAgICAgPC9FeHBhbnNpb25QYW5lbD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENhcmRzOyIsImltcG9ydCBSZWFjdCwge3VzZUVmZmVjdH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgSW5wdXRCYXNlIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0lucHV0QmFzZSc7XHJcbmltcG9ydCB7IGZhZGUsIG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xyXG5pbXBvcnQgU2VhcmNoSWNvbiBmcm9tICdAbWF0ZXJpYWwtdWkvaWNvbnMvU2VhcmNoJztcclxuaW1wb3J0IENvbnRhaW5lciBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9Db250YWluZXInO1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcyh0aGVtZSA9PiAoe1xyXG4gIHJvb3Q6IHtcclxuICAgIGZsZXhHcm93OiAxLFxyXG4gIH0sXHJcbiAgc2VhcmNoOiB7XHJcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcclxuICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxyXG4gICAgYmFja2dyb3VuZENvbG9yOiBmYWRlKHRoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLCAwLjE1KSxcclxuICAgICcmOmhvdmVyJzoge1xyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsIDAuMjUpLFxyXG4gICAgfSxcclxuICAgIG1hcmdpbkxlZnQ6IFwiMCAhaW1wb3J0YW50XCIsXHJcbiAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xyXG4gICAgICBtYXJnaW5MZWZ0OiB0aGVtZS5zcGFjaW5nKDEpLFxyXG4gICAgICB3aWR0aDogJ2F1dG8nLFxyXG4gICAgfSxcclxuICB9LFxyXG4gIHNlYXJjaEljb246IHtcclxuICAgIHdpZHRoOiB0aGVtZS5zcGFjaW5nKDcpLFxyXG4gICAgaGVpZ2h0OiAnMTAwJScsXHJcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcclxuICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG4gIH0sXHJcbiAgaW5wdXRSb290OiB7XHJcbiAgICBjb2xvcjogJ2luaGVyaXQnLFxyXG4gICAgd2lkdGg6IFwiMTAwJVwiXHJcbiAgfSxcclxuICBpbnB1dElucHV0OiB7XHJcbiAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDEsIDEsIDEsIDcpLFxyXG4gICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd3aWR0aCcpLFxyXG4gICAgd2lkdGg6ICcxMDAlJyxcclxuICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcclxuICAgICAgd2lkdGg6IFwiMTAwJVwiLFxyXG4gICAgICAnJjpmb2N1cyc6IHtcclxuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgYXBwQmFyOiB7XHJcbiAgICB0b3A6ICdhdXRvJyxcclxuICAgIHRvcDogMCxcclxuICB9LFxyXG59KSk7XHJcblxyXG4vKiBcclxuICBUaGlzIGNvbXBvbmVudCBpcyBmb3Igc2VhcmNoaW5nIHRocm8gdGhlIGNvbnRlbnRcclxuICB3ZSBwYXNzIHRoZSBPbkNoYW5nZSBmdWNudGlvbiB0aHJvIHRoZSBwcm9wcyB0byB0aGUgcGFyZW50cyBhbmQgdGhlbiB3ZSB1cGRhdGUgdGhlIHN0YXRlXHJcbiovXHJcbmNvbnN0IFNlYXJjaEJveCA9IHByb3BzID0+IHtcclxuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICAgIDxDb250YWluZXIgbWF4V2lkdGg9XCJzbVwiIHN0eWxlPXt7IHBhZGRpbmc6IFwiMC41ZW0gMWVtXCIgfX0+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5zZWFyY2h9PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnNlYXJjaEljb259PlxyXG4gICAgICAgICAgICAgICAgICA8U2VhcmNoSWNvbiAvPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxJbnB1dEJhc2VcclxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWFyY2ggVGl0bGUgb3IgQ29udGVudFwiXHJcbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpPT5wcm9wcy5vblNlYXJjaChldmVudCl9IC8vSGVyZSB0aGUgcHJvcHMgaXMgYmVpbmcgY2FsbGVkXHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzZXM9e3tcclxuICAgICAgICAgICAgICAgICAgICAgIHJvb3Q6IGNsYXNzZXMuaW5wdXRSb290LFxyXG4gICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGNsYXNzZXMuaW5wdXRJbnB1dCxcclxuICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgaW5wdXRQcm9wcz17eyAnYXJpYS1sYWJlbCc6ICdzZWFyY2gnIH19XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0NvbnRhaW5lcj5cclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hCb3g7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IENhcmRzIGZyb20gJy4vQ2FyZHMnO1xyXG5pbXBvcnQgU25hY2tiYXIgZnJvbSAnLi4vU25hY2tiYXInO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgU2VhcmNoQm94IGZyb20gJy4uL1NlYXJjaEJveCc7XHJcblxyXG4vKiBcclxuICBUaGlzIGlzIGNvbnRhaW5lciB3aGljaCBob2xkIGFmZXcgdGhpbmdzLFxyXG4gIENhcmQgSG9sZGVyLCBDYXJkcyBhbmQgVG9zdGVyIChTbmFrYmFyKSxcclxuICB0aGUgbWFnaWMgYmVpbmcgZG9uZSBpbiBDYXJkLFxyXG4gIHdoaWNoIFdlIHBhc3MgYWxsIHRoZSBkYXRhIHRvIHRoZSBjb21wb25lbnRzIGFuZCB3ZSBidWlsZCB0aGUgY2FyZHMgdGhlcmUgXHJcbiovXHJcblxyXG5jbGFzcyBDYXJkSG9sZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgbm90ZXM6IFtdLFxyXG4gICAgICBub3Rlc1NlYXJjaDogW10sXHJcbiAgICAgIHRleHRUb1NlYXJjaDogXCJcIixcclxuICAgICAgc25hY2tGbGFnOiBmYWxzZSxcclxuICAgICAgc2V0VGltZTogJycsXHJcbiAgICAgIGhhc0FjdGlvbjogdHJ1ZVxyXG4gICAgfVxyXG4gIH1cclxuICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIC8qIFxyXG4gICAgICBDYWxsaW5nIEFqYXggKGFzIHByb3BzIGZyb20gcGFyZW50KSB0byBGZXRjaCBhbGwgbm90ZXMgYW5kIHVwZGF0ZSBzdG9yZVxyXG4gICAgKi9cclxuICAgIHRoaXMucHJvcHMuZmV0Y2hfZ2V0bm90ZXNfZGF0YSgpO1xyXG4gIH1cclxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHByb3BzKSB7XHJcbiAgICAvKiBcclxuICAgICAgSWYgYW55IG5ldyBub3RlIGhhcyBiZWVuIGNyZWF0ZWQsXHJcbiAgICAgIGhlcmUgd2lsbCBiZSBmaXJlZCAsIHRoZW4gd2UgYXBwZW5kIHRoZSBjcmVhdGUgbm90ZSBhbmQgdXBkYXRlIHRoZSBzdGF0ZVxyXG4gICAgKi9cclxuICAgIGlmIChwcm9wcy5jcmVhdGVEYXRhLmxlbmd0aCAhPSAwKSB7XHJcbiAgICAgIHZhciBqb2luZWQgPSB0aGlzLnN0YXRlLm5vdGVzLmNvbmNhdChwcm9wcy5jcmVhdGVEYXRhKTtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG5vdGVzOiBqb2luZWQgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgbm90ZXM6IHByb3BzLmdldG5vdGVzLmdldG5vdGVzIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBvbkRlbGV0ZSA9IChpZCkgPT4ge1xyXG4gICAgbGV0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHZhciBhcnJheSA9IFsuLi50aGlzLnN0YXRlLm5vdGVzXTsgLy8gbWFrZSBhIHNlcGFyYXRlIGNvcHkgb2YgdGhlIGFycmF5XHJcblxyXG4gICAgICB2YXIgaW5kZXg7XHJcbiAgICAgIGFycmF5LnNvbWUoZnVuY3Rpb24gKG5vdGUsIGkpIHtcclxuICAgICAgICByZXR1cm4gbm90ZS5pZCA9PT0gaWQgPyAoaW5kZXggPSBpLCB0cnVlKSA6IGZhbHNlO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChpbmRleCAhPSAtMSkge1xyXG4gICAgICAgIHRoaXMuZGVsZXRlTm90ZShpZCkudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgaWYgKHJlcy5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgIG5vdGVzOiBhcnJheVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgIC8vIGhhbmRsZSBlcnJvclxyXG4gICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIHNuYWNrRmxhZzogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICB9LCAyMDAwKTtcclxuXHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgc2V0VGltZTogdGltZXIsXHJcbiAgICAgIHNuYWNrRmxhZzogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8qIFxyXG4gICAgQ2FsbGluZyBhc3luYyBBeGlvcyBpbiBvcmRlciB0byB3YWl0IHVudGlsIHRoZSBub3RlIGhhcyBiZWVuIGRlbGV0ZWQsXHJcbiAgICB0aGVuIHdlIHdpbGwgdXBkYXRlIHRoZSBzdGF0ZVxyXG4gICovXHJcbiAgZGVsZXRlTm90ZSA9IGFzeW5jIChpZCkgPT4ge1xyXG4gICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmRlbGV0ZShgaHR0cDovL2xvY2FsaG9zdDozMDAzL2FwaS90YXNrcy9gICsgaWQpO1xyXG4gICAgcmV0dXJuIHJlcy5kYXRhO1xyXG4gIH07XHJcbiAgb25VbmRvID0gKCkgPT4ge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHNuYWNrRmxhZzogZmFsc2UsXHJcbiAgICAgIGRlbGV0ZWQ6IGZhbHNlXHJcbiAgICB9KTtcclxuICAgIC8vY2xlYXJuaW5nIHRoZSBzZXRUaW1lb3V0IGFuZCB1bmRvIHRoZSBkZWxldGVcclxuICAgIGNsZWFyVGltZW91dCh0aGlzLnN0YXRlLnNldFRpbWUpO1xyXG4gIH1cclxuICBvblVwZGF0ZSA9IChpZCwgdGl0bGUsIG5vdGUpID0+IHtcclxuICAgIHZhciBhcnJheSA9IFsuLi50aGlzLnN0YXRlLm5vdGVzXTsgLy8gbWFrZSBhIHNlcGFyYXRlIGNvcHkgb2YgdGhlIGFycmF5XHJcbiAgICB2YXIgaW5kZXg7XHJcbiAgICBhcnJheS5zb21lKGZ1bmN0aW9uIChub3RlLCBpKSB7XHJcbiAgICAgIHJldHVybiBub3RlLmlkID09PSBpZCA/IChpbmRleCA9IGksIHRydWUpIDogZmFsc2U7XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy51cGRhdGVOb3RlKGlkLCB0aXRsZSwgbm90ZSkudGhlbihmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgIGFycmF5W2luZGV4XS50aXRsZSA9IHRpdGxlO1xyXG4gICAgICBhcnJheVtpbmRleF0ubm90ZSA9IG5vdGU7XHJcbiAgICAgIHRoYXQuc2V0U3RhdGUoe1xyXG4gICAgICAgIG5vdGVzOiBhcnJheVxyXG4gICAgICB9KTtcclxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAvLyBoYW5kbGUgZXJyb3JcclxuICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgfSlcclxuICB9XHJcbiAgLyogXHJcbiAgICBVcGRhdGUgdGhlIE5vdGVzICwgdGhlbiB3ZSB3aWxsIHVwZGF0ZSB0aGUgc3RhdGVcclxuICAqL1xyXG4gIHVwZGF0ZU5vdGUgPSBhc3luYyAoaWQsIHRpdGxlLCBub3RlKSA9PiB7XHJcbiAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MucHV0KGBodHRwOi8vbG9jYWxob3N0OjMwMDMvYXBpL3Rhc2tzL2AgKyBpZCwge1xyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uICdcclxuICAgICAgfVxyXG4gICAgfSwge1xyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgIG5vdGU6IG5vdGVcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzLmRhdGE7XHJcbiAgfTtcclxuICBvblNlYXJjaCA9IChldmVudCkgPT4ge1xyXG4gICAgdmFyIHRleHRUb1NlYXJjaCA9IGV2ZW50LnRhcmdldC52YWx1ZTtcclxuICAgIHZhciBhcnJheSA9IFsuLi50aGlzLnN0YXRlLm5vdGVzXS5maWx0ZXIoKG5vdGUpID0+IHsgcmV0dXJuIHRleHRUb1NlYXJjaC5sZW5ndGggPT09IDAgfHwgbm90ZS50aXRsZS5pbmNsdWRlcyh0ZXh0VG9TZWFyY2gpIHx8IG5vdGUubm90ZS5pbmNsdWRlcyh0ZXh0VG9TZWFyY2gpOyB9KTtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBub3Rlc1NlYXJjaDogYXJyYXksXHJcbiAgICAgIHRleHRUb1NlYXJjaDogdGV4dFRvU2VhcmNoXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBcclxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnN0YXRlLnRleHRUb1NlYXJjaC5sZW5ndGggPT0gMCAmJiB0aGlzLnN0YXRlLm5vdGVzU2VhcmNoLmxlbmd0aCA9PT0gMCA/IHRoaXMuc3RhdGUubm90ZXM6IHRoaXMuc3RhdGUubm90ZXNTZWFyY2g7ICAgIFxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdj5cclxuICAgICAgICA8U2VhcmNoQm94IG9uU2VhcmNoPXt0aGlzLm9uU2VhcmNofSAvPlxyXG4gICAgICAgIDxTbmFja2JhciBoYXNBY3Rpb249e3RoaXMuc3RhdGUuaGFzQWN0aW9ufSBvblVuZG89e3RoaXMub25VbmRvfSBtZXNzYWdlPXtcIkFyZSB5b3Ugc3VyZT9cIn0gc25hY2tGbGFnPXt0aGlzLnN0YXRlLnNuYWNrRmxhZ30gLz5cclxuICAgICAgICB7IGRhdGEgIT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICBkYXRhLmxlbmd0aCA+IDAgJiZcclxuICAgICAgICAgIGRhdGEubWFwKChkLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZCAhPSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgcmV0dXJuIDxDYXJkcyBpZD17ZC5pZH0gb25EZWxldGU9e3RoaXMub25EZWxldGV9IG9uVXBkYXRlPXt0aGlzLm9uVXBkYXRlfSBrZXk9e2luZGV4fSB7Li4uZH0gLz5cclxuICAgICAgICAgIH0pfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDYXJkSG9sZGVyOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IG1ha2VTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xyXG5pbXBvcnQgQ29udGFpbmVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0NvbnRhaW5lcic7XHJcbmltcG9ydCBBZGRCb3ggZnJvbSAnLi9BZGRCb3gnO1xyXG5pbXBvcnQgQ2FyZEhvbGRlciBmcm9tICcuL0NhcmQvQ2FyZEhvbGRlcic7XHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKHRoZW1lID0+ICh7XHJcbiAgcm9vdDoge1xyXG4gICAgcGFkZGluZzogJzRlbSAxZW0nLFxyXG4gICAgcGFkZGluZ0JvdHRvbTogJzFlbScsXHJcbiAgICBwYWRkaW5nVG9wOiBcIjVlbVwiXHJcbiAgfSxcclxufSkpO1xyXG5cclxuY29uc3QgSG9tZVZpZXcgPSBwcm9wcyA9PiB7XHJcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xyXG4gIGNvbnN0IFtjcmVhdGVEYXRhLCBzZXRDcmVhdGVEYXRhXSA9IHVzZVN0YXRlKFtdKTtcclxuXHJcbiAgLyogXHJcbiAgICBDYWxsaW5nIEFqYXggdG8gY3JlYXRlIG5ldyBOb3RlLFxyXG4gICAgdGhlbiB1cGRhdGUgdGhlIHN0YXRlIHRvIHJlLXJlbmRlciB0aGUgcGFnZVxyXG4gICovXHJcbiAgY29uc3QgY3JlYXRlTm90ZSA9ICh0aXRsZSwgbm90ZSkgPT4ge1xyXG4gICAgYXhpb3MucG9zdCgnaHR0cDovL2xvY2FsaG9zdDozMDAzL2FwaS90YXNrcycsIHtcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbiAnXHJcbiAgICAgIH1cclxuICAgIH0sIHtcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICBub3RlOiBub3RlXHJcbiAgICAgIH1cclxuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgIC8vIGhhbmRsZSBzdWNjZXMgYW5kIHVwZGF0ZSB0aGUgc3RhdGVzXHJcbiAgICAgIHNldENyZWF0ZURhdGEocmVzcG9uc2UuZGF0YS5yZXN1bHRbMF0pO1xyXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgIC8vIGhhbmRsZSBlcnJvclxyXG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICB9KVxyXG4gIH1cclxuICByZXR1cm4gKFxyXG4gICAgPENvbnRhaW5lciBtYXhXaWR0aD1cInNtXCIgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9PlxyXG4gICAgICA8QWRkQm94IGNyZWF0ZU5vdGU9eyh0aXRsZSwgbm90ZSkgPT4geyBjcmVhdGVOb3RlKHRpdGxlLCBub3RlKSB9fSB7Li4ucHJvcHN9IC8+XHJcbiAgICAgIDxDYXJkSG9sZGVyIGNyZWF0ZURhdGE9e2NyZWF0ZURhdGF9IHsuLi5wcm9wc30gLz5cclxuICAgIDwvQ29udGFpbmVyPlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhvbWVWaWV3O1xyXG4iLCJmdW5jdGlvbiBkZWZhdWx0RXF1YWxpdHlDaGVjayhhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuXG5mdW5jdGlvbiBhcmVBcmd1bWVudHNTaGFsbG93bHlFcXVhbChlcXVhbGl0eUNoZWNrLCBwcmV2LCBuZXh0KSB7XG4gIGlmIChwcmV2ID09PSBudWxsIHx8IG5leHQgPT09IG51bGwgfHwgcHJldi5sZW5ndGggIT09IG5leHQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gRG8gdGhpcyBpbiBhIGZvciBsb29wIChhbmQgbm90IGEgYGZvckVhY2hgIG9yIGFuIGBldmVyeWApIHNvIHdlIGNhbiBkZXRlcm1pbmUgZXF1YWxpdHkgYXMgZmFzdCBhcyBwb3NzaWJsZS5cbiAgdmFyIGxlbmd0aCA9IHByZXYubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFlcXVhbGl0eUNoZWNrKHByZXZbaV0sIG5leHRbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVtb2l6ZShmdW5jKSB7XG4gIHZhciBlcXVhbGl0eUNoZWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkZWZhdWx0RXF1YWxpdHlDaGVjaztcblxuICB2YXIgbGFzdEFyZ3MgPSBudWxsO1xuICB2YXIgbGFzdFJlc3VsdCA9IG51bGw7XG4gIC8vIHdlIHJlZmVyZW5jZSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgdGhlbSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwoZXF1YWxpdHlDaGVjaywgbGFzdEFyZ3MsIGFyZ3VtZW50cykpIHtcbiAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICBsYXN0UmVzdWx0ID0gZnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGxhc3RBcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZXBlbmRlbmNpZXMoZnVuY3MpIHtcbiAgdmFyIGRlcGVuZGVuY2llcyA9IEFycmF5LmlzQXJyYXkoZnVuY3NbMF0pID8gZnVuY3NbMF0gOiBmdW5jcztcblxuICBpZiAoIWRlcGVuZGVuY2llcy5ldmVyeShmdW5jdGlvbiAoZGVwKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBkZXAgPT09ICdmdW5jdGlvbic7XG4gIH0pKSB7XG4gICAgdmFyIGRlcGVuZGVuY3lUeXBlcyA9IGRlcGVuZGVuY2llcy5tYXAoZnVuY3Rpb24gKGRlcCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBkZXA7XG4gICAgfSkuam9pbignLCAnKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlbGVjdG9yIGNyZWF0b3JzIGV4cGVjdCBhbGwgaW5wdXQtc2VsZWN0b3JzIHRvIGJlIGZ1bmN0aW9ucywgJyArICgnaW5zdGVhZCByZWNlaXZlZCB0aGUgZm9sbG93aW5nIHR5cGVzOiBbJyArIGRlcGVuZGVuY3lUeXBlcyArICddJykpO1xuICB9XG5cbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihtZW1vaXplKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtZW1vaXplT3B0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtZW1vaXplT3B0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgZnVuY3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIHZhciByZXN1bHRGdW5jID0gZnVuY3MucG9wKCk7XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IGdldERlcGVuZGVuY2llcyhmdW5jcyk7XG5cbiAgICB2YXIgbWVtb2l6ZWRSZXN1bHRGdW5jID0gbWVtb2l6ZS5hcHBseSh1bmRlZmluZWQsIFtmdW5jdGlvbiAoKSB7XG4gICAgICByZWNvbXB1dGF0aW9ucysrO1xuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIHJldHVybiByZXN1bHRGdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfV0uY29uY2F0KG1lbW9pemVPcHRpb25zKSk7XG5cbiAgICAvLyBJZiBhIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBleGFjdCBzYW1lIGFyZ3VtZW50cyB3ZSBkb24ndCBuZWVkIHRvIHRyYXZlcnNlIG91ciBkZXBlbmRlbmNpZXMgYWdhaW4uXG4gICAgdmFyIHNlbGVjdG9yID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gW107XG4gICAgICB2YXIgbGVuZ3RoID0gZGVwZW5kZW5jaWVzLmxlbmd0aDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgYW5kIG11dGF0ZSBhIGxvY2FsIGxpc3Qgb2YgcGFyYW1zIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgICAgcGFyYW1zLnB1c2goZGVwZW5kZW5jaWVzW2ldLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgfVxuXG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgcmV0dXJuIG1lbW9pemVkUmVzdWx0RnVuYy5hcHBseShudWxsLCBwYXJhbXMpO1xuICAgIH0pO1xuXG4gICAgc2VsZWN0b3IucmVzdWx0RnVuYyA9IHJlc3VsdEZ1bmM7XG4gICAgc2VsZWN0b3IuZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzO1xuICAgIHNlbGVjdG9yLnJlY29tcHV0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlY29tcHV0YXRpb25zO1xuICAgIH07XG4gICAgc2VsZWN0b3IucmVzZXRSZWNvbXB1dGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgfTtcbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgY3JlYXRlU2VsZWN0b3IgPSBjcmVhdGVTZWxlY3RvckNyZWF0b3IoZGVmYXVsdE1lbW9pemUpO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yKHNlbGVjdG9ycykge1xuICB2YXIgc2VsZWN0b3JDcmVhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBjcmVhdGVTZWxlY3RvcjtcblxuICBpZiAodHlwZW9mIHNlbGVjdG9ycyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciBleHBlY3RzIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCAnICsgKCd3aGVyZSBlYWNoIHByb3BlcnR5IGlzIGEgc2VsZWN0b3IsIGluc3RlYWQgcmVjZWl2ZWQgYSAnICsgdHlwZW9mIHNlbGVjdG9ycykpO1xuICB9XG4gIHZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMoc2VsZWN0b3JzKTtcbiAgcmV0dXJuIHNlbGVjdG9yQ3JlYXRvcihvYmplY3RLZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yc1trZXldO1xuICB9KSwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgIHZhbHVlc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXMucmVkdWNlKGZ1bmN0aW9uIChjb21wb3NpdGlvbiwgdmFsdWUsIGluZGV4KSB7XG4gICAgICBjb21wb3NpdGlvbltvYmplY3RLZXlzW2luZGV4XV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBjb21wb3NpdGlvbjtcbiAgICB9LCB7fSk7XG4gIH0pO1xufSIsImltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAncmVzZWxlY3QnO1xyXG5cclxuLyogXHJcbiAgICBJIGRlY2lkZWQgdG8gdXNlIHNlbGVjdG9ycyBiZWNhdXNlIHRoZSBzdGF0ZSBsb29rcyBtb3JlIGNsZWFuZXIsXHJcbiAgICBpIG9ubHkgc2VsZWN0IHRoZSBzcGVjaWZpYyBzdGF0ZSBhbmQgZGlzcGF0Y2ggaXQgdG8gdGhlIEhvbWUgY29tcG9uZW50cyxcclxuICAgIGNhbGxpbmcgd2lsbCBiZSBkb25lIGluIGhvbWVDb250YWluZXIuanMgdGhlbiBkaXNwYXRjaCB0byBob21lLmpzLFxyXG4gICAgWW91IGNhbiBkZWZpbmUgdGhlIHNhbWUgZmxvdy9mdW5jdGlvbiBmb3Igb3RoZXIgc3RhdGVzIGluIGZ1dHVyZSBcclxuICAgIGFuZCBjYWxsIGl0IGluIHRoZSBzcGVjaWZpYyBjb21wb25lbnRzIGhvbGRlclxyXG4qL1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldG5vdGVzID0gc3RhdGUgPT4gc3RhdGUuZGF0YVxyXG5leHBvcnQgY29uc3Qgc2VsZWN0ZWRfZ2V0bm90ZXMgPSBjcmVhdGVTZWxlY3RvcihcclxuICAgIGdldG5vdGVzLFxyXG4gICAgZGF0YSA9PiBkYXRhXHJcbikgICAgXHJcblxyXG4vL3NlbGVjdG9yIGZvciBjcmVhdGVcclxuZXhwb3J0IGNvbnN0IHNlbGVjdGVkX2NyZWF0ZW5vdGUgPSBjcmVhdGVTZWxlY3RvcihcclxuICAgIGdldG5vdGVzLFxyXG4gICAgZGF0YSA9PiBkYXRhLmNyZWF0ZW5vdGUgLy8gU2VsZWN0aW5nIHRoZSBzdGF0ZSB3aGljaCB5b3Ugd291bGQgbGlrZSB0byBoYXZlIGkuZSBkYXRhLmdldG5vdGVzXHJcbikiLCJpbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcclxuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcbmltcG9ydCBIb21lIGZyb20gJy4uL2NvbXBvbmVudC9Ib21lJ1xyXG5pbXBvcnQgeyBmZXRjaF9nZXRub3Rlc19kYXRhIH0gZnJvbSAnLi4vYWN0aW9uL2luZGV4J1xyXG5pbXBvcnQgeyBzZWxlY3RvcnNfaG9tZSB9IGZyb20gJy4uL3NlbGVjdG9yL2luZGV4J1xyXG5cclxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XHJcbiAgICBjb25zdCB7IGdldG5vdGVzIH0gPSBzZWxlY3RvcnNfaG9tZShzdGF0ZSlcclxuICAgIHJldHVybiB7IGdldG5vdGVzIH1cclxufVxyXG5jb25zdCBhY3Rpb25zID0ge1xyXG4gICAgZmV0Y2hfZ2V0bm90ZXNfZGF0YTogZmV0Y2hfZ2V0bm90ZXNfZGF0YVxyXG59O1xyXG5cclxuLy8gR2V0IGFjdGlvbnMgYW5kIHBhc3MgdGhlbSBhcyBwcm9wcyBcclxuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XHJcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbnMsIGRpc3BhdGNoKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcihjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShIb21lKSlcclxuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgR0VUX05PVEVfUkVDRUlFVkVfREFUQSwgR0VUX05PVEVfQ09NUExFVEVEX0RBVEEgfSBmcm9tICcuL0FjdGlvbkNvbnN0YW50JztcclxuaW1wb3J0IGNvbmZpZyBmcm9tICcuLi8uLi9jb25maWcnO1xyXG5cclxuLyogXHJcbiAgICBUaGlzIFNlY3Rpb24gaXMgZm9yIGdldHRpbmcgYWxsIHRoZSBkYXRhLFxyXG4gICAgY2FsbGluZyBmZXRjaF9nZXRub3Rlc19kYXRhIEFjdGlvbiBmcm9tIHRoZSBVSSBcclxuKi9cclxuXHJcbmZ1bmN0aW9uIHJlcXVlc3RfZ2V0bm90ZXNfZGF0YSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogR0VUX05PVEVfUkVDRUlFVkVfREFUQVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZWNlaXZlX2dldG5vdGVzX2RhdGEoZGF0YSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBHRVRfTk9URV9DT01QTEVURURfREFUQSxcclxuICAgICAgICBnZXRub3RlczogZGF0YVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hfZ2V0bm90ZXNfZGF0YShkKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgZGlzcGF0Y2gocmVxdWVzdF9nZXRub3Rlc19kYXRhKCkpXHJcbiAgICAgICAgcmV0dXJuIGF4aW9zLmdldChjb25maWcuQkFTRV9VUkwgKyBgdGFza3NgKS50aGVuKFxyXG4gICAgICAgICAgICByZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChyZWNlaXZlX2dldG5vdGVzX2RhdGEocmVzcG9uc2UuZGF0YS5yZXN1bHQpKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3IgPT4gY29uc29sZS5sb2coXCJmYWlsIGFqYXggb24gaG9tZSBwYWdlXCIsIGVycm9yKVxyXG4gICAgICAgIClcclxuICAgIH1cclxufSIsImltcG9ydCB7IHNlbGVjdGVkX2dldG5vdGVzIH0gZnJvbSAnLi9Ib21lU2VsZWN0b3InO1xyXG5cclxuLyogXHJcbiAgICBDb21iaW5lIGFsbCB0aGUgc2VsZWN0b3JzIGluIGhlcmUgYW5kIGV4cG9ydCB0aGVtIGF0IHRoZSBzYW1lIHRpbWUsXHJcbiAgICBoYXZpbmcgaW5kZXguanMgd2lsbCBoZWxwIHRoZSBjb2RlIHRvIGJlIG1vcmUgcmVhZGFibGUgYW5kIGVhc3kgdG8gbWFuYWdlIGZvciBmdXR1cmUsXHJcbiAgICBpZiB5b3UgaGF2ZSBtb3JlIHNlbGVjdG9ycywgeW91IGNhbiBhZGQgdGhlbSBpbnRvIHRoaXMgc2VjdGlvbiBcclxuICAgIHRoZW4gY2FsbCB0aGVtIGF0IHlvdXIgY29udGFpbmVyIHBhZ2VcclxuKi9cclxuXHJcbmV4cG9ydCBjb25zdCBzZWxlY3RvcnNfaG9tZSA9IChzdGF0ZSkgPT4ge1xyXG4gICAgY29uc3QgZ2V0bm90ZXMgPSBzZWxlY3RlZF9nZXRub3RlcyhzdGF0ZSk7XHJcbiAgICByZXR1cm4geyBnZXRub3RlcyB9XHJcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGJhY2tncm91bmRDb2xvckRlZmF1bHQgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbMTAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs5MDBdO1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAvLyBQcmV2ZW50IHBhZGRpbmcgaXNzdWUgd2l0aCB0aGUgTW9kYWwgYW5kIGZpeGVkIHBvc2l0aW9uZWQgQXBwQmFyLlxuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXguYXBwQmFyLFxuICAgICAgZmxleFNocmluazogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cImZpeGVkXCJgLiAqL1xuICAgIHBvc2l0aW9uRml4ZWQ6IHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJhYnNvbHV0ZVwiYC4gKi9cbiAgICBwb3NpdGlvbkFic29sdXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwic3RpY2t5XCJgLiAqL1xuICAgIHBvc2l0aW9uU3RpY2t5OiB7XG4gICAgICBwb3NpdGlvbjogJ3N0aWNreScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0YXRpY1wiYC4gKi9cbiAgICBwb3NpdGlvblN0YXRpYzoge1xuICAgICAgcG9zaXRpb246ICdzdGF0aWMnLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWigwKScgLy8gTWFrZSBzdXJlIHdlIGNhbiBzZWUgdGhlIGVsZXZhdGlvbi5cblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInJlbGF0aXZlXCJgLiAqL1xuICAgIHBvc2l0aW9uUmVsYXRpdmU6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZGVmYXVsdFwiYC4gKi9cbiAgICBjb2xvckRlZmF1bHQ6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yRGVmYXVsdCxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHRcbiAgICB9XG4gIH07XG59O1xudmFyIEFwcEJhciA9IFJlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQXBwQmFyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ3ByaW1hcnknIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJHBvc2l0aW9uID0gcHJvcHMucG9zaXRpb24sXG4gICAgICBwb3NpdGlvbiA9IF9wcm9wcyRwb3NpdGlvbiA9PT0gdm9pZCAwID8gJ2ZpeGVkJyA6IF9wcm9wcyRwb3NpdGlvbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJwb3NpdGlvblwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFwZXIsIF9leHRlbmRzKHtcbiAgICBzcXVhcmU6IHRydWUsXG4gICAgY29tcG9uZW50OiBcImhlYWRlclwiLFxuICAgIGVsZXZhdGlvbjogNCxcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wicG9zaXRpb25cIi5jb25jYXQoY2FwaXRhbGl6ZShwb3NpdGlvbikpXSwgY2xhc3NOYW1lLCBjb2xvciAhPT0gJ2luaGVyaXQnICYmIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCB7XG4gICAgICBmaXhlZDogJ211aS1maXhlZCdcbiAgICB9W3Bvc2l0aW9uXSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQXBwQmFyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb25pbmcgdHlwZS4gVGhlIGJlaGF2aW9yIG9mIHRoZSBkaWZmZXJlbnQgb3B0aW9ucyBpcyBkZXNjcmliZWRcbiAgICogW2luIHRoZSBNRE4gd2ViIGRvY3NdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTGVhcm4vQ1NTL0NTU19sYXlvdXQvUG9zaXRpb25pbmcpLlxuICAgKiBOb3RlOiBgc3RpY2t5YCBpcyBub3QgdW5pdmVyc2FsbHkgc3VwcG9ydGVkIGFuZCB3aWxsIGZhbGwgYmFjayB0byBgc3RhdGljYCB3aGVuIHVuYXZhaWxhYmxlLlxuICAgKi9cbiAgcG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2Fic29sdXRlJywgJ2ZpeGVkJywgJ3JlbGF0aXZlJywgJ3N0YXRpYycsICdzdGlja3knXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQXBwQmFyJ1xufSkoQXBwQmFyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVHdXR0ZXJzPXtmYWxzZX1gLiAqL1xuICAgIGd1dHRlcnM6IF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygyKVxuICAgIH0sIHRoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpLCB7XG4gICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygzKSxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygzKVxuICAgIH0pLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInJlZ3VsYXJcImAuICovXG4gICAgcmVndWxhcjogdGhlbWUubWl4aW5zLnRvb2xiYXIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZGVuc2VcImAuICovXG4gICAgZGVuc2U6IHtcbiAgICAgIG1pbkhlaWdodDogNDhcbiAgICB9XG4gIH07XG59O1xudmFyIFRvb2xiYXIgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFRvb2xiYXIocHJvcHMsIHJlZikge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlR3V0dGVycyA9IHByb3BzLmRpc2FibGVHdXR0ZXJzLFxuICAgICAgZGlzYWJsZUd1dHRlcnMgPSBfcHJvcHMkZGlzYWJsZUd1dHRlcnMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVHdXR0ZXJzLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAncmVndWxhcicgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJ2YXJpYW50XCJdKTtcblxuICB2YXIgY2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZVByb3AsICFkaXNhYmxlR3V0dGVycyAmJiBjbGFzc2VzLmd1dHRlcnMpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUb29sYmFyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRvb2xiYXIgY2hpbGRyZW4sIHVzdWFsbHkgYSBtaXh0dXJlIG9mIGBJY29uQnV0dG9uYCwgYEJ1dHRvbmAgYW5kIGBUeXBvZ3JhcGh5YC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBkaXNhYmxlcyBndXR0ZXIgcGFkZGluZy5cbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsncmVndWxhcicsICdkZW5zZSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUb29sYmFyJ1xufSkoVG9vbGJhcik7IiwiaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0fSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7QXBwQmFyLCBUb29sYmFyLCBUeXBvZ3JhcGh5IH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnO1xyXG5pbXBvcnQgeyBmYWRlLCBtYWtlU3R5bGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXModGhlbWUgPT4gKHtcclxuICByb290OiB7XHJcbiAgICBmbGV4R3JvdzogMSxcclxuICB9LFxyXG4gIG1lbnVCdXR0b246IHtcclxuICAgIG1hcmdpblJpZ2h0OiB0aGVtZS5zcGFjaW5nKDIpLFxyXG4gIH0sXHJcbiAgdGl0bGU6IHtcclxuICAgIGZsZXhHcm93OiAxLFxyXG4gICAgZGlzcGxheTogJ25vbmUnLFxyXG4gICAgcG9zaXRpb246J2Fic29sdXRlJyxcclxuICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgnc20nKV06IHtcclxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcclxuICAgIH0sXHJcbiAgfSxcclxuICBzZWFyY2g6IHtcclxuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxyXG4gICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGUsIDAuMTUpLFxyXG4gICAgJyY6aG92ZXInOiB7XHJcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSwgMC4yNSksXHJcbiAgICB9LFxyXG4gICAgbWFyZ2luTGVmdDogXCIwICFpbXBvcnRhbnRcIixcclxuICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XHJcbiAgICAgIG1hcmdpbkxlZnQ6IHRoZW1lLnNwYWNpbmcoMSksXHJcbiAgICAgIHdpZHRoOiAnYXV0bycsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgc2VhcmNoSWNvbjoge1xyXG4gICAgd2lkdGg6IHRoZW1lLnNwYWNpbmcoNyksXHJcbiAgICBoZWlnaHQ6ICcxMDAlJyxcclxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxyXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXHJcbiAgfSxcclxuICBpbnB1dFJvb3Q6IHtcclxuICAgIGNvbG9yOiAnaW5oZXJpdCcsXHJcbiAgICB3aWR0aDogXCIxMDAlXCJcclxuICB9LFxyXG4gIGlucHV0SW5wdXQ6IHtcclxuICAgIHBhZGRpbmc6IHRoZW1lLnNwYWNpbmcoMSwgMSwgMSwgNyksXHJcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3dpZHRoJyksXHJcbiAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xyXG4gICAgICB3aWR0aDogXCIxMDAlXCIsXHJcbiAgICAgICcmOmZvY3VzJzoge1xyXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgfSxcclxuICBhcHBCYXI6IHtcclxuICAgIHRvcDogJ2F1dG8nLFxyXG4gICAgdG9wOiAwLFxyXG4gIH0sXHJcbn0pKTtcclxuXHJcbmNvbnN0IE5hdmJhciA9IHByb3BzID0+IHtcclxuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cclxuICAgICAgPEFwcEJhciBwb3NpdGlvbj1cImZpeGVkXCIgY2xhc3NOYW1lPXtjbGFzc2VzLmFwcEJhcn0+XHJcbiAgICAgICAgPFRvb2xiYXI+XHJcbiAgICAgICAgICA8VHlwb2dyYXBoeSBjbGFzc05hbWU9e2NsYXNzZXMudGl0bGV9IHZhcmlhbnQ9XCJoNlwiIG5vV3JhcD5cclxuICAgICAgICAgICAgVHJhdml4XHJcbiAgICAgICAgICA8L1R5cG9ncmFwaHk+XHJcbiAgICAgICAgPC9Ub29sYmFyPlxyXG4gICAgICA8L0FwcEJhcj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE5hdmJhcjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge1N3aXRjaCwgUm91dGUsIFJlZGlyZWN0fSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IHtIYXNoUm91dGVyIGFzIFJvdXRlcn0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCBIb21lVmlldyBmcm9tICcuL2NvbnRhaW5lci9Ib21lQ29udGFpbmVyJztcclxuaW1wb3J0IE5hdmJhciBmcm9tICcuL2NvbXBvbmVudC9OYXZiYXInO1xyXG5cclxuY2xhc3MgUm91dGVzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKXtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPFJvdXRlcj5cclxuICAgICAgICAgICAgICAgIDxOYXZiYXIgLz5cclxuICAgICAgICAgICAgICAgIDxTd2l0Y2g+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCIgY29tcG9uZW50PXtIb21lVmlld30gLz5cclxuICAgICAgICAgICAgICAgIDwvU3dpdGNoPlxyXG4gICAgICAgICAgICA8L1JvdXRlcj5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJvdXRlcztcclxuIiwiaW1wb3J0ICdiYWJlbC1wb2x5ZmlsbCc7XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XHJcbmltcG9ydCB7UHJvdmlkZXJ9IGZyb20gJ3JlYWN0LXJlZHV4JztcclxuaW1wb3J0IHsgc3RvcmUgfSBmcm9tICcuL3N0b3JlL1N0b3JlJztcclxuaW1wb3J0IFJvdXRlcyBmcm9tICcuL3JvdXRlJztcclxuaW1wb3J0ICcuL2Fzc2V0cy9jc3Mvc3R5bGUuY3NzJztcclxuaW1wb3J0ICcuL2Fzc2V0cy9zY3NzL3N0eWxlLnNjc3MnO1xyXG5cclxuUmVhY3RET00ucmVuZGVyKFxyXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XHJcbiAgICAgICAgPFJvdXRlcyAvPlxyXG4gICAgPC9Qcm92aWRlcj4sXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpXHJcbik7XHJcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICB3aWR0aDogJzFlbScsXG4gICAgICBoZWlnaHQ6ICcxZW0nLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDI0KSxcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnZmlsbCcsIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgIH0pXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJhY3Rpb25cImAuICovXG4gICAgY29sb3JBY3Rpb246IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmVcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiZGlzYWJsZWRcImAuICovXG4gICAgY29sb3JEaXNhYmxlZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmRpc2FibGVkXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBmb250U2l6ZUluaGVyaXQ6IHtcbiAgICAgIGZvbnRTaXplOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBmb250U2l6ZVNtYWxsOiB7XG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDIwKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIGZvbnRTaXplTGFyZ2U6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMzUpXG4gICAgfVxuICB9O1xufTtcbnZhciBTdmdJY29uID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdmdJY29uKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnc3ZnJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZm9udFNpemUgPSBwcm9wcy5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3Byb3BzJGZvbnRTaXplID09PSB2b2lkIDAgPyAnZGVmYXVsdCcgOiBfcHJvcHMkZm9udFNpemUsXG4gICAgICBodG1sQ29sb3IgPSBwcm9wcy5odG1sQ29sb3IsXG4gICAgICB0aXRsZUFjY2VzcyA9IHByb3BzLnRpdGxlQWNjZXNzLFxuICAgICAgX3Byb3BzJHZpZXdCb3ggPSBwcm9wcy52aWV3Qm94LFxuICAgICAgdmlld0JveCA9IF9wcm9wcyR2aWV3Qm94ID09PSB2b2lkIDAgPyAnMCAwIDI0IDI0JyA6IF9wcm9wcyR2aWV3Qm94LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiZm9udFNpemVcIiwgXCJodG1sQ29sb3JcIiwgXCJ0aXRsZUFjY2Vzc1wiLCBcInZpZXdCb3hcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgY29sb3IgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgZm9udFNpemUgIT09ICdkZWZhdWx0JyAmJiBjbGFzc2VzW1wiZm9udFNpemVcIi5jb25jYXQoY2FwaXRhbGl6ZShmb250U2l6ZSkpXSksXG4gICAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gICAgdmlld0JveDogdmlld0JveCxcbiAgICBjb2xvcjogaHRtbENvbG9yLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogdGl0bGVBY2Nlc3MgPyAnZmFsc2UnIDogJ3RydWUnLFxuICAgIHJvbGU6IHRpdGxlQWNjZXNzID8gJ2ltZycgOiAncHJlc2VudGF0aW9uJyxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuLCB0aXRsZUFjY2VzcyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiLCBudWxsLCB0aXRsZUFjY2VzcykgOiBudWxsKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3ZnSWNvbi5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBOb2RlIHBhc3NlZCBpbnRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogWW91IGNhbiB1c2UgdGhlIGBodG1sQ29sb3JgIHByb3AgdG8gYXBwbHkgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2FjdGlvbicsICdkaXNhYmxlZCcsICdlcnJvcicsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBUaGUgZm9udFNpemUgYXBwbGllZCB0byB0aGUgaWNvbi4gRGVmYXVsdHMgdG8gMjRweCwgYnV0IGNhbiBiZSBjb25maWd1cmUgdG8gaW5oZXJpdCBmb250IHNpemUuXG4gICAqL1xuICBmb250U2l6ZTogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdpbmhlcml0JywgJ2xhcmdlJywgJ3NtYWxsJ10pLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGh0bWxDb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHNoYXBlLXJlbmRlcmluZyBhdHRyaWJ1dGUuIFRoZSBiZWhhdmlvciBvZiB0aGUgZGlmZmVyZW50IG9wdGlvbnMgaXMgZGVzY3JpYmVkIG9uIHRoZVxuICAgKiBbTUROIFdlYiBEb2NzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlL3NoYXBlLXJlbmRlcmluZykuXG4gICAqIElmIHlvdSBhcmUgaGF2aW5nIGlzc3VlcyB3aXRoIGJsdXJyeSBpY29ucyB5b3Ugc2hvdWxkIGludmVzdGlnYXRlIHRoaXMgcHJvcGVydHkuXG4gICAqL1xuICBzaGFwZVJlbmRlcmluZzogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogUHJvdmlkZXMgYSBodW1hbi1yZWFkYWJsZSB0aXRsZSBmb3IgdGhlIGVsZW1lbnQgdGhhdCBjb250YWlucyBpdC5cbiAgICogaHR0cHM6Ly93d3cudzMub3JnL1RSL1NWRy1hY2Nlc3MvI0VxdWl2YWxlbnRcbiAgICovXG4gIHRpdGxlQWNjZXNzOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgeW91IHRvIHJlZGVmaW5lIHdoYXQgdGhlIGNvb3JkaW5hdGVzIHdpdGhvdXQgdW5pdHMgbWVhbiBpbnNpZGUgYW4gU1ZHIGVsZW1lbnQuXG4gICAqIEZvciBleGFtcGxlLCBpZiB0aGUgU1ZHIGVsZW1lbnQgaXMgNTAwICh3aWR0aCkgYnkgMjAwIChoZWlnaHQpLFxuICAgKiBhbmQgeW91IHBhc3Mgdmlld0JveD1cIjAgMCA1MCAyMFwiLFxuICAgKiB0aGlzIG1lYW5zIHRoYXQgdGhlIGNvb3JkaW5hdGVzIGluc2lkZSB0aGUgU1ZHIHdpbGwgZ28gZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyICgwLDApXG4gICAqIHRvIGJvdHRvbSByaWdodCAoNTAsMjApIGFuZCBlYWNoIHVuaXQgd2lsbCBiZSB3b3J0aCAxMHB4LlxuICAgKi9cbiAgdmlld0JveDogUHJvcFR5cGVzLnN0cmluZ1xufSA6IHZvaWQgMDtcblN2Z0ljb24ubXVpTmFtZSA9ICdTdmdJY29uJztcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlTdmdJY29uJ1xufSkoU3ZnSWNvbik7IiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vU3ZnSWNvbic7IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnQgdmFyIGlzQnJvd3NlciA9ICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yod2luZG93KSkgPT09IFwib2JqZWN0XCIgJiYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGRvY3VtZW50KSkgPT09ICdvYmplY3QnICYmIGRvY3VtZW50Lm5vZGVUeXBlID09PSA5O1xuXG5leHBvcnQgZGVmYXVsdCBpc0Jyb3dzZXI7XG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IGlzSW5Ccm93c2VyIGZyb20gJ2lzLWluLWJyb3dzZXInO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcblxudmFyIHBsYWluT2JqZWN0Q29uc3RydXJjdG9yID0ge30uY29uc3RydWN0b3I7XG5mdW5jdGlvbiBjbG9uZVN0eWxlKHN0eWxlKSB7XG4gIGlmIChzdHlsZSA9PSBudWxsIHx8IHR5cGVvZiBzdHlsZSAhPT0gJ29iamVjdCcpIHJldHVybiBzdHlsZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUpKSByZXR1cm4gc3R5bGUubWFwKGNsb25lU3R5bGUpO1xuICBpZiAoc3R5bGUuY29uc3RydWN0b3IgIT09IHBsYWluT2JqZWN0Q29uc3RydXJjdG9yKSByZXR1cm4gc3R5bGU7XG4gIHZhciBuZXdTdHlsZSA9IHt9O1xuXG4gIGZvciAodmFyIG5hbWUgaW4gc3R5bGUpIHtcbiAgICBuZXdTdHlsZVtuYW1lXSA9IGNsb25lU3R5bGUoc3R5bGVbbmFtZV0pO1xuICB9XG5cbiAgcmV0dXJuIG5ld1N0eWxlO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIHJ1bGUgaW5zdGFuY2UuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gIGlmIChuYW1lID09PSB2b2lkIDApIHtcbiAgICBuYW1lID0gJ3VubmFtZWQnO1xuICB9XG5cbiAgdmFyIGpzcyA9IG9wdGlvbnMuanNzO1xuICB2YXIgZGVjbENvcHkgPSBjbG9uZVN0eWxlKGRlY2wpO1xuICB2YXIgcnVsZSA9IGpzcy5wbHVnaW5zLm9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsQ29weSwgb3B0aW9ucyk7XG4gIGlmIChydWxlKSByZXR1cm4gcnVsZTsgLy8gSXQgaXMgYW4gYXQtcnVsZSBhbmQgaXQgaGFzIG5vIGluc3RhbmNlLlxuXG4gIGlmIChuYW1lWzBdID09PSAnQCcpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFVua25vd24gcnVsZSBcIiArIG5hbWUpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciBqb2luID0gZnVuY3Rpb24gam9pbih2YWx1ZSwgYnkpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBSZW1vdmUgIWltcG9ydGFudCBmcm9tIHRoZSB2YWx1ZSwgaXQgd2lsbCBiZSByZWFkZGVkIGxhdGVyLlxuICAgIGlmICh2YWx1ZVtpXSA9PT0gJyFpbXBvcnRhbnQnKSBicmVhaztcbiAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gYnk7XG4gICAgcmVzdWx0ICs9IHZhbHVlW2ldO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4vKipcbiAqIENvbnZlcnRzIGFycmF5IHZhbHVlcyB0byBzdHJpbmcuXG4gKlxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXV1gID4gYG1hcmdpbjogNXB4IDEwcHg7YFxuICogYGJvcmRlcjogWycxcHgnLCAnMnB4J11gID4gYGJvcmRlcjogMXB4LCAycHg7YFxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXSwgJyFpbXBvcnRhbnQnXWAgPiBgbWFyZ2luOiA1cHggMTBweCAhaW1wb3J0YW50O2BcbiAqIGBjb2xvcjogWydyZWQnLCAhaW1wb3J0YW50XWAgPiBgY29sb3I6IHJlZCAhaW1wb3J0YW50O2BcbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQ3NzVmFsdWUodmFsdWUsIGlnbm9yZUltcG9ydGFudCkge1xuICBpZiAoaWdub3JlSW1wb3J0YW50ID09PSB2b2lkIDApIHtcbiAgICBpZ25vcmVJbXBvcnRhbnQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgdmFyIGNzc1ZhbHVlID0gJyc7IC8vIFN1cHBvcnQgc3BhY2Ugc2VwYXJhdGVkIHZhbHVlcyB2aWEgYFtbJzVweCcsICcxMHB4J11dYC5cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZVswXSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgICBpZiAoY3NzVmFsdWUpIGNzc1ZhbHVlICs9ICcsICc7XG4gICAgICBjc3NWYWx1ZSArPSBqb2luKHZhbHVlW2ldLCAnICcpO1xuICAgIH1cbiAgfSBlbHNlIGNzc1ZhbHVlID0gam9pbih2YWx1ZSwgJywgJyk7IC8vIEFkZCAhaW1wb3J0YW50LCBiZWNhdXNlIGl0IHdhcyBpZ25vcmVkLlxuXG5cbiAgaWYgKCFpZ25vcmVJbXBvcnRhbnQgJiYgdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgIGNzc1ZhbHVlICs9ICcgIWltcG9ydGFudCc7XG4gIH1cblxuICByZXR1cm4gY3NzVmFsdWU7XG59XG5cbi8qKlxuICogSW5kZW50IGEgc3RyaW5nLlxuICogaHR0cDovL2pzcGVyZi5jb20vYXJyYXktam9pbi12cy1mb3JcbiAqL1xuZnVuY3Rpb24gaW5kZW50U3RyKHN0ciwgaW5kZW50KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgaW5kZW50OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ICs9ICcgICc7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc3RyO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIFJ1bGUgdG8gQ1NTIHN0cmluZy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQ3NzKHNlbGVjdG9yLCBzdHlsZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAoIXN0eWxlKSByZXR1cm4gcmVzdWx0O1xuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkaW5kZW50ID0gX29wdGlvbnMuaW5kZW50LFxuICAgICAgaW5kZW50ID0gX29wdGlvbnMkaW5kZW50ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkaW5kZW50O1xuICB2YXIgZmFsbGJhY2tzID0gc3R5bGUuZmFsbGJhY2tzO1xuICBpZiAoc2VsZWN0b3IpIGluZGVudCsrOyAvLyBBcHBseSBmYWxsYmFja3MgZmlyc3QuXG5cbiAgaWYgKGZhbGxiYWNrcykge1xuICAgIC8vIEFycmF5IHN5bnRheCB7ZmFsbGJhY2tzOiBbe3Byb3A6IHZhbHVlfV19XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmFsbGJhY2tzKSkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGZhbGxiYWNrcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIGZhbGxiYWNrID0gZmFsbGJhY2tzW2luZGV4XTtcblxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGZhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZmFsbGJhY2tbcHJvcF07XG5cbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIocHJvcCArIFwiOiBcIiArIHRvQ3NzVmFsdWUodmFsdWUpICsgXCI7XCIsIGluZGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdCBzeW50YXgge2ZhbGxiYWNrczoge3Byb3A6IHZhbHVlfX1cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIGZhbGxiYWNrcykge1xuICAgICAgICB2YXIgX3ZhbHVlID0gZmFsbGJhY2tzW19wcm9wXTtcblxuICAgICAgICBpZiAoX3ZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZSkgKyBcIjtcIiwgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9wcm9wMiBpbiBzdHlsZSkge1xuICAgIHZhciBfdmFsdWUyID0gc3R5bGVbX3Byb3AyXTtcblxuICAgIGlmIChfdmFsdWUyICE9IG51bGwgJiYgX3Byb3AyICE9PSAnZmFsbGJhY2tzJykge1xuICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgcmVzdWx0ICs9IFwiXCIgKyBpbmRlbnRTdHIoX3Byb3AyICsgXCI6IFwiICsgdG9Dc3NWYWx1ZShfdmFsdWUyKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgIH1cbiAgfSAvLyBBbGxvdyBlbXB0eSBzdHlsZSBpbiB0aGlzIGNhc2UsIGJlY2F1c2UgcHJvcGVydGllcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5LlxuXG5cbiAgaWYgKCFyZXN1bHQgJiYgIW9wdGlvbnMuYWxsb3dFbXB0eSkgcmV0dXJuIHJlc3VsdDsgLy8gV2hlbiBydWxlIGlzIGJlaW5nIHN0cmluZ2lmaWVkIGJlZm9yZSBzZWxlY3RvciB3YXMgZGVmaW5lZC5cblxuICBpZiAoIXNlbGVjdG9yKSByZXR1cm4gcmVzdWx0O1xuICBpbmRlbnQtLTtcbiAgaWYgKHJlc3VsdCkgcmVzdWx0ID0gXCJcXG5cIiArIHJlc3VsdCArIFwiXFxuXCI7XG4gIHJldHVybiBpbmRlbnRTdHIoc2VsZWN0b3IgKyBcIiB7XCIgKyByZXN1bHQsIGluZGVudCkgKyBpbmRlbnRTdHIoJ30nLCBpbmRlbnQpO1xufVxuXG52YXIgZXNjYXBlUmVnZXggPSAvKFtbXFxdLiMqJD48K349fF46KCksXCInYFxcc10pL2c7XG52YXIgbmF0aXZlRXNjYXBlID0gdHlwZW9mIENTUyAhPT0gJ3VuZGVmaW5lZCcgJiYgQ1NTLmVzY2FwZTtcbnZhciBlc2NhcGUgPSAoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gbmF0aXZlRXNjYXBlID8gbmF0aXZlRXNjYXBlKHN0cikgOiBzdHIucmVwbGFjZShlc2NhcGVSZWdleCwgJ1xcXFwkMScpO1xufSk7XG5cbnZhciBCYXNlU3R5bGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmFzZVN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3N0eWxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdmFyIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIGlmIChzaGVldCkgdGhpcy5yZW5kZXJlciA9IHNoZWV0LnJlbmRlcmVyO2Vsc2UgaWYgKFJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBvciBzZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gQmFzZVN0eWxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnByb3AgPSBmdW5jdGlvbiBwcm9wKG5hbWUsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgLy8gSXQncyBhIGdldHRlci5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMuc3R5bGVbbmFtZV07IC8vIERvbid0IGRvIGFueXRoaW5nIGlmIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQuXG5cbiAgICB2YXIgZm9yY2UgPSBvcHRpb25zID8gb3B0aW9ucy5mb3JjZSA6IGZhbHNlO1xuICAgIGlmICghZm9yY2UgJiYgdGhpcy5zdHlsZVtuYW1lXSA9PT0gdmFsdWUpIHJldHVybiB0aGlzO1xuICAgIHZhciBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMucHJvY2VzcyAhPT0gZmFsc2UpIHtcbiAgICAgIG5ld1ZhbHVlID0gdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uQ2hhbmdlVmFsdWUodmFsdWUsIG5hbWUsIHRoaXMpO1xuICAgIH1cblxuICAgIHZhciBpc0VtcHR5ID0gbmV3VmFsdWUgPT0gbnVsbCB8fCBuZXdWYWx1ZSA9PT0gZmFsc2U7XG4gICAgdmFyIGlzRGVmaW5lZCA9IG5hbWUgaW4gdGhpcy5zdHlsZTsgLy8gVmFsdWUgaXMgZW1wdHkgYW5kIHdhc24ndCBkZWZpbmVkIGJlZm9yZS5cblxuICAgIGlmIChpc0VtcHR5ICYmICFpc0RlZmluZWQgJiYgIWZvcmNlKSByZXR1cm4gdGhpczsgLy8gV2UgYXJlIGdvaW5nIHRvIHJlbW92ZSB0aGlzIHZhbHVlLlxuXG4gICAgdmFyIHJlbW92ZSA9IGlzRW1wdHkgJiYgaXNEZWZpbmVkO1xuICAgIGlmIChyZW1vdmUpIGRlbGV0ZSB0aGlzLnN0eWxlW25hbWVdO2Vsc2UgdGhpcy5zdHlsZVtuYW1lXSA9IG5ld1ZhbHVlOyAvLyBSZW5kZXJhYmxlIGlzIGRlZmluZWQgaWYgU3R5bGVTaGVldCBvcHRpb24gYGxpbmtgIGlzIHRydWUuXG5cbiAgICBpZiAodGhpcy5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIGlmIChyZW1vdmUpIHRoaXMucmVuZGVyZXIucmVtb3ZlUHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lKTtlbHNlIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5yZW5kZXJhYmxlLCBuYW1lLCBuZXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBpZiAoc2hlZXQgJiYgc2hlZXQuYXR0YWNoZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBSdWxlIGlzIG5vdCBsaW5rZWQuIE1pc3Npbmcgc2hlZXQgb3B0aW9uIFwibGluazogdHJ1ZVwiLicpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBCYXNlU3R5bGVSdWxlO1xufSgpO1xudmFyIFN0eWxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Jhc2VTdHlsZVJ1bGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3R5bGVSdWxlLCBfQmFzZVN0eWxlUnVsZSk7XG5cbiAgZnVuY3Rpb24gU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9CYXNlU3R5bGVSdWxlLmNhbGwodGhpcywga2V5LCBzdHlsZSwgb3B0aW9ucykgfHwgdGhpcztcbiAgICBfdGhpcy5zZWxlY3RvclRleHQgPSB2b2lkIDA7XG4gICAgX3RoaXMuaWQgPSB2b2lkIDA7XG4gICAgX3RoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB2YXIgc2VsZWN0b3IgPSBvcHRpb25zLnNlbGVjdG9yLFxuICAgICAgICBzY29wZWQgPSBvcHRpb25zLnNjb3BlZCxcbiAgICAgICAgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBnZW5lcmF0ZUlkID0gb3B0aW9ucy5nZW5lcmF0ZUlkO1xuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICB9IGVsc2UgaWYgKHNjb3BlZCAhPT0gZmFsc2UpIHtcbiAgICAgIF90aGlzLmlkID0gZ2VuZXJhdGVJZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKSwgc2hlZXQpO1xuICAgICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gXCIuXCIgKyBlc2NhcGUoX3RoaXMuaWQpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogU2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICogQXR0ZW50aW9uOiB1c2UgdGhpcyB3aXRoIGNhdXRpb24uIE1vc3QgYnJvd3NlcnMgZGlkbid0IGltcGxlbWVudFxuICAgKiBzZWxlY3RvclRleHQgc2V0dGVyLCBzbyB0aGlzIG1heSByZXN1bHQgaW4gcmVyZW5kZXJpbmcgb2YgZW50aXJlIFN0eWxlIFNoZWV0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8yID0gU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQXBwbHkgcnVsZSB0byBhbiBlbGVtZW50IGlubGluZS5cbiAgICovXG4gIF9wcm90bzIuYXBwbHlUbyA9IGZ1bmN0aW9uIGFwcGx5VG8ocmVuZGVyYWJsZSkge1xuICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7XG5cbiAgICBpZiAocmVuZGVyZXIpIHtcbiAgICAgIHZhciBqc29uID0gdGhpcy50b0pTT04oKTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBqc29uKSB7XG4gICAgICAgIHJlbmRlcmVyLnNldFByb3BlcnR5KHJlbmRlcmFibGUsIHByb3AsIGpzb25bcHJvcF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHJ1bGUuXG4gICAqIEZhbGxiYWNrcyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICogVXNlZnVsIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHZhciBqc29uID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc3R5bGVbcHJvcF07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykganNvbltwcm9wXSA9IHZhbHVlO2Vsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSBqc29uW3Byb3BdID0gdG9Dc3NWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuICAgIHZhciBvcHRzID0gbGluayA/IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBhbGxvd0VtcHR5OiB0cnVlXG4gICAgfSkgOiBvcHRpb25zO1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLnNlbGVjdG9yVGV4dCwgdGhpcy5zdHlsZSwgb3B0cyk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFN0eWxlUnVsZSwgW3tcbiAgICBrZXk6IFwic2VsZWN0b3JcIixcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChzZWxlY3Rvcikge1xuICAgICAgaWYgKHNlbGVjdG9yID09PSB0aGlzLnNlbGVjdG9yVGV4dCkgcmV0dXJuO1xuICAgICAgdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcbiAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIsXG4gICAgICAgICAgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyYWJsZTtcbiAgICAgIGlmICghcmVuZGVyYWJsZSB8fCAhcmVuZGVyZXIpIHJldHVybjtcbiAgICAgIHZhciBoYXNDaGFuZ2VkID0gcmVuZGVyZXIuc2V0U2VsZWN0b3IocmVuZGVyYWJsZSwgc2VsZWN0b3IpOyAvLyBJZiBzZWxlY3RvciBzZXR0ZXIgaXMgbm90IGltcGxlbWVudGVkLCByZXJlbmRlciB0aGUgcnVsZS5cblxuICAgICAgaWYgKCFoYXNDaGFuZ2VkKSB7XG4gICAgICAgIHJlbmRlcmVyLnJlcGxhY2VSdWxlKHJlbmRlcmFibGUsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgICAqL1xuICAgICxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdG9yVGV4dDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3R5bGVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5TdHlsZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyB8fCBvcHRpb25zLnBhcmVudCAmJiBvcHRpb25zLnBhcmVudC50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHlsZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyA9IHtcbiAgaW5kZW50OiAxLFxuICBjaGlsZHJlbjogdHJ1ZVxufTtcbnZhciBhdFJlZ0V4cCA9IC9AKFtcXHctXSspLztcbi8qKlxuICogQ29uZGl0aW9uYWwgcnVsZSBmb3IgQG1lZGlhLCBAc3VwcG9ydHNcbiAqL1xuXG52YXIgQ29uZGl0aW9uYWxSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2NvbmRpdGlvbmFsJztcbiAgICB0aGlzLmF0ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdmFyIGF0TWF0Y2ggPSBrZXkubWF0Y2goYXRSZWdFeHApO1xuICAgIHRoaXMuYXQgPSBhdE1hdGNoID8gYXRNYXRjaFsxXSA6ICd1bmtub3duJztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBDb25kaXRpb25hbFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucztcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbmRlbnQgPT0gbnVsbCkgb3B0aW9ucy5pbmRlbnQgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmluZGVudDtcbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PSBudWxsKSBvcHRpb25zLmNoaWxkcmVuID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucy5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMua2V5ICsgXCIge31cIjtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIHJldHVybiBjaGlsZHJlbiA/IHRoaXMua2V5ICsgXCIge1xcblwiICsgY2hpbGRyZW4gKyBcIlxcbn1cIiA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBDb25kaXRpb25hbFJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwID0gL0BtZWRpYXxAc3VwcG9ydHNcXHMrLztcbnZhciBwbHVnaW5Db25kaXRpb25hbFJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cC50ZXN0KGtleSkgPyBuZXcgQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEgPSB7XG4gIGluZGVudDogMSxcbiAgY2hpbGRyZW46IHRydWVcbn07XG52YXIgbmFtZVJlZ0V4cCA9IC9Aa2V5ZnJhbWVzXFxzKyhbXFx3LV0rKS87XG4vKipcbiAqIFJ1bGUgZm9yIEBrZXlmcmFtZXNcbiAqL1xuXG52YXIgS2V5ZnJhbWVzUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAna2V5ZnJhbWVzJztcbiAgICB0aGlzLmF0ID0gJ0BrZXlmcmFtZXMnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMubmFtZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdmFyIG5hbWVNYXRjaCA9IGtleS5tYXRjaChuYW1lUmVnRXhwKTtcblxuICAgIGlmIChuYW1lTWF0Y2ggJiYgbmFtZU1hdGNoWzFdKSB7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lTWF0Y2hbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmFtZSA9ICdub25hbWUnO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBCYWQga2V5ZnJhbWVzIG5hbWUgXCIgKyBrZXkpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHRoaXMua2V5ID0gdGhpcy50eXBlICsgXCItXCIgKyB0aGlzLm5hbWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2NvcGVkID0gb3B0aW9ucy5zY29wZWQsXG4gICAgICAgIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgZ2VuZXJhdGVJZCA9IG9wdGlvbnMuZ2VuZXJhdGVJZDtcbiAgICB0aGlzLmlkID0gc2NvcGVkID09PSBmYWxzZSA/IHRoaXMubmFtZSA6IGVzY2FwZShnZW5lcmF0ZUlkKHRoaXMsIHNoZWV0KSk7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBmcmFtZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIGZyYW1lc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgcGFyZW50OiB0aGlzXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEtleWZyYW1lc1J1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5pbmRlbnQ7XG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT0gbnVsbCkgb3B0aW9ucy5jaGlsZHJlbiA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgaWYgKGNoaWxkcmVuKSBjaGlsZHJlbiA9IFwiXFxuXCIgKyBjaGlsZHJlbiArIFwiXFxuXCI7XG4gICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7XCIgKyBjaGlsZHJlbiArIFwifVwiO1xuICB9O1xuXG4gIHJldHVybiBLZXlmcmFtZXNSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCQxID0gL0BrZXlmcmFtZXNcXHMrLztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG5cbnZhciBmaW5kUmVmZXJlbmNlZEtleWZyYW1lID0gZnVuY3Rpb24gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIGtleWZyYW1lcykge1xuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsLnJlcGxhY2UocmVmUmVnRXhwLCBmdW5jdGlvbiAobWF0Y2gsIG5hbWUpIHtcbiAgICAgIGlmIChuYW1lIGluIGtleWZyYW1lcykge1xuICAgICAgICByZXR1cm4ga2V5ZnJhbWVzW25hbWVdO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFJlZmVyZW5jZWQga2V5ZnJhbWVzIHJ1bGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZC5cIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcbi8qKlxuICogUmVwbGFjZSB0aGUgcmVmZXJlbmNlIGZvciBhIGFuaW1hdGlvbiBuYW1lLlxuICovXG5cblxudmFyIHJlcGxhY2VSZWYgPSBmdW5jdGlvbiByZXBsYWNlUmVmKHN0eWxlLCBwcm9wLCBrZXlmcmFtZXMpIHtcbiAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gIHZhciByZWZLZXlmcmFtZSA9IGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsdWUsIGtleWZyYW1lcyk7XG5cbiAgaWYgKHJlZktleWZyYW1lICE9PSB2YWx1ZSkge1xuICAgIHN0eWxlW3Byb3BdID0gcmVmS2V5ZnJhbWU7XG4gIH1cbn07XG5cbnZhciBwbHVnaW4gPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleVJlZ0V4cCQxLnRlc3Qoa2V5KSA/IG5ldyBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH0sXG4gIC8vIEFuaW1hdGlvbiBuYW1lIHJlZiByZXBsYWNlci5cbiAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScgfHwgIXNoZWV0KSByZXR1cm4gc3R5bGU7XG4gICAgaWYgKCdhbmltYXRpb24tbmFtZScgaW4gc3R5bGUpIHJlcGxhY2VSZWYoc3R5bGUsICdhbmltYXRpb24tbmFtZScsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgaWYgKCdhbmltYXRpb24nIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uJywgc2hlZXQua2V5ZnJhbWVzKTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG4gIG9uQ2hhbmdlVmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgaWYgKCFzaGVldCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgIHJldHVybiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwgc2hlZXQua2V5ZnJhbWVzKTtcblxuICAgICAgY2FzZSAnYW5pbWF0aW9uLW5hbWUnOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgS2V5ZnJhbWVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmFzZVN0eWxlUnVsZSkge1xuICBfaW5oZXJpdHNMb29zZShLZXlmcmFtZVJ1bGUsIF9CYXNlU3R5bGVSdWxlKTtcblxuICBmdW5jdGlvbiBLZXlmcmFtZVJ1bGUoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX0Jhc2VTdHlsZVJ1bGUuY2FsbC5hcHBseShfQmFzZVN0eWxlUnVsZSwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZVJ1bGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5LZXlmcmFtZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHJldHVybiBuZXcgS2V5ZnJhbWVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG52YXIgRm9udEZhY2VSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZm9udC1mYWNlJztcbiAgICB0aGlzLmF0ID0gJ0Bmb250LWZhY2UnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEZvbnRGYWNlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuc3R5bGUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdG9Dc3ModGhpcy5rZXksIHRoaXMuc3R5bGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVbaW5kZXggKyAxXSkgc3RyICs9ICdcXG4nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cblxuICAgIHJldHVybiB0b0Nzcyh0aGlzLmtleSwgdGhpcy5zdHlsZSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIEZvbnRGYWNlUnVsZTtcbn0oKTtcbnZhciBwbHVnaW5Gb250RmFjZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4ga2V5ID09PSAnQGZvbnQtZmFjZScgPyBuZXcgRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFZpZXdwb3J0UnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3ZpZXdwb3J0JztcbiAgICB0aGlzLmF0ID0gJ0B2aWV3cG9ydCc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVmlld3BvcnRSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gVmlld3BvcnRSdWxlO1xufSgpO1xudmFyIHBsdWdpblZpZXdwb3J0UnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgPT09ICdAdmlld3BvcnQnIHx8IGtleSA9PT0gJ0AtbXMtdmlld3BvcnQnID8gbmV3IFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBTaW1wbGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2ltcGxlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ3NpbXBsZSc7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy52YWx1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyYWJsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbiAgdmFyIF9wcm90byA9IFNpbXBsZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy52YWx1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3RyICs9IHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlW2luZGV4XSArIFwiO1wiO1xuICAgICAgICBpZiAodGhpcy52YWx1ZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlICsgXCI7XCI7XG4gIH07XG5cbiAgcmV0dXJuIFNpbXBsZVJ1bGU7XG59KCk7XG52YXIga2V5c01hcCA9IHtcbiAgJ0BjaGFyc2V0JzogdHJ1ZSxcbiAgJ0BpbXBvcnQnOiB0cnVlLFxuICAnQG5hbWVzcGFjZSc6IHRydWVcbn07XG52YXIgcGx1Z2luU2ltcGxlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgaW4ga2V5c01hcCA/IG5ldyBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIHBsdWdpbnMgPSBbcGx1Z2luU3R5bGVSdWxlLCBwbHVnaW5Db25kaXRpb25hbFJ1bGUsIHBsdWdpbiwgcGx1Z2luS2V5ZnJhbWVSdWxlLCBwbHVnaW5Gb250RmFjZVJ1bGUsIHBsdWdpblZpZXdwb3J0UnVsZSwgcGx1Z2luU2ltcGxlUnVsZV07XG5cbnZhciBkZWZhdWx0VXBkYXRlT3B0aW9ucyA9IHtcbiAgcHJvY2VzczogdHJ1ZVxufTtcbnZhciBmb3JjZVVwZGF0ZU9wdGlvbnMgPSB7XG4gIGZvcmNlOiB0cnVlLFxuICBwcm9jZXNzOiB0cnVlXG4gIC8qKlxuICAgKiBDb250YWlucyBydWxlcyBvYmplY3RzIGFuZCBhbGxvd3MgYWRkaW5nL3JlbW92aW5nIGV0Yy5cbiAgICogSXMgdXNlZCBmb3IgZS5nLiBieSBgU3R5bGVTaGVldGAgb3IgYENvbmRpdGlvbmFsUnVsZWAuXG4gICAqL1xuXG59O1xuXG52YXIgUnVsZUxpc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBSdWxlcyByZWdpc3RyeSBmb3IgYWNjZXNzIGJ5IC5nZXQoKSBtZXRob2QuXG4gIC8vIEl0IGNvbnRhaW5zIHRoZSBzYW1lIHJ1bGUgcmVnaXN0ZXJlZCBieSBuYW1lIGFuZCBieSBzZWxlY3Rvci5cbiAgLy8gT3JpZ2luYWwgc3R5bGVzIG9iamVjdC5cbiAgLy8gVXNlZCB0byBlbnN1cmUgY29ycmVjdCBydWxlcyBvcmRlci5cbiAgZnVuY3Rpb24gUnVsZUxpc3Qob3B0aW9ucykge1xuICAgIHRoaXMubWFwID0ge307XG4gICAgdGhpcy5yYXcgPSB7fTtcbiAgICB0aGlzLmluZGV4ID0gW107XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleWZyYW1lcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuY2xhc3NlcyA9IG9wdGlvbnMuY2xhc3NlcztcbiAgICB0aGlzLmtleWZyYW1lcyA9IG9wdGlvbnMua2V5ZnJhbWVzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUuXG4gICAqXG4gICAqIFdpbGwgbm90IHJlbmRlciBhZnRlciBTdHlsZSBTaGVldCB3YXMgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFJ1bGVMaXN0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKGtleSwgZGVjbCwgcnVsZU9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGFyZW50ID0gX3RoaXMkb3B0aW9ucy5wYXJlbnQsXG4gICAgICAgIHNoZWV0ID0gX3RoaXMkb3B0aW9ucy5zaGVldCxcbiAgICAgICAganNzID0gX3RoaXMkb3B0aW9ucy5qc3MsXG4gICAgICAgIFJlbmRlcmVyID0gX3RoaXMkb3B0aW9ucy5SZW5kZXJlcixcbiAgICAgICAgZ2VuZXJhdGVJZCA9IF90aGlzJG9wdGlvbnMuZ2VuZXJhdGVJZCxcbiAgICAgICAgc2NvcGVkID0gX3RoaXMkb3B0aW9ucy5zY29wZWQ7XG5cbiAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHtcbiAgICAgIGNsYXNzZXM6IHRoaXMuY2xhc3NlcyxcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAganNzOiBqc3MsXG4gICAgICBSZW5kZXJlcjogUmVuZGVyZXIsXG4gICAgICBnZW5lcmF0ZUlkOiBnZW5lcmF0ZUlkLFxuICAgICAgc2NvcGVkOiBzY29wZWRcbiAgICB9LCBydWxlT3B0aW9ucyk7IC8vIFdlIG5lZWQgdG8gc2F2ZSB0aGUgb3JpZ2luYWwgZGVjbCBiZWZvcmUgY3JlYXRpbmcgdGhlIHJ1bGVcbiAgICAvLyBiZWNhdXNlIGNhY2hlIHBsdWdpbiBuZWVkcyB0byB1c2UgaXQgYXMgYSBrZXkgdG8gcmV0dXJuIGEgY2FjaGVkIHJ1bGUuXG5cblxuICAgIHRoaXMucmF3W2tleV0gPSBkZWNsO1xuXG4gICAgaWYgKGtleSBpbiB0aGlzLmNsYXNzZXMpIHtcbiAgICAgIC8vIEZvciBlLmcuIHJ1bGVzIGluc2lkZSBvZiBAbWVkaWEgY29udGFpbmVyXG4gICAgICBvcHRpb25zLnNlbGVjdG9yID0gXCIuXCIgKyBlc2NhcGUodGhpcy5jbGFzc2VzW2tleV0pO1xuICAgIH1cblxuICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShrZXksIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5yZWdpc3RlcihydWxlKTtcbiAgICB2YXIgaW5kZXggPSBvcHRpb25zLmluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzLmluZGV4Lmxlbmd0aCA6IG9wdGlvbnMuaW5kZXg7XG4gICAgdGhpcy5pbmRleC5zcGxpY2UoaW5kZXgsIDAsIHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcFtuYW1lXTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKHJ1bGUpIHtcbiAgICB0aGlzLnVucmVnaXN0ZXIocnVsZSk7XG4gICAgZGVsZXRlIHRoaXMucmF3W3J1bGUua2V5XTtcbiAgICB0aGlzLmluZGV4LnNwbGljZSh0aGlzLmluZGV4T2YocnVsZSksIDEpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXguaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogUnVuIGBvblByb2Nlc3NSdWxlKClgIHBsdWdpbnMgb24gZXZlcnkgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucHJvY2VzcyA9IGZ1bmN0aW9uIHByb2Nlc3MoKSB7XG4gICAgdmFyIHBsdWdpbnMkJDEgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnM7IC8vIFdlIG5lZWQgdG8gY2xvbmUgYXJyYXkgYmVjYXVzZSBpZiB3ZSBtb2RpZnkgdGhlIGluZGV4IHNvbWV3aGVyZSBlbHNlIGR1cmluZyBhIGxvb3BcbiAgICAvLyB3ZSBlbmQgdXAgd2l0aCB2ZXJ5IGhhcmQtdG8tdHJhY2stZG93biBzaWRlIGVmZmVjdHMuXG5cbiAgICB0aGlzLmluZGV4LnNsaWNlKDApLmZvckVhY2gocGx1Z2lucyQkMS5vblByb2Nlc3NSdWxlLCBwbHVnaW5zJCQxKTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBydWxlIGluIGAubWFwYCBhbmQgYC5jbGFzc2VzYCBtYXBzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyKHJ1bGUpIHtcbiAgICB0aGlzLm1hcFtydWxlLmtleV0gPSBydWxlO1xuXG4gICAgaWYgKHJ1bGUgaW5zdGFuY2VvZiBTdHlsZVJ1bGUpIHtcbiAgICAgIHRoaXMubWFwW3J1bGUuc2VsZWN0b3JdID0gcnVsZTtcbiAgICAgIGlmIChydWxlLmlkKSB0aGlzLmNsYXNzZXNbcnVsZS5rZXldID0gcnVsZS5pZDtcbiAgICB9IGVsc2UgaWYgKHJ1bGUgaW5zdGFuY2VvZiBLZXlmcmFtZXNSdWxlICYmIHRoaXMua2V5ZnJhbWVzKSB7XG4gICAgICB0aGlzLmtleWZyYW1lc1tydWxlLm5hbWVdID0gcnVsZS5pZDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFVucmVnaXN0ZXIgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51bnJlZ2lzdGVyID0gZnVuY3Rpb24gdW5yZWdpc3RlcihydWxlKSB7XG4gICAgZGVsZXRlIHRoaXMubWFwW3J1bGUua2V5XTtcblxuICAgIGlmIChydWxlIGluc3RhbmNlb2YgU3R5bGVSdWxlKSB7XG4gICAgICBkZWxldGUgdGhpcy5tYXBbcnVsZS5zZWxlY3Rvcl07XG4gICAgICBkZWxldGUgdGhpcy5jbGFzc2VzW3J1bGUua2V5XTtcbiAgICB9IGVsc2UgaWYgKHJ1bGUgaW5zdGFuY2VvZiBLZXlmcmFtZXNSdWxlKSB7XG4gICAgICBkZWxldGUgdGhpcy5rZXlmcmFtZXNbcnVsZS5uYW1lXTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgZnVuY3Rpb24gdmFsdWVzIHdpdGggYSBuZXcgZGF0YS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBuYW1lO1xuICAgIHZhciBkYXRhO1xuICAgIHZhciBvcHRpb25zO1xuXG4gICAgaWYgKHR5cGVvZiAoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07IC8vICRGbG93Rml4TWVcblxuICAgICAgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07XG4gICAgICBuYW1lID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgdGhpcy5vblVwZGF0ZShkYXRhLCB0aGlzLmdldChuYW1lKSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmluZGV4Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB0aGlzLm9uVXBkYXRlKGRhdGEsIHRoaXMuaW5kZXhbaW5kZXhdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGUgcGx1Z2lucywgdXBkYXRlIHJ1bGUgcHJvcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uVXBkYXRlID0gZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VXBkYXRlT3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkb3B0aW9uczIgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHBsdWdpbnMkJDEgPSBfdGhpcyRvcHRpb25zMi5qc3MucGx1Z2lucyxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zMi5zaGVldDsgLy8gSXQgaXMgYSBydWxlcyBjb250YWluZXIgbGlrZSBmb3IgZS5nLiBDb25kaXRpb25hbFJ1bGUuXG5cbiAgICBpZiAocnVsZS5ydWxlcyBpbnN0YW5jZW9mIFJ1bGVMaXN0KSB7XG4gICAgICBydWxlLnJ1bGVzLnVwZGF0ZShkYXRhLCBvcHRpb25zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgc3R5bGUgPSBzdHlsZVJ1bGUuc3R5bGU7XG4gICAgcGx1Z2lucyQkMS5vblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucyk7IC8vIFdlIHJlbHkgb24gYSBuZXcgYHN0eWxlYCByZWYgaW4gY2FzZSBpdCB3YXMgbXV0YXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vay5cblxuICAgIGlmIChvcHRpb25zLnByb2Nlc3MgJiYgc3R5bGUgJiYgc3R5bGUgIT09IHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBydW4gdGhlIHBsdWdpbnMgaW4gY2FzZSBuZXcgYHN0eWxlYCByZWxpZXMgb24gc3ludGF4IHBsdWdpbnMuXG4gICAgICBwbHVnaW5zJCQxLm9uUHJvY2Vzc1N0eWxlKHN0eWxlUnVsZS5zdHlsZSwgc3R5bGVSdWxlLCBzaGVldCk7IC8vIFVwZGF0ZSBhbmQgYWRkIHByb3BzLlxuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlUnVsZS5zdHlsZSkge1xuICAgICAgICB2YXIgbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW3Byb3BdO1xuICAgICAgICB2YXIgcHJldlZhbHVlID0gc3R5bGVbcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAobmV4dFZhbHVlICE9PSBwcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChwcm9wLCBuZXh0VmFsdWUsIGZvcmNlVXBkYXRlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUmVtb3ZlIHByb3BzLlxuXG5cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciBfbmV4dFZhbHVlID0gc3R5bGVSdWxlLnN0eWxlW19wcm9wXTtcbiAgICAgICAgdmFyIF9wcmV2VmFsdWUgPSBzdHlsZVtfcHJvcF07IC8vIFdlIG5lZWQgdG8gdXNlIGBmb3JjZTogdHJ1ZWAgYmVjYXVzZSBgcnVsZS5zdHlsZWAgaGFzIGJlZW4gdXBkYXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vaywgc28gYHJ1bGUucHJvcCgpYCB3aWxsIG5vdCB1cGRhdGUgdGhlIENTU09NIHJ1bGUuXG4gICAgICAgIC8vIFdlIGRvIHRoaXMgY29tcGFyaXNvbiB0byBhdm9pZCB1bm5lZWRlZCBgcnVsZS5wcm9wKClgIGNhbGxzLCBzaW5jZSB3ZSBoYXZlIHRoZSBvbGQgYHN0eWxlYCBvYmplY3QgaGVyZS5cblxuICAgICAgICBpZiAoX25leHRWYWx1ZSA9PSBudWxsICYmIF9uZXh0VmFsdWUgIT09IF9wcmV2VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChfcHJvcCwgbnVsbCwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydCBydWxlcyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICB2YXIgc2hlZXQgPSB0aGlzLm9wdGlvbnMuc2hlZXQ7XG4gICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuaW5kZXhbaW5kZXhdO1xuICAgICAgdmFyIGNzcyA9IHJ1bGUudG9TdHJpbmcob3B0aW9ucyk7IC8vIE5vIG5lZWQgdG8gcmVuZGVyIGFuIGVtcHR5IHJ1bGUuXG5cbiAgICAgIGlmICghY3NzICYmICFsaW5rKSBjb250aW51ZTtcbiAgICAgIGlmIChzdHIpIHN0ciArPSAnXFxuJztcbiAgICAgIHN0ciArPSBjc3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICByZXR1cm4gUnVsZUxpc3Q7XG59KCk7XG5cbnZhciBTdHlsZVNoZWV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5kZXBsb3llZCA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJlciA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5xdWV1ZSA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgdGhpcy5kZXBsb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuY2xhc3NlcyA9IHt9O1xuICAgIHRoaXMua2V5ZnJhbWVzID0ge307XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNoZWV0OiB0aGlzLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAga2V5ZnJhbWVzOiB0aGlzLmtleWZyYW1lc1xuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMuUmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgb3B0aW9ucy5SZW5kZXJlcih0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KHRoaXMub3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGVzW25hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogQXR0YWNoIHJlbmRlcmFibGUgdG8gdGhlIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIGlmICh0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5hdHRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTsgLy8gT3JkZXIgaXMgaW1wb3J0YW50LCBiZWNhdXNlIHdlIGNhbid0IHVzZSBpbnNlcnRSdWxlIEFQSSBpZiBzdHlsZSBlbGVtZW50IGlzIG5vdCBhdHRhY2hlZC5cblxuICAgIGlmICghdGhpcy5kZXBsb3llZCkgdGhpcy5kZXBsb3koKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHJlbmRlcmFibGUgZnJvbSByZW5kZXIgdHJlZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIGlmICghdGhpcy5hdHRhY2hlZCkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGV0YWNoKCk7XG4gICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBydWxlIHRvIHRoZSBjdXJyZW50IHN0eWxlc2hlZXQuXG4gICAqIFdpbGwgaW5zZXJ0IGEgcnVsZSBhbHNvIGFmdGVyIHRoZSBzdHlsZXNoZWV0IGhhcyBiZWVuIHJlbmRlcmVkIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlOyAvLyBQbHVnaW5zIGNhbiBjcmVhdGUgcnVsZXMuXG4gICAgLy8gSW4gb3JkZXIgdG8gcHJlc2VydmUgdGhlIHJpZ2h0IG9yZGVyLCB3ZSBuZWVkIHRvIHF1ZXVlIGFsbCBgLmFkZFJ1bGVgIGNhbGxzLFxuICAgIC8vIHdoaWNoIGhhcHBlbiBhZnRlciB0aGUgZmlyc3QgYHJ1bGVzLmFkZCgpYCBjYWxsLlxuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgIXF1ZXVlKSB0aGlzLnF1ZXVlID0gW107XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgIGlmICghdGhpcy5kZXBsb3llZCkgcmV0dXJuIHJ1bGU7IC8vIERvbid0IGluc2VydCBydWxlIGRpcmVjdGx5IGlmIHRoZXJlIGlzIG5vIHN0cmluZ2lmaWVkIHZlcnNpb24geWV0LlxuICAgICAgLy8gSXQgd2lsbCBiZSBpbnNlcnRlZCBhbGwgdG9nZXRoZXIgd2hlbiAuYXR0YWNoIGlzIGNhbGxlZC5cblxuICAgICAgaWYgKHF1ZXVlKSBxdWV1ZS5wdXNoKHJ1bGUpO2Vsc2Uge1xuICAgICAgICB0aGlzLmluc2VydFJ1bGUocnVsZSk7XG5cbiAgICAgICAgaWYgKHRoaXMucXVldWUpIHtcbiAgICAgICAgICB0aGlzLnF1ZXVlLmZvckVhY2godGhpcy5pbnNlcnRSdWxlLCB0aGlzKTtcbiAgICAgICAgICB0aGlzLnF1ZXVlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9IC8vIFdlIGNhbid0IGFkZCBydWxlcyB0byBhIGRldGFjaGVkIHN0eWxlIG5vZGUuXG4gICAgLy8gV2Ugd2lsbCByZWRlcGxveSB0aGUgc2hlZXQgb25jZSB1c2VyIHdpbGwgYXR0YWNoIGl0LlxuXG5cbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBydWxlIGludG8gdGhlIFN0eWxlU2hlZXRcbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmluc2VydFJ1bGUocnVsZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIGFkZCBydWxlcy5cbiAgICogV2lsbCByZW5kZXIgYWxzbyBhZnRlciBTdHlsZSBTaGVldCB3YXMgcmVuZGVyZWQgdGhlIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGVzID0gZnVuY3Rpb24gYWRkUnVsZXMoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdmFyIGFkZGVkID0gW107XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLmFkZFJ1bGUobmFtZSwgc3R5bGVzW25hbWVdLCBvcHRpb25zKTtcbiAgICAgIGlmIChydWxlKSBhZGRlZC5wdXNoKHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRlZDtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZSBieSBuYW1lLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlIGJ5IG5hbWUuXG4gICAqIFJldHVybnMgYHRydWVgOiBpZiBydWxlIGhhcyBiZWVuIGRlbGV0ZWQgZnJvbSB0aGUgRE9NLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShuYW1lKSB7XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBmYWxzZTtcbiAgICB0aGlzLnJ1bGVzLnJlbW92ZShydWxlKTtcblxuICAgIGlmICh0aGlzLmF0dGFjaGVkICYmIHJ1bGUucmVuZGVyYWJsZSAmJiB0aGlzLnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5kZWxldGVSdWxlKHJ1bGUucmVuZGVyYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBEZXBsb3kgcHVyZSBDU1Mgc3RyaW5nIHRvIGEgcmVuZGVyYWJsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmRlcGxveSgpO1xuICAgIHRoaXMuZGVwbG95ZWQgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMkcnVsZXM7XG5cbiAgICAoX3RoaXMkcnVsZXMgPSB0aGlzLnJ1bGVzKS51cGRhdGUuYXBwbHkoX3RoaXMkcnVsZXMsIGFyZ3VtZW50cyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ29udmVydCBydWxlcyB0byBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBTdHlsZVNoZWV0O1xufSgpO1xuXG52YXIgUGx1Z2luc1JlZ2lzdHJ5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGx1Z2luc1JlZ2lzdHJ5KCkge1xuICAgIHRoaXMucGx1Z2lucyA9IHtcbiAgICAgIGludGVybmFsOiBbXSxcbiAgICAgIGV4dGVybmFsOiBbXVxuICAgIH07XG4gICAgdGhpcy5yZWdpc3RyeSA9IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBQbHVnaW5zUmVnaXN0cnkucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBDYWxsIGBvbkNyZWF0ZVJ1bGVgIGhvb2tzIGFuZCByZXR1cm4gYW4gb2JqZWN0IGlmIHJldHVybmVkIGJ5IGEgaG9vay5cbiAgICovXG4gIF9wcm90by5vbkNyZWF0ZVJ1bGUgPSBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vbkNyZWF0ZVJ1bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5yZWdpc3RyeS5vbkNyZWF0ZVJ1bGVbaV0obmFtZSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1J1bGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblByb2Nlc3NSdWxlID0gZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUuaXNQcm9jZXNzZWQpIHJldHVybjtcbiAgICB2YXIgc2hlZXQgPSBydWxlLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzUnVsZS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NSdWxlW2ldKHJ1bGUsIHNoZWV0KTtcbiAgICB9XG5cbiAgICBpZiAocnVsZS5zdHlsZSkgdGhpcy5vblByb2Nlc3NTdHlsZShydWxlLnN0eWxlLCBydWxlLCBzaGVldCk7XG4gICAgcnVsZS5pc1Byb2Nlc3NlZCA9IHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1N0eWxlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzU3R5bGUgPSBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU3R5bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJ1bGUuc3R5bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlW2ldKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1NoZWV0YCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzU2hlZXQgPSBmdW5jdGlvbiBvblByb2Nlc3NTaGVldChzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldFtpXShzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblVwZGF0ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uVXBkYXRlID0gZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25VcGRhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25VcGRhdGVbaV0oZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25DaGFuZ2VWYWx1ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uQ2hhbmdlVmFsdWUgPSBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gdmFsdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DaGFuZ2VWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvY2Vzc2VkVmFsdWUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWVbaV0ocHJvY2Vzc2VkVmFsdWUsIHByb3AsIHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBwbHVnaW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzZSA9IGZ1bmN0aW9uIHVzZShuZXdQbHVnaW4sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBxdWV1ZTogJ2V4dGVybmFsJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMucGx1Z2luc1tvcHRpb25zLnF1ZXVlXTsgLy8gQXZvaWRzIGFwcGx5aW5nIHNhbWUgcGx1Z2luIHR3aWNlLCBhdCBsZWFzdCBiYXNlZCBvbiByZWYuXG5cbiAgICBpZiAocGx1Z2lucy5pbmRleE9mKG5ld1BsdWdpbikgIT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGx1Z2lucy5wdXNoKG5ld1BsdWdpbik7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdLmNvbmNhdCh0aGlzLnBsdWdpbnMuZXh0ZXJuYWwsIHRoaXMucGx1Z2lucy5pbnRlcm5hbCkucmVkdWNlKGZ1bmN0aW9uIChyZWdpc3RyeSwgcGx1Z2luKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbikge1xuICAgICAgICBpZiAobmFtZSBpbiByZWdpc3RyeSkge1xuICAgICAgICAgIHJlZ2lzdHJ5W25hbWVdLnB1c2gocGx1Z2luW25hbWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFVua25vd24gaG9vayBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnaXN0cnk7XG4gICAgfSwge1xuICAgICAgb25DcmVhdGVSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1J1bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU3R5bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU2hlZXQ6IFtdLFxuICAgICAgb25DaGFuZ2VWYWx1ZTogW10sXG4gICAgICBvblVwZGF0ZTogW11cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUGx1Z2luc1JlZ2lzdHJ5O1xufSgpO1xuXG4vKipcbiAqIFNoZWV0cyByZWdpc3RyeSB0byBhY2Nlc3MgdGhlbSBhbGwgYXQgb25lIHBsYWNlLlxuICovXG52YXIgU2hlZXRzUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGVldHNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2hlZXRzUmVnaXN0cnkucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChzaGVldCkge1xuICAgIHZhciByZWdpc3RyeSA9IHRoaXMucmVnaXN0cnk7XG4gICAgdmFyIGluZGV4ID0gc2hlZXQub3B0aW9ucy5pbmRleDtcbiAgICBpZiAocmVnaXN0cnkuaW5kZXhPZihzaGVldCkgIT09IC0xKSByZXR1cm47XG5cbiAgICBpZiAocmVnaXN0cnkubGVuZ3RoID09PSAwIHx8IGluZGV4ID49IHRoaXMuaW5kZXgpIHtcbiAgICAgIHJlZ2lzdHJ5LnB1c2goc2hlZXQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmluZCBhIHBvc2l0aW9uLlxuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVnaXN0cnlbaV0ub3B0aW9ucy5pbmRleCA+IGluZGV4KSB7XG4gICAgICAgIHJlZ2lzdHJ5LnNwbGljZShpLCAwLCBzaGVldCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSByZWdpc3RyeS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoc2hlZXQpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpO1xuICAgIHRoaXMucmVnaXN0cnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydCBhbGwgYXR0YWNoZWQgc2hlZXRzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhfdGVtcCkge1xuICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIGF0dGFjaGVkID0gX3JlZi5hdHRhY2hlZCxcbiAgICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImF0dGFjaGVkXCJdKTtcblxuICAgIHZhciBjc3MgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5yZWdpc3RyeVtpXTtcblxuICAgICAgaWYgKGF0dGFjaGVkICE9IG51bGwgJiYgc2hlZXQuYXR0YWNoZWQgIT09IGF0dGFjaGVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3NzKSBjc3MgKz0gJ1xcbic7XG4gICAgICBjc3MgKz0gc2hlZXQudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzcztcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU2hlZXRzUmVnaXN0cnksIFt7XG4gICAga2V5OiBcImluZGV4XCIsXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhpZ2hlc3QgaW5kZXggbnVtYmVyLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkubGVuZ3RoID09PSAwID8gMCA6IHRoaXMucmVnaXN0cnlbdGhpcy5yZWdpc3RyeS5sZW5ndGggLSAxXS5vcHRpb25zLmluZGV4O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgZ2xvYmFsIHNoZWV0cyByZWdpc3RyeS4gT25seSBEb21SZW5kZXJlciB3aWxsIGFkZCBzaGVldHMgdG8gaXQuXG4gKiBPbiB0aGUgc2VydmVyIG9uZSBzaG91bGQgdXNlIGFuIG93biBTaGVldHNSZWdpc3RyeSBpbnN0YW5jZSBhbmQgYWRkIHRoZVxuICogc2hlZXRzIHRvIGl0LCBiZWNhdXNlIHlvdSBuZWVkIHRvIG1ha2Ugc3VyZSB0byBjcmVhdGUgYSBuZXcgcmVnaXN0cnkgZm9yXG4gKiBlYWNoIHJlcXVlc3QgaW4gb3JkZXIgdG8gbm90IGxlYWsgc2hlZXRzIGFjcm9zcyByZXF1ZXN0cy5cbiAqL1xuXG52YXIgc2hlZXRzID0gbmV3IFNoZWV0c1JlZ2lzdHJ5KCk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbFRoaXMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGggPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG52YXIgbnMgPSAnMmYxYWNjNmMzYTYwNmIwODJlNWVlZjVlNTQ0MTRmZmInO1xuaWYgKGdsb2JhbFRoaXNbbnNdID09IG51bGwpIGdsb2JhbFRoaXNbbnNdID0gMDsgLy8gQnVuZGxlIG1heSBjb250YWluIG11bHRpcGxlIEpTUyB2ZXJzaW9ucyBhdCB0aGUgc2FtZSB0aW1lLiBJbiBvcmRlciB0byBpZGVudGlmeVxuLy8gdGhlIGN1cnJlbnQgdmVyc2lvbiB3aXRoIGp1c3Qgb25lIHNob3J0IG51bWJlciBhbmQgdXNlIGl0IGZvciBjbGFzc2VzIGdlbmVyYXRpb25cbi8vIHdlIHVzZSBhIGNvdW50ZXIuIEFsc28gaXQgaXMgbW9yZSBhY2N1cmF0ZSwgYmVjYXVzZSB1c2VyIGNhbiBtYW51YWxseSByZWV2YWx1YXRlXG4vLyB0aGUgbW9kdWxlLlxuXG52YXIgbW9kdWxlSWQgPSBnbG9iYWxUaGlzW25zXSsrO1xuXG52YXIgbWF4UnVsZXMgPSAxZTEwO1xuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuICogV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldGVkLlxuICogV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbiAqL1xudmFyIGNyZWF0ZUdlbmVyYXRlSWQgPSBmdW5jdGlvbiBjcmVhdGVHZW5lcmF0ZUlkKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBydWxlQ291bnRlciA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAocnVsZSwgc2hlZXQpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHJ1bGVDb3VudGVyID4gbWF4UnVsZXMpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4gUnVsZSBjb3VudGVyIGlzIGF0IFwiICsgcnVsZUNvdW50ZXIgKyBcIi5cIikgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIGpzc0lkID0gJyc7XG4gICAgdmFyIHByZWZpeCA9ICcnO1xuXG4gICAgaWYgKHNoZWV0KSB7XG4gICAgICBpZiAoc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgICAgcHJlZml4ID0gc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXg7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmpzcy5pZCAhPSBudWxsKSB7XG4gICAgICAgIGpzc0lkID0gU3RyaW5nKHNoZWV0Lm9wdGlvbnMuanNzLmlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5taW5pZnkpIHtcbiAgICAgIC8vIFVzaW5nIFwiY1wiIGJlY2F1c2UgYSBudW1iZXIgY2FuJ3QgYmUgdGhlIGZpcnN0IGNoYXIgaW4gYSBjbGFzcyBuYW1lLlxuICAgICAgcmV0dXJuIFwiXCIgKyAocHJlZml4IHx8ICdjJykgKyBtb2R1bGVJZCArIGpzc0lkICsgcnVsZUNvdW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeCArIHJ1bGUua2V5ICsgXCItXCIgKyBtb2R1bGVJZCArIChqc3NJZCA/IFwiLVwiICsganNzSWQgOiAnJykgKyBcIi1cIiArIHJ1bGVDb3VudGVyO1xuICB9O1xufTtcblxuLyoqXG4gKiBDYWNoZSB0aGUgdmFsdWUgZnJvbSB0aGUgZmlyc3QgdGltZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAqL1xudmFyIG1lbW9pemUgPSBmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciB2YWx1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXZhbHVlKSB2YWx1ZSA9IGZuKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xufTtcbi8qKlxuICogR2V0IGEgc3R5bGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRQcm9wZXJ0eVZhbHVlKGNzc1J1bGUsIHByb3ApIHtcbiAgdHJ5IHtcbiAgICAvLyBTdXBwb3J0IENTU1RPTS5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgcmV0dXJuIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZ2V0KHByb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBjc3NSdWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiAnJztcbiAgfVxufVxuLyoqXG4gKiBTZXQgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHNldFByb3BlcnR5KGNzc1J1bGUsIHByb3AsIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgdmFyIGNzc1ZhbHVlID0gdmFsdWU7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGNzc1ZhbHVlID0gdG9Dc3NWYWx1ZSh2YWx1ZSwgdHJ1ZSk7XG5cbiAgICAgIGlmICh2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJyFpbXBvcnRhbnQnKSB7XG4gICAgICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWUsICdpbXBvcnRhbnQnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSAvLyBTdXBwb3J0IENTU1RPTS5cblxuXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuc2V0KHByb3AsIGNzc1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzUnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wLCBjc3NWYWx1ZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBJRSBtYXkgdGhyb3cgaWYgcHJvcGVydHkgaXMgdW5rbm93bi5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogUmVtb3ZlIGEgc3R5bGUgcHJvcGVydHkuXG4gKi9cblxuXG5mdW5jdGlvbiByZW1vdmVQcm9wZXJ0eShjc3NSdWxlLCBwcm9wKSB7XG4gIHRyeSB7XG4gICAgLy8gU3VwcG9ydCBDU1NUT00uXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZGVsZXRlKHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3ApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBET01FeGNlcHRpb24gXFxcIlwiICsgZXJyLm1lc3NhZ2UgKyBcIlxcXCIgd2FzIHRocm93bi4gVHJpZWQgdG8gcmVtb3ZlIHByb3BlcnR5IFxcXCJcIiArIHByb3AgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICB9XG59XG4vKipcbiAqIFNldCB0aGUgc2VsZWN0b3IuXG4gKi9cblxuXG5mdW5jdGlvbiBzZXRTZWxlY3Rvcihjc3NSdWxlLCBzZWxlY3RvclRleHQpIHtcbiAgY3NzUnVsZS5zZWxlY3RvclRleHQgPSBzZWxlY3RvclRleHQ7IC8vIFJldHVybiBmYWxzZSBpZiBzZXR0ZXIgd2FzIG5vdCBzdWNjZXNzZnVsLlxuICAvLyBDdXJyZW50bHkgd29ya3MgaW4gY2hyb21lIG9ubHkuXG5cbiAgcmV0dXJuIGNzc1J1bGUuc2VsZWN0b3JUZXh0ID09PSBzZWxlY3RvclRleHQ7XG59XG4vKipcbiAqIEdldHMgdGhlIGBoZWFkYCBlbGVtZW50IHVwb24gdGhlIGZpcnN0IGNhbGwgYW5kIGNhY2hlcyBpdC5cbiAqIFdlIGFzc3VtZSBpdCBjYW4ndCBiZSBudWxsLlxuICovXG5cblxudmFyIGdldEhlYWQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbn0pO1xuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggYW4gaW5kZXggaGlnaGVyIHRoYW4gdGhlIHBhc3NlZCBvbmUuXG4gKi9cblxuZnVuY3Rpb24gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcblxuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluZGV4ID4gb3B0aW9ucy5pbmRleCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCB0aGUgaGlnaGVzdCBpbmRleC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IHJlZ2lzdHJ5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG5cbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGEgY29tbWVudCB3aXRoIFwianNzXCIgaW5zaWRlLlxuICovXG5cblxuZnVuY3Rpb24gZmluZENvbW1lbnROb2RlKHRleHQpIHtcbiAgdmFyIGhlYWQgPSBnZXRIZWFkKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IGhlYWQuY2hpbGROb2Rlc1tpXTtcblxuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA4ICYmIG5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gdGV4dCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZCBhIG5vZGUgYmVmb3JlIHdoaWNoIHdlIGNhbiBpbnNlcnQgdGhlIHNoZWV0LlxuICovXG5mdW5jdGlvbiBmaW5kUHJldk5vZGUob3B0aW9ucykge1xuICB2YXIgcmVnaXN0cnkgPSBzaGVldHMucmVnaXN0cnk7XG5cbiAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA+IDApIHtcbiAgICAvLyBUcnkgdG8gaW5zZXJ0IGJlZm9yZSB0aGUgbmV4dCBoaWdoZXIgc2hlZXQuXG4gICAgdmFyIHNoZWV0ID0gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKTtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBzaGVldC5yZW5kZXJlci5lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnRcbiAgICAgIH07XG4gICAgfSAvLyBPdGhlcndpc2UgaW5zZXJ0IGFmdGVyIHRoZSBsYXN0IGF0dGFjaGVkLlxuXG5cbiAgICBzaGVldCA9IGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogc2hlZXQucmVuZGVyZXIuZWxlbWVudC5uZXh0U2libGluZ1xuICAgICAgfTtcbiAgICB9XG4gIH0gLy8gVHJ5IHRvIGZpbmQgYSBjb21tZW50IHBsYWNlaG9sZGVyIGlmIHJlZ2lzdHJ5IGlzIGVtcHR5LlxuXG5cbiAgdmFyIGluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICBpZiAoaW5zZXJ0aW9uUG9pbnQgJiYgdHlwZW9mIGluc2VydGlvblBvaW50ID09PSAnc3RyaW5nJykge1xuICAgIHZhciBjb21tZW50ID0gZmluZENvbW1lbnROb2RlKGluc2VydGlvblBvaW50KTtcblxuICAgIGlmIChjb21tZW50KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IGNvbW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogY29tbWVudC5uZXh0U2libGluZ1xuICAgICAgfTtcbiAgICB9IC8vIElmIHVzZXIgc3BlY2lmaWVzIGFuIGluc2VydGlvbiBwb2ludCBhbmQgaXQgY2FuJ3QgYmUgZm91bmQgaW4gdGhlIGRvY3VtZW50IC1cbiAgICAvLyBiYWQgc3BlY2lmaWNpdHkgaXNzdWVzIG1heSBhcHBlYXIuXG5cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gSW5zZXJ0aW9uIHBvaW50IFxcXCJcIiArIGluc2VydGlvblBvaW50ICsgXCJcXFwiIG5vdCBmb3VuZC5cIikgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gdGhlIERPTS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlKHN0eWxlLCBvcHRpb25zKSB7XG4gIHZhciBpbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gIHZhciBuZXh0Tm9kZSA9IGZpbmRQcmV2Tm9kZShvcHRpb25zKTtcblxuICBpZiAobmV4dE5vZGUgIT09IGZhbHNlICYmIG5leHROb2RlLnBhcmVudCkge1xuICAgIG5leHROb2RlLnBhcmVudC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHROb2RlLm5vZGUpO1xuICAgIHJldHVybjtcbiAgfSAvLyBXb3JrcyB3aXRoIGlmcmFtZXMgYW5kIGFueSBub2RlIHR5cGVzLlxuXG5cbiAgaWYgKGluc2VydGlvblBvaW50ICYmIHR5cGVvZiBpbnNlcnRpb25Qb2ludC5ub2RlVHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80MTMyODcyOC9mb3JjZS1jYXN0aW5nLWluLWZsb3dcbiAgICB2YXIgaW5zZXJ0aW9uUG9pbnRFbGVtZW50ID0gaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdmFyIHBhcmVudE5vZGUgPSBpbnNlcnRpb25Qb2ludEVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3R5bGUsIGluc2VydGlvblBvaW50RWxlbWVudC5uZXh0U2libGluZyk7ZWxzZSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnW0pTU10gSW5zZXJ0aW9uIHBvaW50IGlzIG5vdCBpbiB0aGUgRE9NLicpIDogdm9pZCAwO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGdldEhlYWQoKS5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG4vKipcbiAqIFJlYWQganNzIG5vbmNlIHNldHRpbmcgZnJvbSB0aGUgcGFnZSBpZiB0aGUgdXNlciBoYXMgc2V0IGl0LlxuICovXG5cblxudmFyIGdldE5vbmNlID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gIHZhciBub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtwcm9wZXJ0eT1cImNzcC1ub25jZVwiXScpO1xuICByZXR1cm4gbm9kZSA/IG5vZGUuZ2V0QXR0cmlidXRlKCdjb250ZW50JykgOiBudWxsO1xufSk7XG5cbnZhciBfaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUoY29udGFpbmVyLCBydWxlLCBpbmRleCkge1xuICB2YXIgbWF4SW5kZXggPSBjb250YWluZXIuY3NzUnVsZXMubGVuZ3RoOyAvLyBJbiBjYXNlIHByZXZpb3VzIGluc2VydGlvbiBmYWlscywgcGFzc2VkIGluZGV4IG1pZ2h0IGJlIHdyb25nXG5cbiAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQgfHwgaW5kZXggPiBtYXhJbmRleCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIGluZGV4ID0gbWF4SW5kZXg7XG4gIH1cblxuICB0cnkge1xuICAgIGlmICgnaW5zZXJ0UnVsZScgaW4gY29udGFpbmVyKSB7XG4gICAgICB2YXIgYyA9IGNvbnRhaW5lcjtcbiAgICAgIGMuaW5zZXJ0UnVsZShydWxlLCBpbmRleCk7XG4gICAgfSAvLyBLZXlmcmFtZXMgcnVsZS5cbiAgICBlbHNlIGlmICgnYXBwZW5kUnVsZScgaW4gY29udGFpbmVyKSB7XG4gICAgICAgIHZhciBfYyA9IGNvbnRhaW5lcjtcblxuICAgICAgICBfYy5hcHBlbmRSdWxlKHJ1bGUpO1xuICAgICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFwiICsgZXJyLm1lc3NhZ2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjb250YWluZXIuY3NzUnVsZXNbaW5kZXhdO1xufTtcblxudmFyIGNyZWF0ZVN0eWxlID0gZnVuY3Rpb24gY3JlYXRlU3R5bGUoKSB7XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7IC8vIFdpdGhvdXQgaXQsIElFIHdpbGwgaGF2ZSBhIGJyb2tlbiBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgaWYgd2VcbiAgLy8gaW5zZXJ0IHJ1bGVzIGFmdGVyIHdlIGluc2VydCB0aGUgc3R5bGUgdGFnLlxuICAvLyBJdCBzZWVtcyB0byBraWNrLW9mZiB0aGUgc291cmNlIG9yZGVyIHNwZWNpZmljaXR5IGFsZ29yaXRobS5cblxuICBlbC50ZXh0Q29udGVudCA9ICdcXG4nO1xuICByZXR1cm4gZWw7XG59O1xuXG52YXIgRG9tUmVuZGVyZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBIVE1MU3R5bGVFbGVtZW50IG5lZWRzIGZpeGluZyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjY5NlxuICBmdW5jdGlvbiBEb21SZW5kZXJlcihzaGVldCkge1xuICAgIHRoaXMuZ2V0UHJvcGVydHlWYWx1ZSA9IGdldFByb3BlcnR5VmFsdWU7XG4gICAgdGhpcy5zZXRQcm9wZXJ0eSA9IHNldFByb3BlcnR5O1xuICAgIHRoaXMucmVtb3ZlUHJvcGVydHkgPSByZW1vdmVQcm9wZXJ0eTtcbiAgICB0aGlzLnNldFNlbGVjdG9yID0gc2V0U2VsZWN0b3I7XG4gICAgdGhpcy5lbGVtZW50ID0gdm9pZCAwO1xuICAgIHRoaXMuc2hlZXQgPSB2b2lkIDA7XG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gZmFsc2U7XG4gICAgLy8gVGhlcmUgaXMgbm8gc2hlZXQgd2hlbiB0aGUgcmVuZGVyZXIgaXMgdXNlZCBmcm9tIGEgc3RhbmRhbG9uZSBTdHlsZVJ1bGUuXG4gICAgaWYgKHNoZWV0KSBzaGVldHMuYWRkKHNoZWV0KTtcbiAgICB0aGlzLnNoZWV0ID0gc2hlZXQ7XG5cbiAgICB2YXIgX3JlZiA9IHRoaXMuc2hlZXQgPyB0aGlzLnNoZWV0Lm9wdGlvbnMgOiB7fSxcbiAgICAgICAgbWVkaWEgPSBfcmVmLm1lZGlhLFxuICAgICAgICBtZXRhID0gX3JlZi5tZXRhLFxuICAgICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50O1xuXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudCB8fCBjcmVhdGVTdHlsZSgpO1xuICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtanNzJywgJycpO1xuICAgIGlmIChtZWRpYSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gICAgaWYgKG1ldGEpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbWV0YScsIG1ldGEpO1xuICAgIHZhciBub25jZSA9IGdldE5vbmNlKCk7XG4gICAgaWYgKG5vbmNlKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdub25jZScsIG5vbmNlKTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IHN0eWxlIGVsZW1lbnQgaW50byByZW5kZXIgdHJlZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gRG9tUmVuZGVyZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgLy8gSW4gdGhlIGNhc2UgdGhlIGVsZW1lbnQgbm9kZSBpcyBleHRlcm5hbCBhbmQgaXQgaXMgYWxyZWFkeSBpbiB0aGUgRE9NLlxuICAgIGlmICh0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSB8fCAhdGhpcy5zaGVldCkgcmV0dXJuO1xuICAgIGluc2VydFN0eWxlKHRoaXMuZWxlbWVudCwgdGhpcy5zaGVldC5vcHRpb25zKTsgLy8gV2hlbiBydWxlcyBhcmUgaW5zZXJ0ZWQgdXNpbmcgYGluc2VydFJ1bGVgIEFQSSwgYWZ0ZXIgYHNoZWV0LmRldGFjaCgpLmF0dGFjaCgpYFxuICAgIC8vIG1vc3QgYnJvd3NlcnMgY3JlYXRlIGEgbmV3IENTU1N0eWxlU2hlZXQsIGV4Y2VwdCBvZiBhbGwgSUVzLlxuXG4gICAgdmFyIGRlcGxveWVkID0gQm9vbGVhbih0aGlzLnNoZWV0ICYmIHRoaXMuc2hlZXQuZGVwbG95ZWQpO1xuXG4gICAgaWYgKHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyAmJiBkZXBsb3llZCkge1xuICAgICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gZmFsc2U7XG4gICAgICB0aGlzLmRlcGxveSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHN0eWxlIGVsZW1lbnQgZnJvbSByZW5kZXIgdHJlZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIHZhciBwYXJlbnROb2RlID0gdGhpcy5lbGVtZW50LnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudE5vZGUpIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgfVxuICAvKipcbiAgICogSW5qZWN0IENTUyBzdHJpbmcgaW50byBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXBsb3kgPSBmdW5jdGlvbiBkZXBsb3koKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5zaGVldDtcbiAgICBpZiAoIXNoZWV0KSByZXR1cm47XG5cbiAgICBpZiAoc2hlZXQub3B0aW9ucy5saW5rKSB7XG4gICAgICB0aGlzLmluc2VydFJ1bGVzKHNoZWV0LnJ1bGVzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlxcblwiICsgc2hlZXQudG9TdHJpbmcoKSArIFwiXFxuXCI7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBSdWxlTGlzdCBpbnRvIGFuIGVsZW1lbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluc2VydFJ1bGVzID0gZnVuY3Rpb24gaW5zZXJ0UnVsZXMocnVsZXMsIG5hdGl2ZVBhcmVudCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMuaW5kZXgubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlcy5pbmRleFtpXSwgaSwgbmF0aXZlUGFyZW50KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBhIHJ1bGUgaW50byBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlLCBpbmRleCwgbmF0aXZlUGFyZW50KSB7XG4gICAgaWYgKG5hdGl2ZVBhcmVudCA9PT0gdm9pZCAwKSB7XG4gICAgICBuYXRpdmVQYXJlbnQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgfVxuXG4gICAgaWYgKHJ1bGUucnVsZXMpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBydWxlO1xuICAgICAgdmFyIGxhdGVzdE5hdGl2ZVBhcmVudCA9IG5hdGl2ZVBhcmVudDtcblxuICAgICAgaWYgKHJ1bGUudHlwZSA9PT0gJ2NvbmRpdGlvbmFsJyB8fCBydWxlLnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gcmVuZGVyIHRoZSBjb250YWluZXIgd2l0aG91dCBjaGlsZHJlbiBmaXJzdC5cbiAgICAgICAgbGF0ZXN0TmF0aXZlUGFyZW50ID0gX2luc2VydFJ1bGUobmF0aXZlUGFyZW50LCBwYXJlbnQudG9TdHJpbmcoe1xuICAgICAgICAgIGNoaWxkcmVuOiBmYWxzZVxuICAgICAgICB9KSwgaW5kZXgpO1xuXG4gICAgICAgIGlmIChsYXRlc3ROYXRpdmVQYXJlbnQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5zZXJ0UnVsZXMocGFyZW50LnJ1bGVzLCBsYXRlc3ROYXRpdmVQYXJlbnQpO1xuICAgICAgcmV0dXJuIGxhdGVzdE5hdGl2ZVBhcmVudDtcbiAgICB9IC8vIElFIGtlZXBzIHRoZSBDU1NTdHlsZVNoZWV0IGFmdGVyIHN0eWxlIG5vZGUgaGFzIGJlZW4gcmVhdHRhY2hlZCxcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoZSBgcmVuZGVyYWJsZWAgcmVmZXJlbmNlIHRoZSByaWdodCBzdHlsZSBzaGVldCBhbmQgbm90XG4gICAgLy8gcmVyZW5kZXIgdGhvc2UgcnVsZXMuXG5cblxuICAgIGlmIChydWxlLnJlbmRlcmFibGUgJiYgcnVsZS5yZW5kZXJhYmxlLnBhcmVudFN0eWxlU2hlZXQgPT09IHRoaXMuZWxlbWVudC5zaGVldCkge1xuICAgICAgcmV0dXJuIHJ1bGUucmVuZGVyYWJsZTtcbiAgICB9XG5cbiAgICB2YXIgcnVsZVN0ciA9IHJ1bGUudG9TdHJpbmcoKTtcbiAgICBpZiAoIXJ1bGVTdHIpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBuYXRpdmVSdWxlID0gX2luc2VydFJ1bGUobmF0aXZlUGFyZW50LCBydWxlU3RyLCBpbmRleCk7XG5cbiAgICBpZiAobmF0aXZlUnVsZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSB0cnVlO1xuICAgIHJ1bGUucmVuZGVyYWJsZSA9IG5hdGl2ZVJ1bGU7XG4gICAgcmV0dXJuIG5hdGl2ZVJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKGNzc1J1bGUpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICBzaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgQ1NTIFJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKGNzc1J1bGUpIHtcbiAgICB2YXIgY3NzUnVsZXMgPSB0aGlzLmVsZW1lbnQuc2hlZXQuY3NzUnVsZXM7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgY3NzUnVsZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoY3NzUnVsZSA9PT0gY3NzUnVsZXNbaW5kZXhdKSByZXR1cm4gaW5kZXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIG5ldyBDU1MgcnVsZSBhbmQgcmVwbGFjZSB0aGUgZXhpc3Rpbmcgb25lLlxuICAgKlxuICAgKiBPbmx5IHVzZWQgZm9yIHNvbWUgb2xkIGJyb3dzZXJzIGJlY2F1c2UgdGhleSBjYW4ndCBzZXQgYSBzZWxlY3Rvci5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVwbGFjZVJ1bGUgPSBmdW5jdGlvbiByZXBsYWNlUnVsZShjc3NSdWxlLCBydWxlKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICB0aGlzLmVsZW1lbnQuc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0UnVsZShydWxlLCBpbmRleCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhbGwgcnVsZXMgZWxlbWVudHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGVzID0gZnVuY3Rpb24gZ2V0UnVsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zaGVldC5jc3NSdWxlcztcbiAgfTtcblxuICByZXR1cm4gRG9tUmVuZGVyZXI7XG59KCk7XG5cbnZhciBpbnN0YW5jZUNvdW50ZXIgPSAwO1xuXG52YXIgSnNzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSnNzKG9wdGlvbnMpIHtcbiAgICB0aGlzLmlkID0gaW5zdGFuY2VDb3VudGVyKys7XG4gICAgdGhpcy52ZXJzaW9uID0gXCIxMC4wLjBcIjtcbiAgICB0aGlzLnBsdWdpbnMgPSBuZXcgUGx1Z2luc1JlZ2lzdHJ5KCk7XG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgaWQ6IHtcbiAgICAgICAgbWluaWZ5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZUdlbmVyYXRlSWQ6IGNyZWF0ZUdlbmVyYXRlSWQsXG4gICAgICBSZW5kZXJlcjogaXNJbkJyb3dzZXIgPyBEb21SZW5kZXJlciA6IG51bGwsXG4gICAgICBwbHVnaW5zOiBbXVxuICAgIH07XG4gICAgdGhpcy5nZW5lcmF0ZUlkID0gY3JlYXRlR2VuZXJhdGVJZCh7XG4gICAgICBtaW5pZnk6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucGx1Z2lucy51c2UocGx1Z2luc1tpXSwge1xuICAgICAgICBxdWV1ZTogJ2ludGVybmFsJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXR1cChvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogUHJlcGFyZXMgdmFyaW91cyBvcHRpb25zLCBhcHBsaWVzIHBsdWdpbnMuXG4gICAqIFNob3VsZCBub3QgYmUgdXNlZCB0d2ljZSBvbiB0aGUgc2FtZSBpbnN0YW5jZSwgYmVjYXVzZSB0aGVyZSBpcyBubyBwbHVnaW5zXG4gICAqIGRlZHVwbGljYXRpb24gbG9naWMuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEpzcy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldHVwID0gZnVuY3Rpb24gc2V0dXAob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCA9IG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pZCkge1xuICAgICAgdGhpcy5vcHRpb25zLmlkID0gX2V4dGVuZHMoe30sIHRoaXMub3B0aW9ucy5pZCwgb3B0aW9ucy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCB8fCBvcHRpb25zLmlkKSB7XG4gICAgICB0aGlzLmdlbmVyYXRlSWQgPSB0aGlzLm9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCh0aGlzLm9wdGlvbnMuaWQpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluc2VydGlvblBvaW50ICE9IG51bGwpIHRoaXMub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgICBpZiAoJ1JlbmRlcmVyJyBpbiBvcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcblxuXG4gICAgaWYgKG9wdGlvbnMucGx1Z2lucykgdGhpcy51c2UuYXBwbHkodGhpcywgb3B0aW9ucy5wbHVnaW5zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgU3R5bGUgU2hlZXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNyZWF0ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgICBpbmRleCA9IF9vcHRpb25zLmluZGV4O1xuXG4gICAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGluZGV4ID0gc2hlZXRzLmluZGV4ID09PSAwID8gMCA6IHNoZWV0cy5pbmRleCArIDE7XG4gICAgfVxuXG4gICAgdmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoc3R5bGVzLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAganNzOiB0aGlzLFxuICAgICAgZ2VuZXJhdGVJZDogb3B0aW9ucy5nZW5lcmF0ZUlkIHx8IHRoaXMuZ2VuZXJhdGVJZCxcbiAgICAgIGluc2VydGlvblBvaW50OiB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQsXG4gICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyLFxuICAgICAgaW5kZXg6IGluZGV4XG4gICAgfSkpO1xuICAgIHRoaXMucGx1Z2lucy5vblByb2Nlc3NTaGVldChzaGVldCk7XG4gICAgcmV0dXJuIHNoZWV0O1xuICB9XG4gIC8qKlxuICAgKiBEZXRhY2ggdGhlIFN0eWxlIFNoZWV0IGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgcmVnaXN0cnkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiByZW1vdmVTdHlsZVNoZWV0KHNoZWV0KSB7XG4gICAgc2hlZXQuZGV0YWNoKCk7XG4gICAgc2hlZXRzLnJlbW92ZShzaGVldCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHJ1bGUgd2l0aG91dCBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVSdWxlID0gZnVuY3Rpb24gY3JlYXRlUnVsZSQkMShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChzdHlsZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdHlsZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBFbmFibGUgcnVsZSB3aXRob3V0IG5hbWUgZm9yIGlubGluZSBzdHlsZXMuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUnVsZSh1bmRlZmluZWQsIG5hbWUsIHN0eWxlKTtcbiAgICB9XG5cbiAgICB2YXIgcnVsZU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAganNzOiB0aGlzLFxuICAgICAgUmVuZGVyZXI6IHRoaXMub3B0aW9ucy5SZW5kZXJlclxuICAgIH0pO1xuXG4gICAgaWYgKCFydWxlT3B0aW9ucy5nZW5lcmF0ZUlkKSBydWxlT3B0aW9ucy5nZW5lcmF0ZUlkID0gdGhpcy5nZW5lcmF0ZUlkO1xuICAgIGlmICghcnVsZU9wdGlvbnMuY2xhc3NlcykgcnVsZU9wdGlvbnMuY2xhc3NlcyA9IHt9O1xuICAgIGlmICghcnVsZU9wdGlvbnMua2V5ZnJhbWVzKSBydWxlT3B0aW9ucy5rZXlmcmFtZXMgPSB7fTtcblxuICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShuYW1lLCBzdHlsZSwgcnVsZU9wdGlvbnMpO1xuXG4gICAgaWYgKHJ1bGUpIHRoaXMucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBwbHVnaW4uIFBhc3NlZCBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2l0aCBhIHJ1bGUgaW5zdGFuY2UuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzZSA9IGZ1bmN0aW9uIHVzZSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBsdWdpbnMkJDEgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBwbHVnaW5zJCQxW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHBsdWdpbnMkJDEuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICBfdGhpcy5wbHVnaW5zLnVzZShwbHVnaW4pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBKc3M7XG59KCk7XG5cbi8qKlxuICogRXh0cmFjdHMgYSBzdHlsZXMgb2JqZWN0IHdpdGggb25seSBwcm9wcyB0aGF0IGNvbnRhaW4gZnVuY3Rpb24gdmFsdWVzLlxuICovXG5mdW5jdGlvbiBnZXREeW5hbWljU3R5bGVzKHN0eWxlcykge1xuICB2YXIgdG8gPSBudWxsO1xuXG4gIGZvciAodmFyIGtleSBpbiBzdHlsZXMpIHtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZXNba2V5XTtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuICAgIGlmICh0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoIXRvKSB0byA9IHt9O1xuICAgICAgdG9ba2V5XSA9IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB2YXIgZXh0cmFjdGVkID0gZ2V0RHluYW1pY1N0eWxlcyh2YWx1ZSk7XG5cbiAgICAgIGlmIChleHRyYWN0ZWQpIHtcbiAgICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgICAgdG9ba2V5XSA9IGV4dHJhY3RlZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG87XG59XG5cbi8qKlxuICogU2hlZXRzTWFuYWdlciBpcyBsaWtlIGEgV2Vha01hcCB3aGljaCBpcyBkZXNpZ25lZCB0byBjb3VudCBTdHlsZVNoZWV0XG4gKiBpbnN0YW5jZXMgYW5kIGF0dGFjaC9kZXRhY2ggYXV0b21hdGljYWxseS5cbiAqL1xudmFyIFNoZWV0c01hbmFnZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGVldHNNYW5hZ2VyKCkge1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLnNoZWV0cyA9IG5ldyBXZWFrTWFwKCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2hlZXRzTWFuYWdlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLnNoZWV0cy5nZXQoa2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkuc2hlZXQ7XG4gIH07XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChrZXksIHNoZWV0KSB7XG4gICAgaWYgKHRoaXMuc2hlZXRzLmhhcyhrZXkpKSByZXR1cm47XG4gICAgdGhpcy5sZW5ndGgrKztcbiAgICB0aGlzLnNoZWV0cy5zZXQoa2V5LCB7XG4gICAgICBzaGVldDogc2hlZXQsXG4gICAgICByZWZzOiAwXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm1hbmFnZSA9IGZ1bmN0aW9uIG1hbmFnZShrZXkpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLnNoZWV0cy5nZXQoa2V5KTtcblxuICAgIGlmIChlbnRyeSkge1xuICAgICAgaWYgKGVudHJ5LnJlZnMgPT09IDApIHtcbiAgICAgICAgZW50cnkuc2hlZXQuYXR0YWNoKCk7XG4gICAgICB9XG5cbiAgICAgIGVudHJ5LnJlZnMrKztcbiAgICAgIHJldHVybiBlbnRyeS5zaGVldDtcbiAgICB9XG5cbiAgICB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFNoZWV0c01hbmFnZXI6IGNhbid0IGZpbmQgc2hlZXQgdG8gbWFuYWdlXCIpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgX3Byb3RvLnVubWFuYWdlID0gZnVuY3Rpb24gdW5tYW5hZ2Uoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG5cbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmIChlbnRyeS5yZWZzID4gMCkge1xuICAgICAgICBlbnRyeS5yZWZzLS07XG4gICAgICAgIGlmIChlbnRyeS5yZWZzID09PSAwKSBlbnRyeS5zaGVldC5kZXRhY2goKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIHVubWFuYWdlXCIpO1xuICAgIH1cbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU2hlZXRzTWFuYWdlciwgW3tcbiAgICBrZXk6IFwic2l6ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNNYW5hZ2VyO1xufSgpO1xuXG4vKipcbiAqIEEgYmV0dGVyIGFic3RyYWN0aW9uIG92ZXIgQ1NTLlxuICpcbiAqIEBjb3B5cmlnaHQgT2xlZyBJc29uZW4gKFNsb2JvZHNrb2kpIC8gSXNvbmVuIDIwMTQtcHJlc2VudFxuICogQHdlYnNpdGUgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG4vKipcbiAqIEV4cG9ydCBhIGNvbnN0YW50IGluZGljYXRpbmcgaWYgdGhpcyBicm93c2VyIGhhcyBDU1NUT00gc3VwcG9ydC5cbiAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi91cGRhdGVzLzIwMTgvMDMvY3Nzb21cbiAqL1xudmFyIGhhc0NTU1RPTVN1cHBvcnQgPSB0eXBlb2YgQ1NTICE9PSAndW5kZWZpbmVkJyAmJiBDU1MgJiYgJ251bWJlcicgaW4gQ1NTO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEpzcy5cbiAqL1xuXG52YXIgY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBKc3Mob3B0aW9ucyk7XG59O1xuLyoqXG4gKiBBIGdsb2JhbCBKc3MgaW5zdGFuY2UuXG4gKi9cblxudmFyIGluZGV4ID0gY3JlYXRlKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuZXhwb3J0IHsgaGFzQ1NTVE9NU3VwcG9ydCwgY3JlYXRlLCBnZXREeW5hbWljU3R5bGVzLCB0b0Nzc1ZhbHVlLCBjcmVhdGVSdWxlLCBTaGVldHNSZWdpc3RyeSwgU2hlZXRzTWFuYWdlciwgUnVsZUxpc3QsIHNoZWV0cywgY3JlYXRlR2VuZXJhdGVJZCB9O1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBnZXREaXNwbGF5TmFtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NlcygpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgYmFzZUNsYXNzZXMgPSBvcHRpb25zLmJhc2VDbGFzc2VzLFxuICAgICAgbmV3Q2xhc3NlcyA9IG9wdGlvbnMubmV3Q2xhc3NlcyxcbiAgICAgIENvbXBvbmVudCA9IG9wdGlvbnMuQ29tcG9uZW50O1xuXG4gIGlmICghbmV3Q2xhc3Nlcykge1xuICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgfVxuXG4gIHZhciBuZXh0Q2xhc3NlcyA9IF9leHRlbmRzKHt9LCBiYXNlQ2xhc3Nlcyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NsYXNzZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiB0aGUgdmFsdWUgYFwiLmNvbmNhdChuZXdDbGFzc2VzLCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIG9mIFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIiBpcyBpbmNvcnJlY3QuXCIpLCAnWW91IG1pZ2h0IHdhbnQgdG8gdXNlIHRoZSBjbGFzc05hbWUgcHJvcCBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhuZXdDbGFzc2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFiYXNlQ2xhc3Nlc1trZXldICYmIG5ld0NsYXNzZXNba2V5XSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiB0aGUga2V5IGBcIi5jb25jYXQoa2V5LCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBjYW4gb25seSBvdmVycmlkZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogXCIuY29uY2F0KE9iamVjdC5rZXlzKGJhc2VDbGFzc2VzKS5qb2luKCcsJyksIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3Q2xhc3Nlc1trZXldICYmIHR5cGVvZiBuZXdDbGFzc2VzW2tleV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IHRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3AgaXMgbm90IHZhbGlkIGZvciBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBuZWVkIHRvIHByb3ZpZGUgYSBub24gZW1wdHkgc3RyaW5nIGluc3RlYWQgb2Y6IFwiLmNvbmNhdChuZXdDbGFzc2VzW2tleV0sIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdDbGFzc2VzW2tleV0pIHtcbiAgICAgIG5leHRDbGFzc2VzW2tleV0gPSBcIlwiLmNvbmNhdChiYXNlQ2xhc3Nlc1trZXldLCBcIiBcIikuY29uY2F0KG5ld0NsYXNzZXNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5leHRDbGFzc2VzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZXJnZUNsYXNzZXM7IiwiLy8gVXNlZCBodHRwczovL2dpdGh1Yi5jb20vdGhpbmtsb29wL211bHRpLWtleS1jYWNoZSBhcyBpbnNwaXJhdGlvblxudmFyIG11bHRpS2V5U3RvcmUgPSB7XG4gIHNldDogZnVuY3Rpb24gc2V0KGNhY2hlLCBrZXkxLCBrZXkyLCB2YWx1ZSkge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcblxuICAgIGlmICghc3ViQ2FjaGUpIHtcbiAgICAgIHN1YkNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgY2FjaGUuc2V0KGtleTEsIHN1YkNhY2hlKTtcbiAgICB9XG5cbiAgICBzdWJDYWNoZS5zZXQoa2V5MiwgdmFsdWUpO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldChjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICByZXR1cm4gc3ViQ2FjaGUgPyBzdWJDYWNoZS5nZXQoa2V5MikgOiB1bmRlZmluZWQ7XG4gIH0sXG4gIGRlbGV0ZTogZnVuY3Rpb24gX2RlbGV0ZShjYWNoZSwga2V5MSwga2V5Mikge1xuICAgIHZhciBzdWJDYWNoZSA9IGNhY2hlLmdldChrZXkxKTtcbiAgICBzdWJDYWNoZS5kZWxldGUoa2V5Mik7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBtdWx0aUtleVN0b3JlOyIsInZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3I7XG5leHBvcnQgZGVmYXVsdCBoYXNTeW1ib2wgPyBTeW1ib2wuZm9yKCdtdWkubmVzdGVkJykgOiAnX19USEVNRV9ORVNURURfXyc7IiwiaW1wb3J0IG5lc3RlZCBmcm9tICcuLi9UaGVtZVByb3ZpZGVyL25lc3RlZCc7XG4vKipcbiAqIFRoaXMgaXMgdGhlIGxpc3Qgb2YgdGhlIHN0eWxlIHJ1bGUgbmFtZSB3ZSB1c2UgYXMgZHJvcCBpbiByZXBsYWNlbWVudCBmb3IgdGhlIGJ1aWx0LWluXG4gKiBwc2V1ZG8gY2xhc3NlcyAoOmNoZWNrZWQsIDpkaXNhYmxlZCwgOmZvY3VzZWQsIGV0Yy4pLlxuICpcbiAqIFdoeSBkbyB0aGV5IGV4aXN0IGluIHRoZSBmaXJzdCBwbGFjZT9cbiAqIFRoZXNlIGNsYXNzZXMgYXJlIHVzZWQgYXQgYSBzcGVjaWZpY2l0eSBvZiAyLlxuICogSXQgYWxsb3dzIHRoZW0gdG8gb3ZlcnJpZGUgcHJldmlvdXNseSBkZWZpbmllZCBzdHlsZXMgYXMgd2VsbCBhc1xuICogYmVpbmcgdW50b3VjaGVkIGJ5IHNpbXBsZSB1c2VyIG92ZXJyaWRlcy5cbiAqL1xuXG52YXIgcHNldWRvQ2xhc3NlcyA9IFsnY2hlY2tlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdleHBhbmRlZCcsICdzZWxlY3RlZCddOyAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggZ2VuZXJhdGVzIHVuaXF1ZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiBjb3VudGVycy5cbi8vIFdoZW4gbmV3IGdlbmVyYXRvciBmdW5jdGlvbiBpcyBjcmVhdGVkLCBydWxlIGNvdW50ZXIgaXMgcmVzZXQuXG4vLyBXZSBuZWVkIHRvIHJlc2V0IHRoZSBydWxlIGNvdW50ZXIgZm9yIFNTUiBmb3IgZWFjaCByZXF1ZXN0LlxuLy9cbi8vIEl0J3MgaW5zcGlyZWQgYnlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9ibG9iLzRlNmEwNWRkM2Y3YjY1NzJmZGQzYWIyMTY4NjFkOWU0NDZjMjAzMzEvc3JjL3V0aWxzL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBfb3B0aW9ucyRkaXNhYmxlR2xvYmEgPSBvcHRpb25zLmRpc2FibGVHbG9iYWwsXG4gICAgICBkaXNhYmxlR2xvYmFsID0gX29wdGlvbnMkZGlzYWJsZUdsb2JhID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGRpc2FibGVHbG9iYSxcbiAgICAgIF9vcHRpb25zJHByb2R1Y3Rpb25QciA9IG9wdGlvbnMucHJvZHVjdGlvblByZWZpeCxcbiAgICAgIHByb2R1Y3Rpb25QcmVmaXggPSBfb3B0aW9ucyRwcm9kdWN0aW9uUHIgPT09IHZvaWQgMCA/ICdqc3MnIDogX29wdGlvbnMkcHJvZHVjdGlvblByLFxuICAgICAgX29wdGlvbnMkc2VlZCA9IG9wdGlvbnMuc2VlZCxcbiAgICAgIHNlZWQgPSBfb3B0aW9ucyRzZWVkID09PSB2b2lkIDAgPyAnJyA6IF9vcHRpb25zJHNlZWQ7XG4gIHZhciBzZWVkUHJlZml4ID0gc2VlZCA9PT0gJycgPyAnJyA6IFwiXCIuY29uY2F0KHNlZWQsIFwiLVwiKTtcbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzdHlsZVNoZWV0KSB7XG4gICAgcnVsZUNvdW50ZXIgKz0gMTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAocnVsZUNvdW50ZXIgPj0gMWUxMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogeW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIHJ1bGVDb3VudGVyIGlzIG5vdCBzdXBwb3NlZCB0byBncm93IHRoYXQgbXVjaC4nXS5qb2luKCcnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBzdHlsZVNoZWV0Lm9wdGlvbnMubmFtZTsgLy8gSXMgYSBnbG9iYWwgc3RhdGljIE1VSSBzdHlsZT9cblxuICAgIGlmIChuYW1lICYmIG5hbWUuaW5kZXhPZignTXVpJykgPT09IDAgJiYgIXN0eWxlU2hlZXQub3B0aW9ucy5saW5rICYmICFkaXNhYmxlR2xvYmFsKSB7XG4gICAgICAvLyBXZSBjYW4gdXNlIGEgc2hvcnRoYW5kIGNsYXNzIG5hbWUsIHdlIG5ldmVyIHVzZSB0aGUga2V5cyB0byBzdHlsZSB0aGUgY29tcG9uZW50cy5cbiAgICAgIGlmIChwc2V1ZG9DbGFzc2VzLmluZGV4T2YocnVsZS5rZXkpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gXCJNdWktXCIuY29uY2F0KHJ1bGUua2V5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZWZpeCA9IFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChuYW1lLCBcIi1cIikuY29uY2F0KHJ1bGUua2V5KTtcblxuICAgICAgaWYgKCFzdHlsZVNoZWV0Lm9wdGlvbnMudGhlbWVbbmVzdGVkXSB8fCBzZWVkICE9PSAnJykge1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQocHJlZml4LCBcIi1cIikuY29uY2F0KHJ1bGVDb3VudGVyKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChwcm9kdWN0aW9uUHJlZml4KS5jb25jYXQocnVsZUNvdW50ZXIpO1xuICAgIH1cblxuICAgIHZhciBzdWZmaXggPSBcIlwiLmNvbmNhdChydWxlLmtleSwgXCItXCIpLmNvbmNhdChydWxlQ291bnRlcik7IC8vIEhlbHAgd2l0aCBkZWJ1Z2dhYmlsaXR5LlxuXG4gICAgaWYgKHN0eWxlU2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCwgXCItXCIpLmNvbmNhdChzdWZmaXgpO1xuICAgIH1cblxuICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3VmZml4KTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVSdWxlIH0gZnJvbSAnanNzJztcblxudmFyIG5vdyA9IERhdGUubm93KCk7XG52YXIgZm5WYWx1ZXNOcyA9IFwiZm5WYWx1ZXNcIiArIG5vdztcbnZhciBmblJ1bGVOcyA9IFwiZm5TdHlsZVwiICsgKytub3c7XG5mdW5jdGlvbiBmdW5jdGlvblBsdWdpbigpIHtcbiAgcmV0dXJuIHtcbiAgICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIGRlY2wgIT09ICdmdW5jdGlvbicpIHJldHVybiBudWxsO1xuICAgICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKG5hbWUsIHt9LCBvcHRpb25zKTtcbiAgICAgIHJ1bGVbZm5SdWxlTnNdID0gZGVjbDtcbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0sXG4gICAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGV4dHJhY3QgZnVuY3Rpb24gdmFsdWVzIGZyb20gdGhlIGRlY2xhcmF0aW9uLCBzbyB0aGF0IHdlIGNhbiBrZWVwIGNvcmUgdW5hd2FyZSBvZiB0aGVtLlxuICAgICAgLy8gV2UgbmVlZCB0byBkbyB0aGF0IG9ubHkgb25jZS5cbiAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gZXh0cmFjdCBmdW5jdGlvbnMgb24gZWFjaCBzdHlsZSB1cGRhdGUsIHNpbmNlIHRoaXMgY2FuIGhhcHBlbiBvbmx5IG9uY2UuXG4gICAgICAvLyBXZSBkb24ndCBzdXBwb3J0IGZ1bmN0aW9uIHZhbHVlcyBpbnNpZGUgb2YgZnVuY3Rpb24gcnVsZXMuXG4gICAgICBpZiAoZm5WYWx1ZXNOcyBpbiBydWxlIHx8IGZuUnVsZU5zIGluIHJ1bGUpIHJldHVybiBzdHlsZTtcbiAgICAgIHZhciBmblZhbHVlcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSBjb250aW51ZTtcbiAgICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBmblZhbHVlc1twcm9wXSA9IHZhbHVlO1xuICAgICAgfSAvLyAkRmxvd0ZpeE1lXG5cblxuICAgICAgcnVsZVtmblZhbHVlc05zXSA9IGZuVmFsdWVzO1xuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH0sXG4gICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICAgIHZhciBmblJ1bGUgPSBzdHlsZVJ1bGVbZm5SdWxlTnNdOyAvLyBJZiB3ZSBoYXZlIGEgc3R5bGUgZnVuY3Rpb24sIHRoZSBlbnRpcmUgcnVsZSBpcyBkeW5hbWljIGFuZCBzdHlsZSBvYmplY3RcbiAgICAgIC8vIHdpbGwgYmUgcmV0dXJuZWQgZnJvbSB0aGF0IGZ1bmN0aW9uLlxuXG4gICAgICBpZiAoZm5SdWxlKSB7XG4gICAgICAgIC8vIEVtcHR5IG9iamVjdCB3aWxsIHJlbW92ZSBhbGwgY3VycmVudGx5IGRlZmluZWQgcHJvcHNcbiAgICAgICAgLy8gaW4gY2FzZSBmdW5jdGlvbiBydWxlIHJldHVybnMgYSBmYWxzeSB2YWx1ZS5cbiAgICAgICAgc3R5bGVSdWxlLnN0eWxlID0gZm5SdWxlKGRhdGEpIHx8IHt9O1xuICAgICAgfVxuXG4gICAgICB2YXIgZm5WYWx1ZXMgPSBzdHlsZVJ1bGVbZm5WYWx1ZXNOc107IC8vIElmIHdlIGhhdmUgYSBmbiB2YWx1ZXMgbWFwLCBpdCBpcyBhIHJ1bGUgd2l0aCBmdW5jdGlvbiB2YWx1ZXMuXG5cbiAgICAgIGlmIChmblZhbHVlcykge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGZuVmFsdWVzKSB7XG4gICAgICAgICAgc3R5bGVSdWxlLnByb3AocHJvcCwgZm5WYWx1ZXNbcHJvcF0oZGF0YSksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvblBsdWdpbjtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IFJ1bGVMaXN0IH0gZnJvbSAnanNzJztcblxudmFyIGF0ID0gJ0BnbG9iYWwnO1xudmFyIGF0UHJlZml4ID0gJ0BnbG9iYWwgJztcblxudmFyIEdsb2JhbENvbnRhaW5lclJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxDb250YWluZXJSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG4gICAgdGhpcy5hdCA9IGF0O1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIHNlbGVjdG9yIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQoc2VsZWN0b3IsIHN0eWxlc1tzZWxlY3Rvcl0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBHbG9iYWxDb250YWluZXJSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0UnVsZSA9IGZ1bmN0aW9uIGdldFJ1bGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcoKTtcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsQ29udGFpbmVyUnVsZTtcbn0oKTtcblxudmFyIEdsb2JhbFByZWZpeGVkUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbFByZWZpeGVkUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG4gICAgdGhpcy5hdCA9IGF0O1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNlbGVjdG9yID0ga2V5LnN1YnN0cihhdFByZWZpeC5sZW5ndGgpO1xuICAgIHRoaXMucnVsZSA9IG9wdGlvbnMuanNzLmNyZWF0ZVJ1bGUoc2VsZWN0b3IsIHN0eWxlLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBHbG9iYWxQcmVmaXhlZFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZSA/IHRoaXMucnVsZS50b1N0cmluZyhvcHRpb25zKSA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBHbG9iYWxQcmVmaXhlZFJ1bGU7XG59KCk7XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG5cbmZ1bmN0aW9uIGFkZFNjb3BlKHNlbGVjdG9yLCBzY29wZSkge1xuICB2YXIgcGFydHMgPSBzZWxlY3Rvci5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICB2YXIgc2NvcGVkID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIHNjb3BlZCArPSBzY29wZSArIFwiIFwiICsgcGFydHNbaV0udHJpbSgpO1xuICAgIGlmIChwYXJ0c1tpICsgMV0pIHNjb3BlZCArPSAnLCAnO1xuICB9XG5cbiAgcmV0dXJuIHNjb3BlZDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZShydWxlKSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuICB2YXIgcnVsZXMgPSBzdHlsZSA/IHN0eWxlW2F0XSA6IG51bGw7XG4gIGlmICghcnVsZXMpIHJldHVybjtcblxuICBmb3IgKHZhciBuYW1lIGluIHJ1bGVzKSB7XG4gICAgb3B0aW9ucy5zaGVldC5hZGRSdWxlKG5hbWUsIHJ1bGVzW25hbWVdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2VsZWN0b3I6IGFkZFNjb3BlKG5hbWUsIHJ1bGUuc2VsZWN0b3IpXG4gICAgfSkpO1xuICB9XG5cbiAgZGVsZXRlIHN0eWxlW2F0XTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUpIHtcbiAgdmFyIG9wdGlvbnMgPSBydWxlLm9wdGlvbnMsXG4gICAgICBzdHlsZSA9IHJ1bGUuc3R5bGU7XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIGlmIChwcm9wWzBdICE9PSAnQCcgfHwgcHJvcC5zdWJzdHIoMCwgYXQubGVuZ3RoKSAhPT0gYXQpIGNvbnRpbnVlO1xuICAgIHZhciBzZWxlY3RvciA9IGFkZFNjb3BlKHByb3Auc3Vic3RyKGF0Lmxlbmd0aCksIHJ1bGUuc2VsZWN0b3IpO1xuICAgIG9wdGlvbnMuc2hlZXQuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICB9KSk7XG4gICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICB9XG59XG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBqc3NHbG9iYWwoKSB7XG4gIGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW5hbWUpIHJldHVybiBudWxsO1xuXG4gICAgaWYgKG5hbWUgPT09IGF0KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbENvbnRhaW5lclJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZVswXSA9PT0gJ0AnICYmIG5hbWUuc3Vic3RyKDAsIGF0UHJlZml4Lmxlbmd0aCkgPT09IGF0UHJlZml4KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbFByZWZpeGVkUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcgfHwgcGFyZW50Lm9wdGlvbnMucGFyZW50ICYmIHBhcmVudC5vcHRpb25zLnBhcmVudC50eXBlID09PSAnZ2xvYmFsJykge1xuICAgICAgICBvcHRpb25zLnNjb3BlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNjb3BlZCA9PT0gZmFsc2UpIHtcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBuYW1lO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuO1xuICAgIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSk7XG4gICAgaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvbkNyZWF0ZVJ1bGU6IG9uQ3JlYXRlUnVsZSxcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc0dsb2JhbDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG52YXIgcGFyZW50UmVnRXhwID0gLyYvZztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24ganNzTmVzdGVkKCkge1xuICAvLyBHZXQgYSBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciAkcmVmIHJlcGxhY2VtZW50LlxuICBmdW5jdGlvbiBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lciwgc2hlZXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1hdGNoLCBrZXkpIHtcbiAgICAgIHZhciBydWxlID0gY29udGFpbmVyLmdldFJ1bGUoa2V5KSB8fCBzaGVldCAmJiBzaGVldC5nZXRSdWxlKGtleSk7XG5cbiAgICAgIGlmIChydWxlKSB7XG4gICAgICAgIHJ1bGUgPSBydWxlO1xuICAgICAgICByZXR1cm4gcnVsZS5zZWxlY3RvcjtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBDb3VsZCBub3QgZmluZCB0aGUgcmVmZXJlbmNlZCBydWxlIFxcXCJcIiArIGtleSArIFwiXFxcIiBpbiBcXFwiXCIgKyAoY29udGFpbmVyLm9wdGlvbnMubWV0YSB8fCBjb250YWluZXIudG9TdHJpbmcoKSkgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZVBhcmVudFJlZnMobmVzdGVkUHJvcCwgcGFyZW50UHJvcCkge1xuICAgIHZhciBwYXJlbnRTZWxlY3RvcnMgPSBwYXJlbnRQcm9wLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gICAgdmFyIG5lc3RlZFNlbGVjdG9ycyA9IG5lc3RlZFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudFNlbGVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHBhcmVudCA9IHBhcmVudFNlbGVjdG9yc1tpXTtcblxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXN0ZWRTZWxlY3RvcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIG5lc3RlZCA9IG5lc3RlZFNlbGVjdG9yc1tqXTtcbiAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICcsICc7IC8vIFJlcGxhY2UgYWxsICYgYnkgdGhlIHBhcmVudCBvciBwcmVmaXggJiB3aXRoIHRoZSBwYXJlbnQuXG5cbiAgICAgICAgcmVzdWx0ICs9IG5lc3RlZC5pbmRleE9mKCcmJykgIT09IC0xID8gbmVzdGVkLnJlcGxhY2UocGFyZW50UmVnRXhwLCBwYXJlbnQpIDogcGFyZW50ICsgXCIgXCIgKyBuZXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9wdGlvbnMocnVsZSwgY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgLy8gT3B0aW9ucyBoYXMgYmVlbiBhbHJlYWR5IGNyZWF0ZWQsIG5vdyB3ZSBvbmx5IGluY3JlYXNlIGluZGV4LlxuICAgIGlmIChvcHRpb25zKSByZXR1cm4gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGluZGV4OiBvcHRpb25zLmluZGV4ICsgMVxuICAgIH0pO1xuICAgIHZhciBuZXN0aW5nTGV2ZWwgPSBydWxlLm9wdGlvbnMubmVzdGluZ0xldmVsO1xuICAgIG5lc3RpbmdMZXZlbCA9IG5lc3RpbmdMZXZlbCA9PT0gdW5kZWZpbmVkID8gMSA6IG5lc3RpbmdMZXZlbCArIDE7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBydWxlLm9wdGlvbnMsIHtcbiAgICAgIG5lc3RpbmdMZXZlbDogbmVzdGluZ0xldmVsLFxuICAgICAgaW5kZXg6IGNvbnRhaW5lci5pbmRleE9mKHJ1bGUpICsgMVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBjb250YWluZXIgPSBzdHlsZVJ1bGUub3B0aW9ucy5wYXJlbnQ7XG4gICAgdmFyIG9wdGlvbnM7XG4gICAgdmFyIHJlcGxhY2VSZWY7XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgaXNOZXN0ZWQgPSBwcm9wLmluZGV4T2YoJyYnKSAhPT0gLTE7XG4gICAgICB2YXIgaXNOZXN0ZWRDb25kaXRpb25hbCA9IHByb3BbMF0gPT09ICdAJztcbiAgICAgIGlmICghaXNOZXN0ZWQgJiYgIWlzTmVzdGVkQ29uZGl0aW9uYWwpIGNvbnRpbnVlO1xuICAgICAgb3B0aW9ucyA9IGdldE9wdGlvbnMoc3R5bGVSdWxlLCBjb250YWluZXIsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoaXNOZXN0ZWQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVwbGFjZVBhcmVudFJlZnMocHJvcCwgc3R5bGVSdWxlLnNlbGVjdG9yKTsgLy8gTGF6aWx5IGNyZWF0ZSB0aGUgcmVmIHJlcGxhY2VyIGZ1bmN0aW9uIGp1c3Qgb25jZSBmb3JcbiAgICAgICAgLy8gYWxsIG5lc3RlZCBydWxlcyB3aXRoaW4gdGhlIHNoZWV0LlxuXG4gICAgICAgIGlmICghcmVwbGFjZVJlZikgcmVwbGFjZVJlZiA9IGdldFJlcGxhY2VSZWYoY29udGFpbmVyLCBzaGVldCk7IC8vIFJlcGxhY2UgYWxsICRyZWZzLlxuXG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShyZWZSZWdFeHAsIHJlcGxhY2VSZWYpO1xuICAgICAgICBjb250YWluZXIuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOZXN0ZWRDb25kaXRpb25hbCkge1xuICAgICAgICAvLyBQbGFjZSBjb25kaXRpb25hbCByaWdodCBhZnRlciB0aGUgcGFyZW50IHJ1bGUgdG8gZW5zdXJlIHJpZ2h0IG9yZGVyaW5nLlxuICAgICAgICBjb250YWluZXIuYWRkUnVsZShwcm9wLCB7fSwgb3B0aW9ucykgLy8gRmxvdyBleHBlY3RzIG1vcmUgb3B0aW9ucyBidXQgdGhleSBhcmVuJ3QgcmVxdWlyZWRcbiAgICAgICAgLy8gQW5kIGZsb3cgZG9lc24ndCBrbm93IHRoaXMgd2lsbCBhbHdheXMgYmUgYSBTdHlsZVJ1bGUgd2hpY2ggaGFzIHRoZSBhZGRSdWxlIG1ldGhvZFxuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIC5hZGRSdWxlKHN0eWxlUnVsZS5rZXksIHN0eWxlW3Byb3BdLCB7XG4gICAgICAgICAgc2VsZWN0b3I6IHN0eWxlUnVsZS5zZWxlY3RvclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc05lc3RlZDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXZhciwgcHJlZmVyLXRlbXBsYXRlICovXG52YXIgdXBwZXJjYXNlUGF0dGVybiA9IC9bQS1aXS9nXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vXG52YXIgY2FjaGUgPSB7fVxuXG5mdW5jdGlvbiB0b0h5cGhlbkxvd2VyKG1hdGNoKSB7XG4gIHJldHVybiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShuYW1lKSB7XG4gIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIHJldHVybiBjYWNoZVtuYW1lXVxuICB9XG5cbiAgdmFyIGhOYW1lID0gbmFtZS5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sIHRvSHlwaGVuTG93ZXIpXG4gIHJldHVybiAoY2FjaGVbbmFtZV0gPSBtc1BhdHRlcm4udGVzdChoTmFtZSkgPyAnLScgKyBoTmFtZSA6IGhOYW1lKVxufVxuXG5leHBvcnQgZGVmYXVsdCBoeXBoZW5hdGVTdHlsZU5hbWVcbiIsImltcG9ydCBoeXBoZW5hdGUgZnJvbSAnaHlwaGVuYXRlLXN0eWxlLW5hbWUnO1xuXG4vKipcbiAqIENvbnZlcnQgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgdG8gZGFzaCBzZXBhcmF0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gY29udmVydENhc2Uoc3R5bGUpIHtcbiAgdmFyIGNvbnZlcnRlZCA9IHt9O1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICB2YXIga2V5ID0gcHJvcC5pbmRleE9mKCctLScpID09PSAwID8gcHJvcCA6IGh5cGhlbmF0ZShwcm9wKTtcbiAgICBjb252ZXJ0ZWRba2V5XSA9IHN0eWxlW3Byb3BdO1xuICB9XG5cbiAgaWYgKHN0eWxlLmZhbGxiYWNrcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlLmZhbGxiYWNrcykpIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3MubWFwKGNvbnZlcnRDYXNlKTtlbHNlIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBjb252ZXJ0Q2FzZShzdHlsZS5mYWxsYmFja3MpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRlZDtcbn1cbi8qKlxuICogQWxsb3cgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgYnkgY29udmVydGluZyB0aGVtIGJhY2sgdG8gZGFzaGVyaXplZC5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbWVsQ2FzZSgpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgIC8vIEhhbmRsZSBydWxlcyBsaWtlIEBmb250LWZhY2UsIHdoaWNoIGNhbiBoYXZlIG11bHRpcGxlIHN0eWxlcyBpbiBhbiBhcnJheVxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHlsZVtpbmRleF0gPSBjb252ZXJ0Q2FzZShzdHlsZVtpbmRleF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnZlcnRDYXNlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICBpZiAocHJvcC5pbmRleE9mKCctLScpID09PSAwKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGh5cGhlbmF0ZWRQcm9wID0gaHlwaGVuYXRlKHByb3ApOyAvLyBUaGVyZSB3YXMgbm8gY2FtZWwgY2FzZSBpbiBwbGFjZVxuXG4gICAgaWYgKHByb3AgPT09IGh5cGhlbmF0ZWRQcm9wKSByZXR1cm4gdmFsdWU7XG4gICAgcnVsZS5wcm9wKGh5cGhlbmF0ZWRQcm9wLCB2YWx1ZSk7IC8vIENvcmUgd2lsbCBpZ25vcmUgdGhhdCBwcm9wZXJ0eSB2YWx1ZSB3ZSBzZXQgdGhlIHByb3BlciBvbmUgYWJvdmUuXG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FtZWxDYXNlO1xuIiwiaW1wb3J0IHsgaGFzQ1NTVE9NU3VwcG9ydCB9IGZyb20gJ2pzcyc7XG5cbnZhciBweCA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLnB4IDogJ3B4JztcbnZhciBtcyA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLm1zIDogJ21zJztcbnZhciBwZXJjZW50ID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MucGVyY2VudCA6ICclJztcbi8qKlxuICogR2VuZXJhdGVkIGpzcy1wbHVnaW4tZGVmYXVsdC11bml0IENTUyBwcm9wZXJ0eSB1bml0c1xuICpcbiAqIEB0eXBlIG9iamVjdFxuICovXG5cbnZhciBkZWZhdWx0VW5pdHMgPSB7XG4gIC8vIEFuaW1hdGlvbiBwcm9wZXJ0aWVzXG4gICdhbmltYXRpb24tZGVsYXknOiBtcyxcbiAgJ2FuaW1hdGlvbi1kdXJhdGlvbic6IG1zLFxuICAvLyBCYWNrZ3JvdW5kIHByb3BlcnRpZXNcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiBweCxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teCc6IHB4LFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi15JzogcHgsXG4gICdiYWNrZ3JvdW5kLXNpemUnOiBweCxcbiAgLy8gQm9yZGVyIFByb3BlcnRpZXNcbiAgYm9yZGVyOiBweCxcbiAgJ2JvcmRlci1ib3R0b20nOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItYm90dG9tLXdpZHRoJzogcHgsXG4gICdib3JkZXItbGVmdCc6IHB4LFxuICAnYm9yZGVyLWxlZnQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1yaWdodCc6IHB4LFxuICAnYm9yZGVyLXJpZ2h0LXdpZHRoJzogcHgsXG4gICdib3JkZXItdG9wJzogcHgsXG4gICdib3JkZXItdG9wLWxlZnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXRvcC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXdpZHRoJzogcHgsXG4gIC8vIE1hcmdpbiBwcm9wZXJ0aWVzXG4gIG1hcmdpbjogcHgsXG4gICdtYXJnaW4tYm90dG9tJzogcHgsXG4gICdtYXJnaW4tbGVmdCc6IHB4LFxuICAnbWFyZ2luLXJpZ2h0JzogcHgsXG4gICdtYXJnaW4tdG9wJzogcHgsXG4gIC8vIFBhZGRpbmcgcHJvcGVydGllc1xuICBwYWRkaW5nOiBweCxcbiAgJ3BhZGRpbmctYm90dG9tJzogcHgsXG4gICdwYWRkaW5nLWxlZnQnOiBweCxcbiAgJ3BhZGRpbmctcmlnaHQnOiBweCxcbiAgJ3BhZGRpbmctdG9wJzogcHgsXG4gIC8vIE1hc2sgcHJvcGVydGllc1xuICAnbWFzay1wb3NpdGlvbi14JzogcHgsXG4gICdtYXNrLXBvc2l0aW9uLXknOiBweCxcbiAgJ21hc2stc2l6ZSc6IHB4LFxuICAvLyBXaWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAgaGVpZ2h0OiBweCxcbiAgd2lkdGg6IHB4LFxuICAnbWluLWhlaWdodCc6IHB4LFxuICAnbWF4LWhlaWdodCc6IHB4LFxuICAnbWluLXdpZHRoJzogcHgsXG4gICdtYXgtd2lkdGgnOiBweCxcbiAgLy8gUG9zaXRpb24gcHJvcGVydGllc1xuICBib3R0b206IHB4LFxuICBsZWZ0OiBweCxcbiAgdG9wOiBweCxcbiAgcmlnaHQ6IHB4LFxuICAvLyBTaGFkb3cgcHJvcGVydGllc1xuICAnYm94LXNoYWRvdyc6IHB4LFxuICAndGV4dC1zaGFkb3cnOiBweCxcbiAgLy8gQ29sdW1uIHByb3BlcnRpZXNcbiAgJ2NvbHVtbi1nYXAnOiBweCxcbiAgJ2NvbHVtbi1ydWxlJzogcHgsXG4gICdjb2x1bW4tcnVsZS13aWR0aCc6IHB4LFxuICAnY29sdW1uLXdpZHRoJzogcHgsXG4gIC8vIEZvbnQgYW5kIHRleHQgcHJvcGVydGllc1xuICAnZm9udC1zaXplJzogcHgsXG4gICdmb250LXNpemUtZGVsdGEnOiBweCxcbiAgJ2xldHRlci1zcGFjaW5nJzogcHgsXG4gICd0ZXh0LWluZGVudCc6IHB4LFxuICAndGV4dC1zdHJva2UnOiBweCxcbiAgJ3RleHQtc3Ryb2tlLXdpZHRoJzogcHgsXG4gICd3b3JkLXNwYWNpbmcnOiBweCxcbiAgLy8gTW90aW9uIHByb3BlcnRpZXNcbiAgbW90aW9uOiBweCxcbiAgJ21vdGlvbi1vZmZzZXQnOiBweCxcbiAgLy8gT3V0bGluZSBwcm9wZXJ0aWVzXG4gIG91dGxpbmU6IHB4LFxuICAnb3V0bGluZS1vZmZzZXQnOiBweCxcbiAgJ291dGxpbmUtd2lkdGgnOiBweCxcbiAgLy8gUGVyc3BlY3RpdmUgcHJvcGVydGllc1xuICBwZXJzcGVjdGl2ZTogcHgsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICdwZXJzcGVjdGl2ZS1vcmlnaW4teSc6IHBlcmNlbnQsXG4gIC8vIFRyYW5zZm9ybSBwcm9wZXJ0aWVzXG4gICd0cmFuc2Zvcm0tb3JpZ2luJzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teCc6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXknOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi16JzogcGVyY2VudCxcbiAgLy8gVHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gICd0cmFuc2l0aW9uLWRlbGF5JzogbXMsXG4gICd0cmFuc2l0aW9uLWR1cmF0aW9uJzogbXMsXG4gIC8vIEFsaWdubWVudCBwcm9wZXJ0aWVzXG4gICd2ZXJ0aWNhbC1hbGlnbic6IHB4LFxuICAnZmxleC1iYXNpcyc6IHB4LFxuICAvLyBTb21lIHJhbmRvbSBwcm9wZXJ0aWVzXG4gICdzaGFwZS1tYXJnaW4nOiBweCxcbiAgc2l6ZTogcHgsXG4gIC8vIEdyaWQgcHJvcGVydGllc1xuICBncmlkOiBweCxcbiAgJ2dyaWQtZ2FwJzogcHgsXG4gICdncmlkLXJvdy1nYXAnOiBweCxcbiAgJ2dyaWQtY29sdW1uLWdhcCc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1yb3dzJzogcHgsXG4gICdncmlkLXRlbXBsYXRlLWNvbHVtbnMnOiBweCxcbiAgJ2dyaWQtYXV0by1yb3dzJzogcHgsXG4gICdncmlkLWF1dG8tY29sdW1ucyc6IHB4LFxuICAvLyBOb3QgZXhpc3RpbmcgcHJvcGVydGllcy5cbiAgLy8gVXNlZCB0byBhdm9pZCBpc3N1ZXMgd2l0aCBqc3MtcGx1Z2luLWV4cGFuZCBpbnRlZ3JhdGlvbi5cbiAgJ2JveC1zaGFkb3cteCc6IHB4LFxuICAnYm94LXNoYWRvdy15JzogcHgsXG4gICdib3gtc2hhZG93LWJsdXInOiBweCxcbiAgJ2JveC1zaGFkb3ctc3ByZWFkJzogcHgsXG4gICdmb250LWxpbmUtaGVpZ2h0JzogcHgsXG4gICd0ZXh0LXNoYWRvdy14JzogcHgsXG4gICd0ZXh0LXNoYWRvdy15JzogcHgsXG4gICd0ZXh0LXNoYWRvdy1ibHVyJzogcHhcbn07XG5cbi8qKlxuICogQ2xvbmVzIHRoZSBvYmplY3QgYW5kIGFkZHMgYSBjYW1lbCBjYXNlZCBwcm9wZXJ0eSB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBhZGRDYW1lbENhc2VkVmVyc2lvbihvYmopIHtcbiAgdmFyIHJlZ0V4cCA9IC8oLVthLXpdKS9nO1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICByZXR1cm4gc3RyWzFdLnRvVXBwZXJDYXNlKCk7XG4gIH07XG5cbiAgdmFyIG5ld09iaiA9IHt9O1xuXG4gIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgbmV3T2JqW19rZXldID0gb2JqW19rZXldO1xuICAgIG5ld09ialtfa2V5LnJlcGxhY2UocmVnRXhwLCByZXBsYWNlKV0gPSBvYmpbX2tleV07XG4gIH1cblxuICByZXR1cm4gbmV3T2JqO1xufVxuXG52YXIgdW5pdHMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihkZWZhdWx0VW5pdHMpO1xuLyoqXG4gKiBSZWN1cnNpdmUgZGVlcCBzdHlsZSBwYXNzaW5nIGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIXZhbHVlKSByZXR1cm4gdmFsdWU7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWVbaV0gPSBpdGVyYXRlKHByb3AsIHZhbHVlW2ldLCBvcHRpb25zKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJykge1xuICAgICAgZm9yICh2YXIgaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW2lubmVyUHJvcF0gPSBpdGVyYXRlKGlubmVyUHJvcCwgdmFsdWVbaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIF9pbm5lclByb3AgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFsdWVbX2lubmVyUHJvcF0gPSBpdGVyYXRlKHByb3AgKyBcIi1cIiArIF9pbm5lclByb3AsIHZhbHVlW19pbm5lclByb3BdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIGlmIChvcHRpb25zW3Byb3BdKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHZhbHVlICsgb3B0aW9uc1twcm9wXTtcbiAgICB9XG5cbiAgICBpZiAodW5pdHNbcHJvcF0pIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdW5pdHNbcHJvcF0gPT09ICdmdW5jdGlvbicgPyB1bml0c1twcm9wXSh2YWx1ZSkudG9TdHJpbmcoKSA6IFwiXCIgKyB2YWx1ZSArIHVuaXRzW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBBZGQgdW5pdCB0byBudW1lcmljIHZhbHVlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGRlZmF1bHRVbml0KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBjYW1lbENhc2VkT3B0aW9ucyA9IGFkZENhbWVsQ2FzZWRWZXJzaW9uKG9wdGlvbnMpO1xuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgc3R5bGVbcHJvcF0gPSBpdGVyYXRlKHByb3AsIHN0eWxlW3Byb3BdLCBjYW1lbENhc2VkT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCkge1xuICAgIHJldHVybiBpdGVyYXRlKHByb3AsIHZhbHVlLCBjYW1lbENhc2VkT3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRVbml0O1xuIiwiaW1wb3J0IGlzSW5Ccm93c2VyIGZyb20gJ2lzLWluLWJyb3dzZXInO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSc7XG5cbi8vIEV4cG9ydCBqYXZhc2NyaXB0IHN0eWxlIGFuZCBjc3Mgc3R5bGUgdmVuZG9yIHByZWZpeGVzLlxudmFyIGpzID0gJyc7XG52YXIgY3NzID0gJyc7XG52YXIgdmVuZG9yID0gJyc7XG52YXIgYnJvd3NlciA9ICcnO1xudmFyIGlzVG91Y2ggPSBpc0luQnJvd3NlciAmJiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IC8vIFdlIHNob3VsZCBub3QgZG8gYW55dGhpbmcgaWYgcmVxdWlyZWQgc2VydmVyc2lkZS5cblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIC8vIE9yZGVyIG1hdHRlcnMuIFdlIG5lZWQgdG8gY2hlY2sgV2Via2l0IHRoZSBsYXN0IG9uZSBiZWNhdXNlXG4gIC8vIG90aGVyIHZlbmRvcnMgdXNlIHRvIGFkZCBXZWJraXQgcHJlZml4ZXMgdG8gc29tZSBwcm9wZXJ0aWVzXG4gIHZhciBqc0Nzc01hcCA9IHtcbiAgICBNb3o6ICctbW96LScsXG4gICAgbXM6ICctbXMtJyxcbiAgICBPOiAnLW8tJyxcbiAgICBXZWJraXQ6ICctd2Via2l0LSdcbiAgfTtcblxuICB2YXIgX2RvY3VtZW50JGNyZWF0ZUVsZW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLFxuICAgICAgc3R5bGUgPSBfZG9jdW1lbnQkY3JlYXRlRWxlbWUuc3R5bGU7XG5cbiAgdmFyIHRlc3RQcm9wID0gJ1RyYW5zZm9ybSc7XG5cbiAgZm9yICh2YXIga2V5IGluIGpzQ3NzTWFwKSB7XG4gICAgaWYgKGtleSArIHRlc3RQcm9wIGluIHN0eWxlKSB7XG4gICAgICBqcyA9IGtleTtcbiAgICAgIGNzcyA9IGpzQ3NzTWFwW2tleV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0gLy8gQ29ycmVjdGx5IGRldGVjdCB0aGUgRWRnZSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnbXNIeXBoZW5zJyBpbiBzdHlsZSkge1xuICAgIGpzID0gJ21zJztcbiAgICBjc3MgPSBqc0Nzc01hcC5tcztcbiAgICBicm93c2VyID0gJ2VkZ2UnO1xuICB9IC8vIENvcnJlY3RseSBkZXRlY3QgdGhlIFNhZmFyaSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnLWFwcGxlLXRyYWlsaW5nLXdvcmQnIGluIHN0eWxlKSB7XG4gICAgdmVuZG9yID0gJ2FwcGxlJztcbiAgfVxufVxuLyoqXG4gKiBWZW5kb3IgcHJlZml4IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAdHlwZSB7e2pzOiBTdHJpbmcsIGNzczogU3RyaW5nLCB2ZW5kb3I6IFN0cmluZywgYnJvd3NlcjogU3RyaW5nfX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG52YXIgcHJlZml4ID0ge1xuICBqczoganMsXG4gIGNzczogY3NzLFxuICB2ZW5kb3I6IHZlbmRvcixcbiAgYnJvd3NlcjogYnJvd3NlcixcbiAgaXNUb3VjaDogaXNUb3VjaFxufTtcblxuLyoqXG4gKiBUZXN0IGlmIGEga2V5ZnJhbWUgYXQtcnVsZSBzaG91bGQgYmUgcHJlZml4ZWQgb3Igbm90XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZlbmRvciBwcmVmaXggc3RyaW5nIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRLZXlmcmFtZXMoa2V5KSB7XG4gIC8vIEtleWZyYW1lcyBpcyBhbHJlYWR5IHByZWZpeGVkLiBlLmcuIGtleSA9ICdALXdlYmtpdC1rZXlmcmFtZXMgYSdcbiAgaWYgKGtleVsxXSA9PT0gJy0nKSByZXR1cm4ga2V5OyAvLyBObyBuZWVkIHRvIHByZWZpeCBJRS9FZGdlLiBPbGRlciBicm93c2VycyB3aWxsIGlnbm9yZSB1bnN1cHBvcnRlZCBydWxlcy5cbiAgLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWtleWZyYW1lc1xuXG4gIGlmIChwcmVmaXguanMgPT09ICdtcycpIHJldHVybiBrZXk7XG4gIHJldHVybiBcIkBcIiArIHByZWZpeC5jc3MgKyBcImtleWZyYW1lc1wiICsga2V5LnN1YnN0cigxMCk7XG59XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1hcHBlYXJhbmNlXG5cbnZhciBhcHBlYXJlbmNlID0ge1xuICBub1ByZWZpbGw6IFsnYXBwZWFyYW5jZSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnYXBwZWFyYW5jZScpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jb2xvci1hZGp1c3RcblxudmFyIGNvbG9yQWRqdXN0ID0ge1xuICBub1ByZWZpbGw6IFsnY29sb3ItYWRqdXN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdjb2xvci1hZGp1c3QnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHJldHVybiBwcmVmaXguY3NzICsgXCJwcmludC1cIiArIHByb3A7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnZhciByZWdFeHAgPSAvWy1cXHNdKyguKT8vZztcbi8qKlxuICogUmVwbGFjZXMgdGhlIGxldHRlciB3aXRoIHRoZSBjYXBpdGFsIGxldHRlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaFxuICogQHBhcmFtIHtTdHJpbmd9IGNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRvVXBwZXIobWF0Y2gsIGMpIHtcbiAgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJztcbn1cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIGNhbWVsLWNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gY2FtZWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShyZWdFeHAsIHRvVXBwZXIpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgZGFzaCBzZXBhcmF0ZWQgc3RyaW5ncyB0byBwYXNjYWwgY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFzY2FsaXplKHN0cikge1xuICByZXR1cm4gY2FtZWxpemUoXCItXCIgKyBzdHIpO1xufVxuXG4vLyBidXQgd2UgY2FuIHVzZSBhIGxvbmdoYW5kIHByb3BlcnR5IGluc3RlYWQuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bWFza1xuXG52YXIgbWFzayA9IHtcbiAgbm9QcmVmaWxsOiBbJ21hc2snXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXm1hc2svLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSB7XG4gICAgICB2YXIgbG9uZ2hhbmQgPSAnbWFzay1pbWFnZSc7XG5cbiAgICAgIGlmIChjYW1lbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemUobG9uZ2hhbmQpIGluIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRleHQtb3JpZW50YXRpb25cblxudmFyIHRleHRPcmllbnRhdGlvbiA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RleHQtb3JpZW50YXRpb24nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RleHQtb3JpZW50YXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJyAmJiAhcHJlZml4LmlzVG91Y2gpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zZm9ybVxuXG52YXIgdHJhbnNmb3JtID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNmb3JtJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wICE9PSAndHJhbnNmb3JtJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMudHJhbnNmb3JtKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2l0aW9uXG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNpdGlvbiddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RyYW5zaXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD13cml0aW5nLW1vZGVcblxudmFyIHdyaXRpbmdNb2RlID0ge1xuICBub1ByZWZpbGw6IFsnd3JpdGluZy1tb2RlJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd3cml0aW5nLW1vZGUnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0JyB8fCBwcmVmaXguanMgPT09ICdtcycpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXVzZXItc2VsZWN0XG5cbnZhciB1c2VyU2VsZWN0ID0ge1xuICBub1ByZWZpbGw6IFsndXNlci1zZWxlY3QnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3VzZXItc2VsZWN0JykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicgfHwgcHJlZml4LmpzID09PSAnbXMnIHx8IHByZWZpeC52ZW5kb3IgPT09ICdhcHBsZScpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPW11bHRpY29sdW1uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzQ5MVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy8xNzdcblxudmFyIGJyZWFrUHJvcHNPbGQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIGlmICghL15icmVhay0vLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSB7XG4gICAgICB2YXIganNQcm9wID0gXCJXZWJraXRDb2x1bW5cIiArIHBhc2NhbGl6ZShwcm9wKTtcbiAgICAgIHJldHVybiBqc1Byb3AgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgXCJjb2x1bW4tXCIgKyBwcm9wIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicpIHtcbiAgICAgIHZhciBfanNQcm9wID0gXCJwYWdlXCIgKyBwYXNjYWxpemUocHJvcCk7XG5cbiAgICAgIHJldHVybiBfanNQcm9wIGluIHN0eWxlID8gXCJwYWdlLVwiICsgcHJvcCA6IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvMzI0LlxuXG52YXIgaW5saW5lTG9naWNhbE9sZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXihib3JkZXJ8bWFyZ2lufHBhZGRpbmcpLWlubGluZS8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onKSByZXR1cm4gcHJvcDtcbiAgICB2YXIgbmV3UHJvcCA9IHByb3AucmVwbGFjZSgnLWlubGluZScsICcnKTtcbiAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgfVxufTtcblxuLy8gQ2FtZWxpemF0aW9uIGlzIHJlcXVpcmVkIGJlY2F1c2Ugd2UgY2FuJ3QgdGVzdCB1c2luZy5cbi8vIENTUyBzeW50YXggZm9yIGUuZy4gaW4gRkYuXG5cbnZhciB1bnByZWZpeGVkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICByZXR1cm4gY2FtZWxpemUocHJvcCkgaW4gc3R5bGUgPyBwcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbnZhciBwcmVmaXhlZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgdmFyIHBhc2NhbGl6ZWQgPSBwYXNjYWxpemUocHJvcCk7IC8vIFJldHVybiBjdXN0b20gQ1NTIHZhcmlhYmxlIHdpdGhvdXQgcHJlZml4aW5nLlxuXG4gICAgaWYgKHByb3BbMF0gPT09ICctJykgcmV0dXJuIHByb3A7IC8vIFJldHVybiBhbHJlYWR5IHByZWZpeGVkIHZhbHVlIHdpdGhvdXQgcHJlZml4aW5nLlxuXG4gICAgaWYgKHByb3BbMF0gPT09ICctJyAmJiBwcm9wWzFdID09PSAnLScpIHJldHVybiBwcm9wO1xuICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemVkIGluIHN0eWxlKSByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7IC8vIFRyeSB3ZWJraXQgZmFsbGJhY2suXG5cbiAgICBpZiAocHJlZml4LmpzICE9PSAnV2Via2l0JyAmJiBcIldlYmtpdFwiICsgcGFzY2FsaXplZCBpbiBzdHlsZSkgcmV0dXJuIFwiLXdlYmtpdC1cIiArIHByb3A7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9c2Nyb2xsLXNuYXBcblxudmFyIHNjcm9sbFNuYXAgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3Auc3Vic3RyaW5nKDAsIDExKSAhPT0gJ3Njcm9sbC1zbmFwJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykge1xuICAgICAgcmV0dXJuIFwiXCIgKyBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPW92ZXJzY3JvbGwtYmVoYXZpb3JcblxudmFyIG92ZXJzY3JvbGxCZWhhdmlvciA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ292ZXJzY3JvbGwtYmVoYXZpb3InKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIFwic2Nyb2xsLWNoYWluaW5nXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnZhciBwcm9wTWFwID0ge1xuICAnZmxleC1ncm93JzogJ2ZsZXgtcG9zaXRpdmUnLFxuICAnZmxleC1zaHJpbmsnOiAnZmxleC1uZWdhdGl2ZScsXG4gICdmbGV4LWJhc2lzJzogJ2ZsZXgtcHJlZmVycmVkLXNpemUnLFxuICAnanVzdGlmeS1jb250ZW50JzogJ2ZsZXgtcGFjaycsXG4gIG9yZGVyOiAnZmxleC1vcmRlcicsXG4gICdhbGlnbi1pdGVtcyc6ICdmbGV4LWFsaWduJyxcbiAgJ2FsaWduLWNvbnRlbnQnOiAnZmxleC1saW5lLXBhY2snIC8vICdhbGlnbi1zZWxmJyBpcyBoYW5kbGVkIGJ5ICdhbGlnbi1zZWxmJyBwbHVnaW4uXG5cbn07IC8vIFN1cHBvcnQgb2xkIGZsZXggc3BlYyBmcm9tIDIwMTIuXG5cbnZhciBmbGV4MjAxMiA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgdmFyIG5ld1Byb3AgPSBwcm9wTWFwW3Byb3BdO1xuICAgIGlmICghbmV3UHJvcCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG52YXIgcHJvcE1hcCQxID0ge1xuICBmbGV4OiAnYm94LWZsZXgnLFxuICAnZmxleC1ncm93JzogJ2JveC1mbGV4JyxcbiAgJ2ZsZXgtZGlyZWN0aW9uJzogWydib3gtb3JpZW50JywgJ2JveC1kaXJlY3Rpb24nXSxcbiAgb3JkZXI6ICdib3gtb3JkaW5hbC1ncm91cCcsXG4gICdhbGlnbi1pdGVtcyc6ICdib3gtYWxpZ24nLFxuICAnZmxleC1mbG93JzogWydib3gtb3JpZW50JywgJ2JveC1kaXJlY3Rpb24nXSxcbiAgJ2p1c3RpZnktY29udGVudCc6ICdib3gtcGFjaydcbn07XG52YXIgcHJvcEtleXMgPSBPYmplY3Qua2V5cyhwcm9wTWFwJDEpO1xuXG52YXIgcHJlZml4Q3NzID0gZnVuY3Rpb24gcHJlZml4Q3NzKHApIHtcbiAgcmV0dXJuIHByZWZpeC5jc3MgKyBwO1xufTsgLy8gU3VwcG9ydCBvbGQgZmxleCBzcGVjIGZyb20gMjAwOS5cblxuXG52YXIgZmxleDIwMDkgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgX3JlZikge1xuICAgIHZhciBtdWx0aXBsZSA9IF9yZWYubXVsdGlwbGU7XG5cbiAgICBpZiAocHJvcEtleXMuaW5kZXhPZihwcm9wKSA+IC0xKSB7XG4gICAgICB2YXIgbmV3UHJvcCA9IHByb3BNYXAkMVtwcm9wXTtcblxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG5ld1Byb3ApKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW11bHRpcGxlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3UHJvcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIShwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcFswXSkgaW4gc3R5bGUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdQcm9wLm1hcChwcmVmaXhDc3MpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gcGx1Z2lucyA9IFtcbi8vICAgLi4ucGx1Z2lucyxcbi8vICAgIGJyZWFrUHJvcHNPbGQsXG4vLyAgICBpbmxpbmVMb2dpY2FsT2xkLFxuLy8gICAgdW5wcmVmaXhlZCxcbi8vICAgIHByZWZpeGVkLFxuLy8gICAgc2Nyb2xsU25hcCxcbi8vICAgIGZsZXgyMDEyLFxuLy8gICAgZmxleDIwMDlcbi8vIF1cbi8vIFBsdWdpbnMgd2l0aG91dCAnbm9QcmVmaWxsJyB2YWx1ZSwgZ29pbmcgbGFzdC5cbi8vICdmbGV4LSonIHBsdWdpbnMgc2hvdWxkIGJlIGF0IHRoZSBib3R0b20uXG4vLyAnZmxleDIwMDknIGdvaW5nIGFmdGVyICdmbGV4MjAxMicuXG4vLyAncHJlZml4ZWQnIGdvaW5nIGFmdGVyICd1bnByZWZpeGVkJ1xuXG52YXIgcGx1Z2lucyA9IFthcHBlYXJlbmNlLCBjb2xvckFkanVzdCwgbWFzaywgdGV4dE9yaWVudGF0aW9uLCB0cmFuc2Zvcm0sIHRyYW5zaXRpb24sIHdyaXRpbmdNb2RlLCB1c2VyU2VsZWN0LCBicmVha1Byb3BzT2xkLCBpbmxpbmVMb2dpY2FsT2xkLCB1bnByZWZpeGVkLCBwcmVmaXhlZCwgc2Nyb2xsU25hcCwgb3ZlcnNjcm9sbEJlaGF2aW9yLCBmbGV4MjAxMiwgZmxleDIwMDldO1xudmFyIHByb3BlcnR5RGV0ZWN0b3JzID0gcGx1Z2lucy5maWx0ZXIoZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAuc3VwcG9ydGVkUHJvcGVydHk7XG59KS5tYXAoZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAuc3VwcG9ydGVkUHJvcGVydHk7XG59KTtcbnZhciBub1ByZWZpbGwgPSBwbHVnaW5zLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5ub1ByZWZpbGw7XG59KS5yZWR1Y2UoZnVuY3Rpb24gKGEsIHApIHtcbiAgYS5wdXNoLmFwcGx5KGEsIF90b0NvbnN1bWFibGVBcnJheShwLm5vUHJlZmlsbCkpO1xuICByZXR1cm4gYTtcbn0sIFtdKTtcblxudmFyIGVsO1xudmFyIGNhY2hlID0ge307XG5cbmlmIChpc0luQnJvd3Nlcikge1xuICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTsgLy8gV2UgdGVzdCBldmVyeSBwcm9wZXJ0eSBvbiB2ZW5kb3IgcHJlZml4IHJlcXVpcmVtZW50LlxuICAvLyBPbmNlIHRlc3RlZCwgcmVzdWx0IGlzIGNhY2hlZC4gSXQgZ2l2ZXMgdXMgdXAgdG8gNzAlIHBlcmYgYm9vc3QuXG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2VsZW1lbnQtc3R5bGUtb2JqZWN0LWFjY2Vzcy12cy1wbGFpbi1vYmplY3RcbiAgLy9cbiAgLy8gUHJlZmlsbCBjYWNoZSB3aXRoIGtub3duIGNzcyBwcm9wZXJ0aWVzIHRvIHJlZHVjZSBhbW91bnQgb2ZcbiAgLy8gcHJvcGVydGllcyB3ZSBuZWVkIHRvIGZlYXR1cmUgdGVzdCBhdCBydW50aW1lLlxuICAvLyBodHRwOi8vZGF2aWR3YWxzaC5uYW1lL3ZlbmRvci1wcmVmaXhcblxuICB2YXIgY29tcHV0ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICcnKTtcblxuICBmb3IgKHZhciBrZXkkMSBpbiBjb21wdXRlZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICBpZiAoIWlzTmFOKGtleSQxKSkgY2FjaGVbY29tcHV0ZWRba2V5JDFdXSA9IGNvbXB1dGVkW2tleSQxXTtcbiAgfSAvLyBQcm9wZXJ0aWVzIHRoYXQgY2Fubm90IGJlIGNvcnJlY3RseSBkZXRlY3RlZCB1c2luZyB0aGVcbiAgLy8gY2FjaGUgcHJlZmlsbCBtZXRob2QuXG5cblxuICBub1ByZWZpbGwuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBkZWxldGUgY2FjaGVbeF07XG4gIH0pO1xufVxuLyoqXG4gKiBUZXN0IGlmIGEgcHJvcGVydHkgaXMgc3VwcG9ydGVkLCByZXR1cm5zIHN1cHBvcnRlZCBwcm9wZXJ0eSB3aXRoIHZlbmRvclxuICogcHJlZml4IGlmIHJlcXVpcmVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgbm90IHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcCBkYXNoIHNlcGFyYXRlZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgLy8gRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgaWYgKCFlbCkgcmV0dXJuIHByb3A7IC8vIFJlbW92ZSBjYWNoZSBmb3IgYmVuY2htYXJrIHRlc3RzIG9yIHJldHVybiBwcm9wZXJ0eSBmcm9tIHRoZSBjYWNoZS5cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdiZW5jaG1hcmsnICYmIGNhY2hlW3Byb3BdICE9IG51bGwpIHtcbiAgICByZXR1cm4gY2FjaGVbcHJvcF07XG4gIH0gLy8gQ2hlY2sgaWYgJ3RyYW5zaXRpb24nIG9yICd0cmFuc2Zvcm0nIG5hdGl2ZWx5IHN1cHBvcnRlZCBpbiBicm93c2VyLlxuXG5cbiAgaWYgKHByb3AgPT09ICd0cmFuc2l0aW9uJyB8fCBwcm9wID09PSAndHJhbnNmb3JtJykge1xuICAgIG9wdGlvbnNbcHJvcF0gPSBwcm9wIGluIGVsLnN0eWxlO1xuICB9IC8vIEZpbmQgYSBwbHVnaW4gZm9yIGN1cnJlbnQgcHJlZml4IHByb3BlcnR5LlxuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wZXJ0eURldGVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgIGNhY2hlW3Byb3BdID0gcHJvcGVydHlEZXRlY3RvcnNbaV0ocHJvcCwgZWwuc3R5bGUsIG9wdGlvbnMpOyAvLyBCcmVhayBsb29wLCBpZiB2YWx1ZSBmb3VuZC5cblxuICAgIGlmIChjYWNoZVtwcm9wXSkgYnJlYWs7XG4gIH0gLy8gUmVzZXQgc3R5bGVzIGZvciBjdXJyZW50IHByb3BlcnR5LlxuICAvLyBGaXJlZm94IGNhbiBldmVuIHRocm93IGFuIGVycm9yIGZvciBpbnZhbGlkIHByb3BlcnRpZXMsIGUuZy4sIFwiMFwiLlxuXG5cbiAgdHJ5IHtcbiAgICBlbC5zdHlsZVtwcm9wXSA9ICcnO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY2FjaGVbcHJvcF07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgdHJhbnNpdGlvblByb3BlcnRpZXMgPSB7XG4gIHRyYW5zaXRpb246IDEsXG4gICd0cmFuc2l0aW9uLXByb3BlcnR5JzogMSxcbiAgJy13ZWJraXQtdHJhbnNpdGlvbic6IDEsXG4gICctd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHknOiAxXG59O1xudmFyIHRyYW5zUHJvcHNSZWdFeHAgPSAvKF5cXHMqW1xcdy1dKyl8LCAoXFxzKltcXHctXSspKD8hW14oKV0qXFwpKS9nO1xudmFyIGVsJDE7XG4vKipcbiAqIFJldHVybnMgcHJlZml4ZWQgdmFsdWUgdHJhbnNpdGlvbi90cmFuc2Zvcm0gaWYgbmVlZGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaFxuICogQHBhcmFtIHtTdHJpbmd9IHAxXG4gKiBAcGFyYW0ge1N0cmluZ30gcDJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHByZWZpeFRyYW5zaXRpb25DYWxsYmFjayhtYXRjaCwgcDEsIHAyKSB7XG4gIGlmIChwMSA9PT0gJ3ZhcicpIHJldHVybiAndmFyJztcbiAgaWYgKHAxID09PSAnYWxsJykgcmV0dXJuICdhbGwnO1xuICBpZiAocDIgPT09ICdhbGwnKSByZXR1cm4gJywgYWxsJztcbiAgdmFyIHByZWZpeGVkVmFsdWUgPSBwMSA/IHN1cHBvcnRlZFByb3BlcnR5KHAxKSA6IFwiLCBcIiArIHN1cHBvcnRlZFByb3BlcnR5KHAyKTtcbiAgaWYgKCFwcmVmaXhlZFZhbHVlKSByZXR1cm4gcDEgfHwgcDI7XG4gIHJldHVybiBwcmVmaXhlZFZhbHVlO1xufVxuXG5pZiAoaXNJbkJyb3dzZXIpIGVsJDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4vKipcbiAqIFJldHVybnMgcHJlZml4ZWQgdmFsdWUgaWYgbmVlZGVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgdmFsdWUgaXMgbm90IHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFZhbHVlKHByb3BlcnR5LCB2YWx1ZSkge1xuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICB2YXIgcHJlZml4ZWRWYWx1ZSA9IHZhbHVlO1xuICBpZiAoIWVsJDEgfHwgcHJvcGVydHkgPT09ICdjb250ZW50JykgcmV0dXJuIHZhbHVlOyAvLyBJdCBpcyBhIHN0cmluZyBvciBhIG51bWJlciBhcyBhIHN0cmluZyBsaWtlICcxJy5cbiAgLy8gV2Ugd2FudCBvbmx5IHByZWZpeGFibGUgdmFsdWVzIGhlcmUuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcblxuICBpZiAodHlwZW9mIHByZWZpeGVkVmFsdWUgIT09ICdzdHJpbmcnIHx8ICFpc05hTihwYXJzZUludChwcmVmaXhlZFZhbHVlLCAxMCkpKSB7XG4gICAgcmV0dXJuIHByZWZpeGVkVmFsdWU7XG4gIH0gLy8gQ3JlYXRlIGNhY2hlIGtleSBmb3IgY3VycmVudCB2YWx1ZS5cblxuXG4gIHZhciBjYWNoZUtleSA9IHByb3BlcnR5ICsgcHJlZml4ZWRWYWx1ZTsgLy8gUmVtb3ZlIGNhY2hlIGZvciBiZW5jaG1hcmsgdGVzdHMgb3IgcmV0dXJuIHZhbHVlIGZyb20gY2FjaGUuXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnYmVuY2htYXJrJyAmJiBjYWNoZSQxW2NhY2hlS2V5XSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGNhY2hlJDFbY2FjaGVLZXldO1xuICB9IC8vIElFIGNhbiBldmVuIHRocm93IGFuIGVycm9yIGluIHNvbWUgY2FzZXMsIGZvciBlLmcuIHN0eWxlLmNvbnRlbnQgPSAnYmFyJy5cblxuXG4gIHRyeSB7XG4gICAgLy8gVGVzdCB2YWx1ZSBhcyBpdCBpcy5cbiAgICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9IHByZWZpeGVkVmFsdWU7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIFJldHVybiBmYWxzZSBpZiB2YWx1ZSBub3Qgc3VwcG9ydGVkLlxuICAgIGNhY2hlJDFbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIElmICd0cmFuc2l0aW9uJyBvciAndHJhbnNpdGlvbi1wcm9wZXJ0eScgcHJvcGVydHkuXG5cblxuICBpZiAodHJhbnNpdGlvblByb3BlcnRpZXNbcHJvcGVydHldKSB7XG4gICAgcHJlZml4ZWRWYWx1ZSA9IHByZWZpeGVkVmFsdWUucmVwbGFjZSh0cmFuc1Byb3BzUmVnRXhwLCBwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKGVsJDEuc3R5bGVbcHJvcGVydHldID09PSAnJykge1xuICAgIC8vIFZhbHVlIHdpdGggYSB2ZW5kb3IgcHJlZml4LlxuICAgIHByZWZpeGVkVmFsdWUgPSBwcmVmaXguY3NzICsgcHJlZml4ZWRWYWx1ZTsgLy8gSGFyZGNvZGUgdGVzdCB0byBjb252ZXJ0IFwiZmxleFwiIHRvIFwiLW1zLWZsZXhib3hcIiBmb3IgSUUxMC5cblxuICAgIGlmIChwcmVmaXhlZFZhbHVlID09PSAnLW1zLWZsZXgnKSBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9ICctbXMtZmxleGJveCc7IC8vIFRlc3QgcHJlZml4ZWQgdmFsdWUuXG5cbiAgICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9IHByZWZpeGVkVmFsdWU7IC8vIFJldHVybiBmYWxzZSBpZiB2YWx1ZSBub3Qgc3VwcG9ydGVkLlxuXG4gICAgaWYgKGVsJDEuc3R5bGVbcHJvcGVydHldID09PSAnJykge1xuICAgICAgY2FjaGUkMVtjYWNoZUtleV0gPSBmYWxzZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gLy8gUmVzZXQgc3R5bGVzIGZvciBjdXJyZW50IHByb3BlcnR5LlxuXG5cbiAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSAnJzsgLy8gV3JpdGUgY3VycmVudCB2YWx1ZSB0byBjYWNoZS5cblxuICBjYWNoZSQxW2NhY2hlS2V5XSA9IHByZWZpeGVkVmFsdWU7XG4gIHJldHVybiBjYWNoZSQxW2NhY2hlS2V5XTtcbn1cblxuZXhwb3J0IHsgcHJlZml4LCBzdXBwb3J0ZWRLZXlmcmFtZXMsIHN1cHBvcnRlZFByb3BlcnR5LCBzdXBwb3J0ZWRWYWx1ZSB9O1xuIiwiaW1wb3J0IHsgc3VwcG9ydGVkS2V5ZnJhbWVzLCBzdXBwb3J0ZWRWYWx1ZSwgc3VwcG9ydGVkUHJvcGVydHkgfSBmcm9tICdjc3MtdmVuZG9yJztcbmltcG9ydCB7IHRvQ3NzVmFsdWUgfSBmcm9tICdqc3MnO1xuXG4vKipcbiAqIEFkZCB2ZW5kb3IgcHJlZml4IHRvIGEgcHJvcGVydHkgbmFtZSB3aGVuIG5lZWRlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGpzc1ZlbmRvclByZWZpeGVyKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgdmFyIGF0UnVsZSA9IHJ1bGU7XG4gICAgICBhdFJ1bGUuYXQgPSBzdXBwb3J0ZWRLZXlmcmFtZXMoYXRSdWxlLmF0KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVmaXhTdHlsZShzdHlsZSkge1xuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuXG4gICAgICBpZiAocHJvcCA9PT0gJ2ZhbGxiYWNrcycgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgc3R5bGVbcHJvcF0gPSB2YWx1ZS5tYXAocHJlZml4U3R5bGUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoYW5nZVByb3AgPSBmYWxzZTtcbiAgICAgIHZhciBzdXBwb3J0ZWRQcm9wID0gc3VwcG9ydGVkUHJvcGVydHkocHJvcCk7XG4gICAgICBpZiAoc3VwcG9ydGVkUHJvcCAmJiBzdXBwb3J0ZWRQcm9wICE9PSBwcm9wKSBjaGFuZ2VQcm9wID0gdHJ1ZTtcbiAgICAgIHZhciBjaGFuZ2VWYWx1ZSA9IGZhbHNlO1xuICAgICAgdmFyIHN1cHBvcnRlZFZhbHVlJCQxID0gc3VwcG9ydGVkVmFsdWUoc3VwcG9ydGVkUHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpO1xuICAgICAgaWYgKHN1cHBvcnRlZFZhbHVlJCQxICYmIHN1cHBvcnRlZFZhbHVlJCQxICE9PSB2YWx1ZSkgY2hhbmdlVmFsdWUgPSB0cnVlO1xuXG4gICAgICBpZiAoY2hhbmdlUHJvcCB8fCBjaGFuZ2VWYWx1ZSkge1xuICAgICAgICBpZiAoY2hhbmdlUHJvcCkgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBzdHlsZVtzdXBwb3J0ZWRQcm9wIHx8IHByb3BdID0gc3VwcG9ydGVkVmFsdWUkJDEgfHwgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgcmV0dXJuIHByZWZpeFN0eWxlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gc3VwcG9ydGVkVmFsdWUocHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpIHx8IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlLFxuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1ZlbmRvclByZWZpeGVyO1xuIiwiLyoqXG4gKiBTb3J0IHByb3BzIGJ5IGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24ganNzUHJvcHNTb3J0KCkge1xuICB2YXIgc29ydCA9IGZ1bmN0aW9uIHNvcnQocHJvcDAsIHByb3AxKSB7XG4gICAgaWYgKHByb3AwLmxlbmd0aCA9PT0gcHJvcDEubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gcHJvcDAgPiBwcm9wMSA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDAubGVuZ3RoIC0gcHJvcDEubGVuZ3RoO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgICB2YXIgbmV3U3R5bGUgPSB7fTtcbiAgICAgIHZhciBwcm9wcyA9IE9iamVjdC5rZXlzKHN0eWxlKS5zb3J0KHNvcnQpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5ld1N0eWxlW3Byb3BzW2ldXSA9IHN0eWxlW3Byb3BzW2ldXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1N0eWxlO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzUHJvcHNTb3J0O1xuIiwiaW1wb3J0IGZ1bmN0aW9ucyBmcm9tICdqc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24nO1xuaW1wb3J0IGdsb2JhbCBmcm9tICdqc3MtcGx1Z2luLWdsb2JhbCc7XG5pbXBvcnQgbmVzdGVkIGZyb20gJ2pzcy1wbHVnaW4tbmVzdGVkJztcbmltcG9ydCBjYW1lbENhc2UgZnJvbSAnanNzLXBsdWdpbi1jYW1lbC1jYXNlJztcbmltcG9ydCBkZWZhdWx0VW5pdCBmcm9tICdqc3MtcGx1Z2luLWRlZmF1bHQtdW5pdCc7XG5pbXBvcnQgdmVuZG9yUHJlZml4ZXIgZnJvbSAnanNzLXBsdWdpbi12ZW5kb3ItcHJlZml4ZXInO1xuaW1wb3J0IHByb3BzU29ydCBmcm9tICdqc3MtcGx1Z2luLXByb3BzLXNvcnQnOyAvLyBTdWJzZXQgb2YganNzLXByZXNldC1kZWZhdWx0IHdpdGggb25seSB0aGUgcGx1Z2lucyB0aGUgTWF0ZXJpYWwtVUkgY29tcG9uZW50cyBhcmUgdXNpbmcuXG5cbmZ1bmN0aW9uIGpzc1ByZXNldCgpIHtcbiAgcmV0dXJuIHtcbiAgICBwbHVnaW5zOiBbZnVuY3Rpb25zKCksIGdsb2JhbCgpLCBuZXN0ZWQoKSwgY2FtZWxDYXNlKCksIGRlZmF1bHRVbml0KCksIC8vIERpc2FibGUgdGhlIHZlbmRvciBwcmVmaXhlciBzZXJ2ZXItc2lkZSwgaXQgZG9lcyBub3RoaW5nLlxuICAgIC8vIFRoaXMgd2F5LCB3ZSBjYW4gZ2V0IGEgcGVyZm9ybWFuY2UgYm9vc3QuXG4gICAgLy8gSW4gdGhlIGRvY3VtZW50YXRpb24sIHdlIGFyZSB1c2luZyBgYXV0b3ByZWZpeGVyYCB0byBzb2x2ZSB0aGlzIHByb2JsZW0uXG4gICAgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogdmVuZG9yUHJlZml4ZXIoKSwgcHJvcHNTb3J0KCldXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1ByZXNldDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUgZnJvbSAnLi4vY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUnO1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAnanNzJztcbmltcG9ydCBqc3NQcmVzZXQgZnJvbSAnLi4vanNzUHJlc2V0JzsgLy8gRGVmYXVsdCBKU1MgaW5zdGFuY2UuXG5cbnZhciBqc3MgPSBjcmVhdGUoanNzUHJlc2V0KCkpOyAvLyBVc2UgYSBzaW5nbGV0b24gb3IgdGhlIHByb3ZpZGVkIG9uZSBieSB0aGUgY29udGV4dC5cbi8vXG4vLyBUaGUgY291bnRlci1iYXNlZCBhcHByb2FjaCBkb2Vzbid0IHRvbGVyYXRlIGFueSBtaXN0YWtlLlxuLy8gSXQncyBtdWNoIHNhZmVyIHRvIHVzZSB0aGUgc2FtZSBjb3VudGVyIGV2ZXJ5d2hlcmUuXG5cbnZhciBnZW5lcmF0ZUNsYXNzTmFtZSA9IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCk7IC8vIEV4cG9ydGVkIGZvciB0ZXN0IHB1cnBvc2VzXG5cbmV4cG9ydCB2YXIgc2hlZXRzTWFuYWdlciA9IG5ldyBNYXAoKTtcbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgZGlzYWJsZUdlbmVyYXRpb246IGZhbHNlLFxuICBnZW5lcmF0ZUNsYXNzTmFtZTogZ2VuZXJhdGVDbGFzc05hbWUsXG4gIGpzczoganNzLFxuICBzaGVldHNDYWNoZTogbnVsbCxcbiAgc2hlZXRzTWFuYWdlcjogc2hlZXRzTWFuYWdlcixcbiAgc2hlZXRzUmVnaXN0cnk6IG51bGxcbn07XG5leHBvcnQgdmFyIFN0eWxlc0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGRlZmF1bHRPcHRpb25zKTtcbnZhciBpbmplY3RGaXJzdE5vZGU7XG5cbmZ1bmN0aW9uIFN0eWxlc1Byb3ZpZGVyKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgX3Byb3BzJGluamVjdEZpcnN0ID0gcHJvcHMuaW5qZWN0Rmlyc3QsXG4gICAgICBpbmplY3RGaXJzdCA9IF9wcm9wcyRpbmplY3RGaXJzdCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkaW5qZWN0Rmlyc3QsXG4gICAgICBfcHJvcHMkZGlzYWJsZUdlbmVyYXQgPSBwcm9wcy5kaXNhYmxlR2VuZXJhdGlvbixcbiAgICAgIGRpc2FibGVHZW5lcmF0aW9uID0gX3Byb3BzJGRpc2FibGVHZW5lcmF0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlR2VuZXJhdCxcbiAgICAgIGxvY2FsT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJpbmplY3RGaXJzdFwiLCBcImRpc2FibGVHZW5lcmF0aW9uXCJdKTtcblxuICB2YXIgb3V0ZXJPcHRpb25zID0gUmVhY3QudXNlQ29udGV4dChTdHlsZXNDb250ZXh0KTtcblxuICB2YXIgY29udGV4dCA9IF9leHRlbmRzKHt9LCBvdXRlck9wdGlvbnMsIHtcbiAgICBkaXNhYmxlR2VuZXJhdGlvbjogZGlzYWJsZUdlbmVyYXRpb25cbiAgfSwgbG9jYWxPcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyAmJiAhY29udGV4dC5zaGVldHNNYW5hZ2VyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogeW91IG5lZWQgdG8gdXNlIHRoZSBTZXJ2ZXJTdHlsZVNoZWV0cyBBUEkgd2hlbiByZW5kZXJpbmcgb24gdGhlIHNlcnZlci4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChjb250ZXh0Lmpzcy5vcHRpb25zLmluc2VydGlvblBvaW50ICYmIGluamVjdEZpcnN0KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogeW91IGNhbm5vdCB1c2UgYSBjdXN0b20gaW5zZXJ0aW9uUG9pbnQgYW5kIDxTdHlsZXNDb250ZXh0IGluamVjdEZpcnN0PiBhdCB0aGUgc2FtZSB0aW1lLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGluamVjdEZpcnN0ICYmIGxvY2FsT3B0aW9ucy5qc3MpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiB5b3UgY2Fubm90IHVzZSB0aGUganNzIGFuZCBpbmplY3RGaXJzdCBwcm9wcyBhdCB0aGUgc2FtZSB0aW1lLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGV4dC5qc3Mub3B0aW9ucy5pbnNlcnRpb25Qb2ludCAmJiBpbmplY3RGaXJzdCAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICghaW5qZWN0Rmlyc3ROb2RlKSB7XG4gICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQ7XG4gICAgICBpbmplY3RGaXJzdE5vZGUgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCdtdWktaW5qZWN0LWZpcnN0Jyk7XG4gICAgICBoZWFkLmluc2VydEJlZm9yZShpbmplY3RGaXJzdE5vZGUsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgY29udGV4dC5qc3MgPSBjcmVhdGUoe1xuICAgICAgcGx1Z2luczoganNzUHJlc2V0KCkucGx1Z2lucyxcbiAgICAgIGluc2VydGlvblBvaW50OiBpbmplY3RGaXJzdE5vZGVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFN0eWxlc0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogWW91IGNhbiBkaXNhYmxlIHRoZSBnZW5lcmF0aW9uIG9mIHRoZSBzdHlsZXMgd2l0aCB0aGlzIG9wdGlvbi5cbiAgICogSXQgY2FuIGJlIHVzZWZ1bCB3aGVuIHRyYXZlcnNpbmcgdGhlIFJlYWN0IHRyZWUgb3V0c2lkZSBvZiB0aGUgSFRNTFxuICAgKiByZW5kZXJpbmcgc3RlcCBvbiB0aGUgc2VydmVyLlxuICAgKiBMZXQncyBzYXkgeW91IGFyZSB1c2luZyByZWFjdC1hcG9sbG8gdG8gZXh0cmFjdCBhbGxcbiAgICogdGhlIHF1ZXJpZXMgbWFkZSBieSB0aGUgaW50ZXJmYWNlIHNlcnZlci1zaWRlIC0geW91IGNhbiBzaWduaWZpY2FudGx5IHNwZWVkIHVwIHRoZSB0cmF2ZXJzYWwgd2l0aCB0aGlzIHByb3AuXG4gICAqL1xuICBkaXNhYmxlR2VuZXJhdGlvbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEpTUydzIGNsYXNzIG5hbWUgZ2VuZXJhdG9yLlxuICAgKi9cbiAgZ2VuZXJhdGVDbGFzc05hbWU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBsYXN0IGluIHRoZSA8aGVhZD4gZWxlbWVudCBvZiB0aGUgcGFnZS5cbiAgICogQXMgYSByZXN1bHQsIHRoZXkgZ2FpbiBtb3JlIHNwZWNpZmljaXR5IHRoYW4gYW55IG90aGVyIHN0eWxlIHNoZWV0LlxuICAgKiBJZiB5b3Ugd2FudCB0byBvdmVycmlkZSBNYXRlcmlhbC1VSSdzIHN0eWxlcywgc2V0IHRoaXMgcHJvcC5cbiAgICovXG4gIGluamVjdEZpcnN0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSlNTJ3MgaW5zdGFuY2UuXG4gICAqL1xuICBqc3M6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBCZXRhIGZlYXR1cmUuXG4gICAqXG4gICAqIENhY2hlIGZvciB0aGUgc2hlZXRzLlxuICAgKi9cbiAgc2hlZXRzQ2FjaGU6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogVGhlIHNoZWV0c01hbmFnZXIgaXMgdXNlZCB0byBkZWR1cGxpY2F0ZSBzdHlsZSBzaGVldCBpbmplY3Rpb24gaW4gdGhlIHBhZ2UuXG4gICAqIEl0J3MgZGVkdXBsaWNhdGluZyB1c2luZyB0aGUgKHRoZW1lLCBzdHlsZXMpIGNvdXBsZS5cbiAgICogT24gdGhlIHNlcnZlciwgeW91IHNob3VsZCBwcm92aWRlIGEgbmV3IGluc3RhbmNlIGZvciBlYWNoIHJlcXVlc3QuXG4gICAqL1xuICBzaGVldHNNYW5hZ2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIENvbGxlY3QgdGhlIHNoZWV0cy5cbiAgICovXG4gIHNoZWV0c1JlZ2lzdHJ5OiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMgPSBleGFjdFByb3AoU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzKSA6IHZvaWQgMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3R5bGVzUHJvdmlkZXI7IiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydCAqL1xuLy8gR2xvYmFsIGluZGV4IGNvdW50ZXIgdG8gcHJlc2VydmUgc291cmNlIG9yZGVyLlxuLy8gV2UgY3JlYXRlIHRoZSBzdHlsZSBzaGVldCBkdXJpbmcgYXQgdGhlIGNyZWF0aW9uIG9mIHRoZSBjb21wb25lbnQsXG4vLyBjaGlsZHJlbiBhcmUgaGFuZGxlZCBhZnRlciB0aGUgcGFyZW50cywgc28gdGhlIG9yZGVyIG9mIHN0eWxlIGVsZW1lbnRzIHdvdWxkIGJlIHBhcmVudC0+Y2hpbGQuXG4vLyBJdCBpcyBhIHByb2JsZW0gdGhvdWdoIHdoZW4gYSBwYXJlbnQgcGFzc2VzIGEgY2xhc3NOYW1lXG4vLyB3aGljaCBuZWVkcyB0byBvdmVycmlkZSBhbnkgY2hpbGQncyBzdHlsZXMuXG4vLyBTdHlsZVNoZWV0IG9mIHRoZSBjaGlsZCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHksIGJlY2F1c2Ugb2YgdGhlIHNvdXJjZSBvcmRlci5cbi8vIFNvIG91ciBzb2x1dGlvbiBpcyB0byByZW5kZXIgc2hlZXRzIHRoZW0gaW4gdGhlIHJldmVyc2Ugb3JkZXIgY2hpbGQtPnNoZWV0LCBzb1xuLy8gdGhhdCBwYXJlbnQgaGFzIGEgaGlnaGVyIHNwZWNpZmljaXR5LlxudmFyIGluZGV4Q291bnRlciA9IC0xZTk7XG5leHBvcnQgZnVuY3Rpb24gaW5jcmVtZW50KCkge1xuICBpbmRleENvdW50ZXIgKz0gMTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChpbmRleENvdW50ZXIgPj0gMCkge1xuICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IHlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuJywgJ1RoZSBpbmRleENvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5kZXhDb3VudGVyO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnOyAvLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxuXG5pbXBvcnQgbm9vcFRoZW1lIGZyb20gJy4vbm9vcFRoZW1lJzsgLy8gU3VwcG9ydCBmb3IgdGhlIGpzcy1leHBhbmQgcGx1Z2luLlxuXG5mdW5jdGlvbiBhcnJheU1lcmdlKGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgcmV0dXJuIHNvdXJjZTtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGVzQ3JlYXRvcihzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIHRoZW1pbmdFbmFibGVkID0gdHlwZW9mIHN0eWxlc09yQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChfdHlwZW9mKHN0eWxlc09yQ3JlYXRvcikgIT09ICdvYmplY3QnICYmICF0aGVtaW5nRW5hYmxlZCkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiB0aGUgYHN0eWxlc2AgYXJndW1lbnQgcHJvdmlkZWQgaXMgaW52YWxpZC4nLCAnWW91IG5lZWQgdG8gcHJvdmlkZSBhIGZ1bmN0aW9uIGdlbmVyYXRpbmcgdGhlIHN0eWxlcyBvciBhIHN0eWxlcyBvYmplY3QuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUodGhlbWUsIG5hbWUpIHtcbiAgICAgIHZhciBzdHlsZXM7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHN0eWxlcyA9IHRoZW1pbmdFbmFibGVkID8gc3R5bGVzT3JDcmVhdG9yKHRoZW1lKSA6IHN0eWxlc09yQ3JlYXRvcjtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGVtaW5nRW5hYmxlZCA9PT0gdHJ1ZSAmJiB0aGVtZSA9PT0gbm9vcFRoZW1lKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBwcmVwZW5kIGVycm9yIG1lc3NhZ2UvbmFtZSBpbnN0ZWFkXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IHRoZSBgc3R5bGVzYCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgYXJlIHByb3ZpZGluZyBhIGZ1bmN0aW9uIHdpdGhvdXQgYSB0aGVtZSBpbiB0aGUgY29udGV4dC4nLCAnT25lIG9mIHRoZSBwYXJlbnQgZWxlbWVudHMgbmVlZHMgdG8gdXNlIGEgVGhlbWVQcm92aWRlci4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW5hbWUgfHwgIXRoZW1lLm92ZXJyaWRlcyB8fCAhdGhlbWUub3ZlcnJpZGVzW25hbWVdKSB7XG4gICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdmVycmlkZXMgPSB0aGVtZS5vdmVycmlkZXNbbmFtZV07XG5cbiAgICAgIHZhciBzdHlsZXNXaXRoT3ZlcnJpZGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcyk7XG5cbiAgICAgIE9iamVjdC5rZXlzKG92ZXJyaWRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiB5b3UgYXJlIHRyeWluZyB0byBvdmVycmlkZSBhIHN0eWxlIHRoYXQgZG9lcyBub3QgZXhpc3QuJywgXCJGaXggdGhlIGBcIi5jb25jYXQoa2V5LCBcImAga2V5IG9mIGB0aGVtZS5vdmVycmlkZXMuXCIpLmNvbmNhdChuYW1lLCBcImAuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldID0gZGVlcG1lcmdlKHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSwgb3ZlcnJpZGVzW2tleV0sIHtcbiAgICAgICAgICBhcnJheU1lcmdlOiBhcnJheU1lcmdlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3R5bGVzV2l0aE92ZXJyaWRlcztcbiAgICB9LFxuICAgIG9wdGlvbnM6IHt9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFN0eWxlc0NyZWF0b3I7IiwiLy8gV2UgdXNlIHRoZSBzYW1lIGVtcHR5IG9iamVjdCB0byByZWYgY291bnQgdGhlIHN0eWxlcyB0aGF0IGRvbid0IG5lZWQgYSB0aGVtZSBvYmplY3QuXG52YXIgbm9vcFRoZW1lID0ge307XG5leHBvcnQgZGVmYXVsdCBub29wVGhlbWU7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldER5bmFtaWNTdHlsZXMgfSBmcm9tICdqc3MnO1xuaW1wb3J0IG1lcmdlQ2xhc3NlcyBmcm9tICcuLi9tZXJnZUNsYXNzZXMnO1xuaW1wb3J0IG11bHRpS2V5U3RvcmUgZnJvbSAnLi9tdWx0aUtleVN0b3JlJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5pbXBvcnQgeyBTdHlsZXNDb250ZXh0IH0gZnJvbSAnLi4vU3R5bGVzUHJvdmlkZXInO1xuaW1wb3J0IHsgaW5jcmVtZW50IH0gZnJvbSAnLi9pbmRleENvdW50ZXInO1xuaW1wb3J0IGdldFN0eWxlc0NyZWF0b3IgZnJvbSAnLi4vZ2V0U3R5bGVzQ3JlYXRvcic7XG5pbXBvcnQgbm9vcFRoZW1lIGZyb20gJy4uL2dldFN0eWxlc0NyZWF0b3Ivbm9vcFRoZW1lJztcblxuZnVuY3Rpb24gZ2V0Q2xhc3NlcyhfcmVmLCBjbGFzc2VzLCBDb21wb25lbnQpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmLnN0eWxlc09wdGlvbnM7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm4gY2xhc3NlcyB8fCB7fTtcbiAgfVxuXG4gIGlmICghc3RhdGUuY2FjaGVDbGFzc2VzKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzID0ge1xuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBmaW5hbGl6ZWQgY2xhc3NlcyB2YWx1ZS5cbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgY2xhc3NlcyBwcm9wIHBvaW50ZXIuXG4gICAgICBsYXN0UHJvcDogbnVsbCxcbiAgICAgIC8vIENhY2hlIGZvciB0aGUgbGFzdCB1c2VkIHJlbmRlcmVkIGNsYXNzZXMgcG9pbnRlci5cbiAgICAgIGxhc3RKU1M6IHt9XG4gICAgfTtcbiAgfSAvLyBUcmFja3MgaWYgZWl0aGVyIHRoZSByZW5kZXJlZCBjbGFzc2VzIG9yIGNsYXNzZXMgcHJvcCBoYXMgY2hhbmdlZCxcbiAgLy8gcmVxdWlyaW5nIHRoZSBnZW5lcmF0aW9uIG9mIGEgbmV3IGZpbmFsaXplZCBjbGFzc2VzIG9iamVjdC5cblxuXG4gIHZhciBnZW5lcmF0ZSA9IGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5jbGFzc2VzICE9PSBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdEpTUykge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTID0gc3RhdGUuY2xhc3NlcztcbiAgICBnZW5lcmF0ZSA9IHRydWU7XG4gIH1cblxuICBpZiAoY2xhc3NlcyAhPT0gc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RQcm9wKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RQcm9wID0gY2xhc3NlcztcbiAgICBnZW5lcmF0ZSA9IHRydWU7XG4gIH1cblxuICBpZiAoZ2VuZXJhdGUpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMudmFsdWUgPSBtZXJnZUNsYXNzZXMoe1xuICAgICAgYmFzZUNsYXNzZXM6IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTLFxuICAgICAgbmV3Q2xhc3NlczogY2xhc3NlcyxcbiAgICAgIENvbXBvbmVudDogQ29tcG9uZW50XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3RhdGUuY2FjaGVDbGFzc2VzLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdHRhY2goX3JlZjIsIHByb3BzKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgdGhlbWUgPSBfcmVmMi50aGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmMi5zdHlsZXNPcHRpb25zLFxuICAgICAgc3R5bGVzQ3JlYXRvciA9IF9yZWYyLnN0eWxlc0NyZWF0b3IsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzaGVldE1hbmFnZXIgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcblxuICBpZiAoIXNoZWV0TWFuYWdlcikge1xuICAgIHNoZWV0TWFuYWdlciA9IHtcbiAgICAgIHJlZnM6IDAsXG4gICAgICBzdGF0aWNTaGVldDogbnVsbCxcbiAgICAgIGR5bmFtaWNTdHlsZXM6IG51bGxcbiAgICB9O1xuICAgIG11bHRpS2V5U3RvcmUuc2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUsIHNoZWV0TWFuYWdlcik7XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBzdHlsZXNDcmVhdG9yLm9wdGlvbnMsIHt9LCBzdHlsZXNPcHRpb25zLCB7XG4gICAgdGhlbWU6IHRoZW1lLFxuICAgIGZsaXA6IHR5cGVvZiBzdHlsZXNPcHRpb25zLmZsaXAgPT09ICdib29sZWFuJyA/IHN0eWxlc09wdGlvbnMuZmxpcCA6IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCdcbiAgfSk7XG5cbiAgb3B0aW9ucy5nZW5lcmF0ZUlkID0gb3B0aW9ucy5zZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZSB8fCBvcHRpb25zLmdlbmVyYXRlQ2xhc3NOYW1lO1xuICB2YXIgc2hlZXRzUmVnaXN0cnkgPSBzdHlsZXNPcHRpb25zLnNoZWV0c1JlZ2lzdHJ5O1xuXG4gIGlmIChzaGVldE1hbmFnZXIucmVmcyA9PT0gMCkge1xuICAgIHZhciBzdGF0aWNTaGVldDtcblxuICAgIGlmIChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlKSB7XG4gICAgICBzdGF0aWNTaGVldCA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVzID0gc3R5bGVzQ3JlYXRvci5jcmVhdGUodGhlbWUsIG5hbWUpO1xuXG4gICAgaWYgKCFzdGF0aWNTaGVldCkge1xuICAgICAgc3RhdGljU2hlZXQgPSBzdHlsZXNPcHRpb25zLmpzcy5jcmVhdGVTdHlsZVNoZWV0KHN0eWxlcywgX2V4dGVuZHMoe1xuICAgICAgICBsaW5rOiBmYWxzZVxuICAgICAgfSwgb3B0aW9ucykpO1xuICAgICAgc3RhdGljU2hlZXQuYXR0YWNoKCk7XG5cbiAgICAgIGlmIChzdHlsZXNPcHRpb25zLnNoZWV0c0NhY2hlKSB7XG4gICAgICAgIG11bHRpS2V5U3RvcmUuc2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUsIHN0eWxlc0NyZWF0b3IsIHRoZW1lLCBzdGF0aWNTaGVldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNoZWV0c1JlZ2lzdHJ5KSB7XG4gICAgICBzaGVldHNSZWdpc3RyeS5hZGQoc3RhdGljU2hlZXQpO1xuICAgIH1cblxuICAgIHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldCA9IHN0YXRpY1NoZWV0O1xuICAgIHNoZWV0TWFuYWdlci5keW5hbWljU3R5bGVzID0gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpO1xuICB9XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5keW5hbWljU3R5bGVzKSB7XG4gICAgdmFyIGR5bmFtaWNTaGVldCA9IHN0eWxlc09wdGlvbnMuanNzLmNyZWF0ZVN0eWxlU2hlZXQoc2hlZXRNYW5hZ2VyLmR5bmFtaWNTdHlsZXMsIF9leHRlbmRzKHtcbiAgICAgIGxpbms6IHRydWVcbiAgICB9LCBvcHRpb25zKSk7XG4gICAgZHluYW1pY1NoZWV0LnVwZGF0ZShwcm9wcykuYXR0YWNoKCk7XG4gICAgc3RhdGUuZHluYW1pY1NoZWV0ID0gZHluYW1pY1NoZWV0O1xuICAgIHN0YXRlLmNsYXNzZXMgPSBtZXJnZUNsYXNzZXMoe1xuICAgICAgYmFzZUNsYXNzZXM6IHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldC5jbGFzc2VzLFxuICAgICAgbmV3Q2xhc3NlczogZHluYW1pY1NoZWV0LmNsYXNzZXNcbiAgICB9KTtcblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkuYWRkKGR5bmFtaWNTaGVldCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN0YXRlLmNsYXNzZXMgPSBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQuY2xhc3NlcztcbiAgfVxuXG4gIHNoZWV0TWFuYWdlci5yZWZzICs9IDE7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZShfcmVmMywgcHJvcHMpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjMuc3RhdGU7XG5cbiAgaWYgKHN0YXRlLmR5bmFtaWNTaGVldCkge1xuICAgIHN0YXRlLmR5bmFtaWNTaGVldC51cGRhdGUocHJvcHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRldGFjaChfcmVmNCkge1xuICB2YXIgc3RhdGUgPSBfcmVmNC5zdGF0ZSxcbiAgICAgIHRoZW1lID0gX3JlZjQudGhlbWUsXG4gICAgICBzdHlsZXNPcHRpb25zID0gX3JlZjQuc3R5bGVzT3B0aW9ucyxcbiAgICAgIHN0eWxlc0NyZWF0b3IgPSBfcmVmNC5zdHlsZXNDcmVhdG9yO1xuXG4gIGlmIChzdHlsZXNPcHRpb25zLmRpc2FibGVHZW5lcmF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoZWV0TWFuYWdlciA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuICBzaGVldE1hbmFnZXIucmVmcyAtPSAxO1xuICB2YXIgc2hlZXRzUmVnaXN0cnkgPSBzdHlsZXNPcHRpb25zLnNoZWV0c1JlZ2lzdHJ5O1xuXG4gIGlmIChzaGVldE1hbmFnZXIucmVmcyA9PT0gMCkge1xuICAgIG11bHRpS2V5U3RvcmUuZGVsZXRlKHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuICAgIHN0eWxlc09wdGlvbnMuanNzLnJlbW92ZVN0eWxlU2hlZXQoc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0KTtcblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkucmVtb3ZlKHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLmR5bmFtaWNTaGVldCkge1xuICAgIHN0eWxlc09wdGlvbnMuanNzLnJlbW92ZVN0eWxlU2hlZXQoc3RhdGUuZHluYW1pY1NoZWV0KTtcblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkucmVtb3ZlKHN0YXRlLmR5bmFtaWNTaGVldCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVzZVN5bmNocm9ub3VzRWZmZWN0KGZ1bmMsIHZhbHVlcykge1xuICB2YXIga2V5ID0gUmVhY3QudXNlUmVmKFtdKTtcbiAgdmFyIG91dHB1dDsgLy8gU3RvcmUgXCJnZW5lcmF0aW9uXCIga2V5LiBKdXN0IHJldHVybnMgYSBuZXcgb2JqZWN0IGV2ZXJ5IHRpbWVcblxuICB2YXIgY3VycmVudEtleSA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSwgdmFsdWVzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgLy8gXCJ0aGUgZmlyc3QgcmVuZGVyXCIsIG9yIFwibWVtbyBkcm9wcGVkIHRoZSB2YWx1ZVwiXG5cbiAgaWYgKGtleS5jdXJyZW50ICE9PSBjdXJyZW50S2V5KSB7XG4gICAga2V5LmN1cnJlbnQgPSBjdXJyZW50S2V5O1xuICAgIG91dHB1dCA9IGZ1bmMoKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvdXRwdXQpIHtcbiAgICAgICAgb3V0cHV0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2N1cnJlbnRLZXldIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICk7XG59XG5cbmZ1bmN0aW9uIG1ha2VTdHlsZXMoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSxcbiAgICAgIGNsYXNzTmFtZVByZWZpeE9wdGlvbiA9IG9wdGlvbnMuY2xhc3NOYW1lUHJlZml4LFxuICAgICAgQ29tcG9uZW50ID0gb3B0aW9ucy5Db21wb25lbnQsXG4gICAgICBfb3B0aW9ucyRkZWZhdWx0VGhlbWUgPSBvcHRpb25zLmRlZmF1bHRUaGVtZSxcbiAgICAgIGRlZmF1bHRUaGVtZSA9IF9vcHRpb25zJGRlZmF1bHRUaGVtZSA9PT0gdm9pZCAwID8gbm9vcFRoZW1lIDogX29wdGlvbnMkZGVmYXVsdFRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9uczIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wibmFtZVwiLCBcImNsYXNzTmFtZVByZWZpeFwiLCBcIkNvbXBvbmVudFwiLCBcImRlZmF1bHRUaGVtZVwiXSk7XG5cbiAgdmFyIHN0eWxlc0NyZWF0b3IgPSBnZXRTdHlsZXNDcmVhdG9yKHN0eWxlc09yQ3JlYXRvcik7XG4gIHZhciBjbGFzc05hbWVQcmVmaXggPSBuYW1lIHx8IGNsYXNzTmFtZVByZWZpeE9wdGlvbiB8fCAnbWFrZVN0eWxlcyc7XG4gIHN0eWxlc0NyZWF0b3Iub3B0aW9ucyA9IHtcbiAgICBpbmRleDogaW5jcmVtZW50KCksXG4gICAgbmFtZTogbmFtZSxcbiAgICBtZXRhOiBjbGFzc05hbWVQcmVmaXgsXG4gICAgY2xhc3NOYW1lUHJlZml4OiBjbGFzc05hbWVQcmVmaXhcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciB0aGVtZSA9IHVzZVRoZW1lKCkgfHwgZGVmYXVsdFRoZW1lO1xuXG4gICAgdmFyIHN0eWxlc09wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUmVhY3QudXNlQ29udGV4dChTdHlsZXNDb250ZXh0KSwge30sIHN0eWxlc09wdGlvbnMyKTtcblxuICAgIHZhciBpbnN0YW5jZSA9IFJlYWN0LnVzZVJlZigpO1xuICAgIHZhciBzaG91bGRVcGRhdGUgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB1c2VTeW5jaHJvbm91c0VmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IHtcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgc3RhdGU6IHt9LFxuICAgICAgICBzdHlsZXNDcmVhdG9yOiBzdHlsZXNDcmVhdG9yLFxuICAgICAgICBzdHlsZXNPcHRpb25zOiBzdHlsZXNPcHRpb25zLFxuICAgICAgICB0aGVtZTogdGhlbWVcbiAgICAgIH07XG4gICAgICBhdHRhY2goY3VycmVudCwgcHJvcHMpO1xuICAgICAgc2hvdWxkVXBkYXRlLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGluc3RhbmNlLmN1cnJlbnQgPSBjdXJyZW50O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGV0YWNoKGN1cnJlbnQpO1xuICAgICAgfTtcbiAgICB9LCBbdGhlbWUsIHN0eWxlc0NyZWF0b3JdKTtcbiAgICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZS5jdXJyZW50KSB7XG4gICAgICAgIHVwZGF0ZShpbnN0YW5jZS5jdXJyZW50LCBwcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIHNob3VsZFVwZGF0ZS5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gZ2V0Q2xhc3NlcyhpbnN0YW5jZS5jdXJyZW50LCBwcm9wcy5jbGFzc2VzLCBDb21wb25lbnQpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYWtlU3R5bGVzOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG52YXIgVGhlbWVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmV4cG9ydCBkZWZhdWx0IFRoZW1lQ29udGV4dDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuL1RoZW1lQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9